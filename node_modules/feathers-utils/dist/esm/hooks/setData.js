import _get from "lodash/get.js";
import _set from "lodash/set.js";
import _has from "lodash/has.js";
import { Forbidden } from "@feathersjs/errors";
import { getItemsIsArray } from "../utils/getItemsIsArray";
const defaultOptions = {
    allowUndefined: false,
    overwrite: true
};
export function setData(from, to, _options) {
    const options = Object.assign({}, defaultOptions, _options);
    return (context) => {
        const { items } = getItemsIsArray(context);
        if (!_has(context, from)) {
            if (!context.params?.provider || options.allowUndefined === true) {
                return context;
            }
            if (!options.overwrite && items.every((item) => _has(item, to))) {
                return context;
            }
            throw new Forbidden(`Expected field ${from.toString()} not available`);
        }
        const val = _get(context, from);
        items.forEach((item) => {
            let overwrite;
            if (typeof options.overwrite === "function") {
                overwrite = options.overwrite(item, context);
            }
            else {
                overwrite = options.overwrite;
            }
            if (!overwrite && _has(item, to)) {
                return;
            }
            _set(item, to, val);
        });
        return context;
    };
}
