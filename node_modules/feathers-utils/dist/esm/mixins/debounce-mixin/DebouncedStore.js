import _debounce from "lodash/debounce.js";
export const makeDefaultOptions = () => {
    return {
        leading: false,
        maxWait: undefined,
        trailing: true,
        wait: 100
    };
};
export class DebouncedStore {
    constructor(app, options) {
        this._app = app;
        this._options = Object.assign(makeDefaultOptions(), options);
        this._queueById = {};
        this._isRunningById = {};
        //this._waitingById = {};
        this.add = this.debounceById(this.unbounced, this._options.wait, {
            leading: this._options.leading,
            maxWait: this._options.maxWait,
            trailing: this._options.trailing
        });
    }
    async unbounced(id, action) {
        if (this._queueById[id] === undefined) {
            return;
        }
        delete this._queueById[id];
        this._isRunningById[id] = true;
        await action(this._app);
        delete this._isRunningById[id];
    }
    debounceById(func, wait, options) {
        return (id, action) => {
            if (typeof this._queueById[id] === "function") {
                return this._queueById[id](id, action);
            }
            this._queueById[id] = _debounce((id, action) => {
                this.unbounced(id, action);
            }, wait, { ...options, leading: false }); // leading required for return promise
            return this._queueById[id](id, action);
        };
    }
    cancel(id) {
        delete this._queueById[id];
    }
}
