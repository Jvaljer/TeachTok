import type { Application, Id } from "@feathersjs/feathers";
declare type Single<T> = T extends Array<infer U> ? U : T;
declare type AsArray<T> = T extends any[] ? T : [T];
export declare type InferCreateData<S> = S extends {
    create: (data: infer D, params: any) => any;
} ? D : never;
export declare type InferCreateDataSingle<S> = Single<InferCreateData<S>>;
export declare type InferUpdateData<S> = S extends {
    update: (id: any, data: infer D, params: any) => any;
} ? D : never;
export declare type InferPatchData<S> = S extends {
    patch: (id: any, data: infer D, params: any) => any;
} ? D : never;
export declare type InferGetResult<S> = S extends {
    get: (id: any, params: any) => infer R;
} ? Awaited<R> : never;
export declare type InferFindResult<S> = S extends {
    find: (params: any) => infer R;
} ? Awaited<R> : never;
export declare type InferCreateResult<S, D = unknown> = S extends {
    create: (data: any, params: any) => infer R;
} ? D extends any[] ? AsArray<Awaited<R>> : D extends InferCreateDataSingle<S> ? Single<Awaited<R>> : Awaited<R> : never;
export declare type InferCreateResultSingle<S> = Single<InferCreateResult<S>>;
export declare type InferUpdateResult<S> = S extends {
    update: (id: any, data: any, params: any) => infer R;
} ? Awaited<R> : never;
export declare type InferPatchResult<S, IdOrNullable = any> = S extends {
    patch: (id: Id, data: any, params: any) => infer R;
} ? IdOrNullable extends Id ? Single<Awaited<R>> : IdOrNullable extends null ? AsArray<Awaited<R>> : Awaited<R> : never;
export declare type InferRemoveResult<S, IdOrNullable = any> = S extends {
    remove: (id: IdOrNullable, params: any) => infer R;
} ? IdOrNullable extends Id ? Single<Awaited<R>> : IdOrNullable extends null ? AsArray<Awaited<R>> : Awaited<R> : never;
export declare type GetService<App extends Application, Path extends string> = App["services"][Path];
export declare type InferGetResultFromPath<App extends Application, Path extends string> = InferGetResult<GetService<App, Path>>;
export declare type InferFindResultFromPath<App extends Application, Path extends string> = InferFindResult<GetService<App, Path>>;
export declare type InferCreateDataFromPath<App extends Application, Path extends string> = InferCreateData<GetService<App, Path>>;
export declare type InferCreateDataSingleFromPath<App extends Application, Path extends string> = InferCreateDataSingle<GetService<App, Path>>;
export declare type InferCreateResultFromPath<App extends Application, Path extends string, D = unknown> = InferCreateResult<GetService<App, Path>, D>;
export declare type InferCreateResultSingleFromPath<App extends Application, Path extends string> = InferCreateResultSingle<GetService<App, Path>>;
export declare type InferUpdateDataFromPath<App extends Application, Path extends string> = InferUpdateData<GetService<App, Path>>;
export declare type InferPatchDataFromPath<App extends Application, Path extends string> = InferPatchData<GetService<App, Path>>;
export declare type InferUpdateResultFromPath<App extends Application, Path extends string> = InferUpdateResult<GetService<App, Path>>;
export declare type InferPatchResultFromPath<App extends Application, Path extends string, IdOrNullable = any> = InferPatchResult<GetService<App, Path>, IdOrNullable>;
export declare type InferRemoveResultFromPath<App extends Application, Path extends string, IdOrNullable = any> = InferRemoveResult<GetService<App, Path>, IdOrNullable>;
export declare type InferDataFromPath<App extends Application, Path extends string, Method extends "create" | "update" | "patch"> = Method extends "create" ? InferCreateDataFromPath<App, Path> : Method extends "update" ? InferUpdateDataFromPath<App, Path> : Method extends "patch" ? InferPatchDataFromPath<App, Path> : never;
export declare type InferResultFromPath<App extends Application, Path extends string, Method extends "get" | "find" | "create" | "update" | "patch" | "remove"> = Method extends "get" ? InferGetResultFromPath<App, Path> : Method extends "find" ? InferFindResultFromPath<App, Path> : Method extends "create" ? InferCreateResultFromPath<App, Path> : Method extends "update" ? InferUpdateResultFromPath<App, Path> : Method extends "patch" ? InferPatchResultFromPath<App, Path> : Method extends "remove" ? InferRemoveResultFromPath<App, Path> : never;
export {};
