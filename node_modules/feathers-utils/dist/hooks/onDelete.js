"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onDelete = void 0;
const feathers_hooks_common_1 = require("feathers-hooks-common");
const getItemsIsArray_1 = require("../utils/getItemsIsArray");
function onDelete(service, { keyThere, keyHere = "id", onDelete = "cascade", blocking = true }) {
    if (!service || !keyThere) {
        throw "initialize hook 'removeRelated' completely!";
    }
    if (!["cascade", "set null"].includes(onDelete)) {
        throw "onDelete must be 'cascade' or 'set null'";
    }
    return (context) => __awaiter(this, void 0, void 0, function* () {
        (0, feathers_hooks_common_1.checkContext)(context, "after", "remove", "onDelete");
        const { items } = (0, getItemsIsArray_1.getItemsIsArray)(context);
        let ids = items.map(x => x[keyHere]).filter(x => !!x);
        ids = [...new Set(ids)];
        if (!ids || ids.length <= 0) {
            return context;
        }
        const params = {
            query: {
                [keyThere]: {
                    $in: ids
                }
            },
            paginate: false
        };
        let promise;
        if (onDelete === "cascade") {
            promise = context.app.service(service).remove(null, params);
        }
        else if (onDelete === "set null") {
            const data = { [keyThere]: null };
            promise = context.app.service(service).patch(null, data, params);
        }
        if (blocking) {
            yield promise;
        }
        return context;
    });
}
exports.onDelete = onDelete;
