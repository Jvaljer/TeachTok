import '@tensorflow/tfjs-backend-cpu';
import '@tensorflow/tfjs-backend-webgl';
import '@tensorflow/tfjs-backend-webgpu';
import { formatDistanceToNow } from 'date-fns';
import * as most from '@most/core';
import { never } from '@most/core';
import { newDefaultScheduler, asap } from '@most/scheduler';
import { createAdapter } from '@most/adapter';
import autoBind from 'auto-bind';
import io from 'socket.io-client';
import authentication from '@feathersjs/authentication-client';
import feathers from '@feathersjs/feathers';
import socketio from '@feathersjs/socketio-client';
import memoryService from 'feathers-memory';
import localStorageService from 'feathers-localstorage';
import sift from 'sift';
import { loadGraphModel } from '@tensorflow/tfjs-converter';
import { io as io$1, tidy, zeros, ready, tensor, oneHot, tensor2d, train, image, browser } from '@tensorflow/tfjs-core';
import { LayersModel, loadLayersModel, sequential, layers, metrics } from '@tensorflow/tfjs-layers';
import { generator } from '@tensorflow/tfjs-data';
import { load } from '@tensorflow-models/coco-ssd';
import { Chart, ArcElement, BarController, BubbleController, CategoryScale, DoughnutController, Filler, Legend, LineElement, LineController, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, BarElement, ScatterController, TimeScale, TimeSeriesScale, Title, Tooltip as Tooltip$1 } from 'chart.js';
import 'chartjs-adapter-luxon';
import { dequal } from 'dequal';
import { MatrixElement, MatrixController } from 'chartjs-chart-matrix';
import colorLib from '@kurkle/color';
import zoomPlugin from 'chartjs-plugin-zoom';
import loadImage from 'blueimp-load-image';
import kmeans from 'ml-kmeans';
import { KNNClassifier as KNNClassifier$1 } from '@tensorflow-models/knn-classifier';
import fixWebmDuration from 'fix-webm-duration';
import { load as load$1 } from '@tensorflow-models/mobilenet';
import { PCA as PCA$1 } from 'ml-pca';
import { util, SupportedModels, createDetector } from '@tensorflow-models/pose-detection';
import { ScatterGL } from 'scatter-gl';
import { UMAP } from 'umap-js';
import { isHLSProvider } from 'vidstack';

function noop$2() { }
const identity = x => x;
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
// Adapted from https://github.com/then/is-promise/blob/master/index.js
// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE
function is_promise(value) {
    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
let src_url_equal_anchor;
function src_url_equal(element_src, url) {
    if (!src_url_equal_anchor) {
        src_url_equal_anchor = document.createElement('a');
    }
    src_url_equal_anchor.href = url;
    return element_src === src_url_equal_anchor.href;
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function subscribe(store, ...callbacks) {
    if (store == null) {
        return noop$2;
    }
    const unsub = store.subscribe(...callbacks);
    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
    let value;
    subscribe(store, _ => value = _)();
    return value;
}
function component_subscribe(component, store, callback) {
    component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}
function get_all_dirty_from_scope($$scope) {
    if ($$scope.ctx.length > 32) {
        const dirty = [];
        const length = $$scope.ctx.length / 32;
        for (let i = 0; i < length; i++) {
            dirty[i] = -1;
        }
        return dirty;
    }
    return -1;
}
function action_destroyer(action_result) {
    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop$2;
}
function split_css_unit(value) {
    const split = typeof value === 'string' && value.match(/^\s*(-?[\d.]+)([^\s]*)\s*$/);
    return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];
}

const is_client = typeof window !== 'undefined';
let now$1 = is_client
    ? () => window.performance.now()
    : () => Date.now();
let raf = is_client ? cb => requestAnimationFrame(cb) : noop$2;

const tasks = new Set();
function run_tasks(now) {
    tasks.forEach(task => {
        if (!task.c(now)) {
            tasks.delete(task);
            task.f();
        }
    });
    if (tasks.size !== 0)
        raf(run_tasks);
}
/**
 * Creates a new task that runs on each raf frame
 * until it returns a falsy value or is aborted
 */
function loop(callback) {
    let task;
    if (tasks.size === 0)
        raf(run_tasks);
    return {
        promise: new Promise(fulfill => {
            tasks.add(task = { c: callback, f: fulfill });
        }),
        abort() {
            tasks.delete(task);
        }
    };
}

const globals = (typeof window !== 'undefined'
    ? window
    : typeof globalThis !== 'undefined'
        ? globalThis
        : global);
function append(target, node) {
    target.appendChild(node);
}
function get_root_for_style(node) {
    if (!node)
        return document;
    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    if (root && root.host) {
        return root;
    }
    return node.ownerDocument;
}
function append_empty_stylesheet(node) {
    const style_element = element('style');
    append_stylesheet(get_root_for_style(node), style_element);
    return style_element.sheet;
}
function append_stylesheet(node, style) {
    append(node.head || node, style);
    return style.sheet;
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    if (node.parentNode) {
        node.parentNode.removeChild(node);
    }
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}
function text$1(data) {
    return document.createTextNode(data);
}
function space() {
    return text$1(' ');
}
function empty() {
    return text$1('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
    return function (event) {
        event.preventDefault();
        // @ts-ignore
        return fn.call(this, event);
    };
}
function stop_propagation(fn) {
    return function (event) {
        event.stopPropagation();
        // @ts-ignore
        return fn.call(this, event);
    };
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function set_custom_element_data(node, prop, value) {
    if (prop in node) {
        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;
    }
    else {
        attr(node, prop, value);
    }
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.data === data)
        return;
    text.data = data;
}
function set_input_value(input, value) {
    input.value = value == null ? '' : value;
}
function set_style(node, key, value, important) {
    if (value == null) {
        node.style.removeProperty(key);
    }
    else {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
}
function select_option(select, value, mounting) {
    for (let i = 0; i < select.options.length; i += 1) {
        const option = select.options[i];
        if (option.__value === value) {
            option.selected = true;
            return;
        }
    }
    if (!mounting || value !== undefined) {
        select.selectedIndex = -1; // no option should be selected
    }
}
function select_value(select) {
    const selected_option = select.querySelector(':checked');
    return selected_option && selected_option.__value;
}
// unfortunately this can't be a constant as that wouldn't be tree-shakeable
// so we cache the result instead
let crossorigin;
function is_crossorigin() {
    if (crossorigin === undefined) {
        crossorigin = false;
        try {
            if (typeof window !== 'undefined' && window.parent) {
                void window.parent.document;
            }
        }
        catch (error) {
            crossorigin = true;
        }
    }
    return crossorigin;
}
function add_iframe_resize_listener(node, fn) {
    const computed_style = getComputedStyle(node);
    if (computed_style.position === 'static') {
        node.style.position = 'relative';
    }
    const iframe = element('iframe');
    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +
        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');
    iframe.setAttribute('aria-hidden', 'true');
    iframe.tabIndex = -1;
    const crossorigin = is_crossorigin();
    let unsubscribe;
    if (crossorigin) {
        iframe.src = "data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>";
        unsubscribe = listen(window, 'message', (event) => {
            if (event.source === iframe.contentWindow)
                fn();
        });
    }
    else {
        iframe.src = 'about:blank';
        iframe.onload = () => {
            unsubscribe = listen(iframe.contentWindow, 'resize', fn);
            // make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)
            // see https://github.com/sveltejs/svelte/issues/4233
            fn();
        };
    }
    append(node, iframe);
    return () => {
        if (crossorigin) {
            unsubscribe();
        }
        else if (unsubscribe && iframe.contentWindow) {
            unsubscribe();
        }
        detach(iframe);
    };
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}
function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, bubbles, cancelable, detail);
    return e;
}
class HtmlTag {
    constructor(is_svg = false) {
        this.is_svg = false;
        this.is_svg = is_svg;
        this.e = this.n = null;
    }
    c(html) {
        this.h(html);
    }
    m(html, target, anchor = null) {
        if (!this.e) {
            if (this.is_svg)
                this.e = svg_element(target.nodeName);
            /** #7364  target for <template> may be provided as #document-fragment(11) */
            else
                this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));
            this.t = target.tagName !== 'TEMPLATE' ? target : target.content;
            this.c(html);
        }
        this.i(anchor);
    }
    h(html) {
        this.e.innerHTML = html;
        this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);
    }
    i(anchor) {
        for (let i = 0; i < this.n.length; i += 1) {
            insert(this.t, this.n[i], anchor);
        }
    }
    p(html) {
        this.d();
        this.h(html);
        this.i(this.a);
    }
    d() {
        this.n.forEach(detach);
    }
}

// we need to store the information for multiple documents because a Svelte application could also contain iframes
// https://github.com/sveltejs/svelte/issues/3624
const managed_styles = new Map();
let active = 0;
// https://github.com/darkskyapp/string-hash/blob/master/index.js
function hash(str) {
    let hash = 5381;
    let i = str.length;
    while (i--)
        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
    return hash >>> 0;
}
function create_style_information(doc, node) {
    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
    managed_styles.set(doc, info);
    return info;
}
function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
    const step = 16.666 / duration;
    let keyframes = '{\n';
    for (let p = 0; p <= 1; p += step) {
        const t = a + (b - a) * ease(p);
        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
    }
    const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
    const name = `__svelte_${hash(rule)}_${uid}`;
    const doc = get_root_for_style(node);
    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
    if (!rules[name]) {
        rules[name] = true;
        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
    }
    const animation = node.style.animation || '';
    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
    active += 1;
    return name;
}
function delete_rule(node, name) {
    const previous = (node.style.animation || '').split(', ');
    const next = previous.filter(name
        ? anim => anim.indexOf(name) < 0 // remove specific animation
        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
    );
    const deleted = previous.length - next.length;
    if (deleted) {
        node.style.animation = next.join(', ');
        active -= deleted;
        if (!active)
            clear_rules();
    }
}
function clear_rules() {
    raf(() => {
        if (active)
            return;
        managed_styles.forEach(info => {
            const { ownerNode } = info.stylesheet;
            // there is no ownerNode if it runs on jsdom.
            if (ownerNode)
                detach(ownerNode);
        });
        managed_styles.clear();
    });
}

function create_animation(node, from, fn, params) {
    if (!from)
        return noop$2;
    const to = node.getBoundingClientRect();
    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
        return noop$2;
    const { delay = 0, duration = 300, easing = identity, 
    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?
    start: start_time = now$1() + delay, 
    // @ts-ignore todo:
    end = start_time + duration, tick = noop$2, css } = fn(node, { from, to }, params);
    let running = true;
    let started = false;
    let name;
    function start() {
        if (css) {
            name = create_rule(node, 0, 1, duration, delay, easing, css);
        }
        if (!delay) {
            started = true;
        }
    }
    function stop() {
        if (css)
            delete_rule(node, name);
        running = false;
    }
    loop(now => {
        if (!started && now >= start_time) {
            started = true;
        }
        if (started && now >= end) {
            tick(1, 0);
            stop();
        }
        if (!running) {
            return false;
        }
        if (started) {
            const p = now - start_time;
            const t = 0 + 1 * easing(p / duration);
            tick(t, 1 - t);
        }
        return true;
    });
    start();
    tick(0, 1);
    return stop;
}
function fix_position(node) {
    const style = getComputedStyle(node);
    if (style.position !== 'absolute' && style.position !== 'fixed') {
        const { width, height } = style;
        const a = node.getBoundingClientRect();
        node.style.position = 'absolute';
        node.style.width = width;
        node.style.height = height;
        add_transform(node, a);
    }
}
function add_transform(node, a) {
    const b = node.getBoundingClientRect();
    if (a.left !== b.left || a.top !== b.top) {
        const style = getComputedStyle(node);
        const transform = style.transform === 'none' ? '' : style.transform;
        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
    }
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
/**
 * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
 * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
 * it can be called from an external module).
 *
 * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).
 *
 * https://svelte.dev/docs#run-time-svelte-onmount
 */
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
/**
 * Schedules a callback to run immediately after the component has been updated.
 *
 * The first time the callback runs will be after the initial `onMount`
 */
function afterUpdate(fn) {
    get_current_component().$$.after_update.push(fn);
}
/**
 * Schedules a callback to run immediately before the component is unmounted.
 *
 * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
 * only one that runs inside a server-side component.
 *
 * https://svelte.dev/docs#run-time-svelte-ondestroy
 */
function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
}
/**
 * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).
 * Event dispatchers are functions that can take two arguments: `name` and `detail`.
 *
 * Component events created with `createEventDispatcher` create a
 * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
 * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
 * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
 * property and can contain any type of data.
 *
 * https://svelte.dev/docs#run-time-svelte-createeventdispatcher
 */
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail, { cancelable = false } = {}) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail, { cancelable });
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
            return !event.defaultPrevented;
        }
        return true;
    };
}
/**
 * Associates an arbitrary `context` object with the current component and the specified `key`
 * and returns that object. The context is then available to children of the component
 * (including slotted content) with `getContext`.
 *
 * Like lifecycle functions, this must be called during component initialisation.
 *
 * https://svelte.dev/docs#run-time-svelte-setcontext
 */
function setContext$1(key, context) {
    get_current_component().$$.context.set(key, context);
    return context;
}
/**
 * Retrieves the context that belongs to the closest parent component with the specified `key`.
 * Must be called during component initialisation.
 *
 * https://svelte.dev/docs#run-time-svelte-getcontext
 */
function getContext$1(key) {
    return get_current_component().$$.context.get(key);
}
// TODO figure out if we still want to support
// shorthand events, or if we want to implement
// a real bubbling mechanism
function bubble(component, event) {
    const callbacks = component.$$.callbacks[event.type];
    if (callbacks) {
        // @ts-ignore
        callbacks.slice().forEach(fn => fn.call(this, event));
    }
}

const dirty_components = [];
const binding_callbacks = [];
let render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = /* @__PURE__ */ Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function tick$1() {
    schedule_update();
    return resolved_promise;
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
function add_flush_callback(fn) {
    flush_callbacks.push(fn);
}
// flush() calls callbacks in this order:
// 1. All beforeUpdate callbacks, in order: parents before children
// 2. All bind:this callbacks, in reverse order: children before parents.
// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
//    for afterUpdates called during the initial onMount, which are called in
//    reverse order: children before parents.
// Since callbacks might update component values, which could trigger another
// call to flush(), the following steps guard against this:
// 1. During beforeUpdate, any updated components will be added to the
//    dirty_components array and will cause a reentrant call to flush(). Because
//    the flush index is kept outside the function, the reentrant call will pick
//    up where the earlier call left off and go through all dirty components. The
//    current_component value is saved and restored so that the reentrant call will
//    not interfere with the "parent" flush() call.
// 2. bind:this callbacks cannot trigger new flush() calls.
// 3. During afterUpdate, any updated components will NOT have their afterUpdate
//    callback called a second time; the seen_callbacks set, outside the flush()
//    function, guarantees this behavior.
const seen_callbacks = new Set();
let flushidx = 0; // Do *not* move this inside the flush() function
function flush() {
    // Do not reenter flush while dirty components are updated, as this can
    // result in an infinite loop. Instead, let the inner flush handle it.
    // Reentrancy is ok afterwards for bindings etc.
    if (flushidx !== 0) {
        return;
    }
    const saved_component = current_component;
    do {
        // first, call beforeUpdate functions
        // and update components
        try {
            while (flushidx < dirty_components.length) {
                const component = dirty_components[flushidx];
                flushidx++;
                set_current_component(component);
                update$1(component.$$);
            }
        }
        catch (e) {
            // reset dirty state to not end up in a deadlocked state and then rethrow
            dirty_components.length = 0;
            flushidx = 0;
            throw e;
        }
        set_current_component(null);
        dirty_components.length = 0;
        flushidx = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    seen_callbacks.clear();
    set_current_component(saved_component);
}
function update$1($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
/**
 * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.
 */
function flush_render_callbacks(fns) {
    const filtered = [];
    const targets = [];
    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
    targets.forEach((c) => c());
    render_callbacks = filtered;
}

let promise;
function wait() {
    if (!promise) {
        promise = Promise.resolve();
        promise.then(() => {
            promise = null;
        });
    }
    return promise;
}
function dispatch(node, direction, kind) {
    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
    else if (callback) {
        callback();
    }
}
const null_transition = { duration: 0 };
function create_in_transition(node, fn, params) {
    const options = { direction: 'in' };
    let config = fn(node, params, options);
    let running = false;
    let animation_name;
    let task;
    let uid = 0;
    function cleanup() {
        if (animation_name)
            delete_rule(node, animation_name);
    }
    function go() {
        const { delay = 0, duration = 300, easing = identity, tick = noop$2, css } = config || null_transition;
        if (css)
            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
        tick(0, 1);
        const start_time = now$1() + delay;
        const end_time = start_time + duration;
        if (task)
            task.abort();
        running = true;
        add_render_callback(() => dispatch(node, true, 'start'));
        task = loop(now => {
            if (running) {
                if (now >= end_time) {
                    tick(1, 0);
                    dispatch(node, true, 'end');
                    cleanup();
                    return running = false;
                }
                if (now >= start_time) {
                    const t = easing((now - start_time) / duration);
                    tick(t, 1 - t);
                }
            }
            return running;
        });
    }
    let started = false;
    return {
        start() {
            if (started)
                return;
            started = true;
            delete_rule(node);
            if (is_function(config)) {
                config = config(options);
                wait().then(go);
            }
            else {
                go();
            }
        },
        invalidate() {
            started = false;
        },
        end() {
            if (running) {
                cleanup();
                running = false;
            }
        }
    };
}
function create_out_transition(node, fn, params) {
    const options = { direction: 'out' };
    let config = fn(node, params, options);
    let running = true;
    let animation_name;
    const group = outros;
    group.r += 1;
    function go() {
        const { delay = 0, duration = 300, easing = identity, tick = noop$2, css } = config || null_transition;
        if (css)
            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);
        const start_time = now$1() + delay;
        const end_time = start_time + duration;
        add_render_callback(() => dispatch(node, false, 'start'));
        loop(now => {
            if (running) {
                if (now >= end_time) {
                    tick(0, 1);
                    dispatch(node, false, 'end');
                    if (!--group.r) {
                        // this will result in `end()` being called,
                        // so we don't need to clean up here
                        run_all(group.c);
                    }
                    return false;
                }
                if (now >= start_time) {
                    const t = easing((now - start_time) / duration);
                    tick(1 - t, t);
                }
            }
            return running;
        });
    }
    if (is_function(config)) {
        wait().then(() => {
            // @ts-ignore
            config = config(options);
            go();
        });
    }
    else {
        go();
    }
    return {
        end(reset) {
            if (reset && config.tick) {
                config.tick(1, 0);
            }
            if (running) {
                if (animation_name)
                    delete_rule(node, animation_name);
                running = false;
            }
        }
    };
}
function create_bidirectional_transition(node, fn, params, intro) {
    const options = { direction: 'both' };
    let config = fn(node, params, options);
    let t = intro ? 0 : 1;
    let running_program = null;
    let pending_program = null;
    let animation_name = null;
    function clear_animation() {
        if (animation_name)
            delete_rule(node, animation_name);
    }
    function init(program, duration) {
        const d = (program.b - t);
        duration *= Math.abs(d);
        return {
            a: t,
            b: program.b,
            d,
            duration,
            start: program.start,
            end: program.start + duration,
            group: program.group
        };
    }
    function go(b) {
        const { delay = 0, duration = 300, easing = identity, tick = noop$2, css } = config || null_transition;
        const program = {
            start: now$1() + delay,
            b
        };
        if (!b) {
            // @ts-ignore todo: improve typings
            program.group = outros;
            outros.r += 1;
        }
        if (running_program || pending_program) {
            pending_program = program;
        }
        else {
            // if this is an intro, and there's a delay, we need to do
            // an initial tick and/or apply CSS animation immediately
            if (css) {
                clear_animation();
                animation_name = create_rule(node, t, b, duration, delay, easing, css);
            }
            if (b)
                tick(0, 1);
            running_program = init(program, duration);
            add_render_callback(() => dispatch(node, b, 'start'));
            loop(now => {
                if (pending_program && now > pending_program.start) {
                    running_program = init(pending_program, duration);
                    pending_program = null;
                    dispatch(node, running_program.b, 'start');
                    if (css) {
                        clear_animation();
                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                    }
                }
                if (running_program) {
                    if (now >= running_program.end) {
                        tick(t = running_program.b, 1 - t);
                        dispatch(node, running_program.b, 'end');
                        if (!pending_program) {
                            // we're done
                            if (running_program.b) {
                                // intro — we can tidy up immediately
                                clear_animation();
                            }
                            else {
                                // outro — needs to be coordinated
                                if (!--running_program.group.r)
                                    run_all(running_program.group.c);
                            }
                        }
                        running_program = null;
                    }
                    else if (now >= running_program.start) {
                        const p = now - running_program.start;
                        t = running_program.a + running_program.d * easing(p / running_program.duration);
                        tick(t, 1 - t);
                    }
                }
                return !!(running_program || pending_program);
            });
        }
    }
    return {
        run(b) {
            if (is_function(config)) {
                wait().then(() => {
                    // @ts-ignore
                    config = config(options);
                    go(b);
                });
            }
            else {
                go(b);
            }
        },
        end() {
            clear_animation();
            running_program = pending_program = null;
        }
    };
}

function handle_promise(promise, info) {
    const token = info.token = {};
    function update(type, index, key, value) {
        if (info.token !== token)
            return;
        info.resolved = value;
        let child_ctx = info.ctx;
        if (key !== undefined) {
            child_ctx = child_ctx.slice();
            child_ctx[key] = value;
        }
        const block = type && (info.current = type)(child_ctx);
        let needs_flush = false;
        if (info.block) {
            if (info.blocks) {
                info.blocks.forEach((block, i) => {
                    if (i !== index && block) {
                        group_outros();
                        transition_out(block, 1, 1, () => {
                            if (info.blocks[i] === block) {
                                info.blocks[i] = null;
                            }
                        });
                        check_outros();
                    }
                });
            }
            else {
                info.block.d(1);
            }
            block.c();
            transition_in(block, 1);
            block.m(info.mount(), info.anchor);
            needs_flush = true;
        }
        info.block = block;
        if (info.blocks)
            info.blocks[index] = block;
        if (needs_flush) {
            flush();
        }
    }
    if (is_promise(promise)) {
        const current_component = get_current_component();
        promise.then(value => {
            set_current_component(current_component);
            update(info.then, 1, info.value, value);
            set_current_component(null);
        }, error => {
            set_current_component(current_component);
            update(info.catch, 2, info.error, error);
            set_current_component(null);
            if (!info.hasCatch) {
                throw error;
            }
        });
        // if we previously had a then/catch block, destroy it
        if (info.current !== info.pending) {
            update(info.pending, 0);
            return true;
        }
    }
    else {
        if (info.current !== info.then) {
            update(info.then, 1, info.value, promise);
            return true;
        }
        info.resolved = promise;
    }
}
function update_await_block_branch(info, ctx, dirty) {
    const child_ctx = ctx.slice();
    const { resolved } = info;
    if (info.current === info.then) {
        child_ctx[info.value] = resolved;
    }
    if (info.current === info.catch) {
        child_ctx[info.error] = resolved;
    }
    info.block.p(child_ctx, dirty);
}
function outro_and_destroy_block(block, lookup) {
    transition_out(block, 1, 1, () => {
        lookup.delete(block.key);
    });
}
function fix_and_outro_and_destroy_block(block, lookup) {
    block.f();
    outro_and_destroy_block(block, lookup);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
    let o = old_blocks.length;
    let n = list.length;
    let i = o;
    const old_indexes = {};
    while (i--)
        old_indexes[old_blocks[i].key] = i;
    const new_blocks = [];
    const new_lookup = new Map();
    const deltas = new Map();
    const updates = [];
    i = n;
    while (i--) {
        const child_ctx = get_context(ctx, list, i);
        const key = get_key(child_ctx);
        let block = lookup.get(key);
        if (!block) {
            block = create_each_block(key, child_ctx);
            block.c();
        }
        else if (dynamic) {
            // defer updates until all the DOM shuffling is done
            updates.push(() => block.p(child_ctx, dirty));
        }
        new_lookup.set(key, new_blocks[i] = block);
        if (key in old_indexes)
            deltas.set(key, Math.abs(i - old_indexes[key]));
    }
    const will_move = new Set();
    const did_move = new Set();
    function insert(block) {
        transition_in(block, 1);
        block.m(node, next);
        lookup.set(block.key, block);
        next = block.first;
        n--;
    }
    while (o && n) {
        const new_block = new_blocks[n - 1];
        const old_block = old_blocks[o - 1];
        const new_key = new_block.key;
        const old_key = old_block.key;
        if (new_block === old_block) {
            // do nothing
            next = new_block.first;
            o--;
            n--;
        }
        else if (!new_lookup.has(old_key)) {
            // remove old block
            destroy(old_block, lookup);
            o--;
        }
        else if (!lookup.has(new_key) || will_move.has(new_key)) {
            insert(new_block);
        }
        else if (did_move.has(old_key)) {
            o--;
        }
        else if (deltas.get(new_key) > deltas.get(old_key)) {
            did_move.add(new_key);
            insert(new_block);
        }
        else {
            will_move.add(old_key);
            o--;
        }
    }
    while (o--) {
        const old_block = old_blocks[o];
        if (!new_lookup.has(old_block.key))
            destroy(old_block, lookup);
    }
    while (n)
        insert(new_blocks[n - 1]);
    run_all(updates);
    return new_blocks;
}

function bind(component, name, callback) {
    const index = component.$$.props[name];
    if (index !== undefined) {
        component.$$.bound[index] = callback;
        callback(component.$$.ctx[index]);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
            // if the component was destroyed immediately
            // it will update the `$$.on_destroy` reference to `null`.
            // the destructured on_destroy may still reference to the old array
            if (component.$$.on_destroy) {
                component.$$.on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        flush_render_callbacks($$.after_update);
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: [],
        // state
        props,
        update: noop$2,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false,
        root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop$2;
    }
    $on(type, callback) {
        if (!is_function(callback)) {
            return noop$2;
        }
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

/* ../design-system/dist/Button.svelte generated by Svelte v3.59.1 */

function create_fragment$17(ctx) {
	let t;
	let button;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[10].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

	return {
		c() {
			t = space();
			button = element("button");
			if (default_slot) default_slot.c();
			attr(button, "class", "marcelle svelte-2j0fl0");
			button.disabled = /*disabled*/ ctx[1];
			toggle_class(button, "outline", /*variant*/ ctx[0] === 'outline');
			toggle_class(button, "filled", /*variant*/ ctx[0] === 'filled');
			toggle_class(button, "light", /*variant*/ ctx[0] === 'light');
			toggle_class(button, "success", /*type*/ ctx[2] === 'success');
			toggle_class(button, "warning", /*type*/ ctx[2] === 'warning');
			toggle_class(button, "danger", /*type*/ ctx[2] === 'danger');
			toggle_class(button, "size-small", /*size*/ ctx[3] === 'small');
			toggle_class(button, "size-large", /*size*/ ctx[3] === 'large');
			toggle_class(button, "round", /*round*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
			insert(target, button, anchor);

			if (default_slot) {
				default_slot.m(button, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(document.body, "mouseup", /*stopDown*/ ctx[6]),
					listen(document.body, "touchend", /*stopDown*/ ctx[6]),
					listen(button, "click", /*click_handler*/ ctx[11]),
					listen(button, "mousedown", /*startDown*/ ctx[5]),
					listen(button, "touchstart", prevent_default(/*startDown*/ ctx[5])),
					listen(button, "touchend", /*fireClick*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[9],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*disabled*/ 2) {
				button.disabled = /*disabled*/ ctx[1];
			}

			if (!current || dirty & /*variant*/ 1) {
				toggle_class(button, "outline", /*variant*/ ctx[0] === 'outline');
			}

			if (!current || dirty & /*variant*/ 1) {
				toggle_class(button, "filled", /*variant*/ ctx[0] === 'filled');
			}

			if (!current || dirty & /*variant*/ 1) {
				toggle_class(button, "light", /*variant*/ ctx[0] === 'light');
			}

			if (!current || dirty & /*type*/ 4) {
				toggle_class(button, "success", /*type*/ ctx[2] === 'success');
			}

			if (!current || dirty & /*type*/ 4) {
				toggle_class(button, "warning", /*type*/ ctx[2] === 'warning');
			}

			if (!current || dirty & /*type*/ 4) {
				toggle_class(button, "danger", /*type*/ ctx[2] === 'danger');
			}

			if (!current || dirty & /*size*/ 8) {
				toggle_class(button, "size-small", /*size*/ ctx[3] === 'small');
			}

			if (!current || dirty & /*size*/ 8) {
				toggle_class(button, "size-large", /*size*/ ctx[3] === 'large');
			}

			if (!current || dirty & /*round*/ 16) {
				toggle_class(button, "round", /*round*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(t);
			if (detaching) detach(button);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$16($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { variant = "outline" } = $$props;
	let { disabled = false } = $$props;
	let { type = "default" } = $$props;
	let { size = "medium" } = $$props;
	let { round = false } = $$props;
	let { pressed = false } = $$props;
	const dispatch = createEventDispatcher();

	function startDown() {
		$$invalidate(8, pressed = true);
		dispatch("pressed", pressed);
	}

	function stopDown() {
		if (pressed) {
			$$invalidate(8, pressed = false);
			dispatch("pressed", pressed);
		}
	}

	function fireClick(e) {
		dispatch("click", e);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('variant' in $$props) $$invalidate(0, variant = $$props.variant);
		if ('disabled' in $$props) $$invalidate(1, disabled = $$props.disabled);
		if ('type' in $$props) $$invalidate(2, type = $$props.type);
		if ('size' in $$props) $$invalidate(3, size = $$props.size);
		if ('round' in $$props) $$invalidate(4, round = $$props.round);
		if ('pressed' in $$props) $$invalidate(8, pressed = $$props.pressed);
		if ('$$scope' in $$props) $$invalidate(9, $$scope = $$props.$$scope);
	};

	return [
		variant,
		disabled,
		type,
		size,
		round,
		startDown,
		stopDown,
		fireClick,
		pressed,
		$$scope,
		slots,
		click_handler
	];
}

let Button$1 = class Button extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$16, create_fragment$17, safe_not_equal, {
			variant: 0,
			disabled: 1,
			type: 2,
			size: 3,
			round: 4,
			pressed: 8
		});
	}
};

/* ../design-system/dist/Input.svelte generated by Svelte v3.59.1 */

function create_fragment$16(ctx) {
	let input;
	let mounted;
	let dispose;

	return {
		c() {
			input = element("input");
			attr(input, "class", "marcelle svelte-1mutsa0");
			input.disabled = /*disabled*/ ctx[2];
			attr(input, "type", /*type*/ ctx[3]);
			attr(input, "placeholder", /*placeholder*/ ctx[1]);
			input.value = /*value*/ ctx[0];
		},
		m(target, anchor) {
			insert(target, input, anchor);

			if (!mounted) {
				dispose = listen(input, "input", /*handleInput*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*disabled*/ 4) {
				input.disabled = /*disabled*/ ctx[2];
			}

			if (dirty & /*type*/ 8) {
				attr(input, "type", /*type*/ ctx[3]);
			}

			if (dirty & /*placeholder*/ 2) {
				attr(input, "placeholder", /*placeholder*/ ctx[1]);
			}

			if (dirty & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				input.value = /*value*/ ctx[0];
			}
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

function instance$15($$self, $$props, $$invalidate) {
	let { placeholder = "" } = $$props;
	let { disabled = false } = $$props;
	let { type = "text" } = $$props;
	let { value = null } = $$props;

	function handleInput(e) {
		$$invalidate(0, value = e.currentTarget.value);
	}

	$$self.$$set = $$props => {
		if ('placeholder' in $$props) $$invalidate(1, placeholder = $$props.placeholder);
		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
		if ('type' in $$props) $$invalidate(3, type = $$props.type);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
	};

	return [value, placeholder, disabled, type, handleInput];
}

class Input extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$15, create_fragment$16, safe_not_equal, {
			placeholder: 1,
			disabled: 2,
			type: 3,
			value: 0
		});
	}
}

/* ../design-system/dist/Modal.svelte generated by Svelte v3.59.1 */

function create_fragment$15(ctx) {
	let div3;
	let div1;
	let div0;
	let t;
	let div2;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

	return {
		c() {
			div3 = element("div");
			div1 = element("div");
			div0 = element("div");
			t = space();
			div2 = element("div");
			if (default_slot) default_slot.c();
			attr(div0, "class", "absolute inset-0 bg-gray-500 opacity-50");
			attr(div1, "class", "overlay svelte-1sg0y6b");
			attr(div2, "class", "modal svelte-1sg0y6b");
			attr(div3, "class", "modal-container svelte-1sg0y6b");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div1);
			append(div1, div0);
			append(div3, t);
			append(div3, div2);

			if (default_slot) {
				default_slot.m(div2, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "click", /*quit*/ ctx[0]),
					listen(div0, "keypress", prevent_default(/*keypress_handler*/ ctx[3]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$14($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	const dispatch = createEventDispatcher();

	function quit() {
		dispatch("quit");
	}

	const keypress_handler = e => e.key === 'Escape' && quit();

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
	};

	return [quit, $$scope, slots, keypress_handler];
}

class Modal extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$14, create_fragment$15, safe_not_equal, { quit: 0 });
	}

	get quit() {
		return this.$$.ctx[0];
	}
}

function cubicInOut(t) {
    return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;
}
function cubicOut(t) {
    const f = t - 1.0;
    return f * f * f + 1.0;
}

function blur(node, { delay = 0, duration = 400, easing = cubicInOut, amount = 5, opacity = 0 } = {}) {
    const style = getComputedStyle(node);
    const target_opacity = +style.opacity;
    const f = style.filter === 'none' ? '' : style.filter;
    const od = target_opacity * (1 - opacity);
    const [value, unit] = split_css_unit(amount);
    return {
        delay,
        duration,
        easing,
        css: (_t, u) => `opacity: ${target_opacity - (od * u)}; filter: ${f} blur(${u * value}${unit});`
    };
}
function slide(node, { delay = 0, duration = 400, easing = cubicOut, axis = 'y' } = {}) {
    const style = getComputedStyle(node);
    const opacity = +style.opacity;
    const primary_property = axis === 'y' ? 'height' : 'width';
    const primary_property_value = parseFloat(style[primary_property]);
    const secondary_properties = axis === 'y' ? ['top', 'bottom'] : ['left', 'right'];
    const capitalized_secondary_properties = secondary_properties.map((e) => `${e[0].toUpperCase()}${e.slice(1)}`);
    const padding_start_value = parseFloat(style[`padding${capitalized_secondary_properties[0]}`]);
    const padding_end_value = parseFloat(style[`padding${capitalized_secondary_properties[1]}`]);
    const margin_start_value = parseFloat(style[`margin${capitalized_secondary_properties[0]}`]);
    const margin_end_value = parseFloat(style[`margin${capitalized_secondary_properties[1]}`]);
    const border_width_start_value = parseFloat(style[`border${capitalized_secondary_properties[0]}Width`]);
    const border_width_end_value = parseFloat(style[`border${capitalized_secondary_properties[1]}Width`]);
    return {
        delay,
        duration,
        easing,
        css: t => 'overflow: hidden;' +
            `opacity: ${Math.min(t * 20, 1) * opacity};` +
            `${primary_property}: ${t * primary_property_value}px;` +
            `padding-${secondary_properties[0]}: ${t * padding_start_value}px;` +
            `padding-${secondary_properties[1]}: ${t * padding_end_value}px;` +
            `margin-${secondary_properties[0]}: ${t * margin_start_value}px;` +
            `margin-${secondary_properties[1]}: ${t * margin_end_value}px;` +
            `border-${secondary_properties[0]}-width: ${t * border_width_start_value}px;` +
            `border-${secondary_properties[1]}-width: ${t * border_width_end_value}px;`
    };
}
function scale(node, { delay = 0, duration = 400, easing = cubicOut, start = 0, opacity = 0 } = {}) {
    const style = getComputedStyle(node);
    const target_opacity = +style.opacity;
    const transform = style.transform === 'none' ? '' : style.transform;
    const sd = 1 - start;
    const od = target_opacity * (1 - opacity);
    return {
        delay,
        duration,
        easing,
        css: (_t, u) => `
			transform: ${transform} scale(${1 - (sd * u)});
			opacity: ${target_opacity - (od * u)}
		`
    };
}

function flip(node, { from, to }, params = {}) {
    const style = getComputedStyle(node);
    const transform = style.transform === 'none' ? '' : style.transform;
    const [ox, oy] = style.transformOrigin.split(' ').map(parseFloat);
    const dx = (from.left + from.width * ox / to.width) - (to.left + ox);
    const dy = (from.top + from.height * oy / to.height) - (to.top + oy);
    const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
    return {
        delay,
        duration: is_function(duration) ? duration(Math.sqrt(dx * dx + dy * dy)) : duration,
        easing,
        css: (t, u) => {
            const x = u * dx;
            const y = u * dy;
            const sx = t + u * from.width / to.width;
            const sy = t + u * from.height / to.height;
            return `transform: ${transform} translate(${x}px, ${y}px) scale(${sx}, ${sy});`;
        }
    };
}

/* ../design-system/dist/Notification.svelte generated by Svelte v3.59.1 */

function get_each_context$h(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i].title;
	child_ctx[7] = list[i].message;
	child_ctx[8] = list[i].type;
	child_ctx[9] = list[i].id;
	return child_ctx;
}

// (54:40) 
function create_if_block_1$j(ctx) {
	let path;

	return {
		c() {
			path = svg_element("path");
			attr(path, "d", "M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zm12.73-1.41A8 8 0 1 0\n                4.34 4.34a8 8 0 0 0 11.32 11.32zM9 5h2v6H9V5zm0 8h2v2H9v-2z");
		},
		m(target, anchor) {
			insert(target, path, anchor);
		},
		d(detaching) {
			if (detaching) detach(path);
		}
	};
}

// (49:12) {#if type === 'default'}
function create_if_block$E(ctx) {
	let path;

	return {
		c() {
			path = svg_element("path");
			attr(path, "d", "M2.93 17.07A10 10 0 1 1 17.07 2.93 10 10 0 0 1 2.93 17.07zm12.73-1.41A8 8 0 1 0\n                4.34 4.34a8 8 0 0 0 11.32 11.32zM9 11V9h2v6H9v-4zm0-6h2v2H9V5z");
		},
		m(target, anchor) {
			insert(target, path, anchor);
		},
		d(detaching) {
			if (detaching) detach(path);
		}
	};
}

// (31:2) {#each notifications.slice(0, 10) as { title, message, type, id }
function create_each_block$h(key_1, ctx) {
	let div4;
	let div3;
	let div0;
	let svg0;
	let t0;
	let div1;
	let p0;
	let t1_value = /*title*/ ctx[6] + "";
	let t1;
	let t2;
	let p1;
	let t3_value = /*message*/ ctx[7] + "";
	let t3;
	let t4;
	let div2;
	let svg1;
	let title;
	let t5;
	let path;
	let t6;
	let div4_transition;
	let rect;
	let stop_animation = noop$2;
	let current;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*type*/ ctx[8] === 'default') return create_if_block$E;
		if (/*type*/ ctx[8] === 'danger') return create_if_block_1$j;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type && current_block_type(ctx);

	function click_handler() {
		return /*click_handler*/ ctx[3](/*id*/ ctx[9]);
	}

	function keypress_handler(...args) {
		return /*keypress_handler*/ ctx[4](/*id*/ ctx[9], ...args);
	}

	return {
		key: key_1,
		first: null,
		c() {
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			svg0 = svg_element("svg");
			if (if_block) if_block.c();
			t0 = space();
			div1 = element("div");
			p0 = element("p");
			t1 = text$1(t1_value);
			t2 = space();
			p1 = element("p");
			t3 = text$1(t3_value);
			t4 = space();
			div2 = element("div");
			svg1 = svg_element("svg");
			title = svg_element("title");
			t5 = text$1("Close");
			path = svg_element("path");
			t6 = space();
			attr(svg0, "class", "notification-svg mr-4 svelte-c58nio");
			attr(svg0, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg0, "viewBox", "0 0 20 20");
			toggle_class(svg0, "default", /*type*/ ctx[8] === 'default');
			toggle_class(svg0, "danger", /*type*/ ctx[8] === 'danger');
			attr(div0, "class", "py-1");
			attr(p0, "class", "my-1 font-bold");
			attr(p1, "class", "my-1 text-sm");
			attr(path, "d", "M14.348 14.849a1.2 1.2 0 0 1-1.697 0L10 11.819l-2.651 3.029a1.2 1.2 0 1\n              1-1.697-1.697l2.758-3.15-2.759-3.152a1.2 1.2 0 1 1 1.697-1.697L10\n              8.183l2.651-3.031a1.2 1.2 0 1 1 1.697 1.697l-2.758 3.152 2.758 3.15a1.2 1.2 0 0 1 0\n              1.698z");
			attr(svg1, "class", "notification-svg ml-4 cursor-pointer svelte-c58nio");
			attr(svg1, "role", "button");
			attr(svg1, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg1, "viewBox", "0 0 20 20");
			attr(svg1, "tabindex", "0");
			toggle_class(svg1, "default", /*type*/ ctx[8] === 'default');
			toggle_class(svg1, "danger", /*type*/ ctx[8] === 'danger');
			attr(div3, "class", "flex items-start");
			attr(div4, "class", "notification-card svelte-c58nio");
			attr(div4, "role", "alert");
			toggle_class(div4, "default", /*type*/ ctx[8] === 'default');
			toggle_class(div4, "danger", /*type*/ ctx[8] === 'danger');
			this.first = div4;
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div3);
			append(div3, div0);
			append(div0, svg0);
			if (if_block) if_block.m(svg0, null);
			append(div3, t0);
			append(div3, div1);
			append(div1, p0);
			append(p0, t1);
			append(div1, t2);
			append(div1, p1);
			append(p1, t3);
			append(div3, t4);
			append(div3, div2);
			append(div2, svg1);
			append(svg1, title);
			append(title, t5);
			append(svg1, path);
			append(div4, t6);
			current = true;

			if (!mounted) {
				dispose = [
					listen(svg1, "click", click_handler),
					listen(svg1, "keypress", prevent_default(keypress_handler))
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(svg0, null);
				}
			}

			if (!current || dirty & /*notifications*/ 1) {
				toggle_class(svg0, "default", /*type*/ ctx[8] === 'default');
			}

			if (!current || dirty & /*notifications*/ 1) {
				toggle_class(svg0, "danger", /*type*/ ctx[8] === 'danger');
			}

			if ((!current || dirty & /*notifications*/ 1) && t1_value !== (t1_value = /*title*/ ctx[6] + "")) set_data(t1, t1_value);
			if ((!current || dirty & /*notifications*/ 1) && t3_value !== (t3_value = /*message*/ ctx[7] + "")) set_data(t3, t3_value);

			if (!current || dirty & /*notifications*/ 1) {
				toggle_class(svg1, "default", /*type*/ ctx[8] === 'default');
			}

			if (!current || dirty & /*notifications*/ 1) {
				toggle_class(svg1, "danger", /*type*/ ctx[8] === 'danger');
			}

			if (!current || dirty & /*notifications*/ 1) {
				toggle_class(div4, "default", /*type*/ ctx[8] === 'default');
			}

			if (!current || dirty & /*notifications*/ 1) {
				toggle_class(div4, "danger", /*type*/ ctx[8] === 'danger');
			}
		},
		r() {
			rect = div4.getBoundingClientRect();
		},
		f() {
			fix_position(div4);
			stop_animation();
			add_transform(div4, rect);
		},
		a() {
			stop_animation();
			stop_animation = create_animation(div4, rect, flip, {});
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!current) return;
				if (!div4_transition) div4_transition = create_bidirectional_transition(div4, blur, { amount: 10 }, true);
				div4_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div4_transition) div4_transition = create_bidirectional_transition(div4, blur, { amount: 10 }, false);
			div4_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div4);

			if (if_block) {
				if_block.d();
			}

			if (detaching && div4_transition) div4_transition.end();
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$14(ctx) {
	let div;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let current;
	let each_value = /*notifications*/ ctx[0].slice(0, 10);
	const get_key = ctx => /*id*/ ctx[9];

	for (let i = 0; i < each_value.length; i += 1) {
		let child_ctx = get_each_context$h(ctx, each_value, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block$h(key, child_ctx));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "marcelle notification-container svelte-c58nio");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*notifications, close*/ 3) {
				each_value = /*notifications*/ ctx[0].slice(0, 10);
				group_outros();
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, fix_and_outro_and_destroy_block, create_each_block$h, null, get_each_context$h);
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}
		}
	};
}

function instance$13($$self, $$props, $$invalidate) {
	let { notifications = [] } = $$props;

	function close(id) {
		$$invalidate(0, notifications = notifications.filter(x => x.id !== id));
	}

	let uid = 1;

	function add({ title, message, type = "default", duration = 3e3 }) {
		const n = { id: uid, title, message, type };
		uid += 1;
		$$invalidate(0, notifications = [...notifications, n]);

		if (duration > 0) {
			setTimeout(
				() => {
					close(n.id);
				},
				duration
			);
		}
	}

	const click_handler = id => close(id);
	const keypress_handler = (id, e) => e.key === 'Escape' && close(id);

	$$self.$$set = $$props => {
		if ('notifications' in $$props) $$invalidate(0, notifications = $$props.notifications);
	};

	return [notifications, close, add, click_handler, keypress_handler];
}

class Notification extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$13, create_fragment$14, safe_not_equal, { notifications: 0, add: 2 });
	}

	get add() {
		return this.$$.ctx[2];
	}
}

/* ../design-system/dist/Number.svelte generated by Svelte v3.59.1 */

function create_fragment$13(ctx) {
	let div;
	let button0;
	let t0;
	let t1;
	let input;
	let t2;
	let button1;
	let t3;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			button0 = element("button");
			t0 = text$1("-");
			t1 = space();
			input = element("input");
			t2 = space();
			button1 = element("button");
			t3 = text$1("+");
			button0.disabled = /*disabled*/ ctx[1];
			attr(button0, "class", "left svelte-vad1o4");
			attr(input, "type", "number");
			attr(input, "inputmode", "decimal");
			input.value = /*value*/ ctx[0];
			input.disabled = /*disabled*/ ctx[1];
			set_style(input, "width", "80px");
			attr(input, "class", "svelte-vad1o4");
			button1.disabled = /*disabled*/ ctx[1];
			attr(button1, "class", "right svelte-vad1o4");
			attr(div, "class", "flex");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, button0);
			append(button0, t0);
			append(div, t1);
			append(div, input);
			append(div, t2);
			append(div, button1);
			append(button1, t3);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler*/ ctx[3]),
					listen(input, "change", /*changeValue*/ ctx[2]),
					listen(button1, "click", /*click_handler_1*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*disabled*/ 2) {
				button0.disabled = /*disabled*/ ctx[1];
			}

			if (dirty & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				input.value = /*value*/ ctx[0];
			}

			if (dirty & /*disabled*/ 2) {
				input.disabled = /*disabled*/ ctx[1];
			}

			if (dirty & /*disabled*/ 2) {
				button1.disabled = /*disabled*/ ctx[1];
			}
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$12($$self, $$props, $$invalidate) {
	let { disabled = false } = $$props;
	let { value } = $$props;

	function changeValue(e) {
		const target = e.target;
		const x = parseFloat(target.value);

		if (!Number.isNaN(x)) {
			$$invalidate(0, value = x);
		} else {
			target.value = value.toString();
		}
	}

	const click_handler = () => {
		$$invalidate(0, value -= 1);
	};

	const click_handler_1 = () => {
		$$invalidate(0, value += 1);
	};

	$$self.$$set = $$props => {
		if ('disabled' in $$props) $$invalidate(1, disabled = $$props.disabled);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
	};

	return [value, disabled, changeValue, click_handler, click_handler_1];
}

class Number_1 extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$12, create_fragment$13, safe_not_equal, { disabled: 1, value: 0 });
	}
}

/* ../design-system/dist/NumberArray.svelte generated by Svelte v3.59.1 */

function get_each_context$g(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	child_ctx[14] = i;
	return child_ctx;
}

// (32:0) {#if value && Array.isArray(value)}
function create_if_block$D(ctx) {
	let div;
	let t0;
	let button0;
	let t1;
	let t2;
	let button1;
	let t3;
	let mounted;
	let dispose;
	let each_value = /*value*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$g(get_each_context$g(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			button0 = element("button");
			t1 = text$1("-");
			t2 = space();
			button1 = element("button");
			t3 = text$1("+");
			button0.disabled = /*disabled*/ ctx[1];
			attr(button0, "class", "left svelte-vad1o4");
			button1.disabled = /*disabled*/ ctx[1];
			attr(button1, "class", "right svelte-vad1o4");
			set_style(button1, "border-left", "none");
			attr(div, "class", "flex items-center");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			append(div, t0);
			append(div, button0);
			append(button0, t1);
			append(div, t2);
			append(div, button1);
			append(button1, t3);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*click_handler_2*/ ctx[10]),
					listen(button1, "click", /*click_handler_3*/ ctx[11])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*disabled, increment, value, changeValue, decrement*/ 31) {
				each_value = /*value*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$g(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$g(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, t0);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*disabled*/ 2) {
				button0.disabled = /*disabled*/ ctx[1];
			}

			if (dirty & /*disabled*/ 2) {
				button1.disabled = /*disabled*/ ctx[1];
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (34:2) {#each value as v, i}
function create_each_block$g(ctx) {
	let div;
	let button0;
	let t0;
	let t1;
	let input;
	let input_value_value;
	let t2;
	let button1;
	let t3;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[7](/*i*/ ctx[14]);
	}

	function change_handler(...args) {
		return /*change_handler*/ ctx[8](/*i*/ ctx[14], ...args);
	}

	function click_handler_1() {
		return /*click_handler_1*/ ctx[9](/*i*/ ctx[14]);
	}

	return {
		c() {
			div = element("div");
			button0 = element("button");
			t0 = text$1("-");
			t1 = space();
			input = element("input");
			t2 = space();
			button1 = element("button");
			t3 = text$1("+");
			button0.disabled = /*disabled*/ ctx[1];
			attr(button0, "class", "left svelte-vad1o4");
			attr(input, "type", "number");
			attr(input, "inputmode", "decimal");
			input.value = input_value_value = /*v*/ ctx[12];
			input.disabled = /*disabled*/ ctx[1];
			set_style(input, "width", "80px");
			attr(input, "class", "svelte-vad1o4");
			button1.disabled = /*disabled*/ ctx[1];
			attr(button1, "class", "right svelte-vad1o4");
			attr(div, "class", "flex mr-2");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, button0);
			append(button0, t0);
			append(div, t1);
			append(div, input);
			append(div, t2);
			append(div, button1);
			append(button1, t3);

			if (!mounted) {
				dispose = [
					listen(button0, "click", click_handler),
					listen(input, "change", change_handler),
					listen(button1, "click", click_handler_1)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*disabled*/ 2) {
				button0.disabled = /*disabled*/ ctx[1];
			}

			if (dirty & /*value*/ 1 && input_value_value !== (input_value_value = /*v*/ ctx[12]) && input.value !== input_value_value) {
				input.value = input_value_value;
			}

			if (dirty & /*disabled*/ 2) {
				input.disabled = /*disabled*/ ctx[1];
			}

			if (dirty & /*disabled*/ 2) {
				button1.disabled = /*disabled*/ ctx[1];
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$12(ctx) {
	let show_if = /*value*/ ctx[0] && Array.isArray(/*value*/ ctx[0]);
	let if_block_anchor;
	let if_block = show_if && create_if_block$D(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*value*/ 1) show_if = /*value*/ ctx[0] && Array.isArray(/*value*/ ctx[0]);

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$D(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$11($$self, $$props, $$invalidate) {
	let { disabled = false } = $$props;
	let { value } = $$props;

	function changeValue(e, i) {
		const target = e.target;
		const x = parseFloat(target.value);

		if (!Number.isNaN(x)) {
			$$invalidate(0, value[i] = x, value);
		} else {
			target.value = value[i].toString();
		}
	}

	function decrement(i) {
		const v = value.slice();
		v[i] -= 1;
		$$invalidate(0, value = v);
	}

	function increment(i) {
		const v = value.slice();
		v[i] += 1;
		$$invalidate(0, value = v);
	}

	function extend() {
		const v = value.slice();
		v.push(v.length ? v[v.length - 1] : 0);
		$$invalidate(0, value = v);
	}

	function reduce() {
		$$invalidate(0, value = value.slice(0, value.length - 1));
	}

	const click_handler = i => decrement(i);
	const change_handler = (i, e) => changeValue(e, i);
	const click_handler_1 = i => increment(i);
	const click_handler_2 = () => reduce();
	const click_handler_3 = () => extend();

	$$self.$$set = $$props => {
		if ('disabled' in $$props) $$invalidate(1, disabled = $$props.disabled);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
	};

	return [
		value,
		disabled,
		changeValue,
		decrement,
		increment,
		extend,
		reduce,
		click_handler,
		change_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3
	];
}

let NumberArray$1 = class NumberArray extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$11, create_fragment$12, safe_not_equal, { disabled: 1, value: 0 });
	}
};

/* ../design-system/dist/PopMenu.svelte generated by Svelte v3.59.1 */

function get_each_context$f(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (36:1) <Button size="small" round on:click={toggleDropdown}>
function create_default_slot$J(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "d", "M10 12a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm0-6a2 2 0 1 1 0-4 2 2 0 0 1 0 4zm0 12a2 2 0 1 1 0-4 2 2 0 0 1 0 4z");
			attr(svg, "class", "fill-current inline-block h-5 w-5");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "viewBox", "0 0 20 20");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (47:1) {#if showDropdown}
function create_if_block$C(ctx) {
	let div2;
	let div1;
	let div0;
	let div2_transition;
	let current;
	let each_value = /*actions*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$f(get_each_context$f(ctx, each_value, i));
	}

	return {
		c() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "py-1");
			attr(div0, "role", "menu");
			attr(div0, "aria-orientation", "vertical");
			attr(div0, "aria-labelledby", "options-menu");
			attr(div1, "class", "origin-top-right absolute right-0 mt-1 w-56 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none");
			attr(div2, "class", "origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg z-50");
			toggle_class(div2, "hidden", false);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div1);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div0, null);
				}
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*selectAction, actions*/ 9) {
				each_value = /*actions*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$f(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$f(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!current) return;
				if (!div2_transition) div2_transition = create_bidirectional_transition(div2, slide, { duration: 100 }, true);
				div2_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div2_transition) div2_transition = create_bidirectional_transition(div2, slide, { duration: 100 }, false);
			div2_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_each(each_blocks, detaching);
			if (detaching && div2_transition) div2_transition.end();
		}
	};
}

// (57:5) {#each actions as action}
function create_each_block$f(ctx) {
	let button;
	let t0_value = /*action*/ ctx[7].text + "";
	let t0;
	let t1;
	let mounted;
	let dispose;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[5](/*action*/ ctx[7]);
	}

	return {
		c() {
			button = element("button");
			t0 = text$1(t0_value);
			t1 = space();
			attr(button, "class", "text-sm py-2 px-4 font-normal block w-full whitespace-no-wrap bg-transparent text-gray-800 hover:bg-gray-100 border-0 cursor-pointer");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t0);
			append(button, t1);

			if (!mounted) {
				dispose = listen(button, "click", click_handler_1);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*actions*/ 1 && t0_value !== (t0_value = /*action*/ ctx[7].text + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$11(ctx) {
	let t0;
	let div;
	let button;
	let t1;
	let current;
	let mounted;
	let dispose;

	button = new Button$1({
			props: {
				size: "small",
				round: true,
				$$slots: { default: [create_default_slot$J] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*toggleDropdown*/ ctx[2]);
	let if_block = /*showDropdown*/ ctx[1] && create_if_block$C(ctx);

	return {
		c() {
			t0 = space();
			div = element("div");
			create_component(button.$$.fragment);
			t1 = space();
			if (if_block) if_block.c();
			attr(div, "class", "relative");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, div, anchor);
			mount_component(button, div, null);
			append(div, t1);
			if (if_block) if_block.m(div, null);
			current = true;

			if (!mounted) {
				dispose = listen(document.body, "click", /*click_handler*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 1024) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);

			if (/*showDropdown*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*showDropdown*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$C(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(div);
			destroy_component(button);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function instance$10($$self, $$props, $$invalidate) {
	let { actions = [] } = $$props;
	const dispatch = createEventDispatcher();
	let showDropdown = false;

	function toggleDropdown(e) {
		e.stopPropagation();

		if (showDropdown) {
			$$invalidate(1, showDropdown = false);
		} else {
			$$invalidate(1, showDropdown = true);
		}
	}

	function selectAction(code) {
		dispatch("select", code);
	}

	const click_handler = () => {
		$$invalidate(1, showDropdown = false);
	};

	const click_handler_1 = action => selectAction(action.code);

	$$self.$$set = $$props => {
		if ('actions' in $$props) $$invalidate(0, actions = $$props.actions);
	};

	return [
		actions,
		showDropdown,
		toggleDropdown,
		selectAction,
		click_handler,
		click_handler_1
	];
}

class PopMenu extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$10, create_fragment$11, safe_not_equal, { actions: 0 });
	}
}

/* ../design-system/dist/Progress.svelte generated by Svelte v3.59.1 */

function create_fragment$10(ctx) {
	let div;
	let div_style_value;

	return {
		c() {
			div = element("div");
			attr(div, "class", "progress-line svelte-igsaf6");

			attr(div, "style", div_style_value = /*progress*/ ctx[0] >= 0
			? `--bar-mr: ${100 - Math.floor(/*progress*/ ctx[0] * 100)}%;`
			: '--bar-mr: 0px');

			toggle_class(div, "thin", /*thin*/ ctx[2]);
			toggle_class(div, "indeterminate", /*progress*/ ctx[0] === undefined || /*progress*/ ctx[0] === null || /*progress*/ ctx[0] < 0);
			toggle_class(div, "gray", /*type*/ ctx[1] === 'idle');
			toggle_class(div, "green", /*type*/ ctx[1] === 'success');
			toggle_class(div, "red", /*type*/ ctx[1] === 'danger');
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*progress*/ 1 && div_style_value !== (div_style_value = /*progress*/ ctx[0] >= 0
			? `--bar-mr: ${100 - Math.floor(/*progress*/ ctx[0] * 100)}%;`
			: '--bar-mr: 0px')) {
				attr(div, "style", div_style_value);
			}

			if (dirty & /*thin*/ 4) {
				toggle_class(div, "thin", /*thin*/ ctx[2]);
			}

			if (dirty & /*progress, undefined*/ 1) {
				toggle_class(div, "indeterminate", /*progress*/ ctx[0] === undefined || /*progress*/ ctx[0] === null || /*progress*/ ctx[0] < 0);
			}

			if (dirty & /*type*/ 2) {
				toggle_class(div, "gray", /*type*/ ctx[1] === 'idle');
			}

			if (dirty & /*type*/ 2) {
				toggle_class(div, "green", /*type*/ ctx[1] === 'success');
			}

			if (dirty & /*type*/ 2) {
				toggle_class(div, "red", /*type*/ ctx[1] === 'danger');
			}
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function instance$$($$self, $$props, $$invalidate) {
	let { progress } = $$props;
	let { type = "default" } = $$props;
	let { thin = false } = $$props;

	$$self.$$set = $$props => {
		if ('progress' in $$props) $$invalidate(0, progress = $$props.progress);
		if ('type' in $$props) $$invalidate(1, type = $$props.type);
		if ('thin' in $$props) $$invalidate(2, thin = $$props.thin);
	};

	return [progress, type, thin];
}

class Progress extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$$, create_fragment$10, safe_not_equal, { progress: 0, type: 1, thin: 2 });
	}
}

/* ../design-system/dist/Select.svelte generated by Svelte v3.59.1 */

function get_each_context$e(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (15:2) {#if placeholder}
function create_if_block$B(ctx) {
	let option;
	let t;

	return {
		c() {
			option = element("option");
			t = text$1(/*placeholder*/ ctx[2]);
			option.__value = "";
			option.value = option.__value;
			option.disabled = true;
			attr(option, "class", "svelte-g3sqa4");
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty & /*placeholder*/ 4) set_data(t, /*placeholder*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (18:2) {#each options as option}
function create_each_block$e(ctx) {
	let option;
	let t_value = /*option*/ ctx[7] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text$1(t_value);
			option.__value = option_value_value = /*option*/ ctx[7];
			option.value = option.__value;
			attr(option, "class", "svelte-g3sqa4");
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty & /*options*/ 2 && t_value !== (t_value = /*option*/ ctx[7] + "")) set_data(t, t_value);

			if (dirty & /*options*/ 2 && option_value_value !== (option_value_value = /*option*/ ctx[7])) {
				option.__value = option_value_value;
				option.value = option.__value;
			}
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

function create_fragment$$(ctx) {
	let div1;
	let select;
	let if_block_anchor;
	let t;
	let div0;
	let mounted;
	let dispose;
	let if_block = /*placeholder*/ ctx[2] && create_if_block$B(ctx);
	let each_value = /*options*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$e(get_each_context$e(ctx, each_value, i));
	}

	return {
		c() {
			div1 = element("div");
			select = element("select");
			if (if_block) if_block.c();
			if_block_anchor = empty();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			div0 = element("div");
			div0.innerHTML = `<svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"></path></svg>`;
			attr(select, "class", "svelte-g3sqa4");
			if (/*value*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[5].call(select));
			toggle_class(select, "small", /*size*/ ctx[3] === 'small');
			attr(div0, "class", "pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700");
			attr(div1, "class", "select-container svelte-g3sqa4");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, select);
			if (if_block) if_block.m(select, null);
			append(select, if_block_anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(select, null);
				}
			}

			select_option(select, /*value*/ ctx[0], true);
			append(div1, t);
			append(div1, div0);

			if (!mounted) {
				dispose = [
					listen(select, "change", /*select_change_handler*/ ctx[5]),
					listen(select, "change", /*change_handler*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*placeholder*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$B(ctx);
					if_block.c();
					if_block.m(select, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*options*/ 2) {
				each_value = /*options*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$e(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$e(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*value, options*/ 3) {
				select_option(select, /*value*/ ctx[0]);
			}

			if (dirty & /*size*/ 8) {
				toggle_class(select, "small", /*size*/ ctx[3] === 'small');
			}
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$_($$self, $$props, $$invalidate) {
	let { options } = $$props;
	let { value = "" } = $$props;
	let { placeholder = "Select an Option" } = $$props;
	let { size = "normal" } = $$props;
	const dispatch = createEventDispatcher();

	function select_change_handler() {
		value = select_value(this);
		$$invalidate(0, value);
		$$invalidate(1, options);
	}

	const change_handler = e => dispatch('change', e.currentTarget.value);

	$$self.$$set = $$props => {
		if ('options' in $$props) $$invalidate(1, options = $$props.options);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('placeholder' in $$props) $$invalidate(2, placeholder = $$props.placeholder);
		if ('size' in $$props) $$invalidate(3, size = $$props.size);
	};

	return [
		value,
		options,
		placeholder,
		size,
		dispatch,
		select_change_handler,
		change_handler
	];
}

let Select$1 = class Select extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$_, create_fragment$$, safe_not_equal, {
			options: 1,
			value: 0,
			placeholder: 2,
			size: 3
		});
	}
};

/* ../design-system/dist/Spinner.svelte generated by Svelte v3.59.1 */

function create_fragment$_(ctx) {
	let span3;

	return {
		c() {
			span3 = element("span");
			span3.innerHTML = `<span class="spinner svelte-1vj95jw"><span class="dot1 svelte-1vj95jw"></span>  <span class="dot2 svelte-1vj95jw"></span></span>`;
			attr(span3, "class", "spinner-container svelte-1vj95jw");
		},
		m(target, anchor) {
			insert(target, span3, anchor);
		},
		p: noop$2,
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(span3);
		}
	};
}

class Spinner extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment$_, safe_not_equal, {});
	}
}

/* ../design-system/dist/Switch.svelte generated by Svelte v3.59.1 */

function create_fragment$Z(ctx) {
	let label;
	let input;
	let t0;
	let span2;
	let t2;
	let span3;
	let t3;
	let mounted;
	let dispose;

	return {
		c() {
			label = element("label");
			input = element("input");
			t0 = space();
			span2 = element("span");

			span2.innerHTML = `<span class="track svelte-huqh7w"></span> 
    <span class="thumb svelte-huqh7w"></span>`;

			t2 = space();
			span3 = element("span");
			t3 = text$1(/*text*/ ctx[1]);
			attr(input, "type", "checkbox");
			input.disabled = /*disabled*/ ctx[2];
			attr(input, "class", "svelte-huqh7w");
			attr(span2, "class", "switch svelte-huqh7w");
			attr(span3, "class", "ml-2 cursor-pointer");
			attr(label, "class", "marcelle");
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, input);
			input.checked = /*checked*/ ctx[0];
			append(label, t0);
			append(label, span2);
			append(label, t2);
			append(label, span3);
			append(span3, t3);

			if (!mounted) {
				dispose = listen(input, "change", /*input_change_handler*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*disabled*/ 4) {
				input.disabled = /*disabled*/ ctx[2];
			}

			if (dirty & /*checked*/ 1) {
				input.checked = /*checked*/ ctx[0];
			}

			if (dirty & /*text*/ 2) set_data(t3, /*text*/ ctx[1]);
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(label);
			mounted = false;
			dispose();
		}
	};
}

function instance$Z($$self, $$props, $$invalidate) {
	let { text = "" } = $$props;
	let { checked = false } = $$props;
	let { disabled = false } = $$props;

	function input_change_handler() {
		checked = this.checked;
		$$invalidate(0, checked);
	}

	$$self.$$set = $$props => {
		if ('text' in $$props) $$invalidate(1, text = $$props.text);
		if ('checked' in $$props) $$invalidate(0, checked = $$props.checked);
		if ('disabled' in $$props) $$invalidate(2, disabled = $$props.disabled);
	};

	return [checked, text, disabled, input_change_handler];
}

class Switch extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$Z, create_fragment$Z, safe_not_equal, { text: 1, checked: 0, disabled: 2 });
	}
}

const subscriber_queue = [];
/**
 * Create a `Writable` store that allows both updating and reading by subscription.
 * @param {*=}value initial value
 * @param {StartStopNotifier=} start
 */
function writable(value, start = noop$2) {
    let stop;
    const subscribers = new Set();
    function set(new_value) {
        if (safe_not_equal(value, new_value)) {
            value = new_value;
            if (stop) { // store is ready
                const run_queue = !subscriber_queue.length;
                for (const subscriber of subscribers) {
                    subscriber[1]();
                    subscriber_queue.push(subscriber, value);
                }
                if (run_queue) {
                    for (let i = 0; i < subscriber_queue.length; i += 2) {
                        subscriber_queue[i][0](subscriber_queue[i + 1]);
                    }
                    subscriber_queue.length = 0;
                }
            }
        }
    }
    function update(fn) {
        set(fn(value));
    }
    function subscribe(run, invalidate = noop$2) {
        const subscriber = [run, invalidate];
        subscribers.add(subscriber);
        if (subscribers.size === 1) {
            stop = start(set) || noop$2;
        }
        run(value);
        return () => {
            subscribers.delete(subscriber);
            if (subscribers.size === 0 && stop) {
                stop();
                stop = null;
            }
        };
    }
    return { set, update, subscribe };
}

/* ../design-system/dist/Tabs.svelte generated by Svelte v3.59.1 */

function create_fragment$Y(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			attr(div, "class", "tabs");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[0],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

const TABS = {};

function instance$Y($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	const tabs = [];
	const panels = [];
	const selectedTab = writable(null);
	const selectedPanel = writable(null);

	setContext$1(TABS, {
		registerTab: tab => {
			tabs.push(tab);
			selectedTab.update(current => current || tab);

			onDestroy(() => {
				const i = tabs.indexOf(tab);
				tabs.splice(i, 1);

				selectedTab.update(current => current === tab
				? tabs[i] || tabs[tabs.length - 1]
				: current);
			});
		},
		registerPanel: panel => {
			panels.push(panel);
			selectedPanel.update(current => current || panel);

			onDestroy(() => {
				const i = panels.indexOf(panel);
				panels.splice(i, 1);

				selectedPanel.update(current => current === panel
				? panels[i] || panels[panels.length - 1]
				: current);
			});
		},
		selectTab: tab => {
			const i = tabs.indexOf(tab);
			selectedTab.set(tab);
			selectedPanel.set(panels[i]);
		},
		selectedTab,
		selectedPanel
	});

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class Tabs extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$Y, create_fragment$Y, safe_not_equal, {});
	}
}

/* ../design-system/dist/Tab.svelte generated by Svelte v3.59.1 */

function create_fragment$X(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			attr(div, "class", "text-sm font-semibold text-gray-600 cursor-pointer mx-4 p-2 hover:text-gray-800 svelte-d0yt2a");
			attr(div, "role", "tab");
			attr(div, "tabindex", "0");
			toggle_class(div, "selected", /*$selectedTab*/ ctx[0] === /*tab*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(div, "click", /*click_handler*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*$selectedTab, tab*/ 3) {
				toggle_class(div, "selected", /*$selectedTab*/ ctx[0] === /*tab*/ ctx[1]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance$X($$self, $$props, $$invalidate) {
	let $selectedTab;
	let { $$slots: slots = {}, $$scope } = $$props;
	const tab = {};
	const { registerTab, selectTab, selectedTab } = getContext$1(TABS);
	component_subscribe($$self, selectedTab, value => $$invalidate(0, $selectedTab = value));
	registerTab(tab);
	const click_handler = () => selectTab(tab);

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	return [$selectedTab, tab, selectTab, selectedTab, $$scope, slots, click_handler];
}

class Tab extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$X, create_fragment$X, safe_not_equal, {});
	}
}

/* ../design-system/dist/TabPanel.svelte generated by Svelte v3.59.1 */

function create_if_block$A(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$W(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*$selectedPanel*/ ctx[0] === /*panel*/ ctx[1] && create_if_block$A(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*$selectedPanel*/ ctx[0] === /*panel*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$selectedPanel*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$A(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$W($$self, $$props, $$invalidate) {
	let $selectedPanel;
	let { $$slots: slots = {}, $$scope } = $$props;
	const panel = {};
	const { registerPanel, selectedPanel } = getContext$1(TABS);
	component_subscribe($$self, selectedPanel, value => $$invalidate(0, $selectedPanel = value));
	registerPanel(panel);

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	return [$selectedPanel, panel, selectedPanel, $$scope, slots];
}

class TabPanel extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$W, create_fragment$W, safe_not_equal, {});
	}
}

/* ../design-system/dist/TableContentCell.svelte generated by Svelte v3.59.1 */

function create_else_block$l(ctx) {
	let t;

	return {
		c() {
			t = text$1(/*value*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 2) set_data(t, /*value*/ ctx[1]);
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (46:38) 
function create_if_block_6$1(ctx) {
	let t_value = /*value*/ ctx[1].toPrecision(2) + "";
	let t;

	return {
		c() {
			t = text$1(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 2 && t_value !== (t_value = /*value*/ ctx[1].toPrecision(2) + "")) set_data(t, t_value);
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (44:29) 
function create_if_block_5$1(ctx) {
	let t0;
	let t1_value = getArrayShape(/*value*/ ctx[1]).join(', ') + "";
	let t1;
	let t2;

	return {
		c() {
			t0 = text$1("Array(");
			t1 = text$1(t1_value);
			t2 = text$1(")");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			insert(target, t2, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 2 && t1_value !== (t1_value = getArrayShape(/*value*/ ctx[1]).join(', ') + "")) set_data(t1, t1_value);
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (detaching) detach(t2);
		}
	};
}

// (42:28) 
function create_if_block_4$2(ctx) {
	let t_value = /*formatDate*/ ctx[3](/*value*/ ctx[1]) + "";
	let t;

	return {
		c() {
			t = text$1(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 2 && t_value !== (t_value = /*formatDate*/ ctx[3](/*value*/ ctx[1]) + "")) set_data(t, t_value);
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (40:28) 
function create_if_block_3$7(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

// (38:30) 
function create_if_block_2$a(ctx) {
	let button;
	let current;

	button = new Button$1({
			props: {
				size: "small",
				$$slots: { default: [create_default_slot$I] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*click_handler_1*/ ctx[6]);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope, value*/ 130) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (28:28) 
function create_if_block_1$i(ctx) {
	let sl_button;
	let t_value = /*value*/ ctx[1].text + "";
	let t;
	let mounted;
	let dispose;

	return {
		c() {
			sl_button = element("sl-button");
			t = text$1(t_value);
			set_custom_element_data(sl_button, "type", "text");
			set_custom_element_data(sl_button, "size", "small");
		},
		m(target, anchor) {
			insert(target, sl_button, anchor);
			append(sl_button, t);

			if (!mounted) {
				dispose = listen(sl_button, "click", /*click_handler*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 2 && t_value !== (t_value = /*value*/ ctx[1].text + "")) set_data(t, t_value);
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(sl_button);
			mounted = false;
			dispose();
		}
	};
}

// (26:2) {#if type === 'image'}
function create_if_block$z(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			attr(img, "alt", "thumbnail");
			if (!src_url_equal(img.src, img_src_value = /*value*/ ctx[1])) attr(img, "src", img_src_value);
			attr(img, "width", "30");
			attr(img, "height", "30");
			attr(img, "class", "rounded-md");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 2 && !src_url_equal(img.src, img_src_value = /*value*/ ctx[1])) {
				attr(img, "src", img_src_value);
			}
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (39:4) <Button size="small" on:click={() => dispatch('action', value)}>
function create_default_slot$I(ctx) {
	let t;

	return {
		c() {
			t = text$1(/*value*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*value*/ 2) set_data(t, /*value*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$V(ctx) {
	let td;
	let current_block_type_index;
	let if_block;
	let current;

	const if_block_creators = [
		create_if_block$z,
		create_if_block_1$i,
		create_if_block_2$a,
		create_if_block_3$7,
		create_if_block_4$2,
		create_if_block_5$1,
		create_if_block_6$1,
		create_else_block$l
	];

	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*type*/ ctx[0] === 'image') return 0;
		if (/*type*/ ctx[0] === 'link') return 1;
		if (/*type*/ ctx[0] === 'action') return 2;
		if (/*type*/ ctx[0] === 'slot') return 3;
		if (/*type*/ ctx[0] === 'date') return 4;
		if (/*type*/ ctx[0] === 'array') return 5;
		if (typeof /*value*/ ctx[1] === 'number') return 6;
		return 7;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			td = element("td");
			if_block.c();
			attr(td, "class", "svelte-fe0rg4");
		},
		m(target, anchor) {
			insert(target, td, anchor);
			if_blocks[current_block_type_index].m(td, null);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(td, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(td);
			if_blocks[current_block_type_index].d();
		}
	};
}

function getArrayShape(arr) {
	if (!Array.isArray(arr)) return [];

	if (arr.length > 0 && Array.isArray(arr[0])) {
		return [arr.length, ...getArrayShape(arr[0])];
	}

	return [arr.length];
}

function instance$V($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { type = "generic" } = $$props;
	let { value = null } = $$props;
	const dispatch = createEventDispatcher();

	function formatDate(v) {
		try {
			return formatDistanceToNow(Date.parse(v), { includeSeconds: true, addSuffix: true });
		} catch(error) {
			console.log("Date Parsing Error", v, error);
			return v;
		}
	}

	const click_handler = () => {
		// eslint-disable-next-line no-console
		console.log('GOTO:', value.href);
	};

	const click_handler_1 = () => dispatch('action', value);

	$$self.$$set = $$props => {
		if ('type' in $$props) $$invalidate(0, type = $$props.type);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('$$scope' in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	return [
		type,
		value,
		dispatch,
		formatDate,
		slots,
		click_handler,
		click_handler_1,
		$$scope
	];
}

class TableContentCell extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$V, create_fragment$V, safe_not_equal, { type: 0, value: 1 });
	}
}

/* ../design-system/dist/TableHeaderCell.svelte generated by Svelte v3.59.1 */

function create_if_block$y(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1$h, create_else_block$k];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*sortAscending*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (41:3) {:else}
function create_else_block$k(ctx) {
	let button;
	let current;

	button = new Button$1({
			props: {
				round: true,
				size: "small",
				$$slots: { default: [create_default_slot_1$g] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*sort*/ ctx[3]);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 64) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (22:3) {#if sortAscending}
function create_if_block_1$h(ctx) {
	let button;
	let current;

	button = new Button$1({
			props: {
				round: true,
				size: "small",
				$$slots: { default: [create_default_slot$H] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*sort*/ ctx[3]);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 64) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (42:4) <Button round size="small" on:click={sort}>
function create_default_slot_1$g(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "stroke-linecap", "round");
			attr(path, "stroke-linejoin", "round");
			attr(path, "stroke-width", "2");
			attr(path, "d", "M16 17l-4 4m0 0l-4-4m4 4V3");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "class", "h-6 w-6");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke", "currentColor");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (23:4) <Button round size="small" on:click={sort}>
function create_default_slot$H(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "stroke-linecap", "round");
			attr(path, "stroke-linejoin", "round");
			attr(path, "stroke-width", "2");
			attr(path, "d", "M8 7l4-4m0 0l4 4m-4-4v18");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "class", "h-6 w-6");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke", "currentColor");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

function create_fragment$U(ctx) {
	let th;
	let span1;
	let span0;
	let t0;
	let t1;
	let current;
	let if_block = /*sortable*/ ctx[1] && create_if_block$y(ctx);

	return {
		c() {
			th = element("th");
			span1 = element("span");
			span0 = element("span");
			t0 = text$1(/*name*/ ctx[0]);
			t1 = space();
			if (if_block) if_block.c();
			set_style(span0, "margin-top", "0.5rem");
			set_style(span0, "margin-bottom", "0.5rem");
			set_style(span1, "display", "flex");
			set_style(span1, "justify-content", "space-between");
			set_style(span1, "align-items", "center");
			attr(th, "class", "svelte-1310j1m");
		},
		m(target, anchor) {
			insert(target, th, anchor);
			append(th, span1);
			append(span1, span0);
			append(span0, t0);
			append(span1, t1);
			if (if_block) if_block.m(span1, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*name*/ 1) set_data(t0, /*name*/ ctx[0]);

			if (/*sortable*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*sortable*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$y(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(span1, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(th);
			if (if_block) if_block.d();
		}
	};
}

function instance$U($$self, $$props, $$invalidate) {
	let { name = "name" } = $$props;
	let { sortable = false } = $$props;
	let { sorting = { col: "", ascending: true } } = $$props;
	const dispatch = createEventDispatcher();
	let sortAscending = true;

	function sort() {
		$$invalidate(2, sortAscending = !sortAscending);
		dispatch("sort", { col: name, ascending: sortAscending });
	}

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(0, name = $$props.name);
		if ('sortable' in $$props) $$invalidate(1, sortable = $$props.sortable);
		if ('sorting' in $$props) $$invalidate(4, sorting = $$props.sorting);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*sorting, name*/ 17) {
			if (sorting.col === name) {
				$$invalidate(2, sortAscending = sorting.ascending);
			}
		}
	};

	return [name, sortable, sortAscending, sort, sorting];
}

class TableHeaderCell extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$U, create_fragment$U, safe_not_equal, { name: 0, sortable: 1, sorting: 4 });
	}
}

/* ../design-system/dist/TableActions.svelte generated by Svelte v3.59.1 */

function get_each_context$d(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i].name;
	child_ctx[11] = list[i].multiple;
	child_ctx[12] = list[i].confirm;
	return child_ctx;
}

// (37:4) <Button       size="small"       disabled={multiple === false && selected.length > 1}       type={name === 'delete' ? 'danger' : 'default'}       on:click={() => handleAction(name, confirm)}>
function create_default_slot_3$1(ctx) {
	let t_value = /*name*/ ctx[10] + "";
	let t;

	return {
		c() {
			t = text$1(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*actions*/ 2 && t_value !== (t_value = /*name*/ ctx[10] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (36:2) {#each actions as { name, multiple, confirm }}
function create_each_block$d(ctx) {
	let button;
	let current;

	function click_handler() {
		return /*click_handler*/ ctx[7](/*name*/ ctx[10], /*confirm*/ ctx[12]);
	}

	button = new Button$1({
			props: {
				size: "small",
				disabled: /*multiple*/ ctx[11] === false && /*selected*/ ctx[0].length > 1,
				type: /*name*/ ctx[10] === 'delete' ? 'danger' : 'default',
				$$slots: { default: [create_default_slot_3$1] },
				$$scope: { ctx }
			}
		});

	button.$on("click", click_handler);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const button_changes = {};
			if (dirty & /*actions, selected*/ 3) button_changes.disabled = /*multiple*/ ctx[11] === false && /*selected*/ ctx[0].length > 1;
			if (dirty & /*actions*/ 2) button_changes.type = /*name*/ ctx[10] === 'delete' ? 'danger' : 'default';

			if (dirty & /*$$scope, actions*/ 32770) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (47:0) {#if confirmActionPending}
function create_if_block$x(ctx) {
	let modal;
	let current;

	modal = new Modal({
			props: {
				$$slots: { default: [create_default_slot$G] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(modal.$$.fragment);
		},
		m(target, anchor) {
			mount_component(modal, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const modal_changes = {};

			if (dirty & /*$$scope, confirmActionPending, selectedAction*/ 32780) {
				modal_changes.$$scope = { dirty, ctx };
			}

			modal.$set(modal_changes);
		},
		i(local) {
			if (current) return;
			transition_in(modal.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(modal.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(modal, detaching);
		}
	};
}

// (52:8) <Button           type="danger"           on:click={() => {             confirmActionPending = false;           }}>
function create_default_slot_2$4(ctx) {
	let t;

	return {
		c() {
			t = text$1("Cancel");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (59:8) <Button variant="filled" on:click={confirmAction}>
function create_default_slot_1$f(ctx) {
	let t;

	return {
		c() {
			t = text$1("Confirm");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (48:2) <Modal>
function create_default_slot$G(ctx) {
	let div1;
	let p;
	let t0;
	let t1;
	let t2;
	let t3;
	let div0;
	let button0;
	let t4;
	let span;
	let t5;
	let button1;
	let current;

	button0 = new Button$1({
			props: {
				type: "danger",
				$$slots: { default: [create_default_slot_2$4] },
				$$scope: { ctx }
			}
		});

	button0.$on("click", /*click_handler_1*/ ctx[8]);

	button1 = new Button$1({
			props: {
				variant: "filled",
				$$slots: { default: [create_default_slot_1$f] },
				$$scope: { ctx }
			}
		});

	button1.$on("click", /*confirmAction*/ ctx[4]);

	return {
		c() {
			div1 = element("div");
			p = element("p");
			t0 = text$1("Do you want to ");
			t1 = text$1(/*selectedAction*/ ctx[2]);
			t2 = text$1(" the selected items?");
			t3 = space();
			div0 = element("div");
			create_component(button0.$$.fragment);
			t4 = space();
			span = element("span");
			t5 = space();
			create_component(button1.$$.fragment);
			attr(span, "class", "w-2");
			attr(div0, "class", "w-full flex justify-end");
			attr(div1, "class", "p-8");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, p);
			append(p, t0);
			append(p, t1);
			append(p, t2);
			append(div1, t3);
			append(div1, div0);
			mount_component(button0, div0, null);
			append(div0, t4);
			append(div0, span);
			append(div0, t5);
			mount_component(button1, div0, null);
			current = true;
		},
		p(ctx, dirty) {
			if (!current || dirty & /*selectedAction*/ 4) set_data(t1, /*selectedAction*/ ctx[2]);
			const button0_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 32768) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(button0);
			destroy_component(button1);
		}
	};
}

function create_fragment$T(ctx) {
	let div;
	let t;
	let if_block_anchor;
	let current;
	let each_value = /*actions*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$d(get_each_context$d(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let if_block = /*confirmActionPending*/ ctx[3] && create_if_block$x(ctx);

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr(div, "class", "actions");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*actions, selected, handleAction*/ 35) {
				each_value = /*actions*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$d(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$d(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (/*confirmActionPending*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*confirmActionPending*/ 8) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$x(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(if_block);
			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$T($$self, $$props, $$invalidate) {
	let { provider } = $$props;
	let { actions } = $$props;
	let { selected } = $$props;
	const dispatch = createEventDispatcher();
	let selectedAction = "";
	let confirmActionPending = false;

	async function confirmAction() {
		if (selectedAction === "delete") {
			for (const i of selected) {
				await provider.delete(i);
			}
		} else {
			dispatch("action", [selectedAction, selected]);
		}

		$$invalidate(3, confirmActionPending = false);
		$$invalidate(0, selected = []);
		dispatch("selected", selected);
	}

	function handleAction(action, confirm) {
		$$invalidate(2, selectedAction = action);
		if (!selectedAction || selected.length === 0) return;

		if (confirm) {
			$$invalidate(3, confirmActionPending = true);
		} else {
			confirmAction();
		}
	}

	const click_handler = (name, confirm) => handleAction(name, confirm);

	const click_handler_1 = () => {
		$$invalidate(3, confirmActionPending = false);
	};

	$$self.$$set = $$props => {
		if ('provider' in $$props) $$invalidate(6, provider = $$props.provider);
		if ('actions' in $$props) $$invalidate(1, actions = $$props.actions);
		if ('selected' in $$props) $$invalidate(0, selected = $$props.selected);
	};

	return [
		selected,
		actions,
		selectedAction,
		confirmActionPending,
		confirmAction,
		handleAction,
		provider,
		click_handler,
		click_handler_1
	];
}

class TableActions extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$T, create_fragment$T, safe_not_equal, { provider: 6, actions: 1, selected: 0 });
	}
}

/* ../design-system/dist/TableFooter.svelte generated by Svelte v3.59.1 */

function create_if_block$w(ctx) {
	let tableactions;
	let updating_selected;
	let current;

	function tableactions_selected_binding(value) {
		/*tableactions_selected_binding*/ ctx[11](value);
	}

	let tableactions_props = {
		provider: /*provider*/ ctx[1],
		actions: /*actions*/ ctx[2]
	};

	if (/*selected*/ ctx[0] !== void 0) {
		tableactions_props.selected = /*selected*/ ctx[0];
	}

	tableactions = new TableActions({ props: tableactions_props });
	binding_callbacks.push(() => bind(tableactions, 'selected', tableactions_selected_binding));
	tableactions.$on("selected", /*selected_handler*/ ctx[12]);
	tableactions.$on("action", /*action_handler*/ ctx[13]);

	return {
		c() {
			create_component(tableactions.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tableactions, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tableactions_changes = {};
			if (dirty & /*provider*/ 2) tableactions_changes.provider = /*provider*/ ctx[1];
			if (dirty & /*actions*/ 4) tableactions_changes.actions = /*actions*/ ctx[2];

			if (!updating_selected && dirty & /*selected*/ 1) {
				updating_selected = true;
				tableactions_changes.selected = /*selected*/ ctx[0];
				add_flush_callback(() => updating_selected = false);
			}

			tableactions.$set(tableactions_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tableactions.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tableactions.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tableactions, detaching);
		}
	};
}

// (64:2) <Button    round    disabled={page === 1}    on:click={() => {     gotoPage(page - 1);    }}   >
function create_default_slot_1$e(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "stroke-linecap", "round");
			attr(path, "stroke-linejoin", "round");
			attr(path, "stroke-width", "2");
			attr(path, "d", "M15 19l-7-7 7-7");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "class", "h-3 w-3");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke", "currentColor");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (91:2) <Button    round    disabled={page === numPages}    on:click={() => {     gotoPage(page + 1);    }}   >
function create_default_slot$F(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "stroke-linecap", "round");
			attr(path, "stroke-linejoin", "round");
			attr(path, "stroke-width", "2");
			attr(path, "d", "M9 5l7 7-7 7");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "class", "h-3 w-3");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke", "currentColor");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

function create_fragment$S(ctx) {
	let div5;
	let div0;
	let t0;
	let div4;
	let div2;
	let t1;
	let div1;
	let select;
	let t2;
	let div3;
	let t3;
	let t4;
	let t5;
	let t6;
	let t7;
	let t8;
	let button0;
	let t9;
	let input;
	let input_value_value;
	let t10;
	let button1;
	let current;
	let mounted;
	let dispose;
	let if_block = /*actions*/ ctx[2].length > 0 && /*selected*/ ctx[0].length > 0 && create_if_block$w(ctx);

	select = new Select$1({
			props: {
				size: "small",
				options: ['10', '20', '50', 'all'],
				value: /*itemsPerPage*/ ctx[5].toString()
			}
		});

	select.$on("change", /*change_handler*/ ctx[14]);

	button0 = new Button$1({
			props: {
				round: true,
				disabled: /*page*/ ctx[3] === 1,
				$$slots: { default: [create_default_slot_1$e] },
				$$scope: { ctx }
			}
		});

	button0.$on("click", /*click_handler*/ ctx[15]);

	button1 = new Button$1({
			props: {
				round: true,
				disabled: /*page*/ ctx[3] === /*numPages*/ ctx[6],
				$$slots: { default: [create_default_slot$F] },
				$$scope: { ctx }
			}
		});

	button1.$on("click", /*click_handler_1*/ ctx[17]);

	return {
		c() {
			div5 = element("div");
			div0 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			div4 = element("div");
			div2 = element("div");
			t1 = text$1("Items per page:\n\t\t\t");
			div1 = element("div");
			create_component(select.$$.fragment);
			t2 = space();
			div3 = element("div");
			t3 = text$1(/*start*/ ctx[7]);
			t4 = text$1("-");
			t5 = text$1(/*end*/ ctx[8]);
			t6 = text$1(" of ");
			t7 = text$1(/*total*/ ctx[4]);
			t8 = space();
			create_component(button0.$$.fragment);
			t9 = space();
			input = element("input");
			t10 = space();
			create_component(button1.$$.fragment);
			attr(div0, "class", "actions");
			attr(div1, "class", "w-12 ml-2");
			attr(div2, "class", "flex items-center mx-4");
			attr(div3, "class", "mx-3");
			attr(input, "class", "marcelle w-8 rounded mr-1 mb-1 bg-white text-gray-600 border border-solid border-gray-300 text-center focus:outline-none focus:ring-blue-400 focus:ring-2 focus:ring-opacity-50 active:ring-blue-400 active:ring-4 active:ring-opacity-50");
			input.value = input_value_value = /*page*/ ctx[3].toString();
			attr(div4, "class", "flex items-center");
			attr(div5, "class", "table-footer svelte-13k2ee6");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div0);
			if (if_block) if_block.m(div0, null);
			append(div5, t0);
			append(div5, div4);
			append(div4, div2);
			append(div2, t1);
			append(div2, div1);
			mount_component(select, div1, null);
			append(div4, t2);
			append(div4, div3);
			append(div3, t3);
			append(div3, t4);
			append(div3, t5);
			append(div3, t6);
			append(div3, t7);
			append(div4, t8);
			mount_component(button0, div4, null);
			append(div4, t9);
			append(div4, input);
			append(div4, t10);
			mount_component(button1, div4, null);
			current = true;

			if (!mounted) {
				dispose = listen(input, "blur", /*blur_handler*/ ctx[16]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*actions*/ ctx[2].length > 0 && /*selected*/ ctx[0].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*actions, selected*/ 5) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$w(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div0, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			const select_changes = {};
			if (dirty & /*itemsPerPage*/ 32) select_changes.value = /*itemsPerPage*/ ctx[5].toString();
			select.$set(select_changes);
			if (!current || dirty & /*start*/ 128) set_data(t3, /*start*/ ctx[7]);
			if (!current || dirty & /*end*/ 256) set_data(t5, /*end*/ ctx[8]);
			if (!current || dirty & /*total*/ 16) set_data(t7, /*total*/ ctx[4]);
			const button0_changes = {};
			if (dirty & /*page*/ 8) button0_changes.disabled = /*page*/ ctx[3] === 1;

			if (dirty & /*$$scope*/ 262144) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);

			if (!current || dirty & /*page*/ 8 && input_value_value !== (input_value_value = /*page*/ ctx[3].toString()) && input.value !== input_value_value) {
				input.value = input_value_value;
			}

			const button1_changes = {};
			if (dirty & /*page, numPages*/ 72) button1_changes.disabled = /*page*/ ctx[3] === /*numPages*/ ctx[6];

			if (dirty & /*$$scope*/ 262144) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(select.$$.fragment, local);
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			transition_out(select.$$.fragment, local);
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div5);
			if (if_block) if_block.d();
			destroy_component(select);
			destroy_component(button0);
			destroy_component(button1);
			mounted = false;
			dispose();
		}
	};
}

function instance$S($$self, $$props, $$invalidate) {
	let itemsPerPage;
	let { provider } = $$props;
	let { actions } = $$props;
	let { selected } = $$props;
	let page = 1;
	let numPages = 1;
	let start = 0;
	let end = 0;
	let total = 0;

	let unsub = () => {
		
	};

	function gotoPage(i) {
		$$invalidate(3, page = i);
		provider.page(i);
	}

	function tableactions_selected_binding(value) {
		selected = value;
		$$invalidate(0, selected);
	}

	function selected_handler(event) {
		bubble.call(this, $$self, event);
	}

	function action_handler(event) {
		bubble.call(this, $$self, event);
	}

	const change_handler = ({ detail }) => {
		const n = detail === 'all' ? total : parseInt(detail);
		provider.paginate(n);
		$$invalidate(5, itemsPerPage = n);
	};

	const click_handler = () => {
		gotoPage(page - 1);
	};

	const blur_handler = e => {
		let i = parseInt(e.currentTarget.value);
		if (isNaN(i)) return;
		gotoPage(Math.max(1, Math.min(numPages, i)));
	};

	const click_handler_1 = () => {
		gotoPage(page + 1);
	};

	$$self.$$set = $$props => {
		if ('provider' in $$props) $$invalidate(1, provider = $$props.provider);
		if ('actions' in $$props) $$invalidate(2, actions = $$props.actions);
		if ('selected' in $$props) $$invalidate(0, selected = $$props.selected);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*provider*/ 2) {
			$$invalidate(5, itemsPerPage = provider.options.itemsPerPage);
		}

		if ($$self.$$.dirty & /*unsub, provider, total, itemsPerPage, page*/ 1082) {
			{
				unsub();

				$$invalidate(10, unsub = provider.total.subscribe(t => {
					if (t === void 0 || t === 0) {
						$$invalidate(6, numPages = 1);
						$$invalidate(7, start = 0);
						$$invalidate(8, end = 0);
						$$invalidate(4, total = 0);
					} else {
						$$invalidate(6, numPages = Math.ceil(total / itemsPerPage));
						$$invalidate(7, start = (page - 1) * itemsPerPage + 1);
						$$invalidate(8, end = Math.min(total || 0, page * itemsPerPage));
						$$invalidate(4, total = t);
					}
				}));
			}
		}
	};

	return [
		selected,
		provider,
		actions,
		page,
		total,
		itemsPerPage,
		numPages,
		start,
		end,
		gotoPage,
		unsub,
		tableactions_selected_binding,
		selected_handler,
		action_handler,
		change_handler,
		click_handler,
		blur_handler,
		click_handler_1
	];
}

class TableFooter extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$S, create_fragment$S, safe_not_equal, { provider: 1, actions: 2, selected: 0 });
	}
}

/* ../design-system/dist/Table.svelte generated by Svelte v3.59.1 */

function get_each_context$c(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[22] = list[i];
	child_ctx[24] = i;
	return child_ctx;
}

function get_each_context_1$4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[25] = list[i].type;
	child_ctx[26] = list[i].name;
	return child_ctx;
}

function get_each_context_2$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[26] = list[i].name;
	child_ctx[29] = list[i].sortable;
	return child_ctx;
}

// (59:0) {#if $error}
function create_if_block_3$6(ctx) {
	let div;
	let sl_alert;
	let sl_icon;
	let t0;
	let strong;
	let br;
	let t2;
	let t3;

	return {
		c() {
			div = element("div");
			sl_alert = element("sl-alert");
			sl_icon = element("sl-icon");
			t0 = space();
			strong = element("strong");
			strong.textContent = "Table Data Error";
			br = element("br");
			t2 = space();
			t3 = text$1(/*$error*/ ctx[9]);
			set_custom_element_data(sl_icon, "slot", "icon");
			set_custom_element_data(sl_icon, "name", "check2-circle");
			set_custom_element_data(sl_alert, "type", "danger");
			set_custom_element_data(sl_alert, "open", "");
			attr(div, "class", "service-error");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, sl_alert);
			append(sl_alert, sl_icon);
			append(sl_alert, t0);
			append(sl_alert, strong);
			append(sl_alert, br);
			append(sl_alert, t2);
			append(sl_alert, t3);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*$error*/ 512) set_data(t3, /*$error*/ ctx[9]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (72:4) {#if selectable}
function create_if_block_1$g(ctx) {
	let th;
	let if_block = !/*singleSelection*/ ctx[4] && create_if_block_2$9(ctx);

	return {
		c() {
			th = element("th");
			if (if_block) if_block.c();
			attr(th, "class", "svelte-12gp9na");
		},
		m(target, anchor) {
			insert(target, th, anchor);
			if (if_block) if_block.m(th, null);
		},
		p(ctx, dirty) {
			if (!/*singleSelection*/ ctx[4]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2$9(ctx);
					if_block.c();
					if_block.m(th, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(th);
			if (if_block) if_block.d();
		}
	};
}

// (74:6) {#if !singleSelection}
function create_if_block_2$9(ctx) {
	let input;
	let input_checked_value;
	let mounted;
	let dispose;

	return {
		c() {
			input = element("input");
			attr(input, "type", "checkbox");
			input.checked = input_checked_value = /*selected*/ ctx[6].length > 0 && /*selected*/ ctx[6].length === /*$data*/ ctx[10].length;
		},
		m(target, anchor) {
			insert(target, input, anchor);

			if (!mounted) {
				dispose = listen(input, "click", /*selectAll*/ ctx[12]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*selected, $data*/ 1088 && input_checked_value !== (input_checked_value = /*selected*/ ctx[6].length > 0 && /*selected*/ ctx[6].length === /*$data*/ ctx[10].length)) {
				input.checked = input_checked_value;
			}
		},
		d(detaching) {
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (83:4) {#each columns as { name, sortable }}
function create_each_block_2$2(ctx) {
	let tableheadercell;
	let current;

	tableheadercell = new TableHeaderCell({
			props: {
				name: /*name*/ ctx[26],
				sortable: /*sortable*/ ctx[29],
				sorting: /*sorting*/ ctx[7]
			}
		});

	tableheadercell.$on("sort", /*sort*/ ctx[11]);

	return {
		c() {
			create_component(tableheadercell.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tableheadercell, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tableheadercell_changes = {};
			if (dirty[0] & /*columns*/ 1) tableheadercell_changes.name = /*name*/ ctx[26];
			if (dirty[0] & /*columns*/ 1) tableheadercell_changes.sortable = /*sortable*/ ctx[29];
			if (dirty[0] & /*sorting*/ 128) tableheadercell_changes.sorting = /*sorting*/ ctx[7];
			tableheadercell.$set(tableheadercell_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tableheadercell.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tableheadercell.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tableheadercell, detaching);
		}
	};
}

// (91:5) {#if selectable}
function create_if_block$v(ctx) {
	let tablecontentcell;
	let current;

	tablecontentcell = new TableContentCell({
			props: {
				type: "slot",
				$$slots: { default: [create_default_slot$E] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(tablecontentcell.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablecontentcell, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablecontentcell_changes = {};

			if (dirty[0] & /*selected*/ 64 | dirty[1] & /*$$scope*/ 2) {
				tablecontentcell_changes.$$scope = { dirty, ctx };
			}

			tablecontentcell.$set(tablecontentcell_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecontentcell.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecontentcell.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablecontentcell, detaching);
		}
	};
}

// (92:6) <TableContentCell type="slot">
function create_default_slot$E(ctx) {
	let input;
	let input_checked_value;
	let mounted;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[16](/*i*/ ctx[24], ...args);
	}

	return {
		c() {
			input = element("input");
			attr(input, "type", "checkbox");
			input.checked = input_checked_value = /*selected*/ ctx[6].includes(/*i*/ ctx[24]);
		},
		m(target, anchor) {
			insert(target, input, anchor);

			if (!mounted) {
				dispose = listen(input, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*selected*/ 64 && input_checked_value !== (input_checked_value = /*selected*/ ctx[6].includes(/*i*/ ctx[24]))) {
				input.checked = input_checked_value;
			}
		},
		d(detaching) {
			if (detaching) detach(input);
			mounted = false;
			dispose();
		}
	};
}

// (100:5) {#each columns as { type, name }}
function create_each_block_1$4(ctx) {
	let tablecontentcell;
	let current;

	function action_handler(...args) {
		return /*action_handler*/ ctx[17](/*i*/ ctx[24], ...args);
	}

	tablecontentcell = new TableContentCell({
			props: {
				type: /*type*/ ctx[25],
				value: /*item*/ ctx[22][/*name*/ ctx[26]]
			}
		});

	tablecontentcell.$on("action", action_handler);

	return {
		c() {
			create_component(tablecontentcell.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablecontentcell, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const tablecontentcell_changes = {};
			if (dirty[0] & /*columns*/ 1) tablecontentcell_changes.type = /*type*/ ctx[25];
			if (dirty[0] & /*$data, columns*/ 1025) tablecontentcell_changes.value = /*item*/ ctx[22][/*name*/ ctx[26]];
			tablecontentcell.$set(tablecontentcell_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablecontentcell.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablecontentcell.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablecontentcell, detaching);
		}
	};
}

// (89:3) {#each $data as item, i}
function create_each_block$c(ctx) {
	let tr;
	let t0;
	let t1;
	let current;
	let if_block = /*selectable*/ ctx[3] && create_if_block$v(ctx);
	let each_value_1 = /*columns*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1$4(get_each_context_1$4(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			tr = element("tr");
			if (if_block) if_block.c();
			t0 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			attr(tr, "class", "svelte-12gp9na");
		},
		m(target, anchor) {
			insert(target, tr, anchor);
			if (if_block) if_block.m(tr, null);
			append(tr, t0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(tr, null);
				}
			}

			append(tr, t1);
			current = true;
		},
		p(ctx, dirty) {
			if (/*selectable*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*selectable*/ 8) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$v(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(tr, t0);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (dirty[0] & /*columns, $data, propagateAction*/ 17409) {
				each_value_1 = /*columns*/ ctx[0];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$4(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1$4(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(tr, t1);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			transition_out(if_block);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(tr);
			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
		}
	};
}

function create_fragment$R(ctx) {
	let t0;
	let div;
	let table;
	let thead;
	let tr;
	let t1;
	let t2;
	let tbody;
	let t3;
	let tablefooter;
	let updating_selected;
	let current;
	let if_block0 = /*$error*/ ctx[9] && create_if_block_3$6(ctx);
	let if_block1 = /*selectable*/ ctx[3] && create_if_block_1$g(ctx);
	let each_value_2 = /*columns*/ ctx[0];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_1[i] = create_each_block_2$2(get_each_context_2$2(ctx, each_value_2, i));
	}

	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
		each_blocks_1[i] = null;
	});

	let each_value = /*$data*/ ctx[10];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$c(get_each_context$c(ctx, each_value, i));
	}

	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	function tablefooter_selected_binding(value) {
		/*tablefooter_selected_binding*/ ctx[18](value);
	}

	let tablefooter_props = {
		provider: /*provider*/ ctx[1],
		actions: /*actions*/ ctx[2]
	};

	if (/*selected*/ ctx[6] !== void 0) {
		tablefooter_props.selected = /*selected*/ ctx[6];
	}

	tablefooter = new TableFooter({ props: tablefooter_props });
	binding_callbacks.push(() => bind(tablefooter, 'selected', tablefooter_selected_binding));
	tablefooter.$on("action", /*action_handler_1*/ ctx[19]);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			div = element("div");
			table = element("table");
			thead = element("thead");
			tr = element("tr");
			if (if_block1) if_block1.c();
			t1 = space();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t2 = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			create_component(tablefooter.$$.fragment);
			attr(tr, "class", "svelte-12gp9na");
			attr(thead, "class", "svelte-12gp9na");
			attr(tbody, "class", "svelte-12gp9na");
			attr(table, "class", "svelte-12gp9na");
			attr(div, "class", "marcelle table-container svelte-12gp9na");
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			insert(target, div, anchor);
			append(div, table);
			append(table, thead);
			append(thead, tr);
			if (if_block1) if_block1.m(tr, null);
			append(tr, t1);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				if (each_blocks_1[i]) {
					each_blocks_1[i].m(tr, null);
				}
			}

			append(table, t2);
			append(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(tbody, null);
				}
			}

			append(div, t3);
			mount_component(tablefooter, div, null);
			current = true;
		},
		p(ctx, dirty) {
			if (/*$error*/ ctx[9]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3$6(ctx);
					if_block0.c();
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*selectable*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1$g(ctx);
					if_block1.c();
					if_block1.m(tr, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[0] & /*columns, sorting, sort*/ 2177) {
				each_value_2 = /*columns*/ ctx[0];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2$2(ctx, each_value_2, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
						transition_in(each_blocks_1[i], 1);
					} else {
						each_blocks_1[i] = create_each_block_2$2(child_ctx);
						each_blocks_1[i].c();
						transition_in(each_blocks_1[i], 1);
						each_blocks_1[i].m(tr, null);
					}
				}

				group_outros();

				for (i = each_value_2.length; i < each_blocks_1.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty[0] & /*columns, $data, propagateAction, selected, selectOne, selectable*/ 25673) {
				each_value = /*$data*/ ctx[10];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$c(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$c(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(tbody, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out_1(i);
				}

				check_outros();
			}

			const tablefooter_changes = {};
			if (dirty[0] & /*provider*/ 2) tablefooter_changes.provider = /*provider*/ ctx[1];
			if (dirty[0] & /*actions*/ 4) tablefooter_changes.actions = /*actions*/ ctx[2];

			if (!updating_selected && dirty[0] & /*selected*/ 64) {
				updating_selected = true;
				tablefooter_changes.selected = /*selected*/ ctx[6];
				add_flush_callback(() => updating_selected = false);
			}

			tablefooter.$set(tablefooter_changes);
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(tablefooter.$$.fragment, local);
			current = true;
		},
		o(local) {
			each_blocks_1 = each_blocks_1.filter(Boolean);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				transition_out(each_blocks_1[i]);
			}

			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(tablefooter.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div);
			if (if_block1) if_block1.d();
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			destroy_component(tablefooter);
		}
	};
}

function instance$R($$self, $$props, $$invalidate) {
	let data;
	let error;

	let $error,
		$$unsubscribe_error = noop$2,
		$$subscribe_error = () => ($$unsubscribe_error(), $$unsubscribe_error = subscribe(error, $$value => $$invalidate(9, $error = $$value)), error);

	let $data,
		$$unsubscribe_data = noop$2,
		$$subscribe_data = () => ($$unsubscribe_data(), $$unsubscribe_data = subscribe(data, $$value => $$invalidate(10, $data = $$value)), data);

	$$self.$$.on_destroy.push(() => $$unsubscribe_error());
	$$self.$$.on_destroy.push(() => $$unsubscribe_data());
	let { columns } = $$props;
	let { provider } = $$props;
	let { actions = [] } = $$props;
	let { selectable = true } = $$props;
	let { singleSelection = false } = $$props;
	let { selection = [] } = $$props;
	let selected = [];
	const dispatch = createEventDispatcher();
	let sorting = { col: "", ascending: true };

	function sort({ detail }) {
		$$invalidate(7, sorting = detail);
		provider.sort(detail);
	}

	async function dispatchSelection() {
		$$invalidate(15, selection = await Promise.all(selected.map(provider.get.bind(provider))));
		dispatch("selection", selection);
	}

	function selectAll() {
		if (selected.length === get_store_value(data).length) {
			$$invalidate(6, selected = []);
		} else {
			$$invalidate(6, selected = get_store_value(data).map((x, i) => i));
		}

		dispatchSelection();
	}

	function selectOne(index, e) {
		if (singleSelection) {
			$$invalidate(6, selected = e.currentTarget.checked ? [index] : []);
			dispatchSelection();
		} else {
			if (e.currentTarget.checked) {
				if (!selected.includes(index)) {
					$$invalidate(6, selected = selected.concat([index]));
					dispatchSelection();
				}
			} else {
				$$invalidate(6, selected = selected.filter(x => x !== index));
				dispatchSelection();
			}
		}
	}

	async function propagateAction([actionName, sel]) {
		const s = Array.isArray(sel)
		? await Promise.all(sel.map(provider.get.bind(provider)))
		: await provider.get(sel);

		dispatch(actionName, s);
	}

	const click_handler = (i, e) => selectOne(i, e);

	const action_handler = (i, { detail }) => {
		propagateAction([detail, i]);
	};

	function tablefooter_selected_binding(value) {
		selected = value;
		((($$invalidate(6, selected), $$invalidate(15, selection)), $$invalidate(5, data)), $$invalidate(1, provider));
	}

	const action_handler_1 = ({ detail }) => propagateAction(detail);

	$$self.$$set = $$props => {
		if ('columns' in $$props) $$invalidate(0, columns = $$props.columns);
		if ('provider' in $$props) $$invalidate(1, provider = $$props.provider);
		if ('actions' in $$props) $$invalidate(2, actions = $$props.actions);
		if ('selectable' in $$props) $$invalidate(3, selectable = $$props.selectable);
		if ('singleSelection' in $$props) $$invalidate(4, singleSelection = $$props.singleSelection);
		if ('selection' in $$props) $$invalidate(15, selection = $$props.selection);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*provider*/ 2) {
			$$subscribe_data($$invalidate(5, data = provider.data));
		}

		if ($$self.$$.dirty[0] & /*provider*/ 2) {
			$$subscribe_error($$invalidate(8, error = provider.error));
		}

		if ($$self.$$.dirty[0] & /*selection, data*/ 32800) {
			$$invalidate(6, selected = selection.map(x => get_store_value(data).indexOf(x)));
		}
	};

	return [
		columns,
		provider,
		actions,
		selectable,
		singleSelection,
		data,
		selected,
		sorting,
		error,
		$error,
		$data,
		sort,
		selectAll,
		selectOne,
		propagateAction,
		selection,
		click_handler,
		action_handler,
		tablefooter_selected_binding,
		action_handler_1
	];
}

class Table extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$R,
			create_fragment$R,
			safe_not_equal,
			{
				columns: 0,
				provider: 1,
				actions: 2,
				selectable: 3,
				singleSelection: 4,
				selection: 15
			},
			null,
			[-1, -1]
		);
	}
}

/* ../design-system/dist/TabList.svelte generated by Svelte v3.59.1 */

function create_fragment$Q(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[1].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[0], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			attr(div, "class", "flex border-solid border-0 border-b border-gray-200 mb-2");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 1)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[0],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[0])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[0], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$Q($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;

	$$self.$$set = $$props => {
		if ('$$scope' in $$props) $$invalidate(0, $$scope = $$props.$$scope);
	};

	return [$$scope, slots];
}

class TabList extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$Q, create_fragment$Q, safe_not_equal, {});
	}
}

const defaultOptions$1 = { itemsPerPage: 10 };
class TableDataProvider {
    options;
    data = writable([]);
    total = writable(0);
    error = writable(null);
    constructor(options = defaultOptions$1) {
        this.options = { ...defaultOptions$1, ...options };
    }
    paginate(n) {
        this.options.itemsPerPage = n;
        this.update();
    }
    async get(i) {
        const data = get_store_value(this.data);
        if (i >= 0 && i < data.length) {
            return data[i];
        }
        return null;
    }
}

class TableArrayProvider extends TableDataProvider {
    rawData;
    currentPage = 1;
    constructor({ data, ...options }) {
        super(options);
        this.rawData = data;
        this.total.set(data.length);
        this.data.set(this.rawData.slice(0, this.options.itemsPerPage));
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    async update() {
        this.page(this.currentPage);
    }
    async page(i) {
        this.data.set(this.rawData.slice((i - 1) * this.options.itemsPerPage, Math.min(i * this.options.itemsPerPage, this.rawData.length)));
        this.currentPage = i;
    }
    async sort(sorting) {
        this.rawData.sort((x, y) => {
            if (x[sorting.col] > y[sorting.col])
                return sorting.ascending ? 1 : -1;
            if (x[sorting.col] < y[sorting.col])
                return sorting.ascending ? -1 : 1;
            return 0;
        });
        this.page(this.currentPage);
    }
    async delete(i) {
        this.rawData.splice(i, 1);
        this.page(this.currentPage);
        return null;
    }
}

class TableServiceProvider extends TableDataProvider {
    service;
    query;
    transform;
    constructor({ service, columns, transform, ...options }) {
        super(options);
        this.service = service;
        this.transform = transform || {};
        this.query = {
            $sort: {
                updatedAt: -1,
            },
            $limit: this.options.itemsPerPage,
        };
        if (columns) {
            this.query.$select = columns.map((x) => x.name).concat(['id']);
        }
        this.update();
        this.service.on('created', this.update.bind(this));
        this.service.on('patched', this.update.bind(this));
        this.service.on('updated', this.update.bind(this));
        this.service.on('removed', this.update.bind(this));
    }
    paginate(n) {
        super.paginate(n);
        this.query.$limit = this.options.itemsPerPage;
        this.update();
    }
    async update() {
        try {
            const res = (await this.service.find({ query: this.query }));
            const data = res.data.map((x, i) => {
                const z = Object.entries(this.transform)
                    .map(([target, f]) => {
                    try {
                        return { [target]: f(x, i) };
                    }
                    catch (error) {
                        return { [target]: 'transform error' };
                    }
                })
                    .reduce((o, y) => ({ ...o, ...y }), {});
                return { ...x, ...z };
            });
            this.data.set(data);
            this.total.set(res.total);
            this.error.set(null);
        }
        catch (error) {
            this.data.set([]);
            this.total.set(0);
            this.error.set(error);
        }
    }
    async page(i) {
        this.query.$skip = (i - 1) * this.query.$limit;
        this.update();
    }
    async sort(sorting) {
        const { col, ascending } = sorting;
        if (col) {
            this.query.$sort = {
                [col]: ascending ? 1 : -1,
            };
        }
        else {
            delete this.query.$sort;
        }
        this.update();
    }
    async delete(i) {
        const removed = get_store_value(this.data)[i];
        await this.service.remove(removed.id);
        this.update();
        return removed;
    }
}

/* ../design-system/dist/ViewContainer.svelte generated by Svelte v3.59.1 */

function create_if_block_1$f(ctx) {
	let div;
	let progress_1;
	let current;

	progress_1 = new Progress({
			props: {
				progress: /*progress*/ ctx[2],
				thin: true
			}
		});

	return {
		c() {
			div = element("div");
			create_component(progress_1.$$.fragment);
			attr(div, "class", "absolute top-0 left-0 right-0");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(progress_1, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const progress_1_changes = {};
			if (dirty & /*progress*/ 4) progress_1_changes.progress = /*progress*/ ctx[2];
			progress_1.$set(progress_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(progress_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(progress_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(progress_1);
		}
	};
}

// (15:2) {#if loading}
function create_if_block$u(ctx) {
	let spinner;
	let current;
	spinner = new Spinner({});

	return {
		c() {
			create_component(spinner.$$.fragment);
		},
		m(target, anchor) {
			mount_component(spinner, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(spinner.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(spinner.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(spinner, detaching);
		}
	};
}

function create_fragment$P(ctx) {
	let div;
	let t0;
	let span;
	let t1;
	let t2;
	let t3;
	let current;
	let if_block0 = /*progress*/ ctx[2] !== false && create_if_block_1$f(ctx);
	let if_block1 = /*loading*/ ctx[1] && create_if_block$u();
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			span = element("span");
			t1 = text$1(/*title*/ ctx[0]);
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			if (default_slot) default_slot.c();
			attr(span, "class", "card-title");
			attr(div, "class", "card-container svelte-xnhseh");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			append(div, span);
			append(span, t1);
			append(div, t2);
			if (if_block1) if_block1.m(div, null);
			append(div, t3);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (/*progress*/ ctx[2] !== false) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*progress*/ 4) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$f(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*title*/ 1) set_data(t1, /*title*/ ctx[0]);

			if (/*loading*/ ctx[1]) {
				if (if_block1) {
					if (dirty & /*loading*/ 2) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$u();
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t3);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[3],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[3])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[3], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance$P($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { title } = $$props;
	let { loading = false } = $$props;
	let { progress = false } = $$props;

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('loading' in $$props) $$invalidate(1, loading = $$props.loading);
		if ('progress' in $$props) $$invalidate(2, progress = $$props.progress);
		if ('$$scope' in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	return [title, loading, progress, $$scope, slots];
}

class ViewContainer extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$P, create_fragment$P, safe_not_equal, { title: 0, loading: 1, progress: 2 });
	}
}

let notificationContainer;
let app;
function notification({ title, message, duration = 3000, type = 'default', }) {
    if (!notificationContainer) {
        notificationContainer = document.createElement('div');
        notificationContainer.id = 'notification-container';
        document.body.appendChild(notificationContainer);
        app = new Notification({
            target: notificationContainer,
        });
    }
    app === null || app === void 0 ? void 0 : app.add({ title, message, duration, type });
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */


function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function noop$1() {
    // Nothing here
}

var _Stream_hold, _Stream_running, _Stream_startPromise;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function dummySubscriber(value) {
    // Do nothing
}
const scheduler = newDefaultScheduler();
function isMostStream(s) {
    return s && typeof s === 'object' && s.run !== undefined;
}
function isStream(s) {
    return (s &&
        typeof s === 'object' &&
        s.run !== undefined &&
        s.id !== undefined);
}
class Stream {
    constructor(s, hold = undefined) {
        this.id = Stream.nextId++;
        this.subscribers = [];
        this.value = undefined;
        this.ready = false;
        _Stream_hold.set(this, void 0);
        _Stream_running.set(this, false);
        _Stream_startPromise.set(this, void 0);
        __classPrivateFieldSet(this, _Stream_hold, !!hold, "f");
        const [stopStream, stopEvents] = createAdapter();
        const [induce, events] = createAdapter();
        this.stopStream = stopStream;
        this.set = (v) => {
            this.value = v;
            // Following line is not working for derived streams...
            // if (!hold || this.ready) induce(v);
            induce(v);
        };
        let stream;
        if (isStream(s)) {
            stream = s;
            if (hold === undefined) {
                __classPrivateFieldSet(this, _Stream_hold, s.holding, "f");
            }
            if (s.holding) {
                this.value = s.value;
            }
        }
        else if (isMostStream(s)) {
            stream = s;
        }
        else {
            stream = most.map(() => this.value, most.now(s));
            this.value = s;
        }
        this.stream = most.multicast(most.tap(this.runListeners.bind(this), most.until(stopEvents, most.merge(stream, events))));
    }
    get() {
        // if (!this.#hold) {
        //   throw new Error('Cannot get value of a Stream if it was not instantiated with hold=true');
        // }
        return this.value;
    }
    get holding() {
        return __classPrivateFieldGet(this, _Stream_hold, "f");
    }
    run(sink, s) {
        return this.stream.run(sink, s);
    }
    runListeners(value) {
        this.value = value;
        for (const listener of this.subscribers) {
            listener(value);
        }
    }
    subscribe(run = dummySubscriber, invalidate = noop$1) {
        if (__classPrivateFieldGet(this, _Stream_hold, "f") && __classPrivateFieldGet(this, _Stream_running, "f")) {
            run(this.value);
        }
        const subscriber = (x) => {
            invalidate();
            run(x);
        };
        this.subscribers.push(subscriber);
        if (!__classPrivateFieldGet(this, _Stream_running, "f")) {
            this.start();
        }
        return () => {
            const index = this.subscribers.indexOf(subscriber);
            if (index !== -1)
                this.subscribers.splice(index, 1);
        };
    }
    async start() {
        if (!__classPrivateFieldGet(this, _Stream_running, "f")) {
            Stream.numActive++;
            // console.log('active streams: ', Stream.numActive);
            most.runEffects(this.stream, scheduler).then(() => {
                Stream.numActive--;
                // console.log('active streams: ', Stream.numActive);
            });
            __classPrivateFieldSet(this, _Stream_running, true, "f");
            __classPrivateFieldSet(this, _Stream_startPromise, new Promise((resolve, reject) => {
                asap({
                    run: () => {
                        this.ready = true;
                        resolve();
                    },
                    error(e) {
                        reject(e);
                    },
                    dispose() {
                        // nothing here.
                    },
                }, scheduler);
            }), "f");
        }
        return __classPrivateFieldGet(this, _Stream_startPromise, "f");
    }
    stop() {
        this.stopStream(undefined);
        __classPrivateFieldSet(this, _Stream_running, false, "f");
    }
    hold(h = true) {
        __classPrivateFieldSet(this, _Stream_hold, h, "f");
        return this;
    }
    thru(f) {
        return new Stream(f(this));
    }
    // ------------------------------------
    // Wrap most operators
    // ------------------------------------
    startWith(x) {
        const s = new Stream(most.startWith(x, this));
        if (this.holding) {
            s.value = x;
        }
        return s;
    }
    continueWith(f) {
        const s = new Stream(most.continueWith(f, this));
        if (this.holding) {
            s.value = this.value;
        }
        return s;
    }
    map(f) {
        const s = new Stream(most.map(f, this));
        if (this.holding) {
            s.value = f(this.value);
        }
        return s;
    }
    constant(x) {
        const s = new Stream(most.constant(x, this));
        if (this.holding) {
            s.value = x;
        }
        return s;
    }
    tap(f) {
        const s = new Stream(most.tap(f, this));
        if (this.holding) {
            s.value = this.value;
        }
        return s;
    }
    ap(fs) {
        const s = new Stream(most.ap(fs, this));
        if (this.holding && fs.holding) {
            s.value = fs.get()(this.value);
        }
        return s;
    }
    scan(f, initial) {
        const s = new Stream(most.scan(f, initial, this));
        if (this.holding) {
            s.value = initial;
        }
        return s;
    }
    loop(stepper, seed) {
        return new Stream(most.loop(stepper, seed, this));
    }
    withItems(items) {
        return new Stream(most.withItems(items, this));
    }
    zipItems(f, items) {
        return new Stream(most.zipItems(f, items, this));
    }
    switchLatest() {
        return new Stream(most.switchLatest(this));
    }
    join() {
        return new Stream(most.join(this));
    }
    chain(f) {
        return new Stream(most.chain(f, this));
    }
    concatMap(f) {
        return new Stream(most.concatMap(f, this));
    }
    mergeConcurrently(concurrency) {
        return new Stream(most.mergeConcurrently(concurrency, this));
    }
    mergeMapConcurrently(f, concurrency) {
        return new Stream(most.mergeMapConcurrently(f, concurrency, this));
    }
    merge(stream1) {
        const s = new Stream(most.merge(stream1, this));
        if (this.holding) {
            s.value = this.value;
        }
        return s;
    }
    combine(f, stream1) {
        const s = new Stream(most.combine(f, stream1, this));
        if (this.holding) {
            s.value = f(stream1.value, this.value);
        }
        return s;
    }
    zip(f, stream1) {
        const s = new Stream(most.zip(f, stream1, this));
        if (this.holding) {
            s.value = f(stream1.value, this.value);
        }
        return s;
    }
    resample(sampler) {
        return new Stream(most.sample(this, sampler));
    }
    sample(values) {
        return new Stream(most.sample(values, this));
    }
    snapshot(f, values) {
        return new Stream(most.snapshot(f, values, this));
    }
    filter(p) {
        const s = new Stream(most.filter(p, this));
        if (this.holding && p(this.value)) {
            s.value = this.value;
        }
        return s;
    }
    skipRepeats() {
        const s = new Stream(most.skipRepeats(this));
        if (this.holding) {
            s.value = this.value;
        }
        return s;
    }
    skipRepeatsWith(equals) {
        return new Stream(most.skipRepeatsWith(equals, this));
    }
    slice(start, end) {
        return new Stream(most.slice(start, end, this));
    }
    take(n) {
        return new Stream(most.take(n, this));
    }
    skip(n) {
        return new Stream(most.skip(n, this));
    }
    takeWhile(p) {
        return new Stream(most.takeWhile(p, this));
    }
    skipWhile(p) {
        return new Stream(most.skipWhile(p, this));
    }
    skipAfter(p) {
        return new Stream(most.skipAfter(p, this));
    }
    until(endSignal) {
        return new Stream(most.until(endSignal, this));
    }
    since(startSignal) {
        return new Stream(most.since(startSignal, this));
    }
    during(timeWindow) {
        return new Stream(most.during(timeWindow, this));
    }
    delay(delayTime) {
        return new Stream(most.delay(delayTime, this));
    }
    withLocalTime(origin) {
        return new Stream(most.withLocalTime(origin, this));
    }
    throttle(period) {
        return new Stream(most.throttle(period, this));
    }
    debounce(period) {
        return new Stream(most.debounce(period, this));
    }
    awaitPromises() {
        return new Stream(most.awaitPromises(this));
    }
    recoverWith(f) {
        return new Stream(most.recoverWith(f, this));
    }
    static empty() {
        return new Stream(most.empty());
    }
    static never() {
        return new Stream(most.never());
    }
    static now(x) {
        return new Stream(most.now(x));
    }
    static at(t, x) {
        return new Stream(most.at(t, x));
    }
    static periodic(period) {
        return new Stream(most.periodic(period));
    }
    static throwError(e) {
        return new Stream(most.throwError(e));
    }
}
_Stream_hold = new WeakMap(), _Stream_running = new WeakMap(), _Stream_startPromise = new WeakMap();
Stream.nextId = 0;
Stream.numActive = 0;
function createStream(s, hold = false) {
    return new Stream(s, hold);
}

var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Debug"] = 0] = "Debug";
    LogLevel[LogLevel["Info"] = 1] = "Info";
    LogLevel[LogLevel["Warning"] = 2] = "Warning";
    LogLevel[LogLevel["Error"] = 3] = "Error";
})(LogLevel || (LogLevel = {}));
const $log = new Stream(never());
const logger = {
    log(...messages) {
        // eslint-disable-next-line no-console
        console.log(...messages);
        $log.set([
            LogLevel.Info,
            messages
                .filter((x) => x !== undefined)
                .map((x) => x.toString())
                .join(' '),
        ]);
    },
    debug(...messages) {
        $log.set([
            LogLevel.Debug,
            messages
                .filter((x) => x !== undefined)
                .map((x) => x.toString())
                .join(' '),
        ]);
    },
    info(...messages) {
        this.log(...messages);
    },
    warning(...messages) {
        $log.set([
            LogLevel.Warning,
            messages
                .filter((x) => x !== undefined)
                .map((x) => x.toString())
                .join(' '),
        ]);
    },
    error(...messages) {
        // eslint-disable-next-line no-console
        console.error(...messages);
        $log.set([
            LogLevel.Error,
            messages
                .filter((x) => x !== undefined)
                .map((x) => x.toString())
                .join(' '),
        ]);
    },
};
function getLogStream() {
    return $log;
}

function Catch(target, propertyKey, descriptor) {
    const originalMethod = descriptor.value;
    // eslint-disable-next-line no-param-reassign
    descriptor.value = function safeMethod(...args) {
        try {
            return originalMethod.apply(this, args);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }
        catch (error) {
            logger.error(error);
            notification({
                title: error.name,
                message: error.message,
                type: 'danger',
            });
            return error;
        }
    };
    return descriptor;
}
class TrainingError extends Error {
    constructor(message) {
        super(message);
        this.name = 'Training Error';
    }
}
function throwError(error, { duration = 3000 } = {}) {
    logger.error(`${error.name}: ${error.message}`, error);
    notification({
        title: error.name,
        message: error.message,
        type: 'danger',
        duration,
    });
}

/*
 * This is a modification of Itiriri-Async:
 * https://github.com/labs42io/itiriri-async/
 */
function filter(source, predicate) {
    return async function* () {
        let index = 0;
        for await (const element of source()) {
            if (predicate(element, index++)) {
                yield await element;
            }
        }
    };
}
function map(source, transform) {
    return async function* () {
        let index = 0;
        for await (const element of source()) {
            yield await transform(element, index++);
        }
    };
}
function skip(source, count) {
    if (count < 0) {
        throw Error('Negative count is not supported, use await and sync iterator instead.');
    }
    return async function* () {
        yield* filter(source, (_, index) => index >= count)();
    };
}
function take(source, count) {
    if (count < 0) {
        throw Error('Negative count is not supported, use await and sync iterator instead.');
    }
    return async function* () {
        let n = count;
        for await (const element of source()) {
            if (n-- === 0)
                return;
            yield await element;
        }
    };
}
function concat(left, right) {
    return async function* () {
        yield* await left();
        yield* await right;
    };
}
async function forEach(source, action) {
    let index = 0;
    for await (const element of source()) {
        action(element, index++);
    }
}
async function toArray(source) {
    const result = [];
    for await (const element of source()) {
        result.push(element);
    }
    return result;
}

/*
 * This is a modification of Itiriri-Async:
 * https://github.com/labs42io/itiriri-async/
 */
function zip(source, others) {
    return async function* () {
        const rightIterator = others()[Symbol.asyncIterator]();
        for await (const leftValue of source()) {
            const right = await rightIterator.next();
            if (right.done)
                return;
            yield [leftValue, right.value];
        }
    };
}

/*
 * This is a modification of Itiriri-Async:
 * https://github.com/labs42io/itiriri-async/
 */
async function reduce(source, callback, initialValue) {
    let [index, accumulator] = [-1, initialValue];
    for await (const element of source()) {
        accumulator =
            ++index === 0 && initialValue === undefined ? element : callback(accumulator, element, index);
    }
    if (initialValue === undefined && index === -1) {
        throw new Error('Sequence contains no elements.');
    }
    return accumulator;
}

/*
 * This is a modification of Itiriri-Async:
 * https://github.com/labs42io/itiriri-async/
 */
function isIterable$1(item) {
    return typeof item[Symbol.iterator] === 'function';
}
function isAsyncIterable(item) {
    return typeof item[Symbol.asyncIterator] === 'function';
}
class LazyIterable {
    constructor(source) {
        this.source = source;
    }
    [Symbol.asyncIterator]() {
        return this.source()[Symbol.asyncIterator]();
    }
    entries() {
        return new LazyIterable(map(this.source, (elem, idx) => [idx, elem]));
    }
    keys() {
        return new LazyIterable(map(this.source, (_, idx) => idx));
    }
    values() {
        return new LazyIterable(this.source);
    }
    forEach(action) {
        return forEach(this.source, action);
    }
    concat(other) {
        if (isIterable$1(other)) {
            return new LazyIterable(concat(this.source, (async function* (e) {
                yield* e;
            })(other)));
        }
        return isAsyncIterable(other)
            ? new LazyIterable(concat(this.source, other))
            : new LazyIterable(concat(this.source, (async function* (e) {
                yield e;
            })(other)));
    }
    reduce(callback, initialValue) {
        return reduce(this.source, callback, initialValue);
    }
    filter(predicate) {
        return new LazyIterable(filter(this.source, predicate));
    }
    take(count) {
        return new LazyIterable(take(this.source, count));
    }
    skip(count) {
        return new LazyIterable(skip(this.source, count));
    }
    map(selector) {
        return new LazyIterable(map(this.source, selector));
    }
    zip(other) {
        return new LazyIterable(zip(this.source, other));
    }
    toArray() {
        return toArray(this.source);
    }
}

class ArrayIterable extends LazyIterable {
    constructor(array) {
        super(async function* () {
            for (const x of array) {
                yield x;
            }
        });
    }
}
function iterableFromArray(arr) {
    return new ArrayIterable(arr);
}

/**
 * Simple object check.
 * @param item
 * @returns {boolean}
 */
function isObject(item) {
    return item && typeof item === 'object' && !Array.isArray(item);
}
/**
 * Deep merge two objects.
 * @param target
 * @param ...sources
 */
function mergeDeep(target, ...sources) {
    if (!sources.length)
        return target;
    const source = sources.shift();
    const result = { ...target };
    if (isObject(target) && isObject(source)) {
        // eslint-disable-next-line no-restricted-syntax
        for (const key in source) {
            if (isObject(source[key])) {
                if (!result[key])
                    Object.assign(result, { [key]: {} });
                result[key] = mergeDeep(result[key], source[key]);
            }
            else {
                Object.assign(result, { [key]: source[key] });
            }
        }
    }
    return mergeDeep(result, ...sources);
}

if (window) {
    window.onerror = (message) => {
        if (typeof message === 'string') {
            notification({
                title: 'An error occurred',
                message,
                type: 'danger',
            });
        }
    };
    window.addEventListener('unhandledrejection', (event) => {
        notification({
            title: 'An error occurred',
            message: event.reason,
            type: 'danger',
        });
    });
}

let nextId = 0;
let Component$1 = class Component {
    constructor() {
        this.id = `component-${String(nextId++).padStart(3, '0')}`;
        this.$$ = {
            streams: [],
            app: undefined,
        };
        autoBind(this);
    }
    destroy() {
        var _a;
        (_a = this.$$.app) === null || _a === void 0 ? void 0 : _a.$destroy();
        this.$$.app = undefined;
    }
    start() {
        this.$$.streams = Object.entries(this)
            .filter(([x, s]) => x[0] === '$' && isStream(s))
            .map(([, stream]) => {
            stream.start();
            return stream;
        });
    }
    stop() {
        for (const s of this.$$.streams) {
            s.stop();
        }
    }
    dispose() {
        this.destroy();
        this.stop();
    }
};

/* eslint-disable no-bitwise */
let oidIndex = ~~(Math.random() * 0xffffff);
const MACHINE_ID = parseInt((Math.random() * 0xffffff).toString(), 10);
function genId() {
    const time = ~~(Date.now() / 1000);
    // Use pid
    const pid = Math.floor(Math.random() * 100000);
    oidIndex = (oidIndex + 1) % 0xffffff;
    const inc = oidIndex;
    // Buffer used
    const buffer = new Uint8Array(12);
    // Encode time
    buffer[3] = time & 0xff;
    buffer[2] = (time >> 8) & 0xff;
    buffer[1] = (time >> 16) & 0xff;
    buffer[0] = (time >> 24) & 0xff;
    // Encode machine
    buffer[6] = MACHINE_ID & 0xff;
    buffer[5] = (MACHINE_ID >> 8) & 0xff;
    buffer[4] = (MACHINE_ID >> 16) & 0xff;
    // Encode pid
    buffer[8] = pid & 0xff;
    buffer[7] = (pid >> 8) & 0xff;
    // Encode index
    buffer[11] = inc & 0xff;
    buffer[10] = (inc >> 8) & 0xff;
    buffer[9] = (inc >> 16) & 0xff;
    // Return the buffer
    return buffer.reduce((memo, i) => memo + `0${i.toString(16)}`.slice(-2), '');
}

const canvas2 = document.createElement('canvas');
const ctx2 = canvas2.getContext('2d');
const image2 = new Image();
function convertURIToImageData(URI) {
    return new Promise((resolve, reject) => {
        if (!URI) {
            reject();
        }
        else {
            image2.addEventListener('load', () => {
                canvas2.width = image2.width;
                canvas2.height = image2.height;
                ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.drawImage(image2, 0, 0, canvas2.width, canvas2.height);
                resolve(ctx2 === null || ctx2 === void 0 ? void 0 : ctx2.getImageData(0, 0, canvas2.width, canvas2.height));
            }, false);
            image2.src = URI;
        }
    });
}

function addObjectId(context) {
    const { data, service } = context;
    context.data = {
        [service.id]: genId(),
        ...data,
    };
    return context;
}
function renameIdField(context) {
    const { result, params } = context;
    if (result) {
        if (result._id) {
            result.id = result._id;
            delete result._id;
        }
        else if (result.total && Array.isArray(result.data)) {
            for (const [i, x] of result.data.entries()) {
                if (x._id) {
                    result.data[i].id = result.data[i]._id;
                    delete result.data[i]._id;
                }
            }
        }
    }
    else if (params && params.query) {
        if (params.query.id) {
            context.params.query._id = context.params.query.id;
            delete context.params.query.id;
        }
        if (params.query.$select &&
            params.query.$select.includes('id') &&
            !params.query.$select.includes('_id')) {
            context.params.query.$select.push('_id');
        }
    }
    return context;
}
function createDate(context) {
    if (!context.data) {
        context.data = {};
    }
    context.data.createdAt = new Date();
    context.data.updatedAt = context.data.createdAt;
    return context;
}
function updateDate(context) {
    if (!context.data || !context.data.createdAt) {
        return context;
    }
    context.data.updatedAt = new Date();
    return context;
}
function addScope(key, value) {
    return (context) => {
        const { data } = context;
        context.data = {
            [key]: value,
            ...data,
        };
        return context;
    };
}
function limitToScope(key, value) {
    return (context) => {
        context.params = context.params || {};
        context.params.query = context.params.query || {};
        context.params.query[key] = value;
        return context;
    };
}
const canvas1 = document.createElement('canvas');
const ctx1 = canvas1.getContext('2d');
async function imageData2DataURL(context) {
    const { data } = context;
    for (const [key, val] of Object.entries(data)) {
        if (val instanceof ImageData) {
            const w = val.width;
            const h = val.height;
            canvas1.width = w;
            canvas1.height = h;
            ctx1.putImageData(val, 0, 0); // synchronous
            context.data[key] = canvas1.toDataURL('image/jpeg');
        }
    }
    return context;
}
async function dataURL2ImageData(context) {
    if (!context.result)
        return context;
    const { result } = context;
    const hasImageData = (data) => data && typeof data === 'string' && data.slice(0, 22) === 'data:image/jpeg;base64';
    if (result._id) {
        for (const [key, val] of Object.entries(result).filter(([k]) => k !== 'thumbnail')) {
            if (hasImageData(val)) {
                result[key] = await convertURIToImageData(val);
            }
        }
    }
    else if (result.total && Array.isArray(result.data)) {
        for (const [i, v] of result.data.entries()) {
            for (const [key, val] of Object.entries(v).filter(([k]) => k !== 'thumbnail')) {
                if (hasImageData(val)) {
                    result.data[i][key] = await convertURIToImageData(val);
                }
            }
        }
    }
    return context;
}
async function findDistinct(context) {
    var _a, _b;
    if (!((_b = (_a = context.params) === null || _a === void 0 ? void 0 : _a.query) === null || _b === void 0 ? void 0 : _b.$distinct) || context.type !== 'before' || context.method !== 'find') {
        return context;
    }
    const { $distinct, ...query } = context.params.query;
    query.$select = [$distinct];
    query.$skip = 0;
    let tot = 1;
    const distinct = new Set();
    while (query.$skip < tot) {
        const res = (await context.service.find({ query }));
        for (const x of res.data) {
            distinct.add(x[$distinct]);
        }
        query.$skip += res.limit;
        tot = res.total;
    }
    context.result = Array.from(distinct);
    return context;
}

/* src/core/data-store/Login.svelte generated by Svelte v3.59.1 */

function create_else_block_2(ctx) {
	let t;

	return {
		c() {
			t = text$1("Register");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (39:8) {#if mode === 'login'}
function create_if_block_3$5(ctx) {
	let t;

	return {
		c() {
			t = text$1("Log In");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (43:4) {#if loginError}
function create_if_block_2$8(ctx) {
	let div;
	let span0;
	let t0;
	let span1;
	let b;
	let t2;
	let t3;
	let t4;
	let button;

	return {
		c() {
			div = element("div");
			span0 = element("span");
			span0.innerHTML = `<i class="fas fa-bell"></i>`;
			t0 = space();
			span1 = element("span");
			b = element("b");
			b.textContent = "Login Error";
			t2 = space();
			t3 = text$1(/*loginError*/ ctx[1]);
			t4 = space();
			button = element("button");
			button.innerHTML = `<span>×</span>`;
			attr(span0, "class", "text-xl inline-block mr-5 align-middle");
			attr(b, "class", "capitalize");
			attr(span1, "class", "inline-block align-middle mr-8");
			attr(button, "class", "absolute bg-transparent text-2xl font-semibold leading-none right-0 top-0 mt-4 mr-6 outline-none focus:outline-none");
			attr(div, "class", "text-white px-6 py-4 border-0 rounded relative mb-4 bg-red-500");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span0);
			append(div, t0);
			append(div, span1);
			append(span1, b);
			append(span1, t2);
			append(span1, t3);
			append(div, t4);
			append(div, button);
		},
		p(ctx, dirty) {
			if (dirty & /*loginError*/ 2) set_data(t3, /*loginError*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (90:38) {:else}
function create_else_block_1$1(ctx) {
	let t;

	return {
		c() {
			t = text$1("Register");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (90:10) {#if mode === 'login'}
function create_if_block_1$e(ctx) {
	let t;

	return {
		c() {
			t = text$1("Log In");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (98:6) {:else}
function create_else_block$j(ctx) {
	let t0;
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			t0 = text$1("Already have an account?\n        ");
			button = element("button");
			button.textContent = "Log In";
			attr(button, "class", "text-blue-500");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*toggleMode*/ ctx[2]);
				mounted = true;
			}
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (95:6) {#if mode === 'login'}
function create_if_block$t(ctx) {
	let t0;
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			t0 = text$1("Don't have an account?\n        ");
			button = element("button");
			button.textContent = "Register Here";
			attr(button, "class", "text-blue-500");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*toggleMode*/ ctx[2]);
				mounted = true;
			}
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (35:0) <Modal>
function create_default_slot$D(ctx) {
	let div4;
	let div0;
	let h2;
	let t0;
	let p0;
	let t2;
	let t3;
	let form;
	let div1;
	let t6;
	let div2;
	let t9;
	let div3;
	let button;
	let t10;
	let p1;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*mode*/ ctx[0] === 'login') return create_if_block_3$5;
		return create_else_block_2;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*loginError*/ ctx[1] && create_if_block_2$8(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*mode*/ ctx[0] === 'login') return create_if_block_1$e;
		return create_else_block_1$1;
	}

	let current_block_type_1 = select_block_type_1(ctx);
	let if_block2 = current_block_type_1(ctx);

	function select_block_type_2(ctx, dirty) {
		if (/*mode*/ ctx[0] === 'login') return create_if_block$t;
		return create_else_block$j;
	}

	let current_block_type_2 = select_block_type_2(ctx);
	let if_block3 = current_block_type_2(ctx);

	return {
		c() {
			div4 = element("div");
			div0 = element("div");
			h2 = element("h2");
			if_block0.c();
			t0 = space();
			p0 = element("p");
			p0.textContent = "This Marcelle application requires authentication.";
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			form = element("form");
			div1 = element("div");

			div1.innerHTML = `<label class="block uppercase text-gray-700 text-xs font-bold mb-2" for="grid-password">Email</label> 
        <input type="email" name="email" class="bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500" placeholder="Email" style="transition: all 0.15s ease 0s;"/>`;

			t6 = space();
			div2 = element("div");

			div2.innerHTML = `<label class="block uppercase text-gray-700 text-xs font-bold mb-2" for="grid-password">Password</label> 
        <input type="password" name="password" class="bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500" placeholder="Password" style="transition: all 0.15s ease 0s;"/>`;

			t9 = space();
			div3 = element("div");
			button = element("button");
			if_block2.c();
			t10 = space();
			p1 = element("p");
			if_block3.c();
			attr(h2, "class", "text-xl");
			attr(p0, "class", "text-gray-600");
			attr(div0, "class", "p-4 text-center");
			attr(div1, "class", "relative w-full mb-3");
			attr(div2, "class", "relative w-full mb-3");
			attr(button, "class", "bg-gray-900 text-white active:bg-gray-700 text-sm font-bold uppercase px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1 w-full");
			attr(button, "type", "submit");
			set_style(button, "transition", "all 0.15s ease 0s");
			attr(div3, "class", "text-center mt-6");
			attr(p1, "class", "my-4");
			attr(div4, "class", "marcelle p-12");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div0);
			append(div0, h2);
			if_block0.m(h2, null);
			append(div0, t0);
			append(div0, p0);
			append(div4, t2);
			if (if_block1) if_block1.m(div4, null);
			append(div4, t3);
			append(div4, form);
			append(form, div1);
			append(form, t6);
			append(form, div2);
			append(form, t9);
			append(form, div3);
			append(div3, button);
			if_block2.m(button, null);
			append(div4, t10);
			append(div4, p1);
			if_block3.m(p1, null);

			if (!mounted) {
				dispose = listen(form, "submit", prevent_default(/*submit_handler*/ ctx[7]));
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(h2, null);
				}
			}

			if (/*loginError*/ ctx[1]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_2$8(ctx);
					if_block1.c();
					if_block1.m(div4, t3);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (current_block_type_1 !== (current_block_type_1 = select_block_type_1(ctx))) {
				if_block2.d(1);
				if_block2 = current_block_type_1(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(button, null);
				}
			}

			if (current_block_type_2 === (current_block_type_2 = select_block_type_2(ctx)) && if_block3) {
				if_block3.p(ctx, dirty);
			} else {
				if_block3.d(1);
				if_block3 = current_block_type_2(ctx);

				if (if_block3) {
					if_block3.c();
					if_block3.m(p1, null);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(div4);
			if_block0.d();
			if (if_block1) if_block1.d();
			if_block2.d();
			if_block3.d();
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$O(ctx) {
	let modal;
	let current;

	modal = new Modal({
			props: {
				$$slots: { default: [create_default_slot$D] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(modal.$$.fragment);
		},
		m(target, anchor) {
			mount_component(modal, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const modal_changes = {};

			if (dirty & /*$$scope, mode, loginError*/ 515) {
				modal_changes.$$scope = { dirty, ctx };
			}

			modal.$set(modal_changes);
		},
		i(local) {
			if (current) return;
			transition_in(modal.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(modal.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(modal, detaching);
		}
	};
}

function instance$O($$self, $$props, $$invalidate) {
	const dispatch = createEventDispatcher();
	let { dataStore } = $$props;
	let { mode = 'login' } = $$props;
	let loginError;

	function toggleMode() {
		$$invalidate(0, mode = mode === 'login' ? 'register' : 'login');
	}

	function terminate(user) {
		dispatch('terminate', user);
	}

	async function login(e) {
		const data = new FormData(e.target);

		try {
			const user = await dataStore.login(data.get('email'), data.get('password'));
			terminate(user);
		} catch(error) {
			$$invalidate(1, loginError = error);
		}
	}

	async function signup(e) {
		const data = new FormData(e.target);

		try {
			const user = await dataStore.signup(data.get('email'), data.get('password'));
			terminate(user);
		} catch(error) {
			terminate(null);
		}
	}

	const submit_handler = e => mode === 'login' ? login(e) : signup(e);

	$$self.$$set = $$props => {
		if ('dataStore' in $$props) $$invalidate(5, dataStore = $$props.dataStore);
		if ('mode' in $$props) $$invalidate(0, mode = $$props.mode);
	};

	return [
		mode,
		loginError,
		toggleMode,
		login,
		signup,
		dataStore,
		terminate,
		submit_handler
	];
}

class Login extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$O, create_fragment$O, safe_not_equal, { dataStore: 5, mode: 0, terminate: 6 });
	}

	get terminate() {
		return this.$$.ctx[6];
	}
}

class ServiceIterable extends LazyIterable {
    constructor(service, params = {}) {
        super(async function* () {
            const p = { query: {}, skip: 0, take: -1, ...params };
            const take = p.take;
            let took = 0;
            let buffer = [];
            const nextQuery = {
                ...p.query,
                $skip: p.skip,
                $limit: 10,
            };
            // eslint-disable-next-line no-constant-condition
            while (true) {
                try {
                    if (take > 0 && took >= take) {
                        return;
                    }
                    took++;
                    if (buffer.length > 0) {
                        const value = buffer.shift();
                        yield value;
                    }
                    else {
                        const found = (await service.find({ query: nextQuery }));
                        nextQuery.$skip = found.skip + found.limit;
                        buffer = found.data;
                        if (buffer.length > 0) {
                            const value = buffer.shift();
                            yield value;
                        }
                        else {
                            return;
                        }
                    }
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                }
                catch (e) {
                    // Modify the error message but leave the stack trace intact
                    e.message = `Error thrown while iterating through a service: ${e.message}`;
                    throw e;
                }
            }
        });
        this.service = service;
        this.params = { query: {}, skip: 0, take: -1, ...params };
    }
    skip(n) {
        return new ServiceIterable(this.service, { ...this.params, skip: n });
    }
    take(n) {
        return new ServiceIterable(this.service, { ...this.params, take: n });
    }
    select(fields) {
        const p = structuredClone(this.params);
        // const p = cloneDeep(this.params); !!! Initially from LODASH
        p.query.$select = fields;
        return new ServiceIterable(this.service, p);
    }
    query(q) {
        return new ServiceIterable(this.service, mergeDeep(this.params, { query: q }));
    }
}
function iterableFromService(service) {
    return new ServiceIterable(service);
}

var _DataStore_initPromise, _DataStore_connectPromise, _DataStore_authenticationPromise, _DataStore_authenticating, _DataStore_createService;
function isValidUrl(str) {
    try {
        // eslint-disable-next-line no-new
        new URL(str);
    }
    catch (_) {
        return false;
    }
    return true;
}
var DataStoreBackend;
(function (DataStoreBackend) {
    DataStoreBackend[DataStoreBackend["Memory"] = 0] = "Memory";
    DataStoreBackend[DataStoreBackend["LocalStorage"] = 1] = "LocalStorage";
    DataStoreBackend[DataStoreBackend["Remote"] = 2] = "Remote";
})(DataStoreBackend || (DataStoreBackend = {}));
class DataStore {
    constructor(location = 'memory') {
        this.requiresAuth = false;
        this.apiPrefix = '';
        this.$services = new Stream([], true);
        _DataStore_initPromise.set(this, void 0);
        _DataStore_connectPromise.set(this, void 0);
        _DataStore_authenticationPromise.set(this, Promise.resolve());
        _DataStore_authenticating.set(this, false);
        _DataStore_createService.set(this, noop$1);
        this.feathers = feathers();
        this.location = location;
        if (isValidUrl(location)) {
            this.backend = DataStoreBackend.Remote;
            const locUrl = new URL(location);
            const host = locUrl.host;
            this.apiPrefix = locUrl.pathname.replace(/\/$/, '');
            const socket = io(host, {
                transports: ['websocket'],
                reconnectionAttempts: 5,
                path: this.apiPrefix + '/socket.io',
            });
            this.feathers.configure(socketio(socket, { timeout: 15000 }));
            __classPrivateFieldSet(this, _DataStore_initPromise, new Promise((resolve) => {
                this.feathers.io.on('init', ({ auth }) => {
                    this.requiresAuth = auth;
                    if (auth) {
                        this.feathers.configure(authentication());
                    }
                    resolve();
                });
            }), "f");
            __classPrivateFieldSet(this, _DataStore_connectPromise, new Promise((resolve, reject) => {
                this.feathers.io.on('connect', () => {
                    logger.log(`Connected to backend ${this.location}!`);
                    resolve();
                });
                this.feathers.io.on('reconnect_failed', () => {
                    const e = new Error(`Cannot reach backend at location ${this.location}. Is the server running?
          If using locally, run 'npm run backend'`);
                    e.name = 'DataStore connection error';
                    reject();
                    throwError(e, { duration: 0 });
                });
            }), "f");
            logger.log(`Connecting to backend ${this.location}`);
        }
        else if (location === 'localStorage') {
            this.backend = DataStoreBackend.LocalStorage;
            const storageService = (name) => localStorageService({
                storage: window.localStorage,
                name,
                id: '_id',
                multi: true,
                paginate: {
                    default: 100,
                    max: 200,
                },
            });
            __classPrivateFieldSet(this, _DataStore_createService, (name) => {
                this.feathers.use(`/${name}`, storageService(name));
            }, "f");
        }
        else if (location === 'memory') {
            this.backend = DataStoreBackend.Memory;
            __classPrivateFieldSet(this, _DataStore_createService, (name) => {
                this.feathers.use(`/${name}`, memoryService({
                    id: '_id',
                    paginate: {
                        default: 100,
                        max: 200,
                    },
                }));
            }, "f");
        }
        else {
            throw new Error(`Cannot process backend location '${location}'`);
        }
        this.setupAppHooks();
    }
    async connect() {
        if (this.backend !== DataStoreBackend.Remote) {
            return { email: null };
        }
        await __classPrivateFieldGet(this, _DataStore_initPromise, "f");
        await __classPrivateFieldGet(this, _DataStore_connectPromise, "f");
        return this.authenticate();
    }
    async authenticate() {
        if (!this.requiresAuth) {
            this.user = { email: null };
            return this.user;
        }
        if (this.user) {
            return this.user;
        }
        const doAuth = () => {
            __classPrivateFieldSet(this, _DataStore_authenticating, true, "f");
            return new Promise((resolve, reject) => {
                this.feathers
                    .reAuthenticate()
                    .then(({ user }) => {
                    __classPrivateFieldSet(this, _DataStore_authenticating, false, "f");
                    this.user = user;
                    logger.log(`Authenticated as ${user.email}`);
                    resolve();
                })
                    .catch((err) => {
                    __classPrivateFieldSet(this, _DataStore_authenticating, false, "f");
                    reject(err);
                });
            });
        };
        __classPrivateFieldSet(this, _DataStore_authenticationPromise, __classPrivateFieldGet(this, _DataStore_authenticationPromise, "f").then(() => __classPrivateFieldGet(this, _DataStore_authenticating, "f") ? null : doAuth()), "f");
        return __classPrivateFieldGet(this, _DataStore_authenticationPromise, "f").then(() => this.user);
    }
    async login(email, password) {
        const res = await this.feathers.authenticate({ strategy: 'local', email, password });
        this.user = res.user;
        return this.user;
    }
    async loginWithUI() {
        const app = new Login({
            target: document.body,
            props: { dataStore: this },
        });
        return new Promise((resolve, reject) => {
            app.$on('terminate', (user) => {
                app.$destroy();
                if (user) {
                    resolve(user);
                }
                else {
                    reject();
                }
            });
        });
    }
    async signup(email, password) {
        try {
            await this.service('users').create({ email, password });
            await this.login(email, password);
            return this.user;
        }
        catch (error) {
            logger.error('An error occurred during signup', error);
            return { email: null };
        }
    }
    async logout() {
        await this.feathers.logout();
        document.location.reload();
    }
    service(name) {
        const serviceExists = Object.keys(this.feathers.services).includes(name);
        if (!serviceExists) {
            __classPrivateFieldGet(this, _DataStore_createService, "f").call(this, name);
            this.$services.set(Object.keys(this.feathers.services));
        }
        // const s =
        //   this.backend === DataStoreBackend.Remote
        //     ? this.feathers.service(`${this.apiPrefix}/${name}`)
        //     : this.feathers.service(name);
        const s = this.feathers.service(name);
        if (!serviceExists) {
            s.items = () => iterableFromService(s);
        }
        return s;
    }
    async uploadAsset(blob, filename = '') {
        if (this.backend !== DataStoreBackend.Remote) {
            throwError(new Error('LocalStorage Backend does not yet support upload'));
        }
        // try {
        const ext = blob.type.split(';')[0].split('/')[1];
        const name = filename || `asset.${ext}`;
        const fd = new FormData();
        fd.append(name, blob);
        const fetchOptions = { method: 'POST', body: fd };
        if (this.requiresAuth) {
            const jwt = await this.feathers.authentication.getAccessToken();
            const headers = new Headers({ Authorization: `Bearer ${jwt}` });
            fetchOptions.headers = headers;
        }
        const res = await fetch(`${this.location}/assets/upload`, fetchOptions);
        const resData = await res.json();
        // TODO: Create asset document so that it can be removed
        // this.service('assets').create({url: resData.blob})
        const filePath = `/assets/${resData.blob}`;
        return filePath;
        // } catch (err) {
        //   console.error(err);
        // }
    }
    setupAppHooks() {
        const beforeCreate = this.backend !== DataStoreBackend.Remote ? [addObjectId] : [];
        const findDistinctHook = this.backend !== DataStoreBackend.Remote ? [findDistinct] : [];
        this.feathers.hooks({
            before: {
                find: [...findDistinctHook, renameIdField],
                create: [...beforeCreate, createDate],
                update: [updateDate],
                patch: [updateDate],
            },
            after: {
                find: [renameIdField],
                get: [renameIdField],
                create: [renameIdField],
                update: [renameIdField],
                patch: [renameIdField],
                remove: [renameIdField],
            },
        });
    }
}
_DataStore_initPromise = new WeakMap(), _DataStore_connectPromise = new WeakMap(), _DataStore_authenticationPromise = new WeakMap(), _DataStore_authenticating = new WeakMap(), _DataStore_createService = new WeakMap();

function dataStore(location) {
    return new DataStore(location);
}

async function saveBlob(data, name, type) {
    const link = document.createElement('a');
    link.style.display = 'none';
    document.body.appendChild(link);
    const blob = new Blob([data], { type });
    link.href = URL.createObjectURL(blob);
    link.download = name;
    link.click();
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
async function readJSONFile(f) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => {
            const fileContent = JSON.parse(reader.result);
            resolve(fileContent);
        };
        reader.onerror = (e) => {
            reject(e);
        };
        reader.readAsText(f);
    });
}

function toKebabCase(str) {
    return str
        .replace(/([a-z])([A-Z])/g, '$1-$2')
        .replace(/[\s_]+/g, '-')
        .toLowerCase();
}

var _Dataset_store, _Dataset_updatedCreate;
class Dataset extends Component$1 {
    constructor(name, store = dataStore()) {
        super();
        this.title = 'dataset';
        this.isDataset = true;
        _Dataset_store.set(this, void 0);
        this.query = {};
        _Dataset_updatedCreate.set(this, new Set());
        this.$count = new Stream(0, true);
        this.$changes = new Stream([]);
        this.name = name;
        this.title = `dataset (${name})`;
        __classPrivateFieldSet(this, _Dataset_store, store, "f");
        this.start();
        this.ready = new Promise((resolve, reject) => {
            __classPrivateFieldGet(this, _Dataset_store, "f")
                .connect()
                .then(() => this.setup())
                .then(resolve)
                .catch((e) => {
                const err = new Error(e === null || e === void 0 ? void 0 : e.message);
                err.name = `Dataset Error (${name}): datastore connection failed`;
                throwError(err, { duration: 0 });
                reject(err);
            });
        });
    }
    async setup() {
        const instanceServiceName = toKebabCase(`instances-${this.name}`);
        this.instanceService = __classPrivateFieldGet(this, _Dataset_store, "f").service(instanceServiceName);
        if (this.instanceService.__hooks.before.find === undefined) {
            this.instanceService.hooks({
                before: {
                    all: [],
                    create: [addScope('datasetName', this.name), imageData2DataURL],
                    find: [limitToScope('datasetName', this.name)],
                    get: [limitToScope('datasetName', this.name)],
                    update: [limitToScope('datasetName', this.name)],
                    patch: [limitToScope('datasetName', this.name)],
                    remove: [limitToScope('datasetName', this.name)],
                },
                after: {
                    find: [dataURL2ImageData],
                    get: [dataURL2ImageData],
                },
            });
        }
        this.instanceService.hooks({
            before: {
                update: [this.checkUpdates],
                patch: [this.checkUpdates],
            },
        });
        await this.reset();
        this.watchChanges();
    }
    async reset() {
        const { total } = (await this.find({ query: { ...this.query, $limit: 0 } }));
        this.$count.set(total);
        this.$changes.set([
            {
                level: 'dataset',
                type: 'created',
            },
        ]);
    }
    async checkUpdates(context) {
        if (Object.keys(this.query).length === 0)
            return;
        const respectsQuery = sift(this.query);
        const isTargetValid = respectsQuery(context.data);
        try {
            const current = await this.get(context.id);
            const isCurrentValid = respectsQuery(current);
            if (isCurrentValid && !isTargetValid) {
                this.$count.set(this.$count.get() - 1);
                this.$changes.set([
                    {
                        level: 'instance',
                        type: 'removed',
                        data: current,
                    },
                ]);
            }
        }
        catch (error) {
            __classPrivateFieldGet(this, _Dataset_updatedCreate, "f").add(context.id);
        }
    }
    watchChanges() {
        const respectsQuery = sift(this.query);
        this.instanceService.on('created', (x) => {
            if (!respectsQuery(x))
                return;
            const instance = {
                ...x,
                id: x.id || x._id,
            };
            this.$count.set(this.$count.get() + 1);
            this.$changes.set([
                {
                    level: 'instance',
                    type: 'created',
                    data: instance,
                },
            ]);
        });
        const cb = (x) => {
            if (!respectsQuery(x))
                return;
            const instance = {
                ...x,
                id: x.id || x._id,
            };
            if (__classPrivateFieldGet(this, _Dataset_updatedCreate, "f").has(instance.id)) {
                this.$count.set(this.$count.get() + 1);
                this.$changes.set([
                    {
                        level: 'instance',
                        type: 'created',
                        data: instance,
                    },
                ]);
                __classPrivateFieldGet(this, _Dataset_updatedCreate, "f").delete(instance.id);
            }
            else {
                this.$changes.set([
                    {
                        level: 'instance',
                        type: 'updated',
                        data: instance,
                    },
                ]);
            }
        };
        this.instanceService.on('updated', cb);
        this.instanceService.on('patched', cb);
        this.instanceService.on('removed', (x) => {
            if (!respectsQuery(x))
                return;
            this.$count.set(this.$count.get() - 1);
            const instance = {
                ...x,
                id: x.id || x._id,
            };
            this.$changes.set([
                {
                    level: 'instance',
                    type: 'removed',
                    data: instance,
                },
            ]);
        });
    }
    async sift(query = {}) {
        this.query = query;
        return this.ready.then(() => this.reset());
    }
    items() {
        return this.instanceService.items().query(this.query);
    }
    async find(params) {
        const p = mergeDeep(params || {}, { query: this.query });
        return this.instanceService.find(p);
    }
    async get(id, params) {
        const p = mergeDeep(params || {}, { query: this.query });
        return this.instanceService.get(id, p);
    }
    async create(instance, params) {
        const p = mergeDeep(params || {}, { query: this.query });
        return this.instanceService.create(instance, p);
    }
    async update(id, instance, params) {
        const p = mergeDeep(params || {}, { query: this.query });
        return this.instanceService.update(id, instance, p);
    }
    async patch(id, changes, params) {
        const p = mergeDeep(params || {}, { query: this.query });
        return this.instanceService.patch(id, changes, p);
    }
    async remove(id, params) {
        const p = mergeDeep(params || {}, { query: this.query });
        return this.instanceService.remove(id, p);
    }
    async clear() {
        await this.remove(null, { query: {} });
    }
    async distinct(field) {
        const query = { $distinct: field, ...this.query };
        return this.instanceService.find({ query });
    }
    async download() {
        const instances = await this.find();
        const fileContents = {
            marcelleMeta: {
                type: 'dataset',
            },
            instances: instances.data,
        };
        const today = new Date(Date.now());
        const fileName = `${this.title}-${today.toISOString()}.json`;
        await saveBlob(JSON.stringify(fileContents), fileName, 'text/plain');
    }
    async upload(files) {
        const filePromises = files
            .filter((f) => f.type === 'application/json')
            .map((f) => readJSONFile(f));
        const jsonFiles = await Promise.all(filePromises);
        const addPromises = jsonFiles.map((fileContent) => fileContent.instances.map((instance) => {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const { id, ...instanceNoId } = instance;
            return this.create(instanceNoId).catch((e) => {
                throwError(e);
            });
        }));
        await Promise.all(addPromises);
    }
    mount() {
        // Nothing to show
    }
}
_Dataset_store = new WeakMap(), _Dataset_updatedCreate = new WeakMap();

function dataset(name, store) {
    return new Dataset(name, store);
}
function isDataset(x) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return typeof x === 'object' && x !== null && x.isDataset;
}

class Model extends Component$1 {
    constructor() {
        super();
        this.ready = false;
        this.$training = new Stream({ status: 'idle' }, true);
        this.$training.start();
        this.$training.subscribe(({ status }) => {
            if (status === 'success' || status === 'loaded') {
                this.ready = true;
            }
        });
    }
    sync(store, name) {
        this.syncData = { name, store };
        this.syncData.store
            .connect()
            .then(() => {
            this.syncData.service = this.syncData.store.service(this.serviceName);
            this.setupSync();
        })
            .catch((e) => {
            const err = new Error(e === null || e === void 0 ? void 0 : e.message);
            err.name = `Model Sync Error (${name}): datastore connection failed`;
            throwError(err, { duration: 0 });
        });
        return this;
    }
    async setupSync() {
        if (!this.syncData.service)
            return;
        const { data } = (await this.syncData.service.find({
            query: {
                name: this.syncData.name,
                $select: ['id'],
                $limit: 1,
                $sort: {
                    updatedAt: -1,
                },
            },
        }));
        let id = null;
        if (data.length === 1) {
            id = data[0].id;
            this.load(this.syncData.store, id);
        }
        let skipNextUpdate = false;
        this.$training.subscribe(({ status, data: meta }) => {
            if (status === 'success' || (status === 'loaded' && (meta === null || meta === void 0 ? void 0 : meta.source) !== 'datastore')) {
                skipNextUpdate = true;
                this.save(this.syncData.store, this.syncData.name, {}, id).then((newId) => {
                    id = newId;
                });
            }
        });
        const cb = (s) => {
            if (s._id === id || (!id && s.name === this.syncData.name)) {
                id = s._id;
                if (!skipNextUpdate) {
                    this.load(this.syncData.store, id);
                }
                skipNextUpdate = false;
            }
        };
        this.syncData.service.on('created', cb);
        this.syncData.service.on('updated', cb);
        this.syncData.service.on('patched', cb);
    }
    async saveToDatastore(store, model, id = null) {
        await store.connect();
        const service = store.service(this.serviceName);
        if (!service)
            return null;
        if (!model)
            return null;
        let newId = id;
        if (id) {
            await service.update(id, model);
        }
        else {
            const res = await service.create(model);
            newId = res.id;
        }
        logger.info(`Model was saved to data store at location ${store.location}`);
        return newId;
    }
    async loadFromDatastore(store, idOrName) {
        await store.connect();
        const service = store.service(this.serviceName);
        if (!service || !idOrName)
            return null;
        let model;
        try {
            model = await service.get(idOrName);
        }
        catch (error) {
            const { data } = (await service.find({
                query: {
                    name: idOrName,
                    $limit: 1,
                    $sort: {
                        updatedAt: -1,
                    },
                },
            }));
            if (data.length === 1) {
                model = data[0];
            }
        }
        if (model) {
            const name = model.name;
            logger.info(`Model ${name} was loaded from data store at location ${store.location}`);
        }
        return model;
    }
    mount() {
        // Nothing to show
    }
}

function fixSeparableConv2D(artifacts) {
    if (!artifacts.modelTopology.model_config ||
        !artifacts.modelTopology.model_config.config ||
        !artifacts.modelTopology.model_config.config.layers ||
        (artifacts.modelTopology.model_config.config.layers.length > 0 &&
            !artifacts.modelTopology.model_config.config.layers[0].class_name)) {
        return artifacts;
    }
    try {
        let removeKernels = false;
        for (const [i, layer] of artifacts.modelTopology.model_config.config.layers.entries()) {
            if (layer.class_name === 'SeparableConv2D') {
                const fields = ['kernel_constraint', 'kernel_initializer', 'kernel_regularizer'];
                for (const field of fields) {
                    if (Object.keys(artifacts.modelTopology.model_config.config.layers[i].config).includes(field)) {
                        removeKernels = true;
                    }
                    // eslint-disable-next-line no-param-reassign
                    delete artifacts.modelTopology.model_config.config.layers[i].config[field];
                }
            }
        }
        if (removeKernels) {
            logger.warning('TFJS Model loading: experimentally removing Kernel attributes from SeparableConv2D layers');
        }
    }
    catch (error) {
        logger.warning('TFJS Model loading: An error occurred whil experimentally removing Kernel attributes from SeparableConv2D layers', error);
    }
    return artifacts;
}
function http(...args) {
    const loader = io$1.http(...args);
    const superLoad = loader.load.bind(loader);
    loader.load = async function loadx() {
        const x = await superLoad();
        return fixSeparableConv2D(x);
    };
    return loader;
}
function browserFiles(...args) {
    const loader = io$1.browserFiles(...args);
    const superLoad = loader.load.bind(loader);
    loader.load = async function loadx() {
        const x = await superLoad();
        return fixSeparableConv2D(x);
    };
    return loader;
}

class TFJSBaseModel extends Model {
    constructor() {
        super(...arguments);
        this.serviceName = 'tfjs-models';
    }
    async warmup() {
        const inputShape = this.model.inputs[0].shape.map((x) => (x && x > 0 ? x : 1));
        const warmupResult = this.model.predict(tidy(() => zeros(inputShape)));
        await warmupResult.data();
        warmupResult.dispose();
    }
    async save(store, name, metadata, id = null) {
        if (!this.model)
            return null;
        let files;
        if (store.backend === DataStoreBackend.LocalStorage) {
            await this.model.save(`indexeddb://${name}`);
            files = [['main', `indexeddb://${name}`]];
        }
        else if (store.backend === DataStoreBackend.Remote) {
            const requestOpts = {};
            if (store.requiresAuth) {
                const jwt = await store.feathers.authentication.getAccessToken();
                const headers = new Headers({ Authorization: `Bearer ${jwt}` });
                requestOpts.requestInit = { headers };
            }
            files = await this.model
                .save(http(`${store.location}/tfjs-models/upload`, requestOpts))
                .then((res) => res.responses[0].json());
        }
        const storedModel = {
            name,
            files,
            format: 'tfjs',
            metadata: {
                tfjsModelFormat: this.model instanceof LayersModel ? 'layers-model' : 'graph-model',
                ...(this.labels && { labels: this.labels }),
                ...metadata,
            },
        };
        return this.saveToDatastore(store, storedModel, id);
    }
    async load(store, idOrName) {
        if (!idOrName)
            return null;
        this.$training.set({
            status: 'loading',
        });
        this.ready = false;
        await ready();
        try {
            const storedModel = await this.loadFromDatastore(store, idOrName);
            this.loadFn =
                storedModel.metadata.tfjsModelFormat === 'graph-model' ? loadGraphModel : loadLayersModel;
            let model;
            if (store.backend === DataStoreBackend.LocalStorage) {
                model = await this.loadFn(storedModel.files[0][1]);
            }
            else if (store.backend === DataStoreBackend.Remote) {
                const requestOpts = {};
                if (store.requiresAuth) {
                    const jwt = await store.feathers.authentication.getAccessToken();
                    const headers = new Headers({ Authorization: `Bearer ${jwt}` });
                    requestOpts.requestInit = { headers };
                }
                model = await this.loadFn(http(`${store.location}/tfjs-models/${storedModel.id}/model.json`, requestOpts));
            }
            if (model) {
                this.model = model;
                await this.warmup();
            }
            if (storedModel.metadata && storedModel.metadata.labels) {
                this.labels = storedModel.metadata.labels;
            }
            else {
                // logger.log("Couldn't Find labels in the stored model's metadata");
                this.labels = undefined;
            }
            this.$training.set({
                status: 'loaded',
                data: {
                    source: 'datastore',
                    url: store.location,
                },
            });
            return storedModel;
        }
        catch (error) {
            // eslint-disable-next-line no-console
            console.log('[tfjs-model] Loading error', error);
            this.$training.set({
                status: 'error',
            });
            throw error;
        }
    }
    async download(metadata) {
        const name = toKebabCase(this.title);
        const meta = {
            type: 'tfjs-model',
            tfjsModelFormat: this.model instanceof LayersModel ? 'layers-model' : 'graph-model',
            name,
            ...(this.labels && { labels: this.labels }),
            ...metadata,
        };
        const dateSaved = new Date(Date.now());
        await this.model.save(io$1.withSaveHandler(async (data) => {
            const weightsManifest = {
                modelTopology: data.modelTopology,
                weightsManifest: [
                    {
                        paths: [`./${name}.weights.bin`],
                        weights: data.weightSpecs,
                    },
                ],
                marcelle: meta,
            };
            await saveBlob(data.weightData, `${name}.weights.bin`, 'application/octet-stream');
            await saveBlob(JSON.stringify(weightsManifest), `${name}.json`, 'text/plain');
            return { modelArtifactsInfo: { dateSaved, modelTopologyType: 'JSON' } };
        }));
    }
    async upload(...files) {
        this.$training.set({
            status: 'loading',
        });
        try {
            const jsonFiles = files.filter((x) => x.name.includes('.json'));
            const weightFiles = files.filter((x) => x.name.includes('.bin'));
            const { marcelle: meta } = await new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => {
                    const obj = JSON.parse(reader.result);
                    resolve(obj);
                };
                reader.onerror = (err) => reject(new Error(`The provided files are not a valid marcelle model ${err}`));
                reader.readAsText(jsonFiles[0]);
            });
            this.loadFn = meta.tfjsModelFormat === 'graph-model' ? loadGraphModel : loadLayersModel;
            if (jsonFiles.length === 1 && files.length) {
                const model = await this.loadFn(browserFiles([jsonFiles[0], ...weightFiles]));
                if (model) {
                    this.model = model;
                    await this.warmup();
                }
                if (meta && meta.labels) {
                    this.labels = meta.labels;
                }
                else {
                    // logger.log("Couldn't Find labels in the stored model's metadata");
                    this.labels = null;
                }
                this.$training.set({
                    status: 'loaded',
                    data: {
                        source: 'file',
                    },
                });
                return { name: meta.name, format: 'tfjs', files: [], metadata: meta };
            }
            const e = new Error('The provided files are not compatible with this model');
            e.name = 'File upload error';
            throw e;
        }
        catch (error) {
            this.$training.set({
                status: 'error',
            });
            throw error;
        }
    }
}
__decorate([
    Catch
], TFJSBaseModel.prototype, "warmup", null);
__decorate([
    Catch
], TFJSBaseModel.prototype, "upload", null);

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const EPSILON_FLOAT32 = 1e-7;
const EPSILON_FLOAT16 = 1e-4;
/**
 * The interface that defines the kernels that should be implemented when
 * adding a new backend. New backends don't need to implement every one of the
 * methods, this can be done gradually (throw an error for unimplemented
 * methods).
 */
class KernelBackend {
    refCount(dataId) {
        return notYetImplemented('refCount');
    }
    incRef(dataId) {
        return notYetImplemented('incRef');
    }
    timerAvailable() {
        return true;
    }
    time(f) {
        return notYetImplemented('time');
    }
    read(dataId) {
        return notYetImplemented('read');
    }
    readSync(dataId) {
        return notYetImplemented('readSync');
    }
    readToGPU(dataId, options) {
        return notYetImplemented('readToGPU');
    }
    numDataIds() {
        return notYetImplemented('numDataIds');
    }
    disposeData(dataId, force) {
        return notYetImplemented('disposeData');
    }
    write(values, shape, dtype) {
        return notYetImplemented('write');
    }
    move(dataId, values, shape, dtype, refCount) {
        return notYetImplemented('move');
    }
    createTensorFromGPUData(values, shape, dtype) {
        return notYetImplemented('createTensorFromGPUData');
    }
    memory() {
        return notYetImplemented('memory');
    }
    /** Returns the highest precision for floats in bits (e.g. 16 or 32) */
    floatPrecision() {
        return notYetImplemented('floatPrecision');
    }
    /** Returns the smallest representable number.  */
    epsilon() {
        return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;
    }
    dispose() {
        return notYetImplemented('dispose');
    }
}
function notYetImplemented(kernelName) {
    throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` +
        `This kernel may not be supported by the tfjs backend you have chosen`);
}

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Shuffles the array in-place using Fisher-Yates algorithm.
 *
 * ```js
 * const a = [1, 2, 3, 4, 5];
 * tf.util.shuffle(a);
 * console.log(a);
 * ```
 *
 * @param array The array to shuffle in-place.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
// tslint:disable-next-line:no-any
/**
 * Asserts that the expression is true. Otherwise throws an error with the
 * provided message.
 *
 * ```js
 * const x = 2;
 * tf.util.assert(x === 2, 'x is not 2');
 * ```
 *
 * @param expr The expression to assert (as a boolean).
 * @param msg A function that returns the message to report when throwing an
 *     error. We use a function for performance reasons.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
function assert(expr, msg) {
    if (!expr) {
        throw new Error(typeof msg === 'string' ? msg : msg());
    }
}
/**
 * Returns the size (number of elements) of the tensor given its shape.
 *
 * ```js
 * const shape = [3, 4, 2];
 * const size = tf.util.sizeFromShape(shape);
 * console.log(size);
 * ```
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
function sizeFromShape(shape) {
    if (shape.length === 0) {
        // Scalar.
        return 1;
    }
    let size = shape[0];
    for (let i = 1; i < shape.length; i++) {
        size *= shape[i];
    }
    return size;
}
function arraysEqual(n1, n2) {
    if (n1 === n2) {
        return true;
    }
    if (n1 == null || n2 == null) {
        return false;
    }
    if (n1.length !== n2.length) {
        return false;
    }
    for (let i = 0; i < n1.length; i++) {
        if (n1[i] !== n2[i]) {
            return false;
        }
    }
    return true;
}
function isInt(a) {
    return a % 1 === 0;
}
function rightPad(a, size) {
    if (size <= a.length) {
        return a;
    }
    return a + ' '.repeat(size - a.length);
}
function parseAxisParam(axis, shape) {
    const rank = shape.length;
    // Normalize input
    axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);
    // Check for valid range
    assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` +
        `got axis ${axis}`);
    // Check for only integers
    assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` +
        `got axis ${axis}`);
    // Handle negative axis.
    return axis.map(a => a < 0 ? rank + a : a);
}
/** Reduces the shape by removing all dimensions of shape 1. */
function squeezeShape(shape, axis) {
    const newShape = [];
    const keptDims = [];
    const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;
    const axes = (axis == null || isEmptyArray) ?
        null :
        parseAxisParam(axis, shape).sort();
    let j = 0;
    for (let i = 0; i < shape.length; ++i) {
        if (axes != null) {
            if (axes[j] === i && shape[i] !== 1) {
                throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);
            }
            if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {
                newShape.push(shape[i]);
                keptDims.push(i);
            }
            if (axes[j] <= i) {
                j++;
            }
        }
        if (shape[i] !== 1) {
            newShape.push(shape[i]);
            keptDims.push(i);
        }
    }
    return { newShape, keptDims };
}
function checkConversionForErrors(vals, dtype) {
    for (let i = 0; i < vals.length; i++) {
        const num = vals[i];
        if (isNaN(num) || !isFinite(num)) {
            throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);
        }
    }
}
/** Returns true if the dtype is valid. */
function isValidDtype(dtype) {
    return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||
        dtype === 'int32' || dtype === 'string';
}
function bytesPerElement(dtype) {
    if (dtype === 'float32' || dtype === 'int32') {
        return 4;
    }
    else if (dtype === 'complex64') {
        return 8;
    }
    else if (dtype === 'bool') {
        return 1;
    }
    else {
        throw new Error(`Unknown dtype ${dtype}`);
    }
}
/**
 * Returns the approximate number of bytes allocated in the string array - 2
 * bytes per character. Computing the exact bytes for a native string in JS
 * is not possible since it depends on the encoding of the html page that
 * serves the website.
 */
function bytesFromStringArray(arr) {
    if (arr == null) {
        return 0;
    }
    let bytes = 0;
    arr.forEach(x => bytes += x.length);
    return bytes;
}
/** Returns true if the value is a string. */
function isString$1(value) {
    return typeof value === 'string' || value instanceof String;
}
function isBoolean(value) {
    return typeof value === 'boolean';
}
function isNumber$1(value) {
    return typeof value === 'number';
}
function inferDtype(values) {
    if (Array.isArray(values)) {
        return inferDtype(values[0]);
    }
    if (values instanceof Float32Array) {
        return 'float32';
    }
    else if (values instanceof Int32Array || values instanceof Uint8Array ||
        values instanceof Uint8ClampedArray) {
        return 'int32';
    }
    else if (isNumber$1(values)) {
        return 'float32';
    }
    else if (isString$1(values)) {
        return 'string';
    }
    else if (isBoolean(values)) {
        return 'bool';
    }
    return 'float32';
}
function isFunction$2(f) {
    return !!(f && f.constructor && f.call && f.apply);
}
function computeStrides(shape) {
    const rank = shape.length;
    if (rank < 2) {
        return [];
    }
    // Last dimension has implicit stride of 1, thus having D-1 (instead of D)
    // strides.
    const strides = new Array(rank - 1);
    strides[rank - 2] = shape[rank - 1];
    for (let i = rank - 3; i >= 0; --i) {
        strides[i] = strides[i + 1] * shape[i + 1];
    }
    return strides;
}
function createNestedArray(offset, shape, a, isComplex = false) {
    const ret = new Array();
    if (shape.length === 1) {
        const d = shape[0] * (isComplex ? 2 : 1);
        for (let i = 0; i < d; i++) {
            ret[i] = a[offset + i];
        }
    }
    else {
        const d = shape[0];
        const rest = shape.slice(1);
        const len = rest.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);
        for (let i = 0; i < d; i++) {
            ret[i] = createNestedArray(offset + i * len, rest, a, isComplex);
        }
    }
    return ret;
}
// Provide a nested array of TypedArray in given shape.
function toNestedArray(shape, a, isComplex = false) {
    if (shape.length === 0) {
        // Scalar type should return a single number.
        return a[0];
    }
    const size = shape.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);
    if (size === 0) {
        // A tensor with shape zero should be turned into empty list.
        return [];
    }
    if (size !== a.length) {
        throw new Error(`[${shape}] does not match the input size ${a.length}${isComplex ? ' for a complex tensor' : ''}.`);
    }
    return createNestedArray(0, shape, a, isComplex);
}
function makeOnesTypedArray(size, dtype) {
    const array = makeZerosTypedArray(size, dtype);
    for (let i = 0; i < array.length; i++) {
        array[i] = 1;
    }
    return array;
}
function makeZerosTypedArray(size, dtype) {
    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {
        return new Float32Array(size);
    }
    else if (dtype === 'int32') {
        return new Int32Array(size);
    }
    else if (dtype === 'bool') {
        return new Uint8Array(size);
    }
    else {
        throw new Error(`Unknown data type ${dtype}`);
    }
}
function assertNonNegativeIntegerDimensions(shape) {
    shape.forEach(dimSize => {
        assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` +
            `shape [${shape}].`);
    });
}
/**
 * This method asserts whether an object is a Promise instance.
 * @param object
 */
// tslint:disable-next-line: no-any
function isPromise(object) {
    //  We chose to not use 'obj instanceOf Promise' for two reasons:
    //  1. It only reliably works for es6 Promise, not other Promise
    //  implementations.
    //  2. It doesn't work with framework that uses zone.js. zone.js monkey
    //  patch the async calls, so it is possible the obj (patched) is
    //  comparing to a pre-patched Promise.
    return object && object.then && typeof object.then === 'function';
}

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.
const TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';
/**
 * The environment contains evaluated flags as well as the registered platform.
 * This is always used as a global singleton and can be retrieved with
 * `tf.env()`.
 *
 * @doc {heading: 'Environment'}
 */
class Environment {
    // tslint:disable-next-line: no-any
    constructor(global) {
        this.global = global;
        this.flags = {};
        this.flagRegistry = {};
        this.urlFlags = {};
        // Jasmine spies on this in 'environment_test.ts'
        this.getQueryParams = getQueryParams;
        this.populateURLFlags();
    }
    setPlatform(platformName, platform) {
        if (this.platform != null) {
            if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {
                console.warn(`Platform ${this.platformName} has already been set. ` +
                    `Overwriting the platform with ${platformName}.`);
            }
        }
        this.platformName = platformName;
        this.platform = platform;
    }
    registerFlag(flagName, evaluationFn, setHook) {
        this.flagRegistry[flagName] = { evaluationFn, setHook };
        // Override the flag value from the URL. This has to happen here because
        // the environment is initialized before flags get registered.
        if (this.urlFlags[flagName] != null) {
            const flagValue = this.urlFlags[flagName];
            if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {
                console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);
            }
            this.set(flagName, flagValue);
        }
    }
    async getAsync(flagName) {
        if (flagName in this.flags) {
            return this.flags[flagName];
        }
        this.flags[flagName] = await this.evaluateFlag(flagName);
        return this.flags[flagName];
    }
    get(flagName) {
        if (flagName in this.flags) {
            return this.flags[flagName];
        }
        const flagValue = this.evaluateFlag(flagName);
        if (isPromise(flagValue)) {
            throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` +
                `Please use getAsync() instead.`);
        }
        this.flags[flagName] = flagValue;
        return this.flags[flagName];
    }
    getNumber(flagName) {
        return this.get(flagName);
    }
    getBool(flagName) {
        return this.get(flagName);
    }
    getString(flagName) {
        return this.get(flagName);
    }
    getFlags() {
        return this.flags;
    }
    // For backwards compatibility.
    get features() {
        return this.flags;
    }
    set(flagName, value) {
        if (this.flagRegistry[flagName] == null) {
            throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);
        }
        this.flags[flagName] = value;
        if (this.flagRegistry[flagName].setHook != null) {
            this.flagRegistry[flagName].setHook(value);
        }
    }
    evaluateFlag(flagName) {
        if (this.flagRegistry[flagName] == null) {
            throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);
        }
        return this.flagRegistry[flagName].evaluationFn();
    }
    setFlags(flags) {
        this.flags = Object.assign({}, flags);
    }
    reset() {
        this.flags = {};
        this.urlFlags = {};
        this.populateURLFlags();
    }
    populateURLFlags() {
        if (typeof this.global === 'undefined' ||
            typeof this.global.location === 'undefined' ||
            typeof this.global.location.search === 'undefined') {
            return;
        }
        const urlParams = this.getQueryParams(this.global.location.search);
        if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {
            const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');
            keyValues.forEach(keyValue => {
                const [key, value] = keyValue.split(':');
                this.urlFlags[key] = parseValue(key, value);
            });
        }
    }
}
function getQueryParams(queryString) {
    const params = {};
    queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {
        decodeParam(params, t[0], t[1]);
        return t.join('=');
    });
    return params;
}
function decodeParam(params, name, value) {
    params[decodeURIComponent(name)] = decodeURIComponent(value || '');
}
function parseValue(flagName, value) {
    const lowerCaseValue = value.toLowerCase();
    if (lowerCaseValue === 'true' || lowerCaseValue === 'false') {
        return lowerCaseValue === 'true';
    }
    else if (`${+lowerCaseValue}` === lowerCaseValue) {
        return +lowerCaseValue;
    }
    else {
        return value;
    }
}
/**
 * Returns the current environment (a global singleton).
 *
 * The environment object contains the evaluated feature values as well as the
 * active platform.
 *
 * @doc {heading: 'Environment'}
 */
function env() {
    return ENV;
}
let ENV = null;
function setEnvironmentGlobal(environment) {
    ENV = environment;
}

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Note that the identifier globalNameSpace is scoped to this module, but will
// always resolve to the same global object regardless of how the module is
// resolved.
// tslint:disable-next-line:no-any
let globalNameSpace;
// tslint:disable-next-line:no-any
function getGlobalNamespace() {
    if (globalNameSpace == null) {
        // tslint:disable-next-line:no-any
        let ns;
        if (typeof (window) !== 'undefined') {
            ns = window;
        }
        else if (typeof (global) !== 'undefined') {
            ns = global;
        }
        else if (typeof (process) !== 'undefined') {
            ns = process;
        }
        else if (typeof (self) !== 'undefined') {
            ns = self;
        }
        else {
            throw new Error('Could not find a global object');
        }
        globalNameSpace = ns;
    }
    return globalNameSpace;
}
// tslint:disable-next-line:no-any
function getGlobalMap() {
    const ns = getGlobalNamespace();
    if (ns._tfGlobals == null) {
        ns._tfGlobals = new Map();
    }
    return ns._tfGlobals;
}
/**
 * Returns a globally accessible 'singleton' object.
 *
 * @param key the name of the object
 * @param init a function to initialize to initialize this object
 *             the first time it is fetched.
 */
function getGlobal(key, init) {
    const globalMap = getGlobalMap();
    if (globalMap.has(key)) {
        return globalMap.get(key);
    }
    else {
        const singleton = init();
        globalMap.set(key, singleton);
        return globalMap.get(key);
    }
}

const Abs = 'Abs';
const Add = 'Add';
const ArgMax = 'ArgMax';
const BatchMatMul = 'BatchMatMul';
const Cast = 'Cast';
const ComplexAbs = 'ComplexAbs';
const ExpandDims = 'ExpandDims';
const GatherV2 = 'GatherV2';
const Identity = 'Identity';
const Max = 'Max';
const Min = 'Min';
const Multiply = 'Multiply';
const Pow = 'Pow';
const Reshape = 'Reshape';
const Sqrt = 'Sqrt';
const Sum = 'Sum';

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function warn(...msg) {
    if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {
        console.warn(...msg);
    }
}

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const kernelRegistry = getGlobal('kernelRegistry', () => new Map());
const gradRegistry = getGlobal('gradRegistry', () => new Map());
/**
 * Returns the kernel function (code) associated with the provided names.
 *
 * @param kernelName The official name of the kernel.
 * @param backendName The official name of the backend.
 */
function getKernel(kernelName, backendName) {
    const key = makeKey(kernelName, backendName);
    return kernelRegistry.get(key);
}
/**
 * Returns the registered gradient info associated with the provided kernel.
 * @param kernelName The official TF kernel name.
 */
function getGradient(kernelName) {
    return gradRegistry.get(kernelName);
}
function getKernelsForBackend(backendName) {
    const it = kernelRegistry.entries();
    const result = [];
    while (true) {
        const { done, value } = it.next();
        if (done) {
            break;
        }
        const [key, config] = value;
        const [backend,] = key.split('_');
        if (backend === backendName) {
            result.push(config);
        }
    }
    return result;
}
function makeKey(kernelName, backendName) {
    return `${backendName}_${kernelName}`;
}

/**
 * @license
 * Copyright 2023 Google LLC.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function isTypedArrayBrowser(a) {
    return a instanceof Float32Array || a instanceof Int32Array ||
        a instanceof Uint8Array || a instanceof Uint8ClampedArray;
}

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function noConversionNeeded(a, dtype) {
    return (a instanceof Float32Array && dtype === 'float32') ||
        (a instanceof Int32Array && dtype === 'int32') ||
        (a instanceof Uint8Array && dtype === 'bool');
}
function toTypedArray(a, dtype) {
    if (dtype === 'string') {
        throw new Error('Cannot convert a string[] to a TypedArray');
    }
    if (Array.isArray(a)) {
        a = flatten(a);
    }
    if (env().getBool('DEBUG')) {
        checkConversionForErrors(a, dtype);
    }
    if (noConversionNeeded(a, dtype)) {
        return a;
    }
    if (dtype == null || dtype === 'float32' || dtype === 'complex64') {
        return new Float32Array(a);
    }
    else if (dtype === 'int32') {
        return new Int32Array(a);
    }
    else if (dtype === 'bool') {
        const bool = new Uint8Array(a.length);
        for (let i = 0; i < bool.length; ++i) {
            if (Math.round(a[i]) !== 0) {
                bool[i] = 1;
            }
        }
        return bool;
    }
    else {
        throw new Error(`Unknown data type ${dtype}`);
    }
}
/**
 * Returns the current high-resolution time in milliseconds relative to an
 * arbitrary time in the past. It works across different platforms (node.js,
 * browsers).
 *
 * ```js
 * console.log(tf.util.now());
 * ```
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
function now() {
    return env().platform.now();
}
/**
 * Encodes the provided string into bytes using the provided encoding scheme.
 *
 * @param s The string to encode.
 * @param encoding The encoding scheme. Defaults to utf-8.
 *
 * @doc {heading: 'Util'}
 */
function encodeString(s, encoding = 'utf-8') {
    encoding = encoding || 'utf-8';
    return env().platform.encode(s, encoding);
}
/**
 * Decodes the provided bytes into a string using the provided encoding scheme.
 * @param bytes The bytes to decode.
 *
 * @param encoding The encoding scheme. Defaults to utf-8.
 *
 * @doc {heading: 'Util'}
 */
function decodeString(bytes, encoding = 'utf-8') {
    encoding = encoding || 'utf-8';
    return env().platform.decode(bytes, encoding);
}
function isTypedArray(a) {
    // TODO(mattsoulanille): Remove this fallback in 5.0.0
    if (env().platform.isTypedArray != null) {
        return env().platform.isTypedArray(a);
    }
    else {
        return isTypedArrayBrowser(a);
    }
}
// NOTE: We explicitly type out what T extends instead of any so that
// util.flatten on a nested array of number doesn't try to infer T as a
// number[][], causing us to explicitly type util.flatten<number>().
/**
 *  Flattens an arbitrarily nested array.
 *
 * ```js
 * const a = [[1, 2], [3, 4], [5, [6, [7]]]];
 * const flat = tf.util.flatten(a);
 * console.log(flat);
 * ```
 *
 *  @param arr The nested array to flatten.
 *  @param result The destination array which holds the elements.
 *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults
 *      to false.
 *
 * @doc {heading: 'Util', namespace: 'util'}
 */
function flatten(arr, result = [], skipTypedArray = false) {
    if (result == null) {
        result = [];
    }
    if (typeof arr === 'boolean' || typeof arr === 'number' ||
        typeof arr === 'string' || isPromise(arr) || arr == null ||
        isTypedArray(arr) && skipTypedArray) {
        result.push(arr);
    }
    else if (Array.isArray(arr) || isTypedArray(arr)) {
        for (let i = 0; i < arr.length; ++i) {
            flatten(arr[i], result, skipTypedArray);
        }
    }
    else {
        let maxIndex = -1;
        for (const key of Object.keys(arr)) {
            // 0 or positive integer.
            if (/^([1-9]+[0-9]*|0)$/.test(key)) {
                maxIndex = Math.max(maxIndex, Number(key));
            }
        }
        for (let i = 0; i <= maxIndex; i++) {
            // tslint:disable-next-line: no-unnecessary-type-assertion
            flatten(arr[i], result, skipTypedArray);
        }
    }
    return result;
}

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
class Profiler {
    constructor(backendTimer, logger) {
        this.backendTimer = backendTimer;
        this.logger = logger;
        if (logger == null) {
            this.logger = new Logger();
        }
    }
    profileKernel(kernelName, inputs, f) {
        let outputs;
        const holdResultWrapperFn = () => {
            outputs = f();
        };
        let timer;
        const start = now();
        if (this.backendTimer.timerAvailable()) {
            timer = this.backendTimer.time(holdResultWrapperFn);
        }
        else {
            holdResultWrapperFn();
            for (const output of outputs) {
                output.dataSync();
            }
            timer = Promise.resolve({ kernelMs: now() - start });
        }
        if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {
            for (let i = 0; i < outputs.length; i++) {
                const output = outputs[i];
                // Dangling promise here because we don't want to propagate up
                // asynchronicity.
                output.data().then(tensorVals => {
                    checkComputationForErrors(tensorVals, output.dtype, kernelName);
                });
            }
        }
        const kernelProfile = {
            kernelName,
            outputs,
            inputs,
            timeMs: timer.then(timing => timing.kernelMs),
            extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ?
                timing.getExtraProfileInfo() :
                '')
        };
        return kernelProfile;
    }
    logKernelProfile(kernelProfile) {
        const { kernelName, outputs, timeMs, inputs, extraInfo } = kernelProfile;
        outputs.forEach(result => {
            Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {
                this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);
            });
        });
    }
}
function checkComputationForErrors(vals, dtype, kernelName) {
    if (dtype !== 'float32') {
        // Only floating point computations will generate NaN values
        return false;
    }
    for (let i = 0; i < vals.length; i++) {
        const num = vals[i];
        if (isNaN(num) || !isFinite(num)) {
            // Throwing custom exception so behavior is testable.
            console.warn(`Found ${num} in the result of '${kernelName}'`);
            return true;
        }
    }
    return false;
}
class Logger {
    logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {
        const time = typeof timeMs === 'number' ? rightPad(`${timeMs}ms`, 9) :
            timeMs['error'];
        const paddedName = rightPad(name, 25);
        const rank = result.rank;
        const size = result.size;
        const shape = rightPad(result.shape.toString(), 14);
        let inputShapesDescription = '';
        for (const name in inputs) {
            const input = inputs[name];
            if (input != null) {
                // The input might be a non-tensor (e.g HTMLImageElement), in which case
                // we claim the output shape as input shape.
                const inputShape = input.shape || result.shape;
                const inputRank = inputShape.length;
                inputShapesDescription +=
                    `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;
            }
        }
        console.log(`%c${paddedName}\t%c${time}\t%c${rank}D ${shape}\t%c${size}\t%c${inputShapesDescription}\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');
    }
}

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Computes a list of TapeNodes that connect x to y, filtering everything else
 * out and preserving the order of the original tape elements.
 *
 * @param tape The tape elements to filter.
 * @param xs The input Tensors.
 * @param y The output Tensor.
 */
function getFilteredNodesXToY(tape, xs, y) {
    // Forward pass to compute all the nodes and Tensors that are transitively a
    // function of x.
    const tensorsFromX = {};
    const nodesFromX = {};
    for (let i = 0; i < xs.length; i++) {
        tensorsFromX[xs[i].id] = true;
    }
    for (let i = 0; i < tape.length; i++) {
        const node = tape[i];
        const nodeInputs = node.inputs;
        for (const inputName in nodeInputs) {
            const input = nodeInputs[inputName];
            let anyInputFromX = false;
            for (let j = 0; j < xs.length; j++) {
                if (tensorsFromX[input.id]) {
                    node.outputs.forEach(output => tensorsFromX[output.id] = true);
                    anyInputFromX = true;
                    nodesFromX[node.id] = true;
                    break;
                }
            }
            if (anyInputFromX) {
                break;
            }
        }
    }
    // Backward pass to find all of the nodes and Tensors that lead to y.
    const tensorsLeadToY = {};
    tensorsLeadToY[y.id] = true;
    const nodesToY = {};
    for (let i = tape.length - 1; i >= 0; i--) {
        const node = tape[i];
        const nodeInputs = node.inputs;
        // If any of the outputs lead to y, mark all of the inputs as leading to y.
        for (let j = 0; j < node.outputs.length; j++) {
            if (tensorsLeadToY[node.outputs[j].id]) {
                for (const inputName in nodeInputs) {
                    tensorsLeadToY[nodeInputs[inputName].id] = true;
                    nodesToY[node.id] = true;
                }
                break;
            }
        }
    }
    // Return the paths that come from x and lead to y.
    const filteredTape = [];
    for (let i = 0; i < tape.length; i++) {
        const node = tape[i];
        if (nodesFromX[node.id] && nodesToY[node.id]) {
            // Prune the inputs from the node that aren't a function of x.
            const prunedInputs = {};
            for (const inputName in node.inputs) {
                const nodeInput = node.inputs[inputName];
                if (tensorsFromX[nodeInput.id]) {
                    prunedInputs[inputName] = nodeInput;
                }
            }
            // Copy the node and overwrite inputsAndArgs to the pruned version.
            const prunedNode = Object.assign({}, node);
            prunedNode.inputs = prunedInputs;
            prunedNode.outputs = node.outputs;
            filteredTape.push(prunedNode);
        }
    }
    return filteredTape;
}
/**
 * Backpropagate gradients through the filtered TapeNodes.
 *
 * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map
 * is mutated by this method.
 * @param filteredTape The filtered TapeNodes to backprop through.
 */
function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape, tidy, add) {
    // Walk the tape backward and keep a map of Tensor to its gradient.
    for (let i = filteredTape.length - 1; i >= 0; i--) {
        const node = filteredTape[i];
        const dys = [];
        node.outputs.forEach(o => {
            const gradTensor = tensorAccumulatedGradientMap[o.id];
            if (gradTensor != null) {
                dys.push(gradTensor);
            }
            else {
                // This particular output is not in the back-propagation subgraph, so it
                // does not affect the final output, thus we put null for its dy.
                dys.push(null);
            }
        });
        if (node.gradient == null) {
            throw new Error(`Cannot compute gradient: gradient function not found ` +
                `for ${node.kernelName}.`);
        }
        // Backprop dy through this node and accumulate gradients over the inputs.
        const inputGradients = node.gradient(dys);
        for (const inputName in node.inputs) {
            if (!(inputName in inputGradients)) {
                throw new Error(`Cannot backprop through input ${inputName}. ` +
                    `Available gradients found: ${Object.keys(inputGradients)}.`);
            }
            // Call the gradient function.
            const dx = tidy(() => inputGradients[inputName]());
            if (dx.dtype !== 'float32') {
                throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` +
                    `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);
            }
            const x = node.inputs[inputName];
            if (!arraysEqual(dx.shape, x.shape)) {
                throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` +
                    `'${inputName}' has shape '${dx.shape}', which does not match ` +
                    `the shape of the input '${x.shape}'`);
            }
            if (tensorAccumulatedGradientMap[x.id] == null) {
                tensorAccumulatedGradientMap[x.id] = dx;
            }
            else {
                const curGradient = tensorAccumulatedGradientMap[x.id];
                tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);
                curGradient.dispose();
            }
        }
    }
}

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Maximum number of values before we decide to show ellipsis.
const FORMAT_LIMIT_NUM_VALS = 20;
// Number of first and last values to show when displaying a, b,...,y, z.
const FORMAT_NUM_FIRST_LAST_VALS = 3;
// Number of significant digits to show.
const FORMAT_NUM_SIG_DIGITS = 7;
function tensorToString(vals, shape, dtype, verbose) {
    const strides = computeStrides(shape);
    const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);
    const rank = shape.length;
    const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);
    const lines = ['Tensor'];
    if (verbose) {
        lines.push(`  dtype: ${dtype}`);
        lines.push(`  rank: ${rank}`);
        lines.push(`  shape: [${shape}]`);
        lines.push(`  values:`);
    }
    lines.push(valsLines.map(l => '    ' + l).join('\n'));
    return lines.join('\n');
}
function computeMaxSizePerColumn(vals, shape, dtype, strides) {
    const n = sizeFromShape(shape);
    const numCols = strides[strides.length - 1];
    const padPerCol = new Array(numCols).fill(0);
    const rank = shape.length;
    const valuesOrTuples = dtype === 'complex64' ? createComplexTuples(vals) : vals;
    if (rank > 1) {
        for (let row = 0; row < n / numCols; row++) {
            const offset = row * numCols;
            for (let j = 0; j < numCols; j++) {
                padPerCol[j] = Math.max(padPerCol[j], valToString(valuesOrTuples[offset + j], 0, dtype).length);
            }
        }
    }
    return padPerCol;
}
function valToString(val, pad, dtype) {
    let valStr;
    if (Array.isArray(val)) {
        valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` +
            `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;
    }
    else if (isString$1(val)) {
        valStr = `'${val}'`;
    }
    else if (dtype === 'bool') {
        valStr = boolNumToString(val);
    }
    else {
        valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();
    }
    return rightPad(valStr, pad);
}
function boolNumToString(v) {
    return v === 0 ? 'false' : 'true';
}
function subTensorToString(vals, shape, dtype, strides, padPerCol, isLast = true) {
    const storagePerElement = dtype === 'complex64' ? 2 : 1;
    const size = shape[0];
    const rank = shape.length;
    if (rank === 0) {
        if (dtype === 'complex64') {
            const complexTuple = createComplexTuples(vals);
            return [valToString(complexTuple[0], 0, dtype)];
        }
        if (dtype === 'bool') {
            return [boolNumToString(vals[0])];
        }
        return [vals[0].toString()];
    }
    if (rank === 1) {
        if (size > FORMAT_LIMIT_NUM_VALS) {
            const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;
            let firstVals = Array.from(vals.slice(0, firstValsSize));
            let lastVals = Array.from(vals.slice((size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement, size * storagePerElement));
            if (dtype === 'complex64') {
                firstVals = createComplexTuples(firstVals);
                lastVals = createComplexTuples(lastVals);
            }
            return [
                '[' +
                    firstVals.map((x, i) => valToString(x, padPerCol[i], dtype))
                        .join(', ') +
                    ', ..., ' +
                    lastVals
                        .map((x, i) => valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype))
                        .join(', ') +
                    ']'
            ];
        }
        const displayVals = dtype === 'complex64' ? createComplexTuples(vals) :
            Array.from(vals);
        return [
            '[' +
                displayVals.map((x, i) => valToString(x, padPerCol[i], dtype))
                    .join(', ') +
                ']'
        ];
    }
    // The array is rank 2 or more.
    const subshape = shape.slice(1);
    const substrides = strides.slice(1);
    const stride = strides[0] * storagePerElement;
    const lines = [];
    if (size > FORMAT_LIMIT_NUM_VALS) {
        for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {
            const start = i * stride;
            const end = start + stride;
            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, false /* isLast */));
        }
        lines.push('...');
        for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {
            const start = i * stride;
            const end = start + stride;
            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));
        }
    }
    else {
        for (let i = 0; i < size; i++) {
            const start = i * stride;
            const end = start + stride;
            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));
        }
    }
    const sep = rank === 2 ? ',' : '';
    lines[0] = '[' + (size > 0 ? lines[0] + sep : '');
    for (let i = 1; i < lines.length - 1; i++) {
        lines[i] = ' ' + lines[i] + sep;
    }
    let newLineSep = ',\n';
    for (let i = 2; i < rank; i++) {
        newLineSep += '\n';
    }
    lines[lines.length - 1] =
        ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);
    return lines;
}
function createComplexTuples(vals) {
    const complexTuples = [];
    for (let i = 0; i < vals.length; i += 2) {
        complexTuples.push([vals[i], vals[i + 1]]);
    }
    return complexTuples;
}

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265
/// <reference types="@webgpu/types/dist" />
// For tracking tensor creation and disposal.
let trackerFn = null;
// Used by chaining methods to call into ops.
let opHandler = null;
/**
 * An external consumer can register itself as the tensor tracker. This way
 * the Tensor class can notify the tracker for every tensor created and
 * disposed.
 */
function setTensorTracker(fn) {
    trackerFn = fn;
}
/**
 * A `tf.Tensor` object represents an immutable, multidimensional array of
 * numbers that has a shape and a data type.
 *
 * For performance reasons, functions that create tensors do not necessarily
 * perform a copy of the data passed to them (e.g. if the data is passed as a
 * `Float32Array`), and changes to the data will change the tensor. This is not
 * a feature and is not supported. To avoid this behavior, use the tensor before
 * changing the input data or create a copy with `copy = tf.add(yourTensor, 0)`.
 *
 * See `tf.tensor` for details on how to create a `tf.Tensor`.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
class Tensor {
    constructor(shape, dtype, dataId, id) {
        /** Whether this tensor has been globally kept. */
        this.kept = false;
        this.isDisposedInternal = false;
        this.shape = shape.slice();
        this.dtype = dtype || 'float32';
        this.size = sizeFromShape(shape);
        this.strides = computeStrides(shape);
        this.dataId = dataId;
        this.id = id;
        this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher');
    }
    get rank() {
        return this.shape.length;
    }
    /**
     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    async buffer() {
        const vals = await this.data();
        return opHandler.buffer(this.shape, this.dtype, vals);
    }
    /**
     * Returns a `tf.TensorBuffer` that holds the underlying data.
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    bufferSync() {
        return opHandler.buffer(this.shape, this.dtype, this.dataSync());
    }
    /**
     * Returns the tensor data as a nested array. The transfer of data is done
     * asynchronously.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    async array() {
        const vals = await this.data();
        return toNestedArray(this.shape, vals, this.dtype === 'complex64');
    }
    /**
     * Returns the tensor data as a nested array. The transfer of data is done
     * synchronously.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    arraySync() {
        return toNestedArray(this.shape, this.dataSync(), this.dtype === 'complex64');
    }
    /**
     * Asynchronously downloads the values from the `tf.Tensor`. Returns a
     * promise of `TypedArray` that resolves when the computation has finished.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    async data() {
        this.throwIfDisposed();
        const data = trackerFn().read(this.dataId);
        if (this.dtype === 'string') {
            const bytes = await data;
            try {
                return bytes.map(b => decodeString(b));
            }
            catch (_a) {
                throw new Error('Failed to decode the string bytes into utf-8. ' +
                    'To get the original bytes, call tensor.bytes().');
            }
        }
        return data;
    }
    /**
     * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`
     * and `data()`, this method prevents data from being downloaded to CPU.
     *
     * For WebGL backend, the data will be stored on a densely packed texture.
     * This means that the texture will use the RGBA channels to store value.
     *
     * For WebGPU backend, the data will be stored on a buffer. There is no
     * parameter, so can not use a user-defined size to create the buffer.
     *
     * @param options:
     *     For WebGL,
     *         - customTexShape: Optional. If set, will use the user defined
     *     texture shape to create the texture.
     *
     * @returns For WebGL backend, a GPUData contains the new texture and
     *     its information.
     *     {
     *        tensorRef: The tensor that is associated with this texture,
     *        texture: WebGLTexture,
     *        texShape: [number, number] // [height, width]
     *     }
     *
     *     For WebGPU backend, a GPUData contains the new buffer.
     *     {
     *        tensorRef: The tensor that is associated with this buffer,
     *        buffer: GPUBuffer,
     *     }
     *
     *     Remember to dispose the GPUData after it is used by
     *     `res.tensorRef.dispose()`.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    dataToGPU(options) {
        this.throwIfDisposed();
        return trackerFn().readToGPU(this.dataId, options);
    }
    /**
     * Synchronously downloads the values from the `tf.Tensor`. This blocks the
     * UI thread until the values are ready, which can cause performance issues.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    dataSync() {
        this.throwIfDisposed();
        const data = trackerFn().readSync(this.dataId);
        if (this.dtype === 'string') {
            try {
                return data.map(b => decodeString(b));
            }
            catch (_a) {
                throw new Error('Failed to decode the string bytes into utf-8. ' +
                    'To get the original bytes, call tensor.bytes().');
            }
        }
        return data;
    }
    /** Returns the underlying bytes of the tensor's data. */
    async bytes() {
        this.throwIfDisposed();
        const data = await trackerFn().read(this.dataId);
        if (this.dtype === 'string') {
            return data;
        }
        else {
            return new Uint8Array(data.buffer);
        }
    }
    /**
     * Disposes `tf.Tensor` from memory.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    dispose() {
        if (this.isDisposed) {
            return;
        }
        if (this.kerasMask) {
            this.kerasMask.dispose();
        }
        trackerFn().disposeTensor(this);
        this.isDisposedInternal = true;
    }
    get isDisposed() {
        return this.isDisposedInternal;
    }
    throwIfDisposed() {
        if (this.isDisposed) {
            throw new Error(`Tensor is disposed.`);
        }
    }
    /**
     * Prints the `tf.Tensor`. See `tf.print` for details.
     *
     * @param verbose Whether to print verbose information about the tensor,
     *    including dtype and size.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    print(verbose = false) {
        return opHandler.print(this, verbose);
    }
    /**
     * Returns a copy of the tensor. See `tf.clone` for details.
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    clone() {
        this.throwIfDisposed();
        return opHandler.clone(this);
    }
    /**
     * Returns a human-readable description of the tensor. Useful for logging.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    toString(verbose = false) {
        const vals = this.dataSync();
        return tensorToString(vals, this.shape, this.dtype, verbose);
    }
    cast(dtype) {
        this.throwIfDisposed();
        return opHandler.cast(this, dtype);
    }
    variable(trainable = true, name, dtype) {
        this.throwIfDisposed();
        return trackerFn().makeVariable(this, trainable, name, dtype);
    }
}
Object.defineProperty(Tensor, Symbol.hasInstance, {
    value: (instance) => {
        // Implementation note: we should use properties of the object that will be
        // defined before the constructor body has finished executing (methods).
        // This is because when this code is transpiled by babel, babel will call
        // classCallCheck before the constructor body is run.
        // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.
        return !!instance && instance.data != null && instance.dataSync != null &&
            instance.throwIfDisposed != null;
    }
});
function getGlobalTensorClass() {
    // Use getGlobal so that we can augment the Tensor class across package
    // boundaries becase the node resolution alg may result in different modules
    // being returned for this file depending on the path they are loaded from.
    return getGlobal('Tensor', () => {
        return Tensor;
    });
}
// Global side effect. Cache global reference to Tensor class
getGlobalTensorClass();
/**
 * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
class Variable extends Tensor {
    constructor(initialValue, trainable, name, tensorId) {
        super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);
        this.trainable = trainable;
        this.name = name;
    }
    /**
     * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have
     * the same shape and dtype as the old `tf.Tensor`.
     *
     * @param newValue New tensor to be assigned to this variable.
     *
     * @doc {heading: 'Tensors', subheading: 'Classes'}
     */
    assign(newValue) {
        if (newValue.dtype !== this.dtype) {
            throw new Error(`dtype of the new value (${newValue.dtype}) and ` +
                `previous value (${this.dtype}) must match`);
        }
        if (!arraysEqual(newValue.shape, this.shape)) {
            throw new Error(`shape of the new value (${newValue.shape}) and ` +
                `previous value (${this.shape}) must match`);
        }
        trackerFn().disposeTensor(this);
        this.dataId = newValue.dataId;
        trackerFn().incRef(this, null /* backend */);
    }
    dispose() {
        trackerFn().disposeVariable(this);
        this.isDisposedInternal = true;
    }
}
Object.defineProperty(Variable, Symbol.hasInstance, {
    value: (instance) => {
        return instance instanceof Tensor && instance.assign != null &&
            instance.assign instanceof Function;
    }
});

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var Rank;
(function (Rank) {
    Rank["R0"] = "R0";
    Rank["R1"] = "R1";
    Rank["R2"] = "R2";
    Rank["R3"] = "R3";
    Rank["R4"] = "R4";
    Rank["R5"] = "R5";
    Rank["R6"] = "R6";
})(Rank || (Rank = {}));
// Looks for upcasting types. Used, for example, in operations with mixed dtype
// inputs.
var UpcastInt32AndMap;
(function (UpcastInt32AndMap) {
    UpcastInt32AndMap["float32"] = "float32";
    UpcastInt32AndMap["int32"] = "int32";
    UpcastInt32AndMap["bool"] = "int32";
    UpcastInt32AndMap["complex64"] = "complex64";
})(UpcastInt32AndMap || (UpcastInt32AndMap = {}));
var UpcastBoolAndMap;
(function (UpcastBoolAndMap) {
    UpcastBoolAndMap["float32"] = "float32";
    UpcastBoolAndMap["int32"] = "int32";
    UpcastBoolAndMap["bool"] = "bool";
    UpcastBoolAndMap["complex64"] = "complex64";
})(UpcastBoolAndMap || (UpcastBoolAndMap = {}));
var UpcastFloat32AndMap;
(function (UpcastFloat32AndMap) {
    UpcastFloat32AndMap["float32"] = "float32";
    UpcastFloat32AndMap["int32"] = "float32";
    UpcastFloat32AndMap["bool"] = "float32";
    UpcastFloat32AndMap["complex64"] = "complex64";
})(UpcastFloat32AndMap || (UpcastFloat32AndMap = {}));
var UpcastComplex64AndMap;
(function (UpcastComplex64AndMap) {
    UpcastComplex64AndMap["float32"] = "complex64";
    UpcastComplex64AndMap["int32"] = "complex64";
    UpcastComplex64AndMap["bool"] = "complex64";
    UpcastComplex64AndMap["complex64"] = "complex64";
})(UpcastComplex64AndMap || (UpcastComplex64AndMap = {}));
const upcastTypeMap = {
    'float32': UpcastFloat32AndMap,
    'int32': UpcastInt32AndMap,
    'bool': UpcastBoolAndMap,
    'complex64': UpcastComplex64AndMap
};
function upcastType(typeA, typeB) {
    if (typeA === 'string' || typeB === 'string') {
        if (typeA === 'string' && typeB === 'string') {
            return 'string';
        }
        throw new Error(`Can not upcast ${typeA} with ${typeB}`);
    }
    return upcastTypeMap[typeA][typeB];
}
function isWebGLData(values) {
    return values != null && typeof values === 'object' && 'texture' in values &&
        values.texture instanceof WebGLTexture;
}
function isWebGPUData(values) {
    return typeof GPUBuffer !== 'undefined' && values != null &&
        typeof values === 'object' && 'buffer' in values &&
        values.buffer instanceof GPUBuffer;
}

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function makeTypesMatch(a, b) {
    if (a.dtype === b.dtype) {
        return [a, b];
    }
    const dtype = upcastType(a.dtype, b.dtype);
    return [a.cast(dtype), b.cast(dtype)];
}
/**
 * Extracts any `Tensor`s found within the provided object.
 *
 * @param container an object that may be a `Tensor` or may directly contain
 *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it
 *   is safe to pass any object here, except that `Promise`s are not
 *   supported.
 * @returns An array of `Tensors` found within the passed object. If the
 *   argument is simply a `Tensor', a list containing that `Tensor` is
 *   returned. If the object is not a `Tensor` or does not
 *   contain `Tensors`, an empty list is returned.
 */
function getTensorsInContainer(result) {
    const list = [];
    const seen = new Set();
    walkTensorContainer(result, list, seen);
    return list;
}
function walkTensorContainer(container, list, seen) {
    if (container == null) {
        return;
    }
    if (container instanceof Tensor) {
        list.push(container);
        return;
    }
    if (!isIterable(container)) {
        return;
    }
    // Iteration over keys works also for arrays.
    const iterable = container;
    for (const k in iterable) {
        const val = iterable[k];
        if (!seen.has(val)) {
            seen.add(val);
            walkTensorContainer(val, list, seen);
        }
    }
}
// tslint:disable-next-line:no-any
function isIterable(obj) {
    return Array.isArray(obj) || typeof obj === 'object';
}

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function isRegisteredKernelInvocation(kernelInvocation) {
    return kernelInvocation.kernelName != null;
}
class EngineState {
    constructor() {
        // Public since optimizers will use it.
        this.registeredVariables = {};
        this.nextTapeNodeId = 0;
        this.numBytes = 0;
        this.numTensors = 0;
        this.numStringTensors = 0;
        this.numDataBuffers = 0;
        // Number of nested tf.grad() statements when computing higher-order
        // gradients. E.g. `1` for first-order gradients and `2` for second-order
        // gradients. Used to track if the tape should be removed after a backprop.
        this.gradientDepth = 0;
        // Number of nested kernel calls. When kernel depth is greater than 1, we turn
        // off the tape.
        this.kernelDepth = 0;
        this.scopeStack = [];
        /**
         * Keeps track of the number of data moves during a kernel execution. We
         * maintain a stack since kernels can call other kernels, recursively.
         */
        this.numDataMovesStack = [];
        this.nextScopeId = 0;
        this.tensorInfo = new WeakMap();
        this.profiling = false;
        this.activeProfile = {
            newBytes: 0,
            newTensors: 0,
            peakBytes: 0,
            kernels: [],
            result: null,
            get kernelNames() {
                return Array.from(new Set(this.kernels.map(k => k.name)));
            }
        };
    }
    dispose() {
        for (const variableName in this.registeredVariables) {
            this.registeredVariables[variableName].dispose();
        }
    }
}
class Engine {
    constructor(ENV) {
        this.ENV = ENV;
        this.registry = {};
        this.registryFactory = {};
        this.pendingBackendInitId = 0;
        this.state = new EngineState();
    }
    async ready() {
        if (this.pendingBackendInit != null) {
            return this.pendingBackendInit.then(() => { });
        }
        if (this.backendInstance != null) {
            return;
        }
        const sortedBackends = this.getSortedBackends();
        for (let i = 0; i < sortedBackends.length; i++) {
            const backendName = sortedBackends[i];
            const success = await this.initializeBackend(backendName).success;
            if (success) {
                await this.setBackend(backendName);
                return;
            }
        }
        throw new Error(`Could not initialize any backends, all backend initializations ` +
            `failed.`);
    }
    get backend() {
        if (this.pendingBackendInit != null) {
            throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` +
                `sure to await tf.ready() or await tf.setBackend() before calling ` +
                `other methods`);
        }
        if (this.backendInstance == null) {
            const { name, asyncInit } = this.initializeBackendsAndReturnBest();
            if (asyncInit) {
                throw new Error(`The highest priority backend '${name}' has not yet been ` +
                    `initialized. Make sure to await tf.ready() or ` +
                    `await tf.setBackend() before calling other methods`);
            }
            this.setBackend(name);
        }
        return this.backendInstance;
    }
    backendNames() {
        return Object.keys(this.registryFactory);
    }
    findBackend(backendName) {
        if (!(backendName in this.registry)) {
            // If the backend hasn't been initialized but we have a registry entry for
            // it, initialize it and return it.
            if (backendName in this.registryFactory) {
                const { asyncInit } = this.initializeBackend(backendName);
                if (asyncInit) {
                    // Backend is not ready yet.
                    return null;
                }
            }
            else {
                return null;
            }
        }
        return this.registry[backendName];
    }
    findBackendFactory(backendName) {
        if (!(backendName in this.registryFactory)) {
            return null;
        }
        return this.registryFactory[backendName].factory;
    }
    registerBackend(backendName, factory, priority = 1) {
        if (backendName in this.registryFactory) {
            warn(`${backendName} backend was already registered. ` +
                `Reusing existing backend factory.`);
            return false;
        }
        this.registryFactory[backendName] = { factory, priority };
        return true;
    }
    async setBackend(backendName) {
        if (this.registryFactory[backendName] == null) {
            throw new Error(`Backend name '${backendName}' not found in registry`);
        }
        this.backendName = backendName;
        if (this.registry[backendName] == null) {
            this.backendInstance = null;
            const { success, asyncInit } = this.initializeBackend(backendName);
            const result = asyncInit ? await success : success;
            if (!result) {
                return false;
            }
        }
        this.backendInstance = this.registry[backendName];
        this.setupRegisteredKernels();
        // Reset the profiler.
        this.profiler = new Profiler(this.backendInstance);
        return true;
    }
    setupRegisteredKernels() {
        const kernels = getKernelsForBackend(this.backendName);
        kernels.forEach(kernel => {
            if (kernel.setupFunc != null) {
                kernel.setupFunc(this.backendInstance);
            }
        });
    }
    disposeRegisteredKernels(backendName) {
        const kernels = getKernelsForBackend(backendName);
        kernels.forEach(kernel => {
            if (kernel.disposeFunc != null) {
                kernel.disposeFunc(this.registry[backendName]);
            }
        });
    }
    /**
     * Initializes a backend by looking up the backend name in the factory
     * registry and calling the factory method. Returns a boolean representing
     * whether the initialization of the backend suceeded. Throws an error if
     * there is no backend in the factory registry.
     */
    initializeBackend(backendName) {
        const registryFactoryEntry = this.registryFactory[backendName];
        if (registryFactoryEntry == null) {
            throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);
        }
        try {
            const backend = registryFactoryEntry.factory();
            /* Test if the factory returns a promise.
            Done in a more liberal way than
            previous 'Promise.resolve(backend)===backend'
            as we needed to account for custom Promise
            implementations (e.g. Angular) */
            if (backend && !(backend instanceof KernelBackend) &&
                typeof backend.then === 'function') {
                const promiseId = ++this.pendingBackendInitId;
                const success = backend
                    .then(backendInstance => {
                    // Outdated promise. Another backend was set in the meantime.
                    if (promiseId < this.pendingBackendInitId) {
                        return false;
                    }
                    this.registry[backendName] = backendInstance;
                    this.pendingBackendInit = null;
                    return true;
                })
                    .catch(err => {
                    // Outdated promise. Another backend was set in the meantime.
                    if (promiseId < this.pendingBackendInitId) {
                        return false;
                    }
                    this.pendingBackendInit = null;
                    warn(`Initialization of backend ${backendName} failed`);
                    warn(err.stack || err.message);
                    return false;
                });
                this.pendingBackendInit = success;
                return { success, asyncInit: true };
            }
            else {
                this.registry[backendName] = backend;
                return { success: true, asyncInit: false };
            }
        }
        catch (err) {
            warn(`Initialization of backend ${backendName} failed`);
            warn(err.stack || err.message);
            return { success: false, asyncInit: false };
        }
    }
    removeBackend(backendName) {
        if (!(backendName in this.registryFactory)) {
            throw new Error(`${backendName} backend not found in registry`);
        }
        if (this.backendName === backendName && this.pendingBackendInit != null) {
            // There is a pending promise of the backend we want to remove. Make it
            // obsolete.
            this.pendingBackendInitId++;
        }
        if (backendName in this.registry) {
            this.disposeRegisteredKernels(backendName);
            this.registry[backendName].dispose();
            delete this.registry[backendName];
        }
        delete this.registryFactory[backendName];
        // Unset the backend if it is active.
        if (this.backendName === backendName) {
            this.pendingBackendInit = null;
            this.backendName = null;
            this.backendInstance = null;
        }
    }
    getSortedBackends() {
        if (Object.keys(this.registryFactory).length === 0) {
            throw new Error('No backend found in registry.');
        }
        return Object.keys(this.registryFactory).sort((a, b) => {
            // Highest priority comes first.
            return this.registryFactory[b].priority -
                this.registryFactory[a].priority;
        });
    }
    initializeBackendsAndReturnBest() {
        const sortedBackends = this.getSortedBackends();
        for (let i = 0; i < sortedBackends.length; i++) {
            const backendName = sortedBackends[i];
            const { success, asyncInit } = this.initializeBackend(backendName);
            if (asyncInit || success) {
                return { name: backendName, asyncInit };
            }
        }
        throw new Error(`Could not initialize any backends, all backend initializations ` +
            `failed.`);
    }
    moveData(backend, dataId) {
        const info = this.state.tensorInfo.get(dataId);
        const srcBackend = info.backend;
        const values = this.readSync(dataId);
        const refCount = srcBackend.refCount(dataId);
        // Delete the tensor from the old backend and move it to the new
        // backend.
        srcBackend.disposeData(dataId, true);
        info.backend = backend;
        backend.move(dataId, values, info.shape, info.dtype, refCount);
        if (this.shouldCheckForMemLeaks()) {
            // Track the number of moves during a kernel execution to correctly
            // detect memory leaks.
            this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
        }
    }
    tidy(nameOrFn, fn) {
        let name = null;
        if (fn == null) {
            // Called with only 1 argument.
            if (typeof nameOrFn !== 'function') {
                throw new Error('Please provide a function to tidy()');
            }
            fn = nameOrFn;
        }
        else {
            // Called with 2 arguments.
            if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {
                throw new Error('When calling with two arguments, the first argument ' +
                    'to tidy() must be a string');
            }
            if (typeof fn !== 'function') {
                throw new Error('When calling with two arguments, the 2nd argument ' +
                    'to tidy() must be a function');
            }
            name = nameOrFn;
            // TODO(nsthorat,smilkov): Do operation logging and performance
            // profiling.
        }
        let result;
        return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {
            result = fn();
            if (result instanceof Promise) {
                console.error('Cannot return a Promise inside of tidy.');
            }
            return result;
        });
    }
    scopedRun(start, end, f) {
        start();
        try {
            const res = f();
            end();
            return res;
        }
        catch (ex) {
            end();
            throw ex;
        }
    }
    nextTensorId() {
        return Engine.nextTensorId++;
    }
    nextVariableId() {
        return Engine.nextVariableId++;
    }
    /**
     * This method is called instead of the public-facing tensor.clone() when
     * saving a tensor for backwards pass. It makes sure to add the clone
     * operation to the tape regardless of being called inside a kernel
     * execution.
     */
    clone(x) {
        const y = ENGINE.runKernel(Identity, { x });
        const inputs = { x };
        const grad = (dy) => ({
            x: () => {
                const dtype = 'float32';
                const gradInputs = { x: dy };
                const attrs = { dtype };
                return ENGINE.runKernel(Cast, gradInputs, 
                // tslint:disable-next-line: no-unnecessary-type-assertion
                attrs);
            }
        });
        const saved = [];
        this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});
        return y;
    }
    /**
     * Execute a kernel with the given name and return the output tensor.
     *
     * @param kernelName The name of the kernel to execute.
     * @param inputs A map of input names to tensors.
     * @param attrs A map of attribute names to their values. An attribute is a
     *     primitive (non-tensor) input to the kernel.
     * @param inputsToSave A list of tensors, inputs to save for the backprop
     *     computation.
     * @param outputsToSave A list of booleans, specifying which output to save
     *     for the backprop computation. These are booleans since the output
     * tensors are not visible to the user.
     */
    runKernel(kernelName, inputs, attrs) {
        if (this.backendName == null) {
            // backend has not been initialized yet (backend initialization is lazy
            // can be deferred until an op/ kernel is run).
            // The below getter has side effects that will try to initialize the
            // backend and set properties like this.backendName
            // tslint:disable-next-line: no-unused-expression
            this.backend;
        }
        const hasKernel = getKernel(kernelName, this.backendName) != null;
        if (!hasKernel) {
            throw new Error(`Kernel '${kernelName}' not registered for backend '${this.backendName}'`);
        }
        return this.runKernelFunc({ kernelName, inputs, attrs });
    }
    shouldCheckForMemLeaks() {
        return this.ENV.getBool('IS_TEST');
    }
    checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {
        const numDataIdsAfter = this.backend.numDataIds();
        // Count the number of data ids associated with the result of the kernel.
        let numOutputDataIds = 0;
        outInfos.forEach(info => {
            // Complex numbers allocate 3 data ids, one for 'real', one for
            // 'imaginary', and one for the container that holds the former two.
            numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);
        });
        // Account for the number of moves during kernel execution. A "data move"
        // can happen in the middle of a kernel execution, placing a new (key,value)
        // pair in the data storage. Since data moves have net zero effect (we
        // always remove the data from the old backend), we have to cancel them out
        // when detecting memory leaks.
        const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];
        const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;
        if (dataIdsLeaked > 0) {
            throw new Error(`Backend '${this.backendName}' has an internal memory leak ` +
                `(${dataIdsLeaked} data ids) after running '${kernelName}'`);
        }
    }
    /**
     * Internal helper method to execute a kernel Func
     *
     * Use `runKernel` to execute kernels from outside of engine.
     */
    runKernelFunc(kernelParams) {
        let outputs;
        let saved = [];
        const isTapeOn = this.isTapeOn();
        const startingBytecount = this.state.numBytes;
        const startingNumTensors = this.state.numTensors;
        if (this.shouldCheckForMemLeaks()) {
            this.state.numDataMovesStack.push(0);
        }
        let kernelFunc;
        if (this.backendName == null) {
            // backend has not been initialized yet (backend initialization is lazy
            // can be deferred until an op/ kernel is run).
            // The below getter has side effects that will try to initialize the
            // backend and set properties like this.backendName
            // tslint:disable-next-line: no-unused-expression
            this.backend;
        }
        let out;
        const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ?
            kernelParams.kernelName :
            this.state.activeScope != null ? this.state.activeScope.name : '';
        // Create the kernelFunc from either a registered kernel OR passed in
        // forward/backward functions (used by custom grad). In this context a
        // kernelFunc wraps a kernel implementation with some bookkeeping.
        if (isRegisteredKernelInvocation(kernelParams)) {
            const { kernelName, inputs, attrs } = kernelParams;
            if (this.backendName == null) {
                // backend has not been initialized yet (backend initialization is lazy
                // can be deferred until an op/ kernel is run).
                // The below getter has side effects that will try to initialize the
                // backend and set properties like this.backendName
                // tslint:disable-next-line: no-unused-expression
                this.backend;
            }
            const kernel = getKernel(kernelName, this.backendName);
            assert(kernel != null, () => `Cannot find registered kernel '${kernelName}' for backend '${this.backendName}'`);
            kernelFunc = () => {
                const numDataIdsBefore = this.backend.numDataIds();
                out = kernel.kernelFunc({ inputs, attrs, backend: this.backend });
                const outInfos = Array.isArray(out) ? out : [out];
                if (this.shouldCheckForMemLeaks()) {
                    this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);
                }
                const outTensors = outInfos.map((outInfo) => {
                    // todo (yassogba) remove this option (Tensor) when node backend
                    // methods have been modularized and they all return tensorInfo.
                    // TensorInfos do not have a rank attribute.
                    if (outInfo.rank != null) {
                        return outInfo;
                    }
                    return this.makeTensorFromTensorInfo(outInfo);
                });
                // Save any required inputs and outputs.
                // Do not save unless we are recording to the tape. Otherwise it would
                // cause a mem leak since there would be no backprop for these tensors
                // (which would otherwise dispose them).
                if (isTapeOn) {
                    const tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);
                    saved = this.saveTensorsForBackwardMode(tensorsToSave);
                }
                return outTensors;
            };
        }
        else {
            const { forwardFunc } = kernelParams;
            // Running a customGrad op.
            const saveFunc = (tensors) => {
                // Do not save unless we are recording to the tape. Otherwise it would
                // cause a mem leak since we would never run backprop, which disposes
                // the kept tensors.
                if (!isTapeOn) {
                    return;
                }
                saved = tensors.map(tensor => this.keep(this.clone(tensor)));
            };
            kernelFunc = () => {
                const numDataIdsBefore = this.backend.numDataIds();
                out = this.tidy(() => forwardFunc(this.backend, saveFunc));
                const outs = (Array.isArray(out) ? out : [out]);
                if (this.shouldCheckForMemLeaks()) {
                    // Scope name is used to print a more helpful error message if needed.
                    this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);
                }
                return outs;
            };
        }
        //
        // Run the kernelFunc. Optionally profiling it.
        //
        const { inputs, attrs } = kernelParams;
        const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ?
            null :
            kernelParams.backwardsFunc;
        let kernelProfile;
        this.scopedRun(
        // Stop recording to a tape when running a kernel.
        () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {
            if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {
                outputs = kernelFunc();
            }
            else {
                kernelProfile = this.profiler.profileKernel(kernelOrScopeName, inputs, () => kernelFunc());
                if (this.ENV.getBool('DEBUG')) {
                    this.profiler.logKernelProfile(kernelProfile);
                }
                outputs = kernelProfile.outputs;
            }
        });
        if (isTapeOn) {
            this.addTapeNode(kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);
        }
        if (this.state.profiling) {
            this.state.activeProfile.kernels.push({
                name: kernelOrScopeName,
                bytesAdded: this.state.numBytes - startingBytecount,
                totalBytesSnapshot: this.state.numBytes,
                tensorsAdded: this.state.numTensors - startingNumTensors,
                totalTensorsSnapshot: this.state.numTensors,
                inputShapes: Object.keys(inputs).map(key => inputs[key] != null ? inputs[key].shape : null),
                outputShapes: outputs.map(item => item.shape),
                kernelTimeMs: kernelProfile.timeMs,
                extraInfo: kernelProfile.extraInfo
            });
        }
        return (Array.isArray(out) ? outputs : outputs[0]);
    }
    /**
     * Saves tensors used in forward mode for use in backward mode.
     *
     * @param tensors the list of tensors to save.
     */
    saveTensorsForBackwardMode(tensors) {
        const saved = tensors.map(tensor => this.keep(this.clone(tensor)));
        return saved;
    }
    /**
     * Returns a list of tensors to save for a given gradient calculation.
     *
     * @param kernelName name of kernel to look up gradient for.
     * @param inputs a map of input tensors.
     * @param outputs an array of output tensors from forward mode of kernel.
     */
    getTensorsForGradient(kernelName, inputs, outputs) {
        const gradConfig = getGradient(kernelName);
        if (gradConfig != null) {
            const inputsToSave = gradConfig.inputsToSave || [];
            const outputsToSave = gradConfig.outputsToSave || [];
            // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs
            // specified in inputsToSave will be saved.
            let inputTensorsToSave;
            if (gradConfig.saveAllInputs) {
                assert(Array.isArray(inputs), () => 'saveAllInputs is true, expected inputs to be an array.');
                inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);
            }
            else {
                inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);
            }
            const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);
            return inputTensorsToSave.concat(outputTensorsToSave);
        }
        // We return an empty list rather than throw an error because the kernel we
        // are looking up may not actually be relevant to backproping through the
        // overall function
        //
        // See 'does not error if irrelevant (pruned) ops are missing grads' test
        // in gradients_test.ts for an example.
        return [];
    }
    /**
     * Internal method used by public APIs for tensor creation. Makes a new
     * tensor with the provided shape, dtype and values. It always
     * creates a new data id and writes the values to the underlying backend.
     */
    makeTensor(values, shape, dtype, backend) {
        if (values == null) {
            throw new Error('Values passed to engine.makeTensor() are null');
        }
        dtype = dtype || 'float32';
        backend = backend || this.backend;
        let backendVals = values;
        if (dtype === 'string' && isString$1(values[0])) {
            backendVals = values.map(d => encodeString(d));
        }
        const dataId = backend.write(backendVals, shape, dtype);
        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());
        this.trackTensor(t, backend);
        // Count bytes for string tensors.
        if (dtype === 'string') {
            const info = this.state.tensorInfo.get(dataId);
            const newBytes = bytesFromStringArray(backendVals);
            this.state.numBytes += newBytes - info.bytes;
            info.bytes = newBytes;
        }
        return t;
    }
    /**
     * Internal method used by backends. Makes a new tensor
     * that is a wrapper around an existing data id. It doesn't create
     * a new data id, only increments the ref count used in memory tracking.
     * @deprecated
     */
    makeTensorFromDataId(dataId, shape, dtype, backend) {
        dtype = dtype || 'float32';
        const tensorInfo = { dataId, shape, dtype };
        return this.makeTensorFromTensorInfo(tensorInfo, backend);
    }
    /**
     * Internal method used by backends. Makes a new tensor that is a wrapper
     * around an existing data id in TensorInfo. It doesn't create a new data id,
     * only increments the ref count used in memory tracking.
     */
    makeTensorFromTensorInfo(tensorInfo, backend) {
        const { dataId, shape, dtype } = tensorInfo;
        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());
        this.trackTensor(t, backend);
        return t;
    }
    makeVariable(initialValue, trainable = true, name, dtype) {
        name = name || this.nextVariableId().toString();
        if (dtype != null && dtype !== initialValue.dtype) {
            initialValue = initialValue.cast(dtype);
        }
        const v = new Variable(initialValue, trainable, name, this.nextTensorId());
        if (this.state.registeredVariables[v.name] != null) {
            throw new Error(`Variable with name ${v.name} was already registered`);
        }
        this.state.registeredVariables[v.name] = v;
        this.incRef(v, this.backend);
        return v;
    }
    trackTensor(a, backend) {
        this.state.numTensors++;
        if (a.dtype === 'string') {
            this.state.numStringTensors++;
        }
        // Bytes for complex numbers are counted by their components. Bytes for
        // string tensors are counted when writing values.
        let bytes = 0;
        if (a.dtype !== 'complex64' && a.dtype !== 'string') {
            bytes = a.size * bytesPerElement(a.dtype);
        }
        this.state.numBytes += bytes;
        if (!this.state.tensorInfo.has(a.dataId)) {
            this.state.numDataBuffers++;
            this.state.tensorInfo.set(a.dataId, {
                backend: backend || this.backend,
                dtype: a.dtype,
                shape: a.shape,
                bytes
            });
        }
        if (!(a instanceof Variable)) {
            this.track(a);
        }
    }
    // Track the tensor by dataId and increase the refCount for the dataId in the
    // backend.
    // TODO(pyu10055): This is currently used by makeVariable method, to increase
    // refCount on the backend for the dataId. It can potentially be replaced with
    // Identity op indead of calling backend directly.
    incRef(a, backend) {
        this.trackTensor(a, backend);
        this.backend.incRef(a.dataId);
    }
    removeDataId(dataId, backend) {
        if (this.state.tensorInfo.has(dataId) &&
            this.state.tensorInfo.get(dataId).backend === backend) {
            this.state.tensorInfo.delete(dataId);
            this.state.numDataBuffers--;
        }
    }
    disposeTensor(a) {
        if (!this.state.tensorInfo.has(a.dataId)) {
            return;
        }
        const info = this.state.tensorInfo.get(a.dataId);
        this.state.numTensors--;
        if (a.dtype === 'string') {
            this.state.numStringTensors--;
            this.state.numBytes -= info.bytes;
        }
        // Don't count bytes for complex numbers as they are counted by their
        // components.
        if (a.dtype !== 'complex64' && a.dtype !== 'string') {
            const bytes = a.size * bytesPerElement(a.dtype);
            this.state.numBytes -= bytes;
        }
        // Remove the reference to dataId if backend dispose the data successfully
        if (info.backend.disposeData(a.dataId)) {
            this.removeDataId(a.dataId, info.backend);
        }
        // TODO(nsthorat): Construct an error and save the stack trace for
        // debugging when in debug mode. Creating a stack trace is too expensive
        // to do unconditionally.
    }
    disposeVariables() {
        for (const varName in this.state.registeredVariables) {
            const v = this.state.registeredVariables[varName];
            this.disposeVariable(v);
        }
    }
    disposeVariable(v) {
        this.disposeTensor(v);
        if (this.state.registeredVariables[v.name] != null) {
            delete this.state.registeredVariables[v.name];
        }
    }
    memory() {
        const info = this.backend.memory();
        info.numTensors = this.state.numTensors;
        info.numDataBuffers = this.state.numDataBuffers;
        info.numBytes = this.state.numBytes;
        if (this.state.numStringTensors > 0) {
            info.unreliable = true;
            if (info.reasons == null) {
                info.reasons = [];
            }
            info.reasons.push('Memory usage by string tensors is approximate ' +
                '(2 bytes per character)');
        }
        return info;
    }
    async profile(query) {
        this.state.profiling = true;
        const startBytes = this.state.numBytes;
        const startNumTensors = this.state.numTensors;
        this.state.activeProfile.kernels = [];
        this.state.activeProfile.result = await query();
        this.state.profiling = false;
        this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));
        this.state.activeProfile.newBytes = this.state.numBytes - startBytes;
        this.state.activeProfile.newTensors =
            this.state.numTensors - startNumTensors;
        for (const kernel of this.state.activeProfile.kernels) {
            kernel.kernelTimeMs = await kernel.kernelTimeMs;
            kernel.extraInfo = await kernel.extraInfo;
        }
        return this.state.activeProfile;
    }
    isTapeOn() {
        return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
    }
    addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {
        const tapeNode = { id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved };
        const gradConfig = getGradient(kernelName);
        if (gradConfig != null) {
            gradientsFunc = gradConfig.gradFunc;
        }
        if (gradientsFunc != null) {
            tapeNode.gradient = (dys) => {
                // TODO(smilkov): To optimize back-prop, pass dys that are not used in
                // the backprop graph to the user as null instead of zeros
                dys = dys.map((dy, i) => {
                    if (dy == null) {
                        const output = outputs[i];
                        const vals = makeZerosTypedArray(output.size, output.dtype);
                        return this.makeTensor(vals, output.shape, output.dtype);
                    }
                    return dy;
                });
                // Grad functions of ops with single outputs expect a dy, while ops
                // with multiple outputs expect dys (array of dy).
                return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);
            };
        }
        this.state.activeTape.push(tapeNode);
    }
    keep(result) {
        result.kept = true;
        return result;
    }
    startTape() {
        if (this.state.gradientDepth === 0) {
            this.state.activeTape = [];
        }
        this.state.gradientDepth++;
    }
    endTape() {
        this.state.gradientDepth--;
    }
    /**
     * Start a scope. Use this with endScope() to achieve the same functionality
     * as scope() without the need for a function closure.
     */
    startScope(name) {
        const scopeInfo = {
            track: [],
            name: 'unnamed scope',
            id: this.state.nextScopeId++
        };
        if (name) {
            scopeInfo.name = name;
        }
        this.state.scopeStack.push(scopeInfo);
        this.state.activeScope = scopeInfo;
    }
    /**
     * End a scope. Use this with startScope() to achieve the same functionality
     * as scope() without the need for a function closure.
     */
    endScope(result) {
        const tensorsToTrackInParent = getTensorsInContainer(result);
        const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(t => t.id));
        // Dispose the arrays tracked in this scope.
        for (let i = 0; i < this.state.activeScope.track.length; i++) {
            const tensor = this.state.activeScope.track[i];
            if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {
                tensor.dispose();
            }
        }
        const oldScope = this.state.scopeStack.pop();
        this.state.activeScope = this.state.scopeStack.length === 0 ?
            null :
            this.state.scopeStack[this.state.scopeStack.length - 1];
        // Track the current result in the parent scope.
        tensorsToTrackInParent.forEach(tensor => {
            // Only track the tensor if was allocated in the inner scope and is not
            // globally kept.
            if (!tensor.kept && tensor.scopeId === oldScope.id) {
                this.track(tensor);
            }
        });
    }
    /**
     * Returns gradients of `f` with respect to each of the `xs`. The gradients
     * returned are of the same length as `xs`, but some might be null if `f`
     * was not a function of that `x`. It also takes optional dy to multiply the
     * gradient, which defaults to `1`.
     */
    gradients(f, xs, dy, allowNoGradients = false) {
        assert(xs.length > 0, () => 'gradients() received an empty list of xs.');
        if (dy != null && dy.dtype !== 'float32') {
            throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);
        }
        const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy('forward', f));
        assert(y instanceof Tensor, () => 'The result y returned by f() must be a tensor.');
        // Filter out the nodes that don't connect x => y.
        const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);
        if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {
            throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' +
                'that the f you passed encloses all operations that lead from x ' +
                'to y.');
        }
        return this.tidy('backward', () => {
            const accumulatedGradientMap = {};
            accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;
            // Backprop gradients through the filtered nodes.
            backpropagateGradients(accumulatedGradientMap, filteredTape, 
            // Pass the tidy function to avoid circular dep with `tape.ts`.
            f => this.tidy(f), 
            // Pass an add function to avoide a circular dep with `tape.ts`.
            add);
            const grads = xs.map(x => accumulatedGradientMap[x.id]);
            if (this.state.gradientDepth === 0) {
                // This means that we are not computing higher-order gradients
                // and can clean up the tape.
                this.state.activeTape.forEach(node => {
                    for (const tensor of node.saved) {
                        tensor.dispose();
                    }
                });
                this.state.activeTape = null;
            }
            return { value: y, grads };
        });
    }
    customGrad(f) {
        assert(isFunction$2(f), () => 'The f passed in customGrad(f) must be a function.');
        return (...inputs) => {
            assert(inputs.every(t => t instanceof Tensor), () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +
                'tensors');
            let res;
            const inputMap = {};
            inputs.forEach((input, i) => {
                inputMap[i] = input;
            });
            const forwardFunc = (_, save) => {
                res = f(...[...inputs, save]);
                assert(res.value instanceof Tensor, () => 'The function f passed in customGrad(f) must return an ' +
                    'object where `obj.value` is a tensor');
                assert(isFunction$2(res.gradFunc), () => 'The function f passed in customGrad(f) must return an ' +
                    'object where `obj.gradFunc` is a function.');
                return res.value;
            };
            const backwardsFunc = (dy, saved) => {
                const gradRes = res.gradFunc(dy, saved);
                const grads = Array.isArray(gradRes) ? gradRes : [gradRes];
                assert(grads.length === inputs.length, () => 'The function f passed in customGrad(f) must return an ' +
                    'object where `obj.gradFunc` is a function that returns ' +
                    'the same number of tensors as inputs passed to f(...).');
                assert(grads.every(t => t instanceof Tensor), () => 'The function f passed in customGrad(f) must return an ' +
                    'object where `obj.gradFunc` is a function that returns ' +
                    'a list of only tensors.');
                const gradMap = {};
                grads.forEach((grad, i) => {
                    gradMap[i] = () => grad;
                });
                return gradMap;
            };
            return this.runKernelFunc({
                forwardFunc,
                backwardsFunc,
                inputs: inputMap,
            });
        };
    }
    readSync(dataId) {
        // Route the read to the correct backend.
        const info = this.state.tensorInfo.get(dataId);
        return info.backend.readSync(dataId);
    }
    read(dataId) {
        // Route the read to the correct backend.
        const info = this.state.tensorInfo.get(dataId);
        return info.backend.read(dataId);
    }
    readToGPU(dataId, options) {
        // Route the read to the correct backend.
        const info = this.state.tensorInfo.get(dataId);
        return info.backend.readToGPU(dataId, options);
    }
    async time(query) {
        const start = now();
        const timingInfo = await this.backend.time(query);
        timingInfo.wallMs = now() - start;
        return timingInfo;
    }
    /**
     * Tracks a Tensor in the current scope to be automatically cleaned up
     * when the current scope ends, and returns the value.
     *
     * @param result The Tensor to track in the current scope.
     */
    track(result) {
        if (this.state.activeScope != null) {
            result.scopeId = this.state.activeScope.id;
            this.state.activeScope.track.push(result);
        }
        return result;
    }
    get registeredVariables() {
        return this.state.registeredVariables;
    }
    /**
     * Resets the engine state. Removes all backends but does not remove
     * registered backend factories.
     */
    reset() {
        // Make any pending promise obsolete.
        this.pendingBackendInitId++;
        this.state.dispose();
        this.ENV.reset();
        this.state = new EngineState();
        for (const backendName in this.registry) {
            this.disposeRegisteredKernels(backendName);
            this.registry[backendName].dispose();
            delete this.registry[backendName];
        }
        this.backendName = null;
        this.backendInstance = null;
        this.pendingBackendInit = null;
    }
}
Engine.nextTensorId = 0;
Engine.nextVariableId = 0;
function ones(shape) {
    const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');
    return ENGINE.makeTensor(values, shape, 'float32');
}
function getOrMakeEngine() {
    const ns = getGlobalNamespace();
    if (ns._tfengine == null) {
        const environment = new Environment(ns);
        ns._tfengine = new Engine(environment);
    }
    setEnvironmentGlobal(ns._tfengine.ENV);
    // Tell the current tensor interface that the global engine is responsible
    // for tracking.
    setTensorTracker(() => ns._tfengine);
    return ns._tfengine;
}
const ENGINE = getOrMakeEngine();
/**
 * A implementation of the add op for use within engine and tape.
 *
 * This allows us to avoid a circular dependency between add.ts and engine.
 * It is exported to be available in tape tests.
 */
function add(a, b) {
    // We duplicate Add here to avoid a circular dependency with add.ts.
    const inputs = { a, b };
    return ENGINE.runKernel(Add, inputs);
}

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function inferShape(val, dtype) {
    let firstElem = val;
    if (isTypedArray(val)) {
        return dtype === 'string' ? [] : [val.length];
    }
    if (isWebGLData(val)) {
        const usedChannels = val.channels || 'RGBA';
        return [val.height, val.width * usedChannels.length];
    }
    else if (isWebGPUData(val)) {
        return [val.buffer.size / (dtype == null ? 4 : bytesPerElement(dtype))];
    }
    if (!Array.isArray(val)) {
        return []; // Scalar.
    }
    const shape = [];
    while (Array.isArray(firstElem) ||
        isTypedArray(firstElem) && dtype !== 'string') {
        shape.push(firstElem.length);
        firstElem = firstElem[0];
    }
    if (Array.isArray(val) &&
        env().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {
        deepAssertShapeConsistency(val, shape, []);
    }
    return shape;
}
function deepAssertShapeConsistency(val, shape, indices) {
    indices = indices || [];
    if (!(Array.isArray(val)) && !isTypedArray(val)) {
        assert(shape.length === 0, () => `Element arr[${indices.join('][')}] is a primitive, ` +
            `but should be an array/TypedArray of ${shape[0]} elements`);
        return;
    }
    assert(shape.length > 0, () => `Element arr[${indices.join('][')}] should be a primitive, ` +
        `but is an array of ${val.length} elements`);
    assert(val.length === shape[0], () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` +
        `elements, but has ${val.length} elements`);
    const subShape = shape.slice(1);
    for (let i = 0; i < val.length; ++i) {
        deepAssertShapeConsistency(val[i], subShape, indices.concat(i));
    }
}
function assertDtype(expectedDtype, actualDType, argName, functionName) {
    if (expectedDtype === 'string_or_numeric') {
        return;
    }
    if (expectedDtype == null) {
        throw new Error(`Expected dtype cannot be null.`);
    }
    if (expectedDtype !== 'numeric' && expectedDtype !== actualDType ||
        expectedDtype === 'numeric' && actualDType === 'string') {
        throw new Error(`Argument '${argName}' passed to '${functionName}' must ` +
            `be ${expectedDtype} tensor, but got ${actualDType} tensor`);
    }
}
function convertToTensor(x, argName, functionName, parseAsDtype = 'numeric') {
    if (x instanceof Tensor) {
        assertDtype(parseAsDtype, x.dtype, argName, functionName);
        return x;
    }
    let inferredDtype = inferDtype(x);
    // If the user expects a bool/int/float, use that info to update the
    // inferredDtype when it is not a string.
    if (inferredDtype !== 'string' &&
        ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {
        inferredDtype = parseAsDtype;
    }
    assertDtype(parseAsDtype, inferredDtype, argName, functionName);
    if ((x == null) ||
        (!isTypedArray(x) && !Array.isArray(x) && typeof x !== 'number' &&
            typeof x !== 'boolean' && typeof x !== 'string')) {
        const type = x == null ? 'null' : x.constructor.name;
        throw new Error(`Argument '${argName}' passed to '${functionName}' must be a ` +
            `Tensor or TensorLike, but got '${type}'`);
    }
    const inferredShape = inferShape(x, inferredDtype);
    if (!isTypedArray(x) && !Array.isArray(x)) {
        x = [x];
    }
    const skipTypedArray = true;
    const values = inferredDtype !== 'string' ?
        toTypedArray(x, inferredDtype) :
        flatten(x, [], skipTypedArray);
    return ENGINE.makeTensor(values, inferredShape, inferredDtype);
}

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
const OP_SCOPE_SUFFIX = '__op';
/**
 * Used for wrapping functions that perform math operations on
 * Tensors. The function will be wrapped in a named scope that cleans all
 * memory usage after the function is done.
 */
function op(f) {
    const keys = Object.keys(f);
    if (keys.length !== 1) {
        throw new Error(`Please provide an object with a single key ` +
            `(operation name) mapping to a function. Got an object with ` +
            `${keys.length} keys.`);
    }
    let opName = keys[0];
    const fn = f[opName];
    // Strip the underscore from the end of the function name.
    if (opName.endsWith('_')) {
        opName = opName.substring(0, opName.length - 1);
    }
    // add an __op suffix to distinguish ops from kernels in tf.profile
    opName = opName + OP_SCOPE_SUFFIX;
    // tslint:disable-next-line:no-any
    const f2 = (...args) => {
        ENGINE.startScope(opName);
        try {
            const result = fn(...args);
            if (isPromise(result)) {
                console.error('Cannot return a Promise inside of tidy.');
            }
            ENGINE.endScope(result);
            return result;
        }
        catch (ex) {
            ENGINE.endScope(null);
            throw ex;
        }
    };
    Object.defineProperty(f2, 'name', { value: opName, configurable: true });
    // tslint:disable-next-line:no-any
    return f2;
}

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Gather slices from tensor `x`'s axis `axis` according to `indices`.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const indices = tf.tensor1d([1, 3, 3], 'int32');
 *
 * x.gather(indices).print();
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 * const indices = tf.tensor1d([1, 1, 0], 'int32');
 *
 * x.gather(indices).print();
 * ```
 * @param x The input tensor whose slices are to be gathered.
 * @param indices The indices of the values to extract.
 * @param axis The axis over which to select values. Defaults to 0.
 * @param batchDims Optional. The number of batch dimensions. It must be less
 *     than or equal to rank(indices). Defaults to 0.
 *     The output tensor will have shape of
 *     `x.shape[:axis] + indices.shape[batchDims:] + x.shape[axis + 1:]`
 *
 * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}
 */
function gather_(x, indices, axis = 0, batchDims = 0) {
    const $x = convertToTensor(x, 'x', 'gather');
    const $indices = convertToTensor(indices, 'indices', 'gather', 'int32');
    const inputs = { x: $x, indices: $indices };
    const attrs = { axis, batchDims };
    return ENGINE.runKernel(GatherV2, inputs, attrs);
}
const gather = /* @__PURE__ */ op({ gather_ });

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.gather = function (indices, axis, batchDims) {
    this.throwIfDisposed();
    return gather(this, indices, axis, batchDims);
};

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Returns the indices of the maximum values along an `axis`.
 *
 * The result has the same shape as `input` with the dimension along `axis`
 * removed.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.argMax().print();  // or tf.argMax(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 4, 3], [2, 2]);
 *
 * const axis = 1;
 * x.argMax(axis).print();  // or tf.argMax(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension to reduce. Defaults to 0 (outer-most dimension).
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function argMax_(x, axis = 0) {
    const $x = convertToTensor(x, 'x', 'argMax');
    const inputs = { x: $x };
    const attrs = { axis };
    return ENGINE.runKernel(ArgMax, inputs, attrs);
}
const argMax = /* @__PURE__ */ op({ argMax_ });

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.argMax = function (axis) {
    this.throwIfDisposed();
    return argMax(this, axis);
};

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Reshapes a `tf.Tensor` to a given shape.
 *
 * Given an input tensor, returns a new tensor with the same values as the
 * input tensor with shape `shape`.
 *
 * If one component of shape is the special value -1, the size of that
 * dimension is computed so that the total size remains constant. In
 * particular, a shape of [-1] flattens into 1-D. At most one component of
 * shape can be -1.
 *
 * If shape is 1-D or higher, then the operation returns a tensor with shape
 * shape filled with the values of tensor. In this case, the number of
 * elements implied by shape must be the same as the number of elements in
 * tensor.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * x.reshape([2, 2]).print();
 * ```
 *
 * @param x The input tensor to be reshaped.
 * @param shape An array of integers defining the output tensor shape.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function reshape_(x, shape) {
    const $x = convertToTensor(x, 'x', 'reshape', 'string_or_numeric');
    const inputs = { x: $x };
    const attrs = { shape };
    return ENGINE.runKernel(Reshape, inputs, attrs);
}
const reshape = /* @__PURE__ */ op({ reshape_ });

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Removes dimensions of size 1 from the shape of a `tf.Tensor`.
 *
 * ```js
 * const x = tf.tensor([1, 2, 3, 4], [1, 1, 4]);
 * x.squeeze().print();
 * ```
 *
 * @param x The input tensor to be squeezed.
 * @param axis An optional list of numbers. If specified, only
 *     squeezes the dimensions listed. The dimension index starts at 0. It
 * is an error to squeeze a dimension that is not 1.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function squeeze_(x, axis) {
    const $x = convertToTensor(x, 'x', 'squeeze', 'string_or_numeric');
    return reshape($x, squeezeShape($x.shape, axis).newShape);
}
const squeeze = /* @__PURE__ */ op({ squeeze_ });

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.squeeze = function (axis) {
    this.throwIfDisposed();
    return squeeze(this, axis);
};

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension
 * into the tensor's shape.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 * const axis = 1;
 * x.expandDims(axis).print();
 * ```
 *
 * @param x The input tensor whose dimensions are to be expanded.
 * @param axis The dimension index at which to insert shape of `1`. Defaults
 *     to 0 (the first dimension).
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function expandDims_(x, axis = 0) {
    const $x = convertToTensor(x, 'x', 'expandDims', 'string_or_numeric');
    assert(axis <= $x.rank, () => 'Axis must be <= rank of the tensor');
    const inputs = { input: $x };
    const attrs = { dim: axis };
    return ENGINE.runKernel(ExpandDims, inputs, attrs);
}
const expandDims = /* @__PURE__ */ op({ expandDims_ });

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.expandDims = function (axis) {
    this.throwIfDisposed();
    return expandDims(this, axis);
};

function dataset2tfjs(dataset, fields = null, cache = false) {
    const query = fields ? { $select: fields } : {};
    const ds = isDataset(dataset) ? dataset.items().query(query) : dataset;
    const dataSource = cache ? ds.toArray() : Promise.resolve(ds);
    async function* dataGenerator() {
        const instances = await dataSource;
        for await (const instance of instances) {
            yield instance;
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return generator(dataGenerator);
}

function transformEpochData(data) {
    const newData = {};
    for (const [key, val] of Object.entries(data)) {
        const newKey = key.startsWith('val_') ? key.replace('val_', '') + 'Val' : key;
        newData[newKey] = val;
    }
    return newData;
}
class TFJSCustomModel extends TFJSBaseModel {
    constructor({ epochs = 20, batchSize = 8, validationSplit = 0.2, } = {}) {
        super();
        this.title = 'TFJSCustomModel';
        this.loadFn = loadLayersModel;
        this.validationSplit = Math.max(Math.min(validationSplit, 1), 0);
        this.parameters = {
            epochs: new Stream(epochs, true),
            batchSize: new Stream(batchSize, true),
        };
    }
    transformDataset(ds) {
        return ds.map((instance) => ({
            xs: tensor(instance.x),
            ys: tensor(instance.y),
        }));
    }
    async train(dataset, validationDataset) {
        this.$training.set({ status: 'start', epochs: this.parameters.epochs.get() });
        await ready();
        const isDs = isDataset(dataset);
        const count = isDs ? dataset.$count.value : (await dataset.toArray()).length;
        const nFetch = Math.min(200, count);
        const ds = this.transformDataset(dataset2tfjs(dataset, ['x', 'y'], count < 200)).shuffle(nFetch);
        let dsTrain;
        let dsVal;
        if (validationDataset) {
            dsTrain = ds;
            dsVal = this.transformDataset(dataset2tfjs(validationDataset, ['x', 'y'], count < 200)).shuffle(nFetch);
        }
        else {
            const nTrain = Math.floor(count * (1 - this.validationSplit));
            dsTrain = ds.take(nTrain);
            dsVal = this.validationSplit > 0 && ds.skip(nTrain);
        }
        const [{ xs, ys }] = await dsTrain.take(1).toArray();
        this.buildModel(xs.shape, ys.shape);
        this.fit(dsTrain, dsVal);
    }
    _predict(x) {
        if (!this.model)
            return null;
        return tidy(() => {
            const pred = this.model.predict(tensor(x).expandDims(0)).gather(0);
            return pred;
        });
    }
    clear() {
        delete this.model;
    }
    fit(dsTrain, dsVal) {
        this.model
            .fitDataset(dsTrain.batch(this.parameters.batchSize.get()), {
            ...(dsVal ? { validationData: dsVal.batch(this.parameters.batchSize.get()) } : {}),
            epochs: this.parameters.epochs.get(),
            callbacks: {
                onEpochEnd: (epoch, logs) => {
                    this.$training.set({
                        status: 'epoch',
                        epoch: epoch + 1,
                        epochs: this.parameters.epochs.get(),
                        data: transformEpochData(logs),
                    });
                },
            },
        })
            .then((results) => {
            this.$training.set({
                status: 'success',
                data: transformEpochData(results.history),
            });
        })
            .catch((error) => {
            this.$training.set({ status: 'error', data: error });
            throw new TrainingError(error.message);
        });
    }
}
__decorate([
    Catch
], TFJSCustomModel.prototype, "train", null);

class TFJSCustomClassifier extends TFJSCustomModel {
    constructor() {
        super(...arguments);
        this.title = 'TFJSCustomClassifier';
    }
    async train(dataset, validationDataset) {
        const isDs = isDataset(dataset);
        this.labels = isDs
            ? await dataset.distinct('y')
            : (this.labels = Array.from(new Set(await dataset.map(({ y }) => y).toArray())));
        if (this.labels.length === 0) {
            throwError(new TrainingError('This dataset is empty or is missing labels'));
            this.$training.set({
                status: 'error',
            });
            return;
        }
        if (this.labels.length === 1) {
            throwError(new TrainingError('At least two classes are needed to train the classifier'));
            this.$training.set({
                status: 'error',
            });
            return;
        }
        const numClasses = this.labels.length;
        this.transformDataset = (ds) => ds.map((instance) => ({
            xs: tensor(instance.x),
            ys: oneHot(this.labels.indexOf(instance.y), numClasses),
        }));
        super.train(dataset, validationDataset);
    }
    async predict(x) {
        if (!this.model)
            return { label: undefined, confidences: {} };
        return tidy(() => {
            const pred = this._predict(x);
            const label = this.labels[pred.argMax().arraySync()];
            const softmaxes = pred.arraySync();
            const confidences = softmaxes.reduce((c, y, i) => ({ ...c, [this.labels[i]]: y }), {});
            return { label, confidences };
        });
    }
}
__decorate([
    Catch
], TFJSCustomClassifier.prototype, "train", null);

/* src/components/account/account.view.svelte generated by Svelte v3.59.1 */

function create_else_block$i(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			div.textContent = "This dataStore does not require authentication";
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop$2,
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (11:2) {#if dataStore.requiresAuth}
function create_if_block$s(ctx) {
	let await_block_anchor;
	let promise;
	let current;

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: false,
		pending: create_pending_block$2,
		then: create_then_block$2,
		catch: create_catch_block$2,
		value: 3,
		blocks: [,,,]
	};

	handle_promise(promise = /*dataStore*/ ctx[1].connect(), info);

	return {
		c() {
			await_block_anchor = empty();
			info.block.c();
		},
		m(target, anchor) {
			insert(target, await_block_anchor, anchor);
			info.block.m(target, info.anchor = anchor);
			info.mount = () => await_block_anchor.parentNode;
			info.anchor = await_block_anchor;
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			info.ctx = ctx;

			if (dirty & /*dataStore*/ 2 && promise !== (promise = /*dataStore*/ ctx[1].connect()) && handle_promise(promise, info)) ; else {
				update_await_block_branch(info, ctx, dirty);
			}
		},
		i(local) {
			if (current) return;
			transition_in(info.block);
			current = true;
		},
		o(local) {
			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(await_block_anchor);
			info.block.d(detaching);
			info.token = null;
			info = null;
		}
	};
}

// (1:0) <script lang="ts">import { ViewContainer }
function create_catch_block$2(ctx) {
	return {
		c: noop$2,
		m: noop$2,
		p: noop$2,
		i: noop$2,
		o: noop$2,
		d: noop$2
	};
}

// (14:4) {:then user}
function create_then_block$2(ctx) {
	let p;
	let t0;
	let t1_value = /*user*/ ctx[3].email + "";
	let t1;
	let t2;
	let div;
	let button;
	let mounted;
	let dispose;

	return {
		c() {
			p = element("p");
			t0 = text$1("Hello, ");
			t1 = text$1(t1_value);
			t2 = space();
			div = element("div");
			button = element("button");
			button.textContent = "Log out";
			attr(p, "class", "pb-2");
			attr(button, "class", "btn danger");
			attr(div, "class", "flex");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, t1);
			insert(target, t2, anchor);
			insert(target, div, anchor);
			append(div, button);

			if (!mounted) {
				dispose = listen(button, "click", /*logout*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*dataStore*/ 2 && t1_value !== (t1_value = /*user*/ ctx[3].email + "")) set_data(t1, t1_value);
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(p);
			if (detaching) detach(t2);
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (12:32)        <Spinner />     {:then user}
function create_pending_block$2(ctx) {
	let spinner;
	let current;
	spinner = new Spinner({});

	return {
		c() {
			create_component(spinner.$$.fragment);
		},
		m(target, anchor) {
			mount_component(spinner, target, anchor);
			current = true;
		},
		p: noop$2,
		i(local) {
			if (current) return;
			transition_in(spinner.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(spinner.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(spinner, detaching);
		}
	};
}

// (10:0) <ViewContainer {title}>
function create_default_slot$C(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$s, create_else_block$i];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*dataStore*/ ctx[1].requiresAuth) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$N(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$C] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, dataStore*/ 18) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$N($$self, $$props, $$invalidate) {
	let { title } = $$props;
	let { dataStore } = $$props;

	function logout() {
		dataStore.logout();
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('dataStore' in $$props) $$invalidate(1, dataStore = $$props.dataStore);
	};

	return [title, dataStore, logout];
}

class Account_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$N, create_fragment$N, safe_not_equal, { title: 0, dataStore: 1 });
	}
}

var _Account_dataStore;
class Account extends Component$1 {
    constructor(dataStore) {
        super();
        this.title = 'account manager';
        _Account_dataStore.set(this, void 0);
        __classPrivateFieldSet(this, _Account_dataStore, dataStore, "f");
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Account_view({
            target: t,
            props: {
                title: this.title,
                dataStore: __classPrivateFieldGet(this, _Account_dataStore, "f"),
            },
        });
    }
}
_Account_dataStore = new WeakMap();

function account(...args) {
    return new Account(...args);
}

/* src/components/progress-bar/progress-bar.view.svelte generated by Svelte v3.59.1 */

function create_default_slot$B(ctx) {
	let div3;
	let div2;
	let div0;
	let span0;
	let t0_value = /*$progress*/ ctx[2]?.message + "";
	let t0;
	let t1;
	let div1;
	let span1;
	let t2_value = Math.floor(/*$progress*/ ctx[2]?.progress * 100) + "";
	let t2;
	let t3;
	let t4;
	let progress_1;
	let current;

	progress_1 = new Progress({
			props: {
				progress: /*$progress*/ ctx[2]?.progress,
				type: /*$progress*/ ctx[2]?.type
			}
		});

	return {
		c() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			span0 = element("span");
			t0 = text$1(t0_value);
			t1 = space();
			div1 = element("div");
			span1 = element("span");
			t2 = text$1(t2_value);
			t3 = text$1("%");
			t4 = space();
			create_component(progress_1.$$.fragment);
			attr(span0, "class", "text-xs font-semibold inline-block py-1 px-2 uppercase rounded-full text-blue-600 bg-blue-200 svelte-1c8hye1");
			toggle_class(span0, "gray", /*$progress*/ ctx[2]?.type === 'idle');
			toggle_class(span0, "green", /*$progress*/ ctx[2]?.type === 'success');
			toggle_class(span0, "red", /*$progress*/ ctx[2]?.type === 'danger');
			attr(span1, "class", "text-xs font-semibold inline-block text-blue-600 svelte-1c8hye1");
			toggle_class(span1, "tgray", /*$progress*/ ctx[2]?.type === 'idle');
			toggle_class(span1, "tgreen", /*$progress*/ ctx[2]?.type === 'success');
			toggle_class(span1, "tred", /*$progress*/ ctx[2]?.type === 'danger');
			attr(div1, "class", "text-right");
			attr(div2, "class", "flex mb-2 items-center justify-between");
			attr(div3, "class", "relative pt-6 w-full");
			set_style(div3, "min-width", "250px");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div2);
			append(div2, div0);
			append(div0, span0);
			append(span0, t0);
			append(div2, t1);
			append(div2, div1);
			append(div1, span1);
			append(span1, t2);
			append(span1, t3);
			append(div3, t4);
			mount_component(progress_1, div3, null);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*$progress*/ 4) && t0_value !== (t0_value = /*$progress*/ ctx[2]?.message + "")) set_data(t0, t0_value);

			if (!current || dirty & /*$progress*/ 4) {
				toggle_class(span0, "gray", /*$progress*/ ctx[2]?.type === 'idle');
			}

			if (!current || dirty & /*$progress*/ 4) {
				toggle_class(span0, "green", /*$progress*/ ctx[2]?.type === 'success');
			}

			if (!current || dirty & /*$progress*/ 4) {
				toggle_class(span0, "red", /*$progress*/ ctx[2]?.type === 'danger');
			}

			if ((!current || dirty & /*$progress*/ 4) && t2_value !== (t2_value = Math.floor(/*$progress*/ ctx[2]?.progress * 100) + "")) set_data(t2, t2_value);

			if (!current || dirty & /*$progress*/ 4) {
				toggle_class(span1, "tgray", /*$progress*/ ctx[2]?.type === 'idle');
			}

			if (!current || dirty & /*$progress*/ 4) {
				toggle_class(span1, "tgreen", /*$progress*/ ctx[2]?.type === 'success');
			}

			if (!current || dirty & /*$progress*/ 4) {
				toggle_class(span1, "tred", /*$progress*/ ctx[2]?.type === 'danger');
			}

			const progress_1_changes = {};
			if (dirty & /*$progress*/ 4) progress_1_changes.progress = /*$progress*/ ctx[2]?.progress;
			if (dirty & /*$progress*/ 4) progress_1_changes.type = /*$progress*/ ctx[2]?.type;
			progress_1.$set(progress_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(progress_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(progress_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_component(progress_1);
		}
	};
}

function create_fragment$M(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$B] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, $progress*/ 12) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$M($$self, $$props, $$invalidate) {
	let $progress,
		$$unsubscribe_progress = noop$2,
		$$subscribe_progress = () => ($$unsubscribe_progress(), $$unsubscribe_progress = subscribe(progress, $$value => $$invalidate(2, $progress = $$value)), progress);

	$$self.$$.on_destroy.push(() => $$unsubscribe_progress());
	let { title } = $$props;
	let { progress } = $$props;
	$$subscribe_progress();

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('progress' in $$props) $$subscribe_progress($$invalidate(1, progress = $$props.progress));
	};

	return [title, progress, $progress];
}

class Progress_bar_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$M, create_fragment$M, safe_not_equal, { title: 0, progress: 1 });
	}
}

class ProgressBar extends Component$1 {
    constructor($progress) {
        super();
        this.$progress = $progress;
        this.title = 'progress bar';
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Progress_bar_view({
            target: t,
            props: {
                title: this.title,
                progress: this.$progress,
            },
        });
    }
}

function progressBar(...args) {
    return new ProgressBar(...args);
}
function trainingProgress(m) {
    if (!m.$training) {
        throw new Error('The argument is not a valid MLP');
    }
    const $stream = m.$training
        .map(({ status, epoch, epochs }) => {
        let type = 'default';
        let progress = epochs > 0 ? epoch / epochs : null;
        if (status === 'error') {
            type = 'danger';
        }
        if (status === 'idle') {
            type = 'idle';
            progress = 0;
        }
        if (['success', 'loaded'].includes(status)) {
            type = 'success';
            progress = 1;
        }
        if (['start', 'loading'].includes(status)) {
            progress = null;
        }
        return {
            message: `Status: ${status}`,
            progress,
            type,
        };
    })
        .hold();
    const p = new ProgressBar($stream);
    p.title = 'Training Progress';
    return p;
}

var _BatchPrediction_store;
class BatchPrediction extends Component$1 {
    constructor(name, store = dataStore()) {
        super();
        this.title = 'batch prediction';
        _BatchPrediction_store.set(this, void 0);
        this.$status = new Stream({ status: 'loading' }, true);
        this.name = name;
        this.title = `batch prediction (${name})`;
        __classPrivateFieldSet(this, _BatchPrediction_store, store || new DataStore(), "f");
        this.start();
        __classPrivateFieldGet(this, _BatchPrediction_store, "f")
            .connect()
            .then(() => {
            this.setup();
        })
            .catch((e) => {
            const err = new Error(e === null || e === void 0 ? void 0 : e.message);
            err.name = `Batch Prediction Error (${name}): Datastore connection failed`;
            throwError(err, { duration: 0 });
        });
    }
    async setup() {
        const serviceName = toKebabCase(`predictions-${this.name}`);
        this.predictionService = __classPrivateFieldGet(this, _BatchPrediction_store, "f").service(serviceName);
        const { total } = (await this.predictionService.find({
            query: { $limit: 1, $select: ['id'] },
        }));
        this.$status.set({ status: total > 0 ? 'loaded' : 'idle' });
    }
    async predict(model, dataset) {
        try {
            const total = isDataset(dataset) ? dataset.$count.value : (await dataset.toArray()).length;
            this.$status.set({ status: 'start' });
            const ds = isDataset(dataset) ? dataset.items() : dataset;
            let i = 0;
            for await (const { id, x, y } of ds) {
                const prediction = await model.predict(x);
                const storedPrediction = await this.predictionService.create({
                    ...prediction,
                    instanceId: id,
                    yTrue: y,
                });
                this.$status.set({
                    status: 'running',
                    count: ++i,
                    total,
                    data: storedPrediction,
                });
            }
            this.$status.set({ status: 'success', count: i, total });
        }
        catch (error) {
            this.$status.set({ status: 'error', data: { error } });
        }
    }
    async clear() {
        await this.predictionService.remove(null, { query: {} });
    }
    items() {
        return this.predictionService.items();
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    mount() { }
}
_BatchPrediction_store = new WeakMap();

function batchPrediction(...args) {
    return new BatchPrediction(...args);
}
function predictionProgress(m) {
    if (!m.$status) {
        throw new Error('The argument is not a valid Batch Prediction');
    }
    const $stream = m.$status
        .map(({ status, count, total }) => {
        let type = 'default';
        let progress = total > 0 ? (count + 1) / total : null;
        if (status === 'error') {
            type = 'danger';
        }
        if (status === 'idle') {
            type = 'idle';
            progress = 0;
        }
        if (['success', 'loaded'].includes(status)) {
            type = 'success';
            progress = 1;
        }
        if (['start', 'loading'].includes(status)) {
            progress = null;
        }
        return {
            message: `Status: ${status}`,
            progress,
            type,
        };
    })
        .hold();
    const p = progressBar($stream);
    p.title = 'Prediction Progress';
    return p;
}

/* src/components/button/button.view.svelte generated by Svelte v3.59.1 */

function create_default_slot_1$d(ctx) {
	let t;

	return {
		c() {
			t = text$1(/*$text*/ ctx[10]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$text*/ 1024) set_data(t, /*$text*/ ctx[10]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (11:0) <ViewContainer {title} loading={$loading}>
function create_default_slot$A(ctx) {
	let div;
	let button;
	let updating_pressed;
	let current;

	function button_pressed_binding(value) {
		/*button_pressed_binding*/ ctx[11](value);
	}

	let button_props = {
		disabled: /*$disabled*/ ctx[7],
		type: /*$type*/ ctx[8],
		$$slots: { default: [create_default_slot_1$d] },
		$$scope: { ctx }
	};

	if (/*$pressed*/ ctx[9] !== void 0) {
		button_props.pressed = /*$pressed*/ ctx[9];
	}

	button = new Button$1({ props: button_props });
	binding_callbacks.push(() => bind(button, 'pressed', button_pressed_binding));
	button.$on("click", /*click_handler*/ ctx[12]);

	return {
		c() {
			div = element("div");
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(button, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};
			if (dirty & /*$disabled*/ 128) button_changes.disabled = /*$disabled*/ ctx[7];
			if (dirty & /*$type*/ 256) button_changes.type = /*$type*/ ctx[8];

			if (dirty & /*$$scope, $text*/ 9216) {
				button_changes.$$scope = { dirty, ctx };
			}

			if (!updating_pressed && dirty & /*$pressed*/ 512) {
				updating_pressed = true;
				button_changes.pressed = /*$pressed*/ ctx[9];
				add_flush_callback(() => updating_pressed = false);
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(button);
		}
	};
}

function create_fragment$L(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				loading: /*$loading*/ ctx[6],
				$$slots: { default: [create_default_slot$A] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];
			if (dirty & /*$loading*/ 64) viewcontainer_changes.loading = /*$loading*/ ctx[6];

			if (dirty & /*$$scope, $disabled, $type, $pressed, $text*/ 10112) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$L($$self, $$props, $$invalidate) {
	let $loading,
		$$unsubscribe_loading = noop$2,
		$$subscribe_loading = () => ($$unsubscribe_loading(), $$unsubscribe_loading = subscribe(loading, $$value => $$invalidate(6, $loading = $$value)), loading);

	let $disabled,
		$$unsubscribe_disabled = noop$2,
		$$subscribe_disabled = () => ($$unsubscribe_disabled(), $$unsubscribe_disabled = subscribe(disabled, $$value => $$invalidate(7, $disabled = $$value)), disabled);

	let $type,
		$$unsubscribe_type = noop$2,
		$$subscribe_type = () => ($$unsubscribe_type(), $$unsubscribe_type = subscribe(type, $$value => $$invalidate(8, $type = $$value)), type);

	let $pressed,
		$$unsubscribe_pressed = noop$2,
		$$subscribe_pressed = () => ($$unsubscribe_pressed(), $$unsubscribe_pressed = subscribe(pressed, $$value => $$invalidate(9, $pressed = $$value)), pressed);

	let $text,
		$$unsubscribe_text = noop$2,
		$$subscribe_text = () => ($$unsubscribe_text(), $$unsubscribe_text = subscribe(text, $$value => $$invalidate(10, $text = $$value)), text);

	$$self.$$.on_destroy.push(() => $$unsubscribe_loading());
	$$self.$$.on_destroy.push(() => $$unsubscribe_disabled());
	$$self.$$.on_destroy.push(() => $$unsubscribe_type());
	$$self.$$.on_destroy.push(() => $$unsubscribe_pressed());
	$$self.$$.on_destroy.push(() => $$unsubscribe_text());
	let { title } = $$props;
	let { text } = $$props;
	$$subscribe_text();
	let { pressed } = $$props;
	$$subscribe_pressed();
	let { loading } = $$props;
	$$subscribe_loading();
	let { disabled } = $$props;
	$$subscribe_disabled();
	let { type } = $$props;
	$$subscribe_type();

	function button_pressed_binding(value) {
		$pressed = value;
		pressed.set($pressed);
	}

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('text' in $$props) $$subscribe_text($$invalidate(1, text = $$props.text));
		if ('pressed' in $$props) $$subscribe_pressed($$invalidate(2, pressed = $$props.pressed));
		if ('loading' in $$props) $$subscribe_loading($$invalidate(3, loading = $$props.loading));
		if ('disabled' in $$props) $$subscribe_disabled($$invalidate(4, disabled = $$props.disabled));
		if ('type' in $$props) $$subscribe_type($$invalidate(5, type = $$props.type));
	};

	return [
		title,
		text,
		pressed,
		loading,
		disabled,
		type,
		$loading,
		$disabled,
		$type,
		$pressed,
		$text,
		button_pressed_binding,
		click_handler
	];
}

class Button_view extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$L, create_fragment$L, safe_not_equal, {
			title: 0,
			text: 1,
			pressed: 2,
			loading: 3,
			disabled: 4,
			type: 5
		});
	}
}

class Button extends Component$1 {
    constructor(text = 'click me') {
        super();
        this.title = 'button';
        this.$click = new Stream(never());
        this.$pressed = new Stream(false, true);
        this.$loading = new Stream(false, true);
        this.$disabled = new Stream(false, true);
        this.$type = new Stream('default', true);
        this.$text = new Stream(text, true);
        this.start();
        this.$loading.skip(1).subscribe((loading) => {
            this.$disabled.set(loading);
        });
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Button_view({
            target: t,
            props: {
                title: this.title,
                text: this.$text,
                pressed: this.$pressed,
                loading: this.$loading,
                disabled: this.$disabled,
                type: this.$type,
            },
        });
        this.$$.app.$on('click', this.$click.set);
    }
}

function button(...args) {
    return new Button(...args);
}

/* src/components/coco-ssd/coco-ssd.view.svelte generated by Svelte v3.59.1 */

function create_else_block$h(ctx) {
	let t0;
	let t1;

	return {
		c() {
			t0 = text$1("COCO-SSD loaded with base ");
			t1 = text$1(/*base*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*base*/ 4) set_data(t1, /*base*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

// (9:4) {#if $loading}
function create_if_block$r(ctx) {
	let t;

	return {
		c() {
			t = text$1(" ");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (7:0) <ViewContainer {title} loading={$loading}>
function create_default_slot$z(ctx) {
	let p;

	function select_block_type(ctx, dirty) {
		if (/*$loading*/ ctx[3]) return create_if_block$r;
		return create_else_block$h;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			p = element("p");
			if_block.c();
			attr(p, "class", "p-2 text-sm text-gray-600");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			if_block.m(p, null);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(p, null);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(p);
			if_block.d();
		}
	};
}

function create_fragment$K(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				loading: /*$loading*/ ctx[3],
				$$slots: { default: [create_default_slot$z] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];
			if (dirty & /*$loading*/ 8) viewcontainer_changes.loading = /*$loading*/ ctx[3];

			if (dirty & /*$$scope, $loading, base*/ 28) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$K($$self, $$props, $$invalidate) {
	let $loading,
		$$unsubscribe_loading = noop$2,
		$$subscribe_loading = () => ($$unsubscribe_loading(), $$unsubscribe_loading = subscribe(loading, $$value => $$invalidate(3, $loading = $$value)), loading);

	$$self.$$.on_destroy.push(() => $$unsubscribe_loading());
	let { title } = $$props;
	let { loading } = $$props;
	$$subscribe_loading();
	let { base } = $$props;

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('loading' in $$props) $$subscribe_loading($$invalidate(1, loading = $$props.loading));
		if ('base' in $$props) $$invalidate(2, base = $$props.base);
	};

	return [title, loading, base, $loading];
}

class Coco_ssd_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$K, create_fragment$K, safe_not_equal, { title: 0, loading: 1, base: 2 });
	}
}

var _CocoSsd_coco, _CocoSsd_base;
class CocoSsd extends Model {
    constructor({ base = 'lite_mobilenet_v2' } = {}) {
        super();
        this.title = 'COCO-SSD Object Detection';
        this.parameters = {};
        this.serviceName = 'undefined';
        _CocoSsd_coco.set(this, void 0);
        _CocoSsd_base.set(this, void 0);
        this.$loading = new Stream(true, true);
        __classPrivateFieldSet(this, _CocoSsd_base, base, "f");
        this.setup();
    }
    async setup() {
        await ready();
        const cachedModels = await io$1.listModels();
        const cachedCoco = Object.keys(cachedModels).filter((x) => x.includes('cocossd'));
        try {
            __classPrivateFieldSet(this, _CocoSsd_coco, await load({ base: __classPrivateFieldGet(this, _CocoSsd_base, "f"), modelUrl: `indexeddb://cocossd-${__classPrivateFieldGet(this, _CocoSsd_base, "f")}` }), "f");
        }
        catch (error) {
            if (cachedCoco.length > 0) {
                await io$1.removeModel(cachedCoco[0]);
            }
            __classPrivateFieldSet(this, _CocoSsd_coco, await load({ base: __classPrivateFieldGet(this, _CocoSsd_base, "f") }), "f");
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            await __classPrivateFieldGet(this, _CocoSsd_coco, "f").model.save(`indexeddb://cocossd-${__classPrivateFieldGet(this, _CocoSsd_base, "f")}`);
        }
        logger.info('COCO-SSD loaded with base `lite_mobilenet_v2`');
        this.$loading.set(false);
        this.start();
    }
    // eslint-disable-next-line class-methods-use-this
    train() {
        throw new TrainingError('Model `CocoSsd` cannot be trained');
    }
    async predict(img) {
        if (!__classPrivateFieldGet(this, _CocoSsd_coco, "f")) {
            throw new Error('Model is not loaded');
        }
        const predictions = await __classPrivateFieldGet(this, _CocoSsd_coco, "f").detect(img);
        const outputs = predictions.map((x) => ({
            bbox: x.bbox,
            class: x.class,
            confidence: x.score,
        }));
        return { outputs };
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Coco_ssd_view({
            target: t,
            props: {
                title: this.title,
                loading: this.$loading,
                base: __classPrivateFieldGet(this, _CocoSsd_base, "f"),
            },
        });
    }
    // eslint-disable-next-line class-methods-use-this
    save() {
        throw new Error('CocoSsd does not support saving');
    }
    // eslint-disable-next-line class-methods-use-this
    load() {
        throw new Error('CocoSsd does not support loading');
    }
    // eslint-disable-next-line class-methods-use-this
    download() {
        throw new Error('CocoSsd does not support downloading');
    }
    // eslint-disable-next-line class-methods-use-this
    upload() {
        throw new Error('CocoSsd does not support uploading');
    }
}
_CocoSsd_coco = new WeakMap(), _CocoSsd_base = new WeakMap();
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], CocoSsd.prototype, "train", null);
__decorate([
    Catch
], CocoSsd.prototype, "predict", null);
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], CocoSsd.prototype, "save", null);
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], CocoSsd.prototype, "load", null);
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], CocoSsd.prototype, "download", null);
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], CocoSsd.prototype, "upload", null);

function cocoSsd(...args) {
    return new CocoSsd(...args);
}

/* src/components/generic-chart/generic-chart.view.svelte generated by Svelte v3.59.1 */

function create_default_slot$y(ctx) {
	let div;
	let canvas;

	return {
		c() {
			div = element("div");
			canvas = element("canvas");
			attr(div, "class", "w-full h-96");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, canvas);
			/*canvas_binding*/ ctx[6](canvas);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(div);
			/*canvas_binding*/ ctx[6](null);
		}
	};
}

function create_fragment$J(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$y] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, canvasElement*/ 32770) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$J($$self, $$props, $$invalidate) {
	let { title } = $$props;
	let { preset } = $$props;
	let { options } = $$props;
	let { datasets } = $$props;

	// Note: typings are very dirty here...
	Chart.register(ArcElement, BarController, BubbleController, CategoryScale, DoughnutController, Filler, Legend, LineElement, LineController, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, BarElement, ScatterController, TimeScale, TimeSeriesScale, Title, Tooltip$1);

	const defaultColors = [
		'rgb(54, 162, 235)',
		'rgb(255, 99, 132)',
		'rgb(255, 206, 86)',
		'rgb(75, 192, 192)',
		'rgb(153, 102, 255)',
		'rgb(255, 159, 64)'
	];

	const defaultOptions = {
		data: {},
		options: {
			maintainAspectRatio: false,
			animation: { duration: 200 },
			borderWidth: 4
		}
	};

	function defaultDatasetOptions(index) {
		return {
			borderColor: defaultColors[index % 6],
			backgroundColor: defaultColors[index % 6],
			fill: false,
			lineTension: 0.2
		};
	}

	function transformDatasets(ds, opts, globalOptions) {
		const data = { labels: [] };
		let maxElts = 0;

		data.datasets = ds.map(({ dataStream, label, options: localOptions }, i) => {
			maxElts = Math.max(maxElts, dataStream.get() ? dataStream.get().length : 0);

			if (i === 0) {
				data.labels = localOptions.labels || [];

				if (!localOptions.labels && dataStream.get() && dataStream.get().length > 0) {
					if (typeof dataStream.get()[0] === 'number') {
						data.labels = Array.from(Array(dataStream.get().length), (_, j) => j.toString());
					} else {
						data.labels = dataStream.get().map(o => o.x.toString());
					}
				}
			}

			let o = {
				...defaultDatasetOptions(i),
				...opts,
				...localOptions,
				label,
				data: dataStream.get() || []
			};

			if ((['bar', 'bar-fast'].includes(localOptions.type) || ['bar', 'bar-fast'].includes(globalOptions.type) && !localOptions.type) && ds.length === 1) {
				o.borderColor = defaultColors;
				o.backgroundColor = defaultColors;
			}

			return o;
		});

		return data;
	}

	let chart;
	let unSub = [];
	let canvasElement;

	function setup() {
		// eslint-disable-next-line @typescript-eslint/no-explicit-any
		let chartOptions = mergeDeep(defaultOptions, preset.global);

		chartOptions = mergeDeep(chartOptions, {
			data: transformDatasets(datasets, preset.datasets, chartOptions),
			options
		});

		if (options.xlabel) {
			chartOptions = mergeDeep(chartOptions, {
				options: {
					scales: {
						x: {
							title: { display: true, text: options.xlabel }
						}
					}
				}
			});
		}

		if (options.ylabel) {
			chartOptions = mergeDeep(chartOptions, {
				options: {
					scales: {
						y: {
							title: { display: true, text: options.ylabel }
						}
					}
				}
			});
		}

		const pointsPerSeries = datasets.map(({ dataStream }) => {
			var _a;

			return ((_a = dataStream.get()) === null || _a === void 0
			? void 0
			: _a.length) || 0;
		});

		unSub = datasets.map(({ dataStream, options: localOptions }, i) => dataStream.subscribe(values => {
			if (values && chart) {
				const prevMaxPoint = pointsPerSeries.reduce((m, x) => Math.max(m, x));
				pointsPerSeries[i] = values.length;

				if (!localOptions.labels && values.length > 0 && pointsPerSeries[i] > prevMaxPoint) {
					if (typeof values[0] === 'number') {
						chartOptions.data.labels = Array.from(Array(values.length), (_, j) => j.toString());
					} else {
						chartOptions.data.labels = values.map(o => o.x.toString());
					}
				}

				// eslint-disable-next-line @typescript-eslint/no-explicit-any
				chartOptions.data.datasets[i].data = values;

				try {
					chart.update();
				} catch(error) {
					// eslint-disable-next-line no-console
					console.log(error);
				}
			}
		}));

		const ctx = canvasElement.getContext('2d');
		chart = new Chart(ctx, chartOptions);
	}

	function destroy() {
		for (const f of unSub) {
			f();
		}

		chart === null || chart === void 0
		? void 0
		: chart.destroy();
	}

	onMount(async () => {
		await tick$1();
		await tick$1();
		setup();
	});

	let numDatasets = datasets.length;
	onDestroy(destroy);

	function canvas_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			canvasElement = $$value;
			$$invalidate(1, canvasElement);
		});
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('preset' in $$props) $$invalidate(2, preset = $$props.preset);
		if ('options' in $$props) $$invalidate(3, options = $$props.options);
		if ('datasets' in $$props) $$invalidate(4, datasets = $$props.datasets);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*datasets, numDatasets*/ 48) {
			{
				if (datasets.length !== numDatasets) {
					destroy();
					setup();
					$$invalidate(5, numDatasets = datasets.length);
				}
			}
		}
	};

	return [title, canvasElement, preset, options, datasets, numDatasets, canvas_binding];
}

class Generic_chart_view extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$J, create_fragment$J, safe_not_equal, {
			title: 0,
			preset: 2,
			options: 3,
			datasets: 4
		});
	}
}

var _GenericChart_presetName, _GenericChart_preset, _GenericChart_datasets;
// TODO: Automatic switch to fast mode when high number of points
const presets = {
    line: {
        global: {
            type: 'line',
            options: {
                animation: { duration: 200 },
                scales: {
                    x: {
                        ticks: {
                            sampleSize: 11,
                        },
                    },
                },
            },
        },
        datasets: {
            fill: false,
            lineTension: 0.2,
        },
    },
    'line-fast': {
        global: {
            type: 'line',
            options: {
                elements: {
                    point: {
                        radius: 0,
                    },
                },
                animation: false,
                tooltips: false,
                spanGaps: true,
                scales: {
                    x: {
                        ticks: {
                            sampleSize: 11,
                        },
                    },
                },
            },
        },
        datasets: {
            fill: false,
            lineTension: 0,
        },
    },
    bar: {
        global: {
            type: 'bar',
            options: {
                animation: { duration: 200 },
                scales: {
                    y: {
                        beginAtZero: true,
                    },
                },
            },
        },
    },
    'bar-fast': {
        global: {
            type: 'bar',
            options: {
                animation: false,
                scales: {
                    y: {
                        beginAtZero: true,
                    },
                },
            },
        },
    },
    scatter: {
        global: {
            type: 'scatter',
            options: {
                scales: {
                    x: {
                        type: 'linear',
                        position: 'bottom',
                    },
                },
            },
        },
    },
};
class GenericChart extends Component$1 {
    constructor({ preset = 'line', options = {} } = {}) {
        super();
        this.title = 'generic chart';
        _GenericChart_presetName.set(this, void 0);
        _GenericChart_preset.set(this, void 0);
        _GenericChart_datasets.set(this, []);
        if (!Object.keys(presets).includes(preset)) {
            throwError(new Error(`Preset ${preset} is not recognized`));
        }
        __classPrivateFieldSet(this, _GenericChart_presetName, preset, "f");
        __classPrivateFieldSet(this, _GenericChart_preset, presets[preset], "f");
        this.options = options;
        this.start();
    }
    addSeries(series, label, options = {}) {
        if (isStream(series)) {
            if (__classPrivateFieldGet(this, _GenericChart_presetName, "f") === 'line-fast') {
                const throttledStream = series.debounce(10);
                throttledStream.value = series.get();
                __classPrivateFieldGet(this, _GenericChart_datasets, "f").push({
                    dataStream: throttledStream,
                    label,
                    options,
                });
            }
            else {
                __classPrivateFieldGet(this, _GenericChart_datasets, "f").push({ dataStream: series, label, options });
            }
            this.updateView();
        }
        else {
            series
                .toArray()
                .then((values) => {
                const dataStream = new Stream(values, true);
                __classPrivateFieldGet(this, _GenericChart_datasets, "f").push({ dataStream, label, options });
                this.updateView();
            });
        }
    }
    setColors(colorStream) {
        __classPrivateFieldGet(this, _GenericChart_datasets, "f")[0].label = 'clusters';
        __classPrivateFieldGet(this, _GenericChart_datasets, "f")[0].options.backgroundColor = colorStream.get();
        __classPrivateFieldGet(this, _GenericChart_datasets, "f")[0].options.color = colorStream.get(); //alternatePointStyles;
    }
    removeSeries(dataStream) {
        const index = __classPrivateFieldGet(this, _GenericChart_datasets, "f").map((x) => x.dataStream).indexOf(dataStream);
        if (index > -1) {
            __classPrivateFieldGet(this, _GenericChart_datasets, "f").splice(index, 1);
        }
    }
    clear() {
        __classPrivateFieldSet(this, _GenericChart_datasets, [], "f");
        this.updateView();
    }
    updateView() {
        if (this.$$.app) {
            this.$$.app.$set({ datasets: __classPrivateFieldGet(this, _GenericChart_datasets, "f") });
        }
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Generic_chart_view({
            target: t,
            props: {
                title: this.title,
                preset: __classPrivateFieldGet(this, _GenericChart_preset, "f"),
                options: this.options,
                datasets: __classPrivateFieldGet(this, _GenericChart_datasets, "f"),
            },
        });
    }
}
_GenericChart_presetName = new WeakMap(), _GenericChart_preset = new WeakMap(), _GenericChart_datasets = new WeakMap();

function genericChart(...args) {
    return new GenericChart(...args);
}

/* src/components/text/text.view.svelte generated by Svelte v3.59.1 */

function create_if_block$q(ctx) {
	let html_tag;
	let html_anchor;

	return {
		c() {
			html_tag = new HtmlTag(false);
			html_anchor = empty();
			html_tag.a = html_anchor;
		},
		m(target, anchor) {
			html_tag.m(/*$text*/ ctx[2], target, anchor);
			insert(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$text*/ 4) html_tag.p(/*$text*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

// (8:0) <ViewContainer {title}>
function create_default_slot$x(ctx) {
	let div;
	let if_block = /*$text*/ ctx[2] && create_if_block$q(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			attr(div, "class", "grow");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
		},
		p(ctx, dirty) {
			if (/*$text*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$q(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
		}
	};
}

function create_fragment$I(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$x] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, $text*/ 12) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$I($$self, $$props, $$invalidate) {
	let $text,
		$$unsubscribe_text = noop$2,
		$$subscribe_text = () => ($$unsubscribe_text(), $$unsubscribe_text = subscribe(text, $$value => $$invalidate(2, $text = $$value)), text);

	$$self.$$.on_destroy.push(() => $$unsubscribe_text());
	let { title } = $$props;
	let { text } = $$props;
	$$subscribe_text();

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('text' in $$props) $$subscribe_text($$invalidate(1, text = $$props.text));
	};

	return [title, text, $text];
}

class Text_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$I, create_fragment$I, safe_not_equal, { title: 0, text: 1 });
	}

	get title() {
		return this.$$.ctx[0];
	}

	set title(title) {
		this.$$set({ title });
		flush();
	}

	get text() {
		return this.$$.ctx[1];
	}

	set text(text) {
		this.$$set({ text });
		flush();
	}
}

class Text extends Component$1 {
    constructor(initial = 'click me') {
        super();
        this.title = 'text';
        this.$value = new Stream(initial, true);
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Text_view({
            target: t,
            props: {
                title: this.title,
                text: this.$value,
            },
        });
    }
}

function text(...args) {
    return new Text(...args);
}

var _ConfidencePlot_plotConfidences, _ConfidencePlot_displayLabel;
class ConfidencePlot extends Component$1 {
    constructor(predictionStream) {
        super();
        this.title = 'confidence plot';
        _ConfidencePlot_plotConfidences.set(this, void 0);
        _ConfidencePlot_displayLabel.set(this, void 0);
        this.$confidenceStream = predictionStream.map(({ confidences }) => Object.entries(confidences)
            .map(([label, value]) => ({ x: label, y: value }))
            .sort((a, b) => {
            if (a.x < b.x)
                return -1;
            if (a.x > b.x)
                return 1;
            return 0;
        }));
        __classPrivateFieldSet(this, _ConfidencePlot_plotConfidences, genericChart({
            preset: 'bar-fast',
            options: {
                xlabel: 'Label',
                ylabel: 'Confidence',
                scales: { y: { suggestedMax: 1 } },
            },
        }), "f");
        __classPrivateFieldGet(this, _ConfidencePlot_plotConfidences, "f").addSeries(this.$confidenceStream, 'Confidences');
        __classPrivateFieldGet(this, _ConfidencePlot_plotConfidences, "f").title = '';
        __classPrivateFieldSet(this, _ConfidencePlot_displayLabel, text('Waiting for predictions...'), "f");
        __classPrivateFieldGet(this, _ConfidencePlot_displayLabel, "f").title = this.title;
        __classPrivateFieldGet(this, _ConfidencePlot_displayLabel, "f").$value = new Stream(predictionStream
            .map(({ label }) => `<p>Predicted Label: <code style="font-size: 1.5rem;">${label}</code></p>`)
            .startWith('Waiting for predictions...'), true);
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        const divLab = document.createElement('div');
        divLab.id = `${t.id}-${__classPrivateFieldGet(this, _ConfidencePlot_displayLabel, "f").id}`;
        const divConf = document.createElement('div');
        divConf.id = `${t.id}-${__classPrivateFieldGet(this, _ConfidencePlot_plotConfidences, "f").id}`;
        t.appendChild(divLab);
        t.appendChild(divConf);
        __classPrivateFieldGet(this, _ConfidencePlot_displayLabel, "f").title = this.title;
        __classPrivateFieldGet(this, _ConfidencePlot_displayLabel, "f").mount(divLab);
        __classPrivateFieldGet(this, _ConfidencePlot_plotConfidences, "f").mount(divConf);
        this.destroy = () => {
            divLab.parentElement.removeChild(divLab);
            divConf.parentElement.removeChild(divConf);
            __classPrivateFieldGet(this, _ConfidencePlot_displayLabel, "f").destroy();
            __classPrivateFieldGet(this, _ConfidencePlot_plotConfidences, "f").destroy();
        };
    }
    destroy() {
        __classPrivateFieldGet(this, _ConfidencePlot_displayLabel, "f").destroy();
        __classPrivateFieldGet(this, _ConfidencePlot_plotConfidences, "f").destroy();
    }
}
_ConfidencePlot_plotConfidences = new WeakMap(), _ConfidencePlot_displayLabel = new WeakMap();

function confidencePlot(...args) {
    return new ConfidencePlot(...args);
}

/* src/components/confusion-matrix/confusion-matrix.view.svelte generated by Svelte v3.59.1 */

function create_else_block$g(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "Waiting for predictions...";
			attr(p, "class", "m-2");
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (153:2) {#if $accuracy !== undefined}
function create_if_block$p(ctx) {
	let p;
	let t0;
	let t1_value = /*$accuracy*/ ctx[6].toFixed(2) + "";
	let t1;
	let t2;
	let div;
	let canvas;
	let mounted;
	let dispose;

	return {
		c() {
			p = element("p");
			t0 = text$1("Global Accuracy: ");
			t1 = text$1(t1_value);
			t2 = space();
			div = element("div");
			canvas = element("canvas");
			attr(p, "class", "m-2");
			attr(div, "class", "confusion-container svelte-1d2i0ke");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, t1);
			insert(target, t2, anchor);
			insert(target, div, anchor);
			append(div, canvas);

			if (!mounted) {
				dispose = action_destroyer(/*setup*/ ctx[7].call(null, canvas));
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$accuracy*/ 64 && t1_value !== (t1_value = /*$accuracy*/ ctx[6].toFixed(2) + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(p);
			if (detaching) detach(t2);
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (152:0) <ViewContainer {title} loading={$loading} progress={$progress}>
function create_default_slot$w(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*$accuracy*/ ctx[6] !== undefined) return create_if_block$p;
		return create_else_block$g;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$H(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				loading: /*$loading*/ ctx[4],
				progress: /*$progress*/ ctx[5],
				$$slots: { default: [create_default_slot$w] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];
			if (dirty & /*$loading*/ 16) viewcontainer_changes.loading = /*$loading*/ ctx[4];
			if (dirty & /*$progress*/ 32) viewcontainer_changes.progress = /*$progress*/ ctx[5];

			if (dirty & /*$$scope, $accuracy*/ 131136) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$H($$self, $$props, $$invalidate) {
	let $loading,
		$$unsubscribe_loading = noop$2,
		$$subscribe_loading = () => ($$unsubscribe_loading(), $$unsubscribe_loading = subscribe(loading, $$value => $$invalidate(4, $loading = $$value)), loading);

	let $progress,
		$$unsubscribe_progress = noop$2,
		$$subscribe_progress = () => ($$unsubscribe_progress(), $$unsubscribe_progress = subscribe(progress, $$value => $$invalidate(5, $progress = $$value)), progress);

	let $accuracy,
		$$unsubscribe_accuracy = noop$2,
		$$subscribe_accuracy = () => ($$unsubscribe_accuracy(), $$unsubscribe_accuracy = subscribe(accuracy, $$value => $$invalidate(6, $accuracy = $$value)), accuracy);

	$$self.$$.on_destroy.push(() => $$unsubscribe_loading());
	$$self.$$.on_destroy.push(() => $$unsubscribe_progress());
	$$self.$$.on_destroy.push(() => $$unsubscribe_accuracy());
	let { title } = $$props;
	let { loading } = $$props;
	$$subscribe_loading();
	let { progress } = $$props;
	$$subscribe_progress();
	let { accuracy } = $$props;
	$$subscribe_accuracy();
	let { confusion } = $$props;
	let { labels } = $$props;
	let { selected } = $$props;
	Chart.register(CategoryScale, Title, Tooltip$1, MatrixElement, MatrixController);
	let maxCount = 1;
	let nLabels = 1;
	let selectedDataIndex = -1;

	const defaultOptions = {
		type: 'matrix',
		data: {
			datasets: [
				{
					label: 'Confusion Matrix',
					data: [],
					backgroundColor(context) {
						if (context.dataset.data.length > 0) {
							if (context.dataIndex === selectedDataIndex) {
								const { x, y } = context.dataset.data[context.dataIndex];
								return x === y ? 'green' : 'red';
							}

							const value = context.dataset.data[context.dataIndex].v;
							return `rgba(54, 162, 235, ${value / maxCount})`;
						}

						return 'rgba(54, 162, 235, 0)';
					},
					width(context) {
						const a = context.chart.chartArea;

						if (!a) {
							return 0;
						}

						return (a.right - a.left) / nLabels - 2;
					},
					height(context) {
						const a = context.chart.chartArea;

						if (!a) {
							return 0;
						}

						return (a.bottom - a.top) / nLabels - 2;
					}
				}
			]
		},
		options: {
			aspectRatio: 1,
			legend: { display: false },
			plugins: {
				tooltip: {
					callbacks: {
						title([context]) {
							const v = context.dataset.data[context.dataIndex];
							return ['count: ' + v.v];
						},
						label(context) {
							const v = context.dataset.data[context.dataIndex];
							return ['true label: ' + v.y, 'predicted label: ' + v.x];
						}
					}
				}
			},
			scales: {
				x: {
					type: 'category',
					labels: [],
					ticks: { display: true, autoSkip: false },
					gridLines: { display: false },
					title: { display: true, text: 'Predicted Label' }
				},
				y: {
					type: 'category',
					labels: [],
					offset: true,
					reverse: true,
					ticks: { display: true, autoSkip: false },
					gridLines: { display: false },
					title: { display: true, text: 'True Label' }
				}
			},
			onClick(e) {
				try {
					const dataIndex = e.chart.tooltip.dataPoints[0].dataIndex;

					if (selectedDataIndex === dataIndex) {
						selected.set(null);
						selectedDataIndex = -1;
					} else {
						selected.set(e.chart.tooltip.dataPoints[0].raw);
						selectedDataIndex = dataIndex;
						e.chart.update();
					}
				} catch(error) {
					// eslint-disable-next-line no-console
					console.log('[confusion matrix] selection error:', error);
				}
			}
		}
	};

	let chart;
	let unSub = [];

	function setup(canvasElement) {
		const ctx = canvasElement.getContext('2d');
		chart = new Chart(ctx, defaultOptions);

		unSub.push(labels.subscribe(labs => {
			nLabels = labs.length;
			defaultOptions.options.scales.x.labels = labs.sort();
			defaultOptions.options.scales.y.labels = labs.sort();
			chart.update();
		}));

		unSub.push(confusion.subscribe(conf => {
			maxCount = conf.reduce((m, { v }) => Math.max(m, v), 0);
			defaultOptions.data.datasets[0].data = conf;
			chart.update();
		}));
	}

	onDestroy(() => {
		for (const f of unSub) {
			f();
		}
	});

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('loading' in $$props) $$subscribe_loading($$invalidate(1, loading = $$props.loading));
		if ('progress' in $$props) $$subscribe_progress($$invalidate(2, progress = $$props.progress));
		if ('accuracy' in $$props) $$subscribe_accuracy($$invalidate(3, accuracy = $$props.accuracy));
		if ('confusion' in $$props) $$invalidate(8, confusion = $$props.confusion);
		if ('labels' in $$props) $$invalidate(9, labels = $$props.labels);
		if ('selected' in $$props) $$invalidate(10, selected = $$props.selected);
	};

	return [
		title,
		loading,
		progress,
		accuracy,
		$loading,
		$progress,
		$accuracy,
		setup,
		confusion,
		labels,
		selected
	];
}

class Confusion_matrix_view extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$H, create_fragment$H, safe_not_equal, {
			title: 0,
			loading: 1,
			progress: 2,
			accuracy: 3,
			confusion: 8,
			labels: 9,
			selected: 10
		});
	}
}

var _ConfusionMatrix_prediction;
class ConfusionMatrix extends Component$1 {
    constructor(prediction) {
        super();
        this.title = 'confusion matrix';
        _ConfusionMatrix_prediction.set(this, void 0);
        this.$confusion = new Stream([], true);
        this.$accuracy = new Stream(undefined, true);
        this.$labels = new Stream([], true);
        this.$selected = new Stream(null, true);
        this.$progress = new Stream(false, true);
        __classPrivateFieldSet(this, _ConfusionMatrix_prediction, prediction, "f");
        this.start();
        this.setup();
    }
    setup() {
        let predictions = [];
        __classPrivateFieldGet(this, _ConfusionMatrix_prediction, "f").$status.subscribe(async ({ status, count, total, data }) => {
            if (status === 'start') {
                predictions = [];
                this.$progress.set(null);
            }
            else if (status === 'running') {
                predictions.push(data);
                this.$progress.set(count / total);
            }
            else if (status === 'loaded') {
                predictions = await __classPrivateFieldGet(this, _ConfusionMatrix_prediction, "f").predictionService
                    .items()
                    .query({
                    $select: ['id', 'label', 'yTrue'],
                })
                    .toArray();
                this.$progress.set(false);
            }
            else if (status === 'loading') {
                predictions = [];
                this.$progress.set(null);
            }
            else {
                this.$progress.set(false);
            }
            this.updateConfusionMatrix(predictions);
            this.updateAccuracy(predictions);
        });
    }
    updateConfusionMatrix(predictions) {
        const labels = predictions.map((x) => x.label);
        const trueLabels = predictions.map((x) => x.yTrue);
        const uniqueLabels = Array.from(new Set(labels.concat(trueLabels)));
        if (!dequal(uniqueLabels, this.$labels.value)) {
            this.$labels.set(uniqueLabels);
        }
        const nLabels = uniqueLabels.length;
        const labIndices = uniqueLabels.reduce((x, l, i) => ({ ...x, [l]: i }), {});
        const confusion = Array.from(Array(nLabels ** 2), () => 0);
        for (let i = 0; i < labels.length; i += 1) {
            confusion[labIndices[labels[i]] * nLabels + labIndices[trueLabels[i]]] += 1;
        }
        const conf = confusion.map((v, i) => ({
            x: uniqueLabels[Math.floor(i / nLabels)],
            y: uniqueLabels[i % nLabels],
            v,
        }));
        this.$confusion.set(conf);
    }
    updateAccuracy(predictions) {
        if (predictions.length === 0) {
            this.$accuracy.set(undefined);
        }
        else {
            this.$accuracy.set(predictions.reduce((correct, { label, yTrue }) => correct + (label === yTrue ? 1 : 0), 0) /
                predictions.length);
        }
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Confusion_matrix_view({
            target: t,
            props: {
                title: this.title,
                loading: __classPrivateFieldGet(this, _ConfusionMatrix_prediction, "f").$status.map(({ status }) => status === 'loading'),
                progress: this.$progress,
                confusion: this.$confusion,
                accuracy: this.$accuracy,
                labels: this.$labels,
                selected: this.$selected,
            },
        });
    }
}
_ConfusionMatrix_prediction = new WeakMap();

function confusionMatrix(...args) {
    return new ConfusionMatrix(...args);
}

/* src/components/dataset-browser/dataset-browser.view.svelte generated by Svelte v3.59.1 */

const { window: window_1 } = globals;

function get_each_context$b(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[27] = list[i][0];
	child_ctx[28] = list[i][1].loaded;
	child_ctx[29] = list[i][1].total;
	child_ctx[30] = list[i][1].instances;
	return child_ctx;
}

function get_each_context_1$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[33] = list[i].id;
	child_ctx[34] = list[i].thumbnail;
	return child_ctx;
}

// (234:2) {#if classes && !dataStoreError}
function create_if_block_1$d(ctx) {
	let t;
	let div;
	let current;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*$count*/ ctx[6] > 0) return create_if_block_3$4;
		return create_else_block$f;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);
	let each_value = Object.entries(/*classes*/ ctx[5]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$b(get_each_context$b(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			if_block.c();
			t = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "flex flex-wrap");
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, t, anchor);
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", /*click_handler_2*/ ctx[18]),
					listen(div, "keypress", prevent_default(/*keypress_handler*/ ctx[19]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			}

			if (dirty[0] & /*loadMore, classes, $selected, selectInstance, onClassAction*/ 6560) {
				each_value = Object.entries(/*classes*/ ctx[5]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$b(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$b(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(t);
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (237:4) {:else}
function create_else_block$f(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "This dataset is empty.";
			attr(p, "class", "ml-3 mt-2");
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (235:4) {#if $count > 0}
function create_if_block_3$4(ctx) {
	let p;
	let t0;
	let t1;
	let t2;
	let t3_value = (/*$count*/ ctx[6] > 1 ? 's' : '') + "";
	let t3;
	let t4;

	return {
		c() {
			p = element("p");
			t0 = text$1("This dataset contains ");
			t1 = text$1(/*$count*/ ctx[6]);
			t2 = text$1(" instance");
			t3 = text$1(t3_value);
			t4 = text$1(".");
			attr(p, "class", "ml-3 mt-2");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, t1);
			append(p, t2);
			append(p, t3);
			append(p, t4);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*$count*/ 64) set_data(t1, /*$count*/ ctx[6]);
			if (dirty[0] & /*$count*/ 64 && t3_value !== (t3_value = (/*$count*/ ctx[6] > 1 ? 's' : '') + "")) set_data(t3, t3_value);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (274:14) {#each instances as { id, thumbnail }
function create_each_block_1$3(key_1, ctx) {
	let img;
	let img_src_value;
	let img_intro;
	let img_outro;
	let current;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[16](/*id*/ ctx[33]);
	}

	return {
		key: key_1,
		first: null,
		c() {
			img = element("img");
			if (!src_url_equal(img.src, img_src_value = /*thumbnail*/ ctx[34])) attr(img, "src", img_src_value);
			attr(img, "alt", "thumbnail");
			attr(img, "class", "m-1 svelte-14ms951");
			toggle_class(img, "selected", /*$selected*/ ctx[7].includes(/*id*/ ctx[33]));
			this.first = img;
		},
		m(target, anchor) {
			insert(target, img, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(img, "click", stop_propagation(click_handler));
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (!current || dirty[0] & /*classes*/ 32 && !src_url_equal(img.src, img_src_value = /*thumbnail*/ ctx[34])) {
				attr(img, "src", img_src_value);
			}

			if (!current || dirty[0] & /*$selected, classes*/ 160) {
				toggle_class(img, "selected", /*$selected*/ ctx[7].includes(/*id*/ ctx[33]));
			}
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!current) return;
				if (img_outro) img_outro.end(1);
				img_intro = create_in_transition(img, scale, {});
				img_intro.start();
			});

			current = true;
		},
		o(local) {
			if (img_intro) img_intro.invalidate();
			img_outro = create_out_transition(img, scale, {});
			current = false;
		},
		d(detaching) {
			if (detaching) detach(img);
			if (detaching && img_outro) img_outro.end();
			mounted = false;
			dispose();
		}
	};
}

// (289:12) {#if loaded < total}
function create_if_block_2$7(ctx) {
	let button;
	let current;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[17](/*label*/ ctx[27]);
	}

	button = new Button$1({
			props: {
				size: "small",
				variant: "light",
				$$slots: { default: [create_default_slot_1$c] },
				$$scope: { ctx }
			}
		});

	button.$on("click", click_handler_1);

	return {
		c() {
			create_component(button.$$.fragment);
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const button_changes = {};

			if (dirty[1] & /*$$scope*/ 64) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
		}
	};
}

// (290:14) <Button size="small" variant="light" on:click={() => loadMore(label)}>
function create_default_slot_1$c(ctx) {
	let t;

	return {
		c() {
			t = text$1("View More");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (246:6) {#each Object.entries(classes) as [label, { loaded, total, instances }
function create_each_block$b(ctx) {
	let div4;
	let div2;
	let div0;
	let span;
	let t0_value = /*label*/ ctx[27] + "";
	let t0;
	let t1;
	let popmenu;
	let t2;
	let div1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t3;
	let div3;
	let t4;
	let current;

	function select_handler(...args) {
		return /*select_handler*/ ctx[15](/*label*/ ctx[27], ...args);
	}

	popmenu = new PopMenu({
			props: {
				actions: [
					{ code: 'edit', text: 'Edit class label' },
					{ code: 'delete', text: 'Delete class' }
				].concat(/*$selected*/ ctx[7].length > 0
				? [
						{
							code: 'deleteInstances',
							text: `Delete selected instance${/*$selected*/ ctx[7].length > 1 ? 's' : ''}`
						},
						{
							code: 'relabelInstances',
							text: `Relabel selected instance${/*$selected*/ ctx[7].length > 1 ? 's' : ''}`
						}
					]
				: [])
			}
		});

	popmenu.$on("select", select_handler);
	let each_value_1 = /*instances*/ ctx[30];
	const get_key = ctx => /*id*/ ctx[33];

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1$3(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1$3(key, child_ctx));
	}

	let if_block = /*loaded*/ ctx[28] < /*total*/ ctx[29] && create_if_block_2$7(ctx);

	return {
		c() {
			div4 = element("div");
			div2 = element("div");
			div0 = element("div");
			span = element("span");
			t0 = text$1(t0_value);
			t1 = space();
			create_component(popmenu.$$.fragment);
			t2 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			div3 = element("div");
			if (if_block) if_block.c();
			t4 = space();
			attr(span, "class", "browser-class-title svelte-14ms951");
			attr(div0, "class", "browser-class-header svelte-14ms951");
			attr(div1, "class", "browser-class-body svelte-14ms951");
			attr(div2, "class", "w-full");
			attr(div3, "class", "pb-1");
			attr(div4, "class", "browser-class svelte-14ms951");
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div2);
			append(div2, div0);
			append(div0, span);
			append(span, t0);
			append(div0, t1);
			mount_component(popmenu, div0, null);
			append(div2, t2);
			append(div2, div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div1, null);
				}
			}

			append(div4, t3);
			append(div4, div3);
			if (if_block) if_block.m(div3, null);
			append(div4, t4);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if ((!current || dirty[0] & /*classes*/ 32) && t0_value !== (t0_value = /*label*/ ctx[27] + "")) set_data(t0, t0_value);
			const popmenu_changes = {};

			if (dirty[0] & /*$selected*/ 128) popmenu_changes.actions = [
				{ code: 'edit', text: 'Edit class label' },
				{ code: 'delete', text: 'Delete class' }
			].concat(/*$selected*/ ctx[7].length > 0
			? [
					{
						code: 'deleteInstances',
						text: `Delete selected instance${/*$selected*/ ctx[7].length > 1 ? 's' : ''}`
					},
					{
						code: 'relabelInstances',
						text: `Relabel selected instance${/*$selected*/ ctx[7].length > 1 ? 's' : ''}`
					}
				]
			: []);

			popmenu.$set(popmenu_changes);

			if (dirty[0] & /*classes, $selected, selectInstance*/ 2208) {
				each_value_1 = /*instances*/ ctx[30];
				group_outros();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, div1, outro_and_destroy_block, create_each_block_1$3, null, get_each_context_1$3);
				check_outros();
			}

			if (/*loaded*/ ctx[28] < /*total*/ ctx[29]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*classes*/ 32) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_2$7(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div3, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(popmenu.$$.fragment, local);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(popmenu.$$.fragment, local);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div4);
			destroy_component(popmenu);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			if (if_block) if_block.d();
		}
	};
}

// (299:2) {#if dataStoreError}
function create_if_block$o(ctx) {
	let div1;

	return {
		c() {
			div1 = element("div");

			div1.innerHTML = `<svg class="inline flex-shrink-0 mr-3 w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path></svg> 
      <div><span class="font-medium">Data Store connection Error!</span> This data store probably requires
        authentication</div>`;

			attr(div1, "class", "flex p-4 mb-4 text-sm text-red-700 bg-red-100 rounded-lg dark:bg-red-200 dark:text-red-800");
			attr(div1, "role", "alert");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
		},
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

// (233:0) <ViewContainer {title} {loading}>
function create_default_slot$v(ctx) {
	let t;
	let if_block1_anchor;
	let current;
	let if_block0 = /*classes*/ ctx[5] && !/*dataStoreError*/ ctx[4] && create_if_block_1$d(ctx);
	let if_block1 = /*dataStoreError*/ ctx[4] && create_if_block$o();

	return {
		c() {
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*classes*/ ctx[5] && !/*dataStoreError*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*classes, dataStoreError*/ 48) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$d(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*dataStoreError*/ ctx[4]) {
				if (if_block1) ; else {
					if_block1 = create_if_block$o();
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
		}
	};
}

function create_fragment$G(ctx) {
	let viewcontainer;
	let current;
	let mounted;
	let dispose;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				loading: /*loading*/ ctx[3],
				$$slots: { default: [create_default_slot$v] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window_1, "keydown", /*handleKeydown*/ ctx[9]),
					listen(window_1, "keyup", /*handleKeyup*/ ctx[10])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const viewcontainer_changes = {};
			if (dirty[0] & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];
			if (dirty[0] & /*loading*/ 8) viewcontainer_changes.loading = /*loading*/ ctx[3];

			if (dirty[0] & /*dataStoreError, classes, $selected, $count*/ 240 | dirty[1] & /*$$scope*/ 64) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$G($$self, $$props, $$invalidate) {
	let $count,
		$$unsubscribe_count = noop$2,
		$$subscribe_count = () => ($$unsubscribe_count(), $$unsubscribe_count = subscribe(count, $$value => $$invalidate(6, $count = $$value)), count);

	let $selected,
		$$unsubscribe_selected = noop$2,
		$$subscribe_selected = () => ($$unsubscribe_selected(), $$unsubscribe_selected = subscribe(selected, $$value => $$invalidate(7, $selected = $$value)), selected);

	$$self.$$.on_destroy.push(() => $$unsubscribe_count());
	$$self.$$.on_destroy.push(() => $$unsubscribe_selected());
	let { title } = $$props;
	let { batchSize } = $$props;
	let { count } = $$props;
	$$subscribe_count();
	let { dataset } = $$props;
	let { selected } = $$props;
	$$subscribe_selected();
	let loading = false;
	let dataStoreError = false;
	let classes = {};

	async function loadMore(label) {
		await dataset.ready;

		for await (const instance of dataset.items().query({ y: label, $sort: { updatedAt: -1 } }).skip(classes[label].loaded).take(batchSize).select(['id', 'y', 'thumbnail'])) {
			$$invalidate(5, classes[label].instances = [...classes[label].instances, instance], classes);
			$$invalidate(5, classes[label].loaded += 1, classes);
		}
	}

	async function updateClassesFromDataset() {
		if (loading) return;
		$$invalidate(3, loading = true);

		try {
			$$invalidate(4, dataStoreError = false);
			await dataset.ready;
		} catch(e) {
			$$invalidate(3, loading = false);
			$$invalidate(4, dataStoreError = true);
			return;
		}

		const labels = await dataset.distinct('y');

		$$invalidate(5, classes = labels.reduce(
			(x, lab) => ({
				...x,
				[lab]: { total: 0, loaded: 0, instances: [] }
			}),
			{}
		));

		for (const label of labels) {
			const { total } = await dataset.find({ query: { $limit: 0, y: label } });
			$$invalidate(5, classes[label].total = total, classes);

			if (batchSize > 0) {
				await loadMore(label);
			} else {
				while (classes[label].loaded < classes[label].total) {
					await loadMore(label);
				}
			}
		}

		$$invalidate(3, loading = false);
	}

	function getLabel(id) {
		for (const [label, { instances }] of Object.entries(classes)) {
			if (instances.map(x => x.id).includes(id)) {
				return label;
			}
		}

		return null;
	}

	async function deleteSelectedInstances() {
		let p = Promise.resolve();

		for (const id of selected.get()) {
			// eslint-disable-next-line no-loop-func
			p = p.then(() => dataset.remove(id));
		}

		await p;
		selected.set([]);
	}

	async function relabelSelectedInstances(newLabel) {
		let p = Promise.resolve();

		for (const id of selected.get()) {
			// eslint-disable-next-line no-loop-func
			p = p.then(() => dataset.patch(id, { y: newLabel }));
		}

		await p;
		selected.set([]);
	}

	let metaPressed = false;
	let shiftPressed = false;

	function handleKeydown(event) {
		if (['Meta', 'Control'].includes(event.key)) {
			metaPressed = true;
		} else if (event.key === 'Shift') {
			shiftPressed = true;
		} else if (event.key === 'Delete' || event.key === 'Backspace' && metaPressed) {
			deleteSelectedInstances();
		}
	}

	function handleKeyup(event) {
		if (['Meta', 'Control'].includes(event.key)) {
			metaPressed = false;
		} else if (event.key === 'Shift') {
			shiftPressed = false;
		}
	}

	let initialId = null;

	function selectInstance(id) {
		if (metaPressed) {
			if (!id) return;

			if (selected.get().includes(id)) {
				selected.set(selected.get().filter(x => x !== id));
			} else {
				selected.set(selected.get().concat([id]));
			}
		} else if (shiftPressed) {
			if (!initialId || !id) return;
			const srcLabel = getLabel(initialId);
			const dstLabel = getLabel(id);
			if (srcLabel !== dstLabel) return;
			const instances = classes[srcLabel].instances.map(x => x.id);
			const srcIndex = instances.indexOf(initialId);
			const dstIndex = instances.indexOf(id);

			selected.set(srcIndex < dstIndex
			? instances.slice(srcIndex, dstIndex + 1)
			: instances.slice(dstIndex, srcIndex + 1));
		} else {
			selected.set(id ? [id] : []);
			initialId = id;
		}
	}

	function onClassAction(label, code) {
		let result;

		switch (code) {
			case 'edit':
				// eslint-disable-next-line no-alert
				result = window.prompt('Enter the new label', label);
				if (result) {
					dataset.patch(null, { y: result }, { query: { y: label } });
				}
				break;
			case 'delete':
				dataset.remove(null, { query: { y: label } });
				break;
			case 'deleteInstances':
				deleteSelectedInstances();
				break;
			case 'relabelInstances':
				// eslint-disable-next-line no-alert
				result = window.prompt('Enter the new label', label);
				if (result) {
					relabelSelectedInstances(result);
				}
				break;
			default:
				// eslint-disable-next-line no-alert
				alert(`Class ${label}: ${code}`);
				break;
		}
	}

	onMount(() => {
		updateClassesFromDataset();

		dataset.$changes.subscribe(async changes => {
			for (const { level, type, data } of changes) {
				if (level === 'dataset') {
					if (type === 'created') {
						selectInstance();
						updateClassesFromDataset();
					}
				} else if (level === 'instance') {
					if (type === 'created') {
						if (!classes[data.y]) {
							$$invalidate(5, classes[data.y] = { total: 0, loaded: 0, instances: [] }, classes);
						}

						$$invalidate(5, classes[data.y].total += 1, classes);
						$$invalidate(5, classes[data.y].loaded += 1, classes);

						$$invalidate(
							5,
							classes[data.y].instances = [
								{
									id: data.id,
									y: data.y,
									thumbnail: data.thumbnail
								},
								...classes[data.y].instances
							],
							classes
						);
					} else if (type === 'updated') {
						// TODO: what if the image is not displayed?
						const originalLabel = getLabel(data.id);

						$$invalidate(5, classes[originalLabel].total -= 1, classes);
						$$invalidate(5, classes[originalLabel].loaded -= 1, classes);
						$$invalidate(5, classes[originalLabel].instances = classes[originalLabel].instances.filter(({ id }) => id !== data.id), classes);

						if (classes[originalLabel].total === 0) {
							delete classes[originalLabel];
							$$invalidate(5, classes);
						}

						if (!classes[data.y]) {
							$$invalidate(5, classes[data.y] = { total: 0, loaded: 0, instances: [] }, classes);
						}

						$$invalidate(
							5,
							classes[data.y].instances = [
								{
									id: data.id,
									y: data.y,
									thumbnail: data.thumbnail
								},
								...classes[data.y].instances
							],
							classes
						);
					} else if (type === 'removed') {
						$$invalidate(5, classes[data.y].total -= 1, classes);
						$$invalidate(5, classes[data.y].loaded -= 1, classes);
						$$invalidate(5, classes[data.y].instances = classes[data.y].instances.filter(({ id }) => id !== data.id), classes);

						if (classes[data.y].total === 0) {
							delete classes[data.y];
							$$invalidate(5, classes);
						}
					}
				}
			}
		});
	});

	const select_handler = (label, e) => onClassAction(label, e.detail);
	const click_handler = id => selectInstance(id);
	const click_handler_1 = label => loadMore(label);
	const click_handler_2 = () => selectInstance();
	const keypress_handler = e => e.key === 'Escape' && selectInstance();

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('batchSize' in $$props) $$invalidate(13, batchSize = $$props.batchSize);
		if ('count' in $$props) $$subscribe_count($$invalidate(1, count = $$props.count));
		if ('dataset' in $$props) $$invalidate(14, dataset = $$props.dataset);
		if ('selected' in $$props) $$subscribe_selected($$invalidate(2, selected = $$props.selected));
	};

	return [
		title,
		count,
		selected,
		loading,
		dataStoreError,
		classes,
		$count,
		$selected,
		loadMore,
		handleKeydown,
		handleKeyup,
		selectInstance,
		onClassAction,
		batchSize,
		dataset,
		select_handler,
		click_handler,
		click_handler_1,
		click_handler_2,
		keypress_handler
	];
}

class Dataset_browser_view extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$G,
			create_fragment$G,
			safe_not_equal,
			{
				title: 0,
				batchSize: 13,
				count: 1,
				dataset: 14,
				selected: 2
			},
			null,
			[-1, -1]
		);
	}
}

var _DatasetBrowser_dataset;
class DatasetBrowser extends Component$1 {
    constructor(dataset, { batchSize = 6 } = {}) {
        super();
        this.title = 'dataset browser';
        _DatasetBrowser_dataset.set(this, void 0);
        this.$selected = new Stream([], true);
        __classPrivateFieldSet(this, _DatasetBrowser_dataset, dataset, "f");
        this.batchSize = batchSize;
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Dataset_browser_view({
            target: t,
            props: {
                title: this.title,
                batchSize: this.batchSize,
                count: __classPrivateFieldGet(this, _DatasetBrowser_dataset, "f").$count,
                dataset: __classPrivateFieldGet(this, _DatasetBrowser_dataset, "f"),
                selected: this.$selected,
            },
        });
    }
}
_DatasetBrowser_dataset = new WeakMap();

function datasetBrowser(...args) {
    return new DatasetBrowser(...args);
}

/* src/components/dataset-scatter/dataset-scatter.view.svelte generated by Svelte v3.59.1 */

function create_default_slot_1$b(ctx) {
	let t;

	return {
		c() {
			t = text$1("Reset Zoom");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (138:0) <ViewContainer {title}>
function create_default_slot$u(ctx) {
	let div0;
	let canvas;
	let t;
	let div1;
	let button;
	let current;

	button = new Button$1({
			props: {
				size: "small",
				$$slots: { default: [create_default_slot_1$b] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*click_handler*/ ctx[8]);

	return {
		c() {
			div0 = element("div");
			canvas = element("canvas");
			t = space();
			div1 = element("div");
			create_component(button.$$.fragment);
			attr(div0, "id", "scatter-container");
			attr(div0, "class", "svelte-ei9k3k");
			attr(div1, "class", "flex justify-end");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, canvas);
			/*canvas_binding*/ ctx[7](canvas);
			insert(target, t, anchor);
			insert(target, div1, anchor);
			mount_component(button, div1, null);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 8192) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			/*canvas_binding*/ ctx[7](null);
			if (detaching) detach(t);
			if (detaching) detach(div1);
			destroy_component(button);
		}
	};
}

function create_fragment$F(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$u] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, chart, canvasElement*/ 8198) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$F($$self, $$props, $$invalidate) {
	Chart.register(Filler, Legend, LineElement, LinearScale, PointElement, ScatterController, Title, Tooltip$1);
	Chart.register(zoomPlugin);
	let { title } = $$props;
	let { data } = $$props;
	let { hovered } = $$props;
	let { clicked } = $$props;

	const getOrCreateTooltip = chart => {
		let tooltipEl = chart.canvas.parentNode.querySelector('div');

		if (!tooltipEl) {
			tooltipEl = document.createElement('div');
			tooltipEl.style.background = 'transparent';
			tooltipEl.style.borderRadius = '3px';
			tooltipEl.style.color = 'white';
			tooltipEl.style.opacity = 1;
			tooltipEl.style.pointerEvents = 'none';
			tooltipEl.style.position = 'absolute';
			tooltipEl.style.transform = 'translate(-50%, 0)';
			tooltipEl.style.transition = 'all .1s ease';
			const img = document.createElement('img');
			img.style.borderRadius = '4px';
			img.style.margin = '0px';
			img.width = 100;
			img.height = 100;
			tooltipEl.appendChild(img);
			chart.canvas.parentNode.appendChild(tooltipEl);
		}

		return tooltipEl;
	};

	function externalTooltipHandler(context) {
		// Tooltip Element
		const { chart, tooltip } = context;

		const tooltipEl = getOrCreateTooltip(chart);

		// Hide if no tooltip
		if (tooltip.opacity === 0) {
			tooltipEl.style.opacity = 0;
			return;
		}

		const img = tooltipEl.querySelector('img');
		img.src = tooltip.dataPoints[0].raw.thumbnail;
		const { offsetLeft: positionX, offsetTop: positionY } = chart.canvas;

		// Display, position, and set styles for font
		tooltipEl.style.opacity = 1;

		tooltipEl.style.left = positionX + tooltip.caretX + 70 + 'px';
		tooltipEl.style.top = positionY + tooltip.caretY + 20 + 'px';
		tooltipEl.style.font = tooltip.options.bodyFont.string;
		tooltipEl.style.padding = tooltip.options.padding + 'px ' + tooltip.options.padding + 'px';
	}

	const defaultOptions = {
		type: 'scatter',
		data: { labels: [], datasets: [] },
		options: {
			responsive: true,
			maintainAspectRatio: false,
			animation: { duration: 200 },
			scales: {
				y: {
					position: 'center',
					ticks: { display: false }
				},
				x: {
					position: 'center',
					ticks: { display: false }
				}
			},
			elements: {
				point: {
					radius: 8,
					hoverRadius: 10,
					borderWidth: 0,
					hoverBorderWidth: 3
				}
			},
			plugins: {
				legend: { position: 'top' },
				tooltip: {
					enabled: false,
					position: 'nearest',
					external: externalTooltipHandler
				},
				zoom: {
					zoom: {
						wheel: { enabled: true }, // modifierKey: 'ctrl',
						pinch: { enabled: true },
						mode: 'xy'
					},
					pan: {
						enabled: true,
						// modifierKey: 'ctrl',
						mode: 'xy'
					}
				}
			},
			onClick(e, elts) {
				clicked.set(elts.map(({ element }) => element)); // clicked.set(elts.map(({ element }) => element?.$context?.raw?.id));
			}, // clicked.set(elts.map(({ element }) => element?.$context?.raw?.id));
			onHover(e, elts) {
				const ids = elts.map(({ element }) => {
					var _a, _b;

					return (_b = (_a = element === null || element === void 0
					? void 0
					: element.$context) === null || _a === void 0
					? void 0
					: _a.raw) === null || _b === void 0
					? void 0
					: _b.id;
				});

				if (!dequal(ids, hovered.get())) hovered.set(ids);
			}
		}
	};

	let chart;

	// eslint-disable-next-line @typescript-eslint/no-empty-function
	let unSub = () => {
		
	};

	let canvasElement;

	async function setup() {
		unSub();
		const chartOptions = { ...defaultOptions, data: data.get() };

		unSub = data.filter(x => !!x).subscribe(d => {
			chartOptions.data = d;
			chart.update();
			chart.resetZoom();
		});

		const ctx = canvasElement.getContext('2d');
		$$invalidate(1, chart = new Chart(ctx, chartOptions));
	}

	onMount(async () => {
		await tick$1();
		await tick$1();
		setup();
	});

	onDestroy(() => {
		unSub();

		chart === null || chart === void 0
		? void 0
		: chart.destroy();
	});

	function canvas_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			canvasElement = $$value;
			$$invalidate(2, canvasElement);
		});
	}

	const click_handler = () => chart.resetZoom();

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('data' in $$props) $$invalidate(3, data = $$props.data);
		if ('hovered' in $$props) $$invalidate(4, hovered = $$props.hovered);
		if ('clicked' in $$props) $$invalidate(5, clicked = $$props.clicked);
	};

	return [
		title,
		chart,
		canvasElement,
		data,
		hovered,
		clicked,
		externalTooltipHandler,
		canvas_binding,
		click_handler
	];
}

class Dataset_scatter_view extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$F, create_fragment$F, safe_not_equal, {
			title: 0,
			data: 3,
			hovered: 4,
			clicked: 5,
			externalTooltipHandler: 6
		});
	}

	get externalTooltipHandler() {
		return this.$$.ctx[6];
	}
}

const defaultColors = [
    'rgb(54, 162, 235)',
    'rgb(255, 99, 132)',
    'rgb(255, 206, 86)',
    'rgb(75, 192, 192)',
    'rgb(153, 102, 255)',
    'rgb(255, 159, 64)',
];
class DatasetScatter extends Component$1 {
    constructor(dataset) {
        super();
        this.dataset = dataset;
        this.title = 'Dataset ScatterPlot';
        this.transforms = {
            xy: (value) => [value.x[0], value.x[1]],
            label: (value) => value.y,
        };
        this.$data = new Stream(undefined, true);
        this.$hovered = new Stream([], true);
        this.$clicked = new Stream([], true);
        this.dataset.ready.then(() => {
            this.updateData();
        });
    }
    setTransforms(t) {
        this.transforms = { ...this.transforms, ...t };
        this.updateData();
    }
    async updateData() {
        await this.dataset.ready;
        const values = await Promise.all(await this.dataset
            .items()
            .map(async (instance) => {
            const [x, y] = await this.transforms.xy(instance);
            const label = await this.transforms.label(instance);
            return {
                x,
                y,
                label,
                id: instance.id,
                thumbnail: instance.thumbnail,
            };
        })
            .toArray());
        const labels = values.map((x) => x.label);
        const uniqueLabels = Array.from(new Set(labels));
        uniqueLabels.sort();
        const data = {
            labels,
            datasets: uniqueLabels.map((label, i) => ({
                label: label,
                data: values.filter((v) => v.label === label),
                borderColor: colorLib(defaultColors[i]).darken(0.5).rgbString(),
                backgroundColor: defaultColors[i],
            })),
        };
        this.$data.set(data);
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Dataset_scatter_view({
            target: t,
            props: {
                title: this.title,
                data: this.$data,
                hovered: this.$hovered,
                clicked: this.$clicked,
            },
        });
    }
}

function datasetScatter(...args) {
    return new DatasetScatter(...args);
}

/* src/components/dataset-table/dataset-table.view.svelte generated by Svelte v3.59.1 */

function create_catch_block$1(ctx) {
	return {
		c: noop$2,
		m: noop$2,
		p: noop$2,
		i: noop$2,
		o: noop$2,
		d: noop$2
	};
}

// (74:2) {:then}
function create_then_block$1(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*provider*/ ctx[5] && create_if_block$n(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*provider*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*provider*/ 32) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$n(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (75:4) {#if provider}
function create_if_block$n(ctx) {
	let table;
	let current;

	table = new Table({
			props: {
				provider: /*provider*/ ctx[5],
				columns: /*columns*/ ctx[4],
				singleSelection: /*singleSelection*/ ctx[2],
				actions: [{ name: 'delete' }]
			}
		});

	table.$on("selection", /*selection_handler*/ ctx[7]);

	return {
		c() {
			create_component(table.$$.fragment);
		},
		m(target, anchor) {
			mount_component(table, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const table_changes = {};
			if (dirty & /*provider*/ 32) table_changes.provider = /*provider*/ ctx[5];
			if (dirty & /*columns*/ 16) table_changes.columns = /*columns*/ ctx[4];
			if (dirty & /*singleSelection*/ 4) table_changes.singleSelection = /*singleSelection*/ ctx[2];
			table.$set(table_changes);
		},
		i(local) {
			if (current) return;
			transition_in(table.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(table.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(table, detaching);
		}
	};
}

// (72:24)      <Spinner />   {:then}
function create_pending_block$1(ctx) {
	let spinner;
	let current;
	spinner = new Spinner({});

	return {
		c() {
			create_component(spinner.$$.fragment);
		},
		m(target, anchor) {
			mount_component(spinner, target, anchor);
			current = true;
		},
		p: noop$2,
		i(local) {
			if (current) return;
			transition_in(spinner.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(spinner.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(spinner, detaching);
		}
	};
}

// (71:0) <ViewContainer {title}>
function create_default_slot$t(ctx) {
	let await_block_anchor;
	let promise;
	let current;

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: false,
		pending: create_pending_block$1,
		then: create_then_block$1,
		catch: create_catch_block$1,
		blocks: [,,,]
	};

	handle_promise(promise = /*dataset*/ ctx[1].ready, info);

	return {
		c() {
			await_block_anchor = empty();
			info.block.c();
		},
		m(target, anchor) {
			insert(target, await_block_anchor, anchor);
			info.block.m(target, info.anchor = anchor);
			info.mount = () => await_block_anchor.parentNode;
			info.anchor = await_block_anchor;
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			info.ctx = ctx;

			if (dirty & /*dataset*/ 2 && promise !== (promise = /*dataset*/ ctx[1].ready) && handle_promise(promise, info)) ; else {
				update_await_block_branch(info, ctx, dirty);
			}
		},
		i(local) {
			if (current) return;
			transition_in(info.block);
			current = true;
		},
		o(local) {
			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(await_block_anchor);
			info.block.d(detaching);
			info.token = null;
			info = null;
		}
	};
}

function create_fragment$E(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$t] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, dataset, provider, columns, singleSelection, selection*/ 318) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function getType(x) {
	if (typeof x === 'string' && x.includes('data:image/')) {
		return 'image';
	}

	if (typeof x === 'string' && !isNaN(Date.parse(x))) {
		return 'date';
	}

	if (Array.isArray(x)) {
		if (x.length > 1 && Array.isArray(x[0]) || x.length > 3) {
			return 'array';
		}
	}

	return 'generic';
}

function isSortable(x) {
	if (getType(x) !== 'image') {
		return true;
	}

	return false;
}

function instance$E($$self, $$props, $$invalidate) {
	let { title } = $$props;
	let { dataset } = $$props;
	let { colNames } = $$props;
	let { singleSelection = false } = $$props;
	let { selection } = $$props;

	let columns = [
		{ name: 'x' },
		{ name: 'y', sortable: true },
		{ name: 'thumbnail', type: 'image' },
		{ name: 'updatedAt', sortable: true }
	];

	let provider;

	onMount(async () => {
		await tick$1();
		await dataset.ready;

		$$invalidate(5, provider = new TableServiceProvider({
				service: dataset.instanceService,
				columns
			}));

		colNames.subscribe(async cols => {
			$$invalidate(4, columns = cols.map(name => ({ name })));

			if (dataset.$count.get() > 0) {
				const [firstInstance] = await dataset.items().query(dataset.query).take(1).toArray();

				$$invalidate(4, columns = columns.map(({ name }) => ({
					name,
					type: getType(firstInstance[name]),
					sortable: isSortable(firstInstance[name])
				})));
			}

			for (const [key, v] of Object.entries(dataset.query)) {
				$$invalidate(5, provider.query[key] = v, provider);
			}

			$$invalidate(5, provider.query.$select = columns.map(x => x.name).concat(['id']), provider);
			provider.update();
		});

		const unSub = dataset.$count.subscribe(async c => {
			if (c > 0) {
				const [firstInstance] = await dataset.items().query(dataset.query).take(1).toArray();

				$$invalidate(4, columns = columns.map(({ name }) => ({
					name,
					type: getType(firstInstance[name]),
					sortable: isSortable(firstInstance[name])
				})));

				unSub();
			}
		});
	});

	const selection_handler = ({ detail }) => {
		selection.set(detail);
	};

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('dataset' in $$props) $$invalidate(1, dataset = $$props.dataset);
		if ('colNames' in $$props) $$invalidate(6, colNames = $$props.colNames);
		if ('singleSelection' in $$props) $$invalidate(2, singleSelection = $$props.singleSelection);
		if ('selection' in $$props) $$invalidate(3, selection = $$props.selection);
	};

	return [
		title,
		dataset,
		singleSelection,
		selection,
		columns,
		provider,
		colNames,
		selection_handler
	];
}

class Dataset_table_view extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$E, create_fragment$E, safe_not_equal, {
			title: 0,
			dataset: 1,
			colNames: 6,
			singleSelection: 2,
			selection: 3
		});
	}
}

var _DatasetTable_dataset;
class DatasetTable extends Component$1 {
    constructor(dataset, columns, singleSelection = false) {
        super();
        this.title = 'dataset table';
        _DatasetTable_dataset.set(this, void 0);
        this.$selection = new Stream([], true);
        this.singleSelection = false;
        __classPrivateFieldSet(this, _DatasetTable_dataset, dataset, "f");
        this.singleSelection = singleSelection;
        this.$columns = new Stream(columns || ['x', 'y', 'thumbnail', 'updatedAt'], true);
        if (!columns) {
            __classPrivateFieldGet(this, _DatasetTable_dataset, "f").ready
                .then(() => __classPrivateFieldGet(this, _DatasetTable_dataset, "f").items().take(1).toArray())
                .then((res) => {
                if (res.length > 0) {
                    const cols = Object.keys(res[0]);
                    this.$columns.set(cols);
                }
            })
                .catch((error) => {
                // eslint-disable-next-line no-console
                console.log('An error occured while fetching the first instance.', error);
            });
        }
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Dataset_table_view({
            target: t,
            props: {
                title: this.title,
                dataset: __classPrivateFieldGet(this, _DatasetTable_dataset, "f"),
                colNames: this.$columns,
                singleSelection: this.singleSelection,
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                selection: this.$selection,
            },
        });
    }
}
_DatasetTable_dataset = new WeakMap();

function datasetTable(dataset, columns) {
    return new DatasetTable(dataset, columns);
}

/* src/components/detection-boxes/detection-boxes.view.svelte generated by Svelte v3.59.1 */

function create_default_slot$s(ctx) {
	let canvas;

	return {
		c() {
			canvas = element("canvas");
			attr(canvas, "id", "can");
			attr(canvas, "class", "w-full max-w-full");
		},
		m(target, anchor) {
			insert(target, canvas, anchor);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(canvas);
		}
	};
}

function create_fragment$D(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$s] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope*/ 8) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$D($$self, $$props, $$invalidate) {
	let { title } = $$props;
	let { imageStream } = $$props;
	let { objectDetectionResults } = $$props;

	onMount(() => {
		const mycan = document.getElementById('can');
		const ctx = mycan.getContext('2d');

		imageStream.subscribe(img => {
			mycan.height = img.height;
			mycan.width = img.width;
			ctx.putImageData(img, 0, 0);
		});

		objectDetectionResults.subscribe(({ outputs }) => {
			for (let i = 0; i < outputs.length; i++) {
				ctx.font = `${Math.floor(mycan.width / 60)}px sans-serif`;
				const msg = `${outputs[i].confidence.toFixed(3)} ${outputs[i].class}`;
				const textSize = ctx.measureText(msg);
				ctx.beginPath();
				ctx.rect(...outputs[i].bbox);
				ctx.lineWidth = mycan.width / 300;
				ctx.strokeStyle = 'green';
				ctx.fillStyle = 'green';
				ctx.stroke();

				ctx.fillRect(
					outputs[i].bbox[0] - ctx.lineWidth / 2,
					outputs[i].bbox[1] > textSize.actualBoundingBoxAscent
					? outputs[i].bbox[1] - textSize.actualBoundingBoxAscent - 1.5 * ctx.lineWidth
					: 0,
					textSize.width + ctx.lineWidth,
					textSize.actualBoundingBoxAscent + ctx.lineWidth
				);

				ctx.fillStyle = 'white';

				ctx.fillText(msg, outputs[i].bbox[0], outputs[i].bbox[1] > textSize.actualBoundingBoxAscent
				? outputs[i].bbox[1] - ctx.lineWidth
				: textSize.actualBoundingBoxAscent);
			}
		});
	});

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('imageStream' in $$props) $$invalidate(1, imageStream = $$props.imageStream);
		if ('objectDetectionResults' in $$props) $$invalidate(2, objectDetectionResults = $$props.objectDetectionResults);
	};

	return [title, imageStream, objectDetectionResults];
}

class Detection_boxes_view extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$D, create_fragment$D, safe_not_equal, {
			title: 0,
			imageStream: 1,
			objectDetectionResults: 2
		});
	}
}

class DetectionBoxes extends Component$1 {
    constructor(imgStream, objDectectionRes) {
        super();
        this.title = 'Visualize Object Detections';
        this.$imgStream = imgStream;
        this.$objectDetectionResults = objDectectionRes;
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Detection_boxes_view({
            target: t,
            props: {
                title: this.title,
                imageStream: this.$imgStream,
                objectDetectionResults: this.$objectDetectionResults,
            },
        });
    }
}

function detectionBoxes(...args) {
    return new DetectionBoxes(...args);
}

/* src/components/file-upload/file-upload.view.svelte generated by Svelte v3.59.1 */

function create_if_block$m(ctx) {
	let div;

	return {
		c() {
			div = element("div");

			div.innerHTML = `<i><svg class="fill-current w-12 h-12 mb-3 text-blue-700" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M19.479 10.092c-.212-3.951-3.473-7.092-7.479-7.092-4.005 0-7.267 3.141-7.479 7.092-2.57.463-4.521 2.706-4.521 5.408 0 3.037 2.463 5.5 5.5 5.5h13c3.037 0 5.5-2.463 5.5-5.5 0-2.702-1.951-4.945-4.521-5.408zm-7.479-1.092l4 4h-3v4h-2v-4h-3l4-4z"></path></svg></i> 
      <p class="text-lg text-blue-700">Drop files to upload</p>`;

			attr(div, "class", "overlay svelte-10fctvd");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (90:6) <Button on:click={clickUpload}>
function create_default_slot_1$a(ctx) {
	let t;

	return {
		c() {
			t = text$1("Upload a file");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (56:0) <ViewContainer {title}>
function create_default_slot$r(ctx) {
	let t0;
	let div1;
	let div0;
	let p;
	let t2;
	let input;
	let t3;
	let button;
	let current;
	let mounted;
	let dispose;
	let if_block = /*draggedOver*/ ctx[2] && create_if_block$m();

	button = new Button$1({
			props: {
				$$slots: { default: [create_default_slot_1$a] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*clickUpload*/ ctx[7]);

	return {
		c() {
			if (if_block) if_block.c();
			t0 = space();
			div1 = element("div");
			div0 = element("div");
			p = element("p");
			p.innerHTML = `<span>Drop Files here or:</span>`;
			t2 = space();
			input = element("input");
			t3 = space();
			create_component(button.$$.fragment);
			attr(p, "class", "mb-3 font-semibold text-gray-900 flex flex-wrap justify-center");
			attr(input, "type", "file");
			input.multiple = true;
			attr(input, "class", "hidden");
			attr(div0, "class", "border-dashed border-2 border-gray-300 py-8 flex flex-col justify-center items-center");
			attr(div1, "class", "file-upload svelte-10fctvd");
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t0, anchor);
			insert(target, div1, anchor);
			append(div1, div0);
			append(div0, p);
			append(div0, t2);
			append(div0, input);
			/*input_binding*/ ctx[9](input);
			append(div0, t3);
			mount_component(button, div0, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "dragenter", /*handleDragEnter*/ ctx[3]),
					listen(div1, "dragleave", /*handleDragLeave*/ ctx[4]),
					listen(div1, "dragover", /*handleDragOver*/ ctx[5]),
					listen(div1, "drop", /*handleDragDrop*/ ctx[6])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*draggedOver*/ ctx[2]) {
				if (if_block) ; else {
					if_block = create_if_block$m();
					if_block.c();
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			const button_changes = {};

			if (dirty & /*$$scope*/ 8192) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div1);
			/*input_binding*/ ctx[9](null);
			destroy_component(button);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$C(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$r] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, uploadInput, draggedOver*/ 8198) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$C($$self, $$props, $$invalidate) {
	let { title } = $$props;
	let { fileStream } = $$props;
	let uploadInput;
	let counter = 0;
	let draggedOver = false;

	// use to check if a file is being dragged
	const hasFiles = ({ dataTransfer: { types = [] } }) => types.indexOf('Files') > -1;

	function handleDragEnter(e) {
		e.preventDefault();

		if (!hasFiles(e)) {
			return;
		}

		counter += 1;
		$$invalidate(2, draggedOver = true);
	}

	function handleDragLeave() {
		counter -= 1;

		if (counter < 1) {
			$$invalidate(2, draggedOver = false);
		}
	}

	function handleDragOver(e) {
		if (hasFiles(e)) {
			e.preventDefault();
		}
	}

	function processFiles(f) {
		const files = [];

		for (let i = 0; i < f.length; i++) {
			files.push(f[i]);
		}

		fileStream.set(files);
	}

	function handleDragDrop(e) {
		e.preventDefault();
		$$invalidate(2, draggedOver = false);
		processFiles(e.dataTransfer.files);
	}

	onMount(async () => {
		await tick$1();
		await tick$1();

		uploadInput.addEventListener('change', e => {
			processFiles(e.target.files);
		});
	});

	function clickUpload() {
		if (uploadInput) {
			uploadInput.click();
		}
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			uploadInput = $$value;
			$$invalidate(1, uploadInput);
		});
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('fileStream' in $$props) $$invalidate(8, fileStream = $$props.fileStream);
	};

	return [
		title,
		uploadInput,
		draggedOver,
		handleDragEnter,
		handleDragLeave,
		handleDragOver,
		handleDragDrop,
		clickUpload,
		fileStream,
		input_binding
	];
}

class File_upload_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$C, create_fragment$C, safe_not_equal, { title: 0, fileStream: 8 });
	}
}

class FileUpload extends Component$1 {
    constructor() {
        super();
        this.title = 'file upload';
        this.$files = new Stream(never());
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new File_upload_view({
            target: t,
            props: {
                title: this.title,
                fileStream: this.$files,
            },
        });
    }
}

function fileUpload(...args) {
    return new FileUpload(...args);
}

/* src/components/image-display/image-display.view.svelte generated by Svelte v3.59.1 */

function create_default_slot$q(ctx) {
	let canvas_1;

	return {
		c() {
			canvas_1 = element("canvas");
			attr(canvas_1, "class", "w-full max-w-full");
		},
		m(target, anchor) {
			insert(target, canvas_1, anchor);
			/*canvas_1_binding*/ ctx[3](canvas_1);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(canvas_1);
			/*canvas_1_binding*/ ctx[3](null);
		}
	};
}

function create_fragment$B(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$q] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, canvas*/ 34) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$B($$self, $$props, $$invalidate) {
	let { title } = $$props;
	let { imageStream } = $$props;
	let canvas;
	let unSub = noop$1;

	onMount(async () => {
		await tick$1();
		await tick$1();
		const ctx = canvas.getContext('2d');

		unSub = imageStream.subscribe(img => {
			if (Array.isArray(img) && img.length === 0) return;

			if (img instanceof ImageData) {
				$$invalidate(1, canvas.width = img.width, canvas);
				$$invalidate(1, canvas.height = img.height, canvas);
				ctx.putImageData(img, 0, 0);
			} else if (Array.isArray(img)) {
				throw new Error('This component does not yet support multiple images');
			}
		});
	});

	onDestroy(() => {
		unSub();
	});

	function canvas_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			canvas = $$value;
			$$invalidate(1, canvas);
		});
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('imageStream' in $$props) $$invalidate(2, imageStream = $$props.imageStream);
	};

	return [title, canvas, imageStream, canvas_1_binding];
}

class Image_display_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$B, create_fragment$B, safe_not_equal, { title: 0, imageStream: 2 });
	}

	get title() {
		return this.$$.ctx[0];
	}

	set title(title) {
		this.$$set({ title });
		flush();
	}

	get imageStream() {
		return this.$$.ctx[2];
	}

	set imageStream(imageStream) {
		this.$$set({ imageStream });
		flush();
	}
}

var _ImageDisplay_imageStream;
class ImageDisplay extends Component$1 {
    constructor(imageStream) {
        super();
        this.title = 'image display';
        _ImageDisplay_imageStream.set(this, void 0);
        __classPrivateFieldSet(this, _ImageDisplay_imageStream, imageStream, "f");
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Image_display_view({
            target: t,
            props: {
                title: this.title,
                imageStream: __classPrivateFieldGet(this, _ImageDisplay_imageStream, "f"),
            },
        });
    }
}
_ImageDisplay_imageStream = new WeakMap();

function imageDisplay(...args) {
    return new ImageDisplay(...args);
}

/* src/components/image-upload/image-upload.view.svelte generated by Svelte v3.59.1 */

function get_each_context$a(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	return child_ctx;
}

// (97:2) {#if draggedOver}
function create_if_block$l(ctx) {
	let div;

	return {
		c() {
			div = element("div");

			div.innerHTML = `<i><svg class="fill-current w-12 h-12 mb-3 text-blue-700" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M19.479 10.092c-.212-3.951-3.473-7.092-7.479-7.092-4.005 0-7.267 3.141-7.479 7.092-2.57.463-4.521 2.706-4.521 5.408 0 3.037 2.463 5.5 5.5 5.5h13c3.037 0 5.5-2.463 5.5-5.5 0-2.702-1.951-4.945-4.521-5.408zm-7.479-1.092l4 4h-3v4h-2v-4h-3l4-4z"></path></svg></i> 
      <p class="text-lg text-blue-700">Drop files to upload</p>`;

			attr(div, "class", "overlay svelte-u8vb5e");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (130:6) <Button on:click={clickUpload}>
function create_default_slot_1$9(ctx) {
	let t;

	return {
		c() {
			t = text$1("Upload a file");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (134:6) {#each objectURLs as src}
function create_each_block$a(ctx) {
	let img;
	let img_src_value;

	return {
		c() {
			img = element("img");
			attr(img, "class", "mx-auto my-2 w-32");
			if (!src_url_equal(img.src, img_src_value = /*src*/ ctx[18] || 'https://user-images.githubusercontent.com/507615/54591670-ac0a0180-4a65-11e9-846c-e55ffce0fe7b.png')) attr(img, "src", img_src_value);
			attr(img, "alt", "no data");
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*objectURLs*/ 8 && !src_url_equal(img.src, img_src_value = /*src*/ ctx[18] || 'https://user-images.githubusercontent.com/507615/54591670-ac0a0180-4a65-11e9-846c-e55ffce0fe7b.png')) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
		}
	};
}

// (96:0) <ViewContainer {title}>
function create_default_slot$p(ctx) {
	let t0;
	let div2;
	let div0;
	let p;
	let t2;
	let input;
	let t3;
	let button;
	let t4;
	let div1;
	let current;
	let mounted;
	let dispose;
	let if_block = /*draggedOver*/ ctx[2] && create_if_block$l();

	button = new Button$1({
			props: {
				$$slots: { default: [create_default_slot_1$9] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*clickUpload*/ ctx[8]);
	let each_value = /*objectURLs*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$a(get_each_context$a(ctx, each_value, i));
	}

	return {
		c() {
			if (if_block) if_block.c();
			t0 = space();
			div2 = element("div");
			div0 = element("div");
			p = element("p");
			p.innerHTML = `<span>Drag and drop an image or</span>`;
			t2 = space();
			input = element("input");
			t3 = space();
			create_component(button.$$.fragment);
			t4 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(p, "class", "mb-3 font-semibold text-gray-900 flex flex-wrap justify-center");
			attr(input, "type", "file");
			input.multiple = true;
			attr(input, "class", "hidden");
			attr(div0, "class", "border-dashed border-2 border-gray-300 py-8 flex flex-col justify-center items-center");
			attr(div1, "class", "flex flex-wrap");
			attr(div2, "class", "image-upload svelte-u8vb5e");
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t0, anchor);
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, p);
			append(div0, t2);
			append(div0, input);
			/*input_binding*/ ctx[13](input);
			append(div0, t3);
			mount_component(button, div0, null);
			append(div2, t4);
			append(div2, div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div1, null);
				}
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div2, "dragenter", /*handleDragEnter*/ ctx[4]),
					listen(div2, "dragleave", /*handleDragLeave*/ ctx[5]),
					listen(div2, "dragover", /*handleDragOver*/ ctx[6]),
					listen(div2, "drop", /*handleDragDrop*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*draggedOver*/ ctx[2]) {
				if (if_block) ; else {
					if_block = create_if_block$l();
					if_block.c();
					if_block.m(t0.parentNode, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			const button_changes = {};

			if (dirty & /*$$scope*/ 2097152) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);

			if (dirty & /*objectURLs*/ 8) {
				each_value = /*objectURLs*/ ctx[3];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$a(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$a(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t0);
			if (detaching) detach(div2);
			/*input_binding*/ ctx[13](null);
			destroy_component(button);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$A(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$p] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, objectURLs, uploadInput, draggedOver*/ 2097166) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$A($$self, $$props, $$invalidate) {
	let { title } = $$props;
	let { images } = $$props;
	let { thumbnails } = $$props;
	let { width } = $$props;
	let { height } = $$props;
	let uploadInput;
	let counter = 0;
	let draggedOver = false;
	let objectURLs = [];

	// use to check if a file is being dragged
	const hasFiles = ({ dataTransfer: { types = [] } }) => types.indexOf('Files') > -1;

	function handleDragEnter(e) {
		e.preventDefault();

		if (!hasFiles(e)) {
			return;
		}

		counter += 1;
		$$invalidate(2, draggedOver = true);
	}

	function handleDragLeave() {
		counter -= 1;

		if (counter < 1) {
			$$invalidate(2, draggedOver = false);
		}
	}

	function handleDragOver(e) {
		if (hasFiles(e)) {
			e.preventDefault();
		}
	}

	async function processImageFile(file) {
		const { image } = await loadImage(file, {
			...width > 0 && { maxWidth: width },
			...height > 0 && { maxHeight: height },
			cover: true,
			crop: true,
			canvas: true,
			crossOrigin: 'Anonymous'
		});

		const { image: thumbnail } = await loadImage(file, {
			maxWidth: 60,
			maxHeight: 60,
			cover: true,
			crop: true,
			canvas: true,
			crossOrigin: 'Anonymous'
		});

		// eslint-disable-next-line @typescript-eslint/no-explicit-any
		const img = image;

		const imgData = img.getContext('2d').getImageData(0, 0, width || img.width, height || img.height);

		// eslint-disable-next-line @typescript-eslint/no-explicit-any
		const thumb = thumbnail;

		const thumbData = thumb.toDataURL('image/jpeg');
		thumbnails.set(thumbData);
		images.set(imgData);
	}

	async function processFiles(f) {
		$$invalidate(3, objectURLs = []);

		// const imgPromises = [];
		let p = Promise.resolve();

		for (let i = 0; i < f.length; i++) {
			const file = f[i];
			const isImage = file.type.match('image.*');

			if (isImage) {
				p = p.then(() => processImageFile(file));
			}

			$$invalidate(2, draggedOver = false);
			counter = 0;
		}

		await p;
	}

	function handleDragDrop(e) {
		e.preventDefault();
		processFiles(e.dataTransfer.files);
	}

	onMount(async () => {
		await tick$1();
		await tick$1();

		uploadInput.addEventListener('change', e => {
			processFiles(e.target.files);
		});
	});

	function clickUpload() {
		if (uploadInput) {
			uploadInput.click();
		}
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			uploadInput = $$value;
			$$invalidate(1, uploadInput);
		});
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('images' in $$props) $$invalidate(9, images = $$props.images);
		if ('thumbnails' in $$props) $$invalidate(10, thumbnails = $$props.thumbnails);
		if ('width' in $$props) $$invalidate(11, width = $$props.width);
		if ('height' in $$props) $$invalidate(12, height = $$props.height);
	};

	return [
		title,
		uploadInput,
		draggedOver,
		objectURLs,
		handleDragEnter,
		handleDragLeave,
		handleDragOver,
		handleDragDrop,
		clickUpload,
		images,
		thumbnails,
		width,
		height,
		input_binding
	];
}

class Image_upload_view extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$A, create_fragment$A, safe_not_equal, {
			title: 0,
			images: 9,
			thumbnails: 10,
			width: 11,
			height: 12
		});
	}
}

var _ImageUpload_width, _ImageUpload_height;
class ImageUpload extends Component$1 {
    constructor({ width = 0, height = 0 } = {}) {
        super();
        this.title = 'image upload';
        this.$images = new Stream(never());
        this.$thumbnails = new Stream(never());
        _ImageUpload_width.set(this, void 0);
        _ImageUpload_height.set(this, void 0);
        __classPrivateFieldSet(this, _ImageUpload_width, width, "f");
        __classPrivateFieldSet(this, _ImageUpload_height, height, "f");
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Image_upload_view({
            target: t,
            props: {
                title: this.title,
                images: this.$images,
                thumbnails: this.$thumbnails,
                width: __classPrivateFieldGet(this, _ImageUpload_width, "f"),
                height: __classPrivateFieldGet(this, _ImageUpload_height, "f"),
            },
        });
    }
}
_ImageUpload_width = new WeakMap(), _ImageUpload_height = new WeakMap();

function imageUpload(...args) {
    return new ImageUpload(...args);
}

function euclideanDistance(a, b) {
    return (a
        .map((x, i) => Math.abs(x - b[i]) ** 2) // square the difference
        .reduce((sum, now) => sum + now) ** // sum
        (1 / 2));
}
class KMeansClustering extends Model {
    constructor({ k = 3 } = {}) {
        super();
        this.title = 'k-means clustering';
        this.serviceName = 'kmeans-models';
        this.parameters = {
            k: new Stream(k, true),
        };
        this.$centers = new Stream([], false);
        this.$clusters = new Stream([], false);
        this.dataset = [];
        this.start();
    }
    async train(dataset) {
        this.$training.set({ status: 'start', epochs: 1 });
        const ds = isDataset(dataset) ? dataset.items() : dataset;
        for await (const { x } of ds) {
            this.dataset.push(x);
        }
        const ans = kmeans(this.dataset, this.parameters.k.get());
        this.$centers.set(ans.centroids.map((x) => x.centroid));
        this.$clusters.set(ans.clusters);
        this.$training.set({ status: 'success' });
    }
    async predict(x) {
        let cluster = 0;
        let minDistance = 1000;
        const confidences = {};
        let distSum = 0;
        for (let i = 0; i < this.$centers.get().length; i++) {
            const dist = euclideanDistance(this.$centers.get()[i], x);
            if (dist < minDistance) {
                minDistance = dist;
                cluster = i;
            }
            confidences[`${i}`] = Math.exp(dist);
            distSum += Math.exp(dist);
        }
        Object.entries(confidences).forEach(([key]) => {
            confidences[key] /= distSum;
        });
        if (this.$centers.get().length === 0) {
            const e = new Error('KMeans is not trained');
            e.name = '[KMeans] Prediction Error';
            throwError(e);
        }
        return { cluster, confidences };
    }
    async batchPredict(dataset) {
        // const allInstances = await dataset.getAllInstances(['features']);
        const data = []; //allInstances.map((x) => x.features[0]);
        const ds = isDataset(dataset) ? dataset.items() : dataset;
        for await (const { x } of ds) {
            data.push(x);
        }
        const resPromises = [];
        for (let i = 0; i < data.length; i++) {
            this.predict(data[i]).then((result) => resPromises.push(result));
        }
        if (this.$centers.get().length === 0) {
            const e = new Error('KMeans is not trained');
            e.name = '[KMeans] Prediction Error';
            throwError(e);
        }
        return resPromises;
    }
    async save(store, name, metadata, id = null) {
        const storedModel = await this.write(metadata);
        storedModel.name = name;
        return this.saveToDatastore(store, storedModel, id);
    }
    async load(store, id) {
        const storedModel = await this.loadFromDatastore(store, id);
        await this.read(storedModel);
        return storedModel;
    }
    async download(metadata) {
        const model = await this.write(metadata);
        saveBlob(JSON.stringify(model), `${model.name}.json`, 'text/plain');
    }
    async upload(...files) {
        const jsonFiles = files.filter((x) => x.name.includes('.json'));
        const model = await new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => {
                const obj = JSON.parse(reader.result);
                resolve(obj);
            };
            reader.onerror = reject;
            reader.readAsText(jsonFiles[0]);
        });
        await this.read(model);
        return model;
    }
    async write(metadata = {}) {
        const name = toKebabCase(this.title);
        return {
            name,
            files: [],
            format: 'ml-kmeans',
            metadata: {
                clusters: this.$clusters.get(),
                centers: this.$centers.get(),
                ...metadata,
            },
        };
    }
    async read(s) {
        const dataset = s.metadata.data;
        if (!dataset)
            return;
        Object.entries(dataset).forEach(([key, d]) => {
        });
        this.$clusters.set(s.metadata.labels);
        this.$training.set({
            status: 'loaded',
        });
    }
}
__decorate([
    Catch
], KMeansClustering.prototype, "train", null);
__decorate([
    Catch
], KMeansClustering.prototype, "predict", null);
__decorate([
    Catch
], KMeansClustering.prototype, "batchPredict", null);

function kmeansClustering(...args) {
    return new KMeansClustering(...args);
}

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Flatten a Tensor to a 1D array.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
getGlobalTensorClass().prototype.flatten = function () {
    this.throwIfDisposed();
    return reshape(this, [this.size]);
};

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Computes absolute value element-wise: `abs(x)`
 *
 * ```js
 * const x = tf.tensor1d([-1, 2, -3, 4]);
 *
 * x.abs().print();  // or tf.abs(x)
 * ```
 * @param x The input `tf.Tensor`.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function abs_(x) {
    const $x = convertToTensor(x, 'x', 'abs');
    if ($x.dtype === 'complex64') {
        const inputs = { x: $x };
        return ENGINE.runKernel(ComplexAbs, inputs);
    }
    else {
        const inputs = { x: $x };
        return ENGINE.runKernel(Abs, inputs);
    }
}
const abs = /* @__PURE__ */ op({ abs_ });

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Casts a `tf.Tensor` to a new dtype.
 *
 * ```js
 * const x = tf.tensor1d([1.5, 2.5, 3]);
 * tf.cast(x, 'int32').print();
 * ```
 * @param x The input tensor to be casted.
 * @param dtype The dtype to cast the input tensor to.
 *
 * @doc {heading: 'Tensors', subheading: 'Transformations'}
 */
function cast_(x, dtype) {
    const $x = convertToTensor(x, 'x', 'cast');
    // Sanity checks.
    if (!isValidDtype(dtype)) {
        throw new Error(`Failed to cast to unknown dtype ${dtype}`);
    }
    if (dtype === 'string' && $x.dtype !== 'string' ||
        dtype !== 'string' && $x.dtype === 'string') {
        throw new Error('Only strings can be casted to strings');
    }
    const inputs = { x: $x };
    const attrs = { dtype };
    return ENGINE.runKernel(Cast, inputs, attrs);
}
const cast = /* @__PURE__ */ op({ cast_ });

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Computes the dot product of two matrices, A * B. These must be matrices.
 *
 * ```js
 * const a = tf.tensor2d([1, 2], [1, 2]);
 * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * a.matMul(b).print();  // or tf.matMul(a, b)
 * ```
 * @param a First matrix in dot product operation.
 * @param b Second matrix in dot product operation.
 * @param transposeA If true, `a` is transposed before multiplication.
 * @param transposeB If true, `b` is transposed before multiplication.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function matMul_(a, b, transposeA = false, transposeB = false) {
    let $a = convertToTensor(a, 'a', 'matMul');
    let $b = convertToTensor(b, 'b', 'matMul');
    [$a, $b] = makeTypesMatch($a, $b);
    const inputs = { a: $a, b: $b };
    const attrs = { transposeA, transposeB };
    return ENGINE.runKernel(BatchMatMul, inputs, attrs);
}
const matMul = /* @__PURE__ */ op({ matMul_ });

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.
 *
 * We also expose `tf.mulStrict` which has the same signature as this op and
 * asserts that `a` and `b` are the same shape (does not broadcast).
 *
 * ```js
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.tensor1d([2, 3, 4, 5]);
 *
 * a.mul(b).print();  // or tf.mul(a, b)
 * ```
 *
 * ```js
 * // Broadcast mul a with b.
 * const a = tf.tensor1d([1, 2, 3, 4]);
 * const b = tf.scalar(5);
 *
 * a.mul(b).print();  // or tf.mul(a, b)
 * ```
 * @param a The first tensor to multiply.
 * @param b The second tensor to multiply. Must have the same dtype as `a`.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function mul_(a, b) {
    let $a = convertToTensor(a, 'a', 'mul');
    let $b = convertToTensor(b, 'b', 'mul');
    [$a, $b] = makeTypesMatch($a, $b);
    const inputs = { a: $a, b: $b };
    return ENGINE.runKernel(Multiply, inputs);
}
const mul = /* @__PURE__ */ op({ mul_ });

/**
 * @license
 * Copyright 2017 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
function combineLocations(outputLoc, reduceLoc, axes) {
    const rank = outputLoc.length + reduceLoc.length;
    const loc = [];
    let outIdx = 0;
    let reduceIdx = 0;
    for (let dim = 0; dim < rank; dim++) {
        if (axes.indexOf(dim) === -1) {
            loc.push(outputLoc[outIdx++]);
        }
        else {
            loc.push(reduceLoc[reduceIdx++]);
        }
    }
    return loc;
}
function expandShapeToKeepDim(shape, axes) {
    const reduceSubShape = axes.map(x => 1);
    return combineLocations(shape, reduceSubShape, axes);
}

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Computes the maximum of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If `axes` has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.max().print();  // or tf.max(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.max(axis).print();  // or tf.max(x, axis)
 * ```
 *
 * @param x The input tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function max_(x, axis = null, keepDims = false) {
    const $x = convertToTensor(x, 'x', 'max');
    const inputs = { x: $x };
    const attrs = { reductionIndices: axis, keepDims };
    return ENGINE.runKernel(Max, inputs, attrs);
}
const max$1 = /* @__PURE__ */ op({ max_ });

/**
 * @license
 * Copyright 2020 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Computes the minimum value from the input.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the array is reduced by 1 for each entry in `axes`.
 * If `keepDims` is true, the reduced dimensions are retained with length 1.
 * If `axes` has no entries, all dimensions are reduced, and an array with a
 * single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.min().print();  // or tf.min(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.min(axis).print();  // or tf.min(x, axis)
 * ```
 *
 * @param x The input Tensor.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function min_(x, axis = null, keepDims = false) {
    const $x = convertToTensor(x, 'x', 'min');
    const inputs = { x: $x };
    const attrs = { axis, keepDims };
    // tslint:disable-next-line: no-unnecessary-type-assertion
    return ENGINE.runKernel(Min, inputs, attrs);
}
const min$1 = /* @__PURE__ */ op({ min_ });

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Computes the power of one `tf.Tensor` to another. Supports broadcasting.
 *
 * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for
 * corresponding elements in x and y. The result's dtype will be the upcasted
 * type of the `base` and `exp` dtypes.
 *
 * ```js
 * const a = tf.tensor([[2, 3], [4, 5]])
 * const b = tf.tensor([[1, 2], [3, 0]]).toInt();
 *
 * a.pow(b).print();  // or tf.pow(a, b)
 * ```
 *
 * ```js
 * const a = tf.tensor([[1, 2], [3, 4]])
 * const b = tf.tensor(2).toInt();
 *
 * a.pow(b).print();  // or tf.pow(a, b)
 * ```
 * We also expose `powStrict` which has the same signature as this op and
 * asserts that `base` and `exp` are the same shape (does not broadcast).
 *
 * @param base The base `tf.Tensor` to pow element-wise.
 * @param exp The exponent `tf.Tensor` to pow element-wise.
 *
 * @doc {heading: 'Operations', subheading: 'Arithmetic'}
 */
function pow_(base, exp) {
    let $base = convertToTensor(base, 'base', 'pow');
    let $exp = convertToTensor(exp, 'exp', 'pow');
    [$base, $exp] = makeTypesMatch($base, $exp);
    const inputs = { a: $base, b: $exp };
    return ENGINE.runKernel(Pow, inputs);
}
const pow = /* @__PURE__ */ op({ pow_ });

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/** This is shared code across all tensor creation methods. */
function makeTensor(values, shape, inferredShape, dtype) {
    if (dtype == null) {
        dtype = inferDtype(values);
    }
    else if (dtype === 'complex64') {
        throw new Error(`Cannot construct a complex64 tensor directly. ` +
            `Please use tf.complex(real, imag).`);
    }
    if (isWebGPUData(values) || isWebGLData(values)) {
        if (dtype !== 'float32' && dtype !== 'int32') {
            throw new Error(`Creating tensor from GPU data only supports ` +
                `'float32'|'int32' dtype, while the dtype is ${dtype}.`);
        }
        return ENGINE.backend.createTensorFromGPUData(values, shape || inferredShape, dtype);
    }
    if (!isTypedArray(values) && !Array.isArray(values) &&
        typeof values !== 'number' && typeof values !== 'boolean' &&
        typeof values !== 'string') {
        throw new Error('values passed to tensor(values) must be a number/boolean/string or ' +
            'an array of numbers/booleans/strings, or a TypedArray');
    }
    // Verify that the shape matches the inferred shape.
    if (shape != null) {
        assertNonNegativeIntegerDimensions(shape);
        const providedSize = sizeFromShape(shape);
        const inferredSize = sizeFromShape(inferredShape);
        assert(providedSize === inferredSize, () => `Based on the provided shape, [${shape}], the tensor should have ` +
            `${providedSize} values but has ${inferredSize}`);
        for (let i = 0; i < inferredShape.length; ++i) {
            const inferred = inferredShape[i];
            const flatDimsDontMatch = i === inferredShape.length - 1 ?
                inferred !== sizeFromShape(shape.slice(i)) :
                true;
            assert(inferredShape[i] === shape[i] || !flatDimsDontMatch, () => `Error creating a new Tensor. Inferred shape ` +
                `(${inferredShape}) does not match the provided ` +
                `shape (${shape}). `);
        }
    }
    if (!isTypedArray(values) && !Array.isArray(values)) {
        values = [values];
    }
    shape = shape || inferredShape;
    values = dtype !== 'string' ?
        toTypedArray(values, dtype) :
        flatten(values, [], true);
    return ENGINE.makeTensor(values, shape, dtype);
}

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Creates rank-0 `tf.Tensor` (scalar) with the provided value and dtype.
 *
 * The same functionality can be achieved with `tf.tensor`, but in general
 * we recommend using `tf.scalar` as it makes the code more readable.
 *
 * ```js
 * tf.scalar(3.14).print();
 * ```
 *
 * @param value The value of the scalar.
 * @param dtype The data type.
 *
 * @doc {heading: 'Tensors', subheading: 'Creation'}
 */
function scalar(value, dtype) {
    if (((isTypedArray(value) && dtype !== 'string') || Array.isArray(value)) &&
        dtype !== 'complex64') {
        throw new Error('Error creating a new Scalar: value must be a primitive ' +
            '(number|boolean|string)');
    }
    if (dtype === 'string' && isTypedArray(value) &&
        !(value instanceof Uint8Array)) {
        throw new Error('When making a scalar from encoded string, ' +
            'the value must be `Uint8Array`.');
    }
    const shape = [];
    const inferredShape = [];
    return makeTensor(value, shape, inferredShape, dtype);
}

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Computes square root of the input `tf.Tensor` element-wise: `y = sqrt(x)`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 4, -1]);
 *
 * x.sqrt().print();  // or tf.sqrt(x)
 * ```
 * @param x The input tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function sqrt_(x) {
    const $x = convertToTensor(x, 'x', 'sqrt', 'float32');
    const inputs = { x: $x };
    return ENGINE.runKernel(Sqrt, inputs);
}
const sqrt = /* @__PURE__ */ op({ sqrt_ });

/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Computes square of `x` element-wise: `x ^ 2`
 *
 * ```js
 * const x = tf.tensor1d([1, 2, Math.sqrt(2), -1]);
 *
 * x.square().print();  // or tf.square(x)
 * ```
 * @param x The input Tensor.
 *
 * @doc {heading: 'Operations', subheading: 'Basic math'}
 */
function square_(x) {
    const $x = convertToTensor(x, 'x', 'square');
    const attrs = {};
    return ENGINE.runKernel('Square', { x: $x }, attrs);
}
const square = /* @__PURE__ */ op({ square_ });

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Computes the sum of elements across dimensions of a `tf.Tensor`.
 *
 * Reduces the input along the dimensions given in `axes`. Unless `keepDims`
 * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in
 * `axes`. If `keepDims` is true, the reduced dimensions are retained with
 * length 1. If axes has no entries, all dimensions are reduced, and a
 * `tf.Tensor` with a single element is returned.
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3]);
 *
 * x.sum().print();  // or tf.sum(x)
 * ```
 *
 * ```js
 * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);
 *
 * const axis = 1;
 * x.sum(axis).print();  // or tf.sum(x, axis)
 * ```
 *
 * @param x The input tensor to compute the sum over. If the dtype is `bool`
 *   it will be converted to `int32` and the output dtype will be `int32`.
 * @param axis The dimension(s) to reduce. By default it reduces
 *     all dimensions.
 * @param keepDims If true, retains reduced dimensions with size 1.
 *
 * @doc {heading: 'Operations', subheading: 'Reduction'}
 */
function sum_(x, axis = null, keepDims = false) {
    let $x = convertToTensor(x, 'x', 'sum');
    if ($x.dtype === 'bool') {
        $x = cast($x, 'int32');
    }
    const inputs = { x: $x };
    const attrs = { axis, keepDims };
    return ENGINE.runKernel(Sum, inputs, attrs);
}
const sum = /* @__PURE__ */ op({ sum_ });

/**
 * @license
 * Copyright 2018 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Computes the norm of scalar, vectors, and matrices.
 * This function can compute several different vector norms (the 1-norm, the
 * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)
 * and matrix norms (Frobenius, 1-norm, and inf-norm).
 *
 * ```js
 * const x = tf.tensor1d([1, 2, 3, 4]);
 *
 * x.norm().print();  // or tf.norm(x)
 * ```
 *
 * @param x The input array.
 * @param ord Optional. Order of the norm. Supported norm types are
 * following:
 *
 *  | ord        | norm for matrices         | norm for vectors
 *  |------------|---------------------------|---------------------
 *  |'euclidean' |Frobenius norm             |2-norm
 *  |'fro'       |Frobenius norm	           |
 *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))
 *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))
 *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))
 *  |2           |                           |sum(abs(x)^2)^(1/2)
 *
 * @param axis Optional. If axis is null (the default), the input is
 * considered a vector and a single vector norm is computed over the entire
 * set of values in the Tensor, i.e. norm(x, ord) is equivalent
 * to norm(x.reshape([-1]), ord). If axis is an integer, the input
 * is considered a batch of vectors, and axis determines the axis in x
 * over which to compute vector norms. If axis is a 2-tuple of integer it is
 * considered a batch of matrices and axis determines the axes in NDArray
 * over which to compute a matrix norm.
 * @param keepDims Optional. If true, the norm has the same dimensionality
 * as the input.
 *
 * @doc {heading: 'Operations', subheading: 'Matrices'}
 */
function norm_(x, ord = 'euclidean', axis = null, keepDims = false) {
    x = convertToTensor(x, 'x', 'norm');
    const norm = normImpl(x, ord, axis);
    let keepDimsShape = norm.shape;
    if (keepDims) {
        const axes = parseAxisParam(axis, x.shape);
        keepDimsShape = expandShapeToKeepDim(norm.shape, axes);
    }
    return reshape(norm, keepDimsShape);
}
function normImpl(x, p, axis = null) {
    if (x.rank === 0) {
        return abs(x);
    }
    // consider vector when no axis is specified
    if (x.rank !== 1 && axis === null) {
        return normImpl(reshape(x, [-1]), p, axis);
    }
    // vector
    if (x.rank === 1 || typeof axis === 'number' ||
        Array.isArray(axis) && axis.length === 1) {
        if (p === 1) {
            return sum(abs(x), axis);
        }
        if (p === Infinity) {
            return max$1(abs(x), axis);
        }
        if (p === -Infinity) {
            return min$1(abs(x), axis);
        }
        if (p === 'euclidean' || p === 2) {
            // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2
            return sqrt(sum(pow(abs(x), scalar(2, 'int32')), axis));
        }
        throw new Error(`Error in norm: invalid ord value: ${p}`);
    }
    // matrix (assumption axis[0] < axis[1])
    if (Array.isArray(axis) && axis.length === 2) {
        if (p === 1) {
            return max$1(sum(abs(x), axis[0]), axis[1] - 1);
        }
        if (p === Infinity) {
            return max$1(sum(abs(x), axis[1]), axis[0]);
        }
        if (p === -Infinity) {
            return min$1(sum(abs(x), axis[1]), axis[0]);
        }
        if (p === 'fro' || p === 'euclidean') {
            // norm(x) = sqrt(sum(pow(x, 2)))
            return sqrt(sum(square(x), axis));
        }
        throw new Error(`Error in norm: invalid ord value: ${p}`);
    }
    throw new Error(`Error in norm: invalid axis: ${axis}`);
}
const norm = /* @__PURE__ */ op({ norm_ });

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
getGlobalTensorClass().prototype.norm = function (ord, axis, keepDims) {
    this.throwIfDisposed();
    return norm(this, ord, axis, keepDims);
};

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.matMul = function (b, transposeA, transposeB) {
    this.throwIfDisposed();
    return matMul(this, b, transposeA, transposeB);
};

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Converts a `tf.Tensor` to a `tf.Tensor1D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
getGlobalTensorClass().prototype.as1D = function () {
    this.throwIfDisposed();
    return reshape(this, [this.size]);
};

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
/**
 * Converts a `tf.Tensor` to a `tf.Tensor2D`.
 *
 * @param rows Number of rows in `tf.Tensor2D`.
 * @param columns Number of columns in `tf.Tensor2D`.
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
getGlobalTensorClass().prototype.as2D = function (rows, columns) {
    this.throwIfDisposed();
    return reshape(this, [rows, columns]);
};

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
// TODO update import path once op is modularized.
/**
 * Casts a `tf.Tensor` to a specified dtype.
 *
 * @param dtype Data-type to cast the tensor to.
 *
 * @doc {heading: 'Tensors', subheading: 'Classes'}
 */
getGlobalTensorClass().prototype.asType = function (dtype) {
    this.throwIfDisposed();
    return cast(this, dtype);
};

class KNNClassifier extends Model {
    constructor({ k = 3 } = {}) {
        super();
        this.title = 'KNN classifier';
        this.serviceName = 'knn-classifier-models';
        this.classifier = new KNNClassifier$1();
        this.parameters = {
            k: new Stream(k, true),
        };
    }
    async train(dataset) {
        this.labels = isDataset(dataset)
            ? await dataset.distinct('y')
            : (this.labels = Array.from(new Set(await dataset.map(({ y }) => y).toArray())));
        const ds = isDataset(dataset) ? dataset.items() : dataset;
        if (this.labels.length < 1) {
            this.$training.set({ status: 'error' });
            throw new Error('Cannot train a kNN with no classes');
        }
        this.$training.set({ status: 'start', epochs: 1 });
        this.classifier.clearAllClasses();
        for await (const { x, y } of ds) {
            this.classifier.addExample(tensor(x), y);
        }
        this.$training.set({ status: 'success' });
    }
    async predict(x) {
        if (!this.classifier || !this.labels || this.labels.length < 1) {
            return { label: undefined, confidences: {} };
        }
        const { label, confidences } = await this.classifier.predictClass(tensor(x), this.parameters.k.get());
        return { label, confidences };
    }
    clear() {
        delete this.classifier;
    }
    async save(store, name, metadata, id = null) {
        const storedModel = await this.write(metadata);
        storedModel.name = name;
        return this.saveToDatastore(store, storedModel, id);
    }
    async load(store, idOrName) {
        const storedModel = await this.loadFromDatastore(store, idOrName);
        await this.read(storedModel);
        return storedModel;
    }
    async download(metadata) {
        const model = await this.write(metadata);
        saveBlob(JSON.stringify(model), `${model.name}.json`, 'text/plain');
    }
    async upload(...files) {
        const jsonFiles = files.filter((x) => x.name.includes('.json'));
        const model = await new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => {
                const obj = JSON.parse(reader.result);
                resolve(obj);
            };
            reader.onerror = reject;
            reader.readAsText(jsonFiles[0]);
        });
        await this.read(model);
        return model;
    }
    async write(metadata = {}) {
        if (!this.classifier)
            return null;
        const dataset = this.classifier.getClassifierDataset();
        const datasetObj = {};
        for (const key of Object.keys(dataset)) {
            const data = dataset[key].arraySync();
            datasetObj[key] = data;
        }
        const name = toKebabCase(this.title);
        return {
            name,
            files: [],
            format: 'knn-classifier',
            metadata: {
                labels: this.labels,
                data: datasetObj,
                // parameters: this.parametersSnapshot()
                ...metadata,
            },
        };
    }
    async read(s) {
        const dataset = s.metadata.data;
        if (!dataset)
            return;
        const tensorObj = {};
        for (const [key, d] of Object.entries(dataset)) {
            tensorObj[key] = tensor2d(d);
        }
        this.labels = s.metadata.labels;
        this.classifier.setClassifierDataset(tensorObj);
        this.$training.set({
            status: 'loaded',
        });
    }
}
__decorate([
    Catch
], KNNClassifier.prototype, "train", null);
__decorate([
    Catch
], KNNClassifier.prototype, "predict", null);

function knnClassifier(...args) {
    return new KNNClassifier(...args);
}

const tempVideoEl = document.createElement('video');
const canvas = document.createElement('canvas');
const thumbnailWidth = 100;
async function getBlobMeta(blob) {
    let duration = await new Promise((resolve, reject) => {
        tempVideoEl.addEventListener('loadedmetadata', () => {
            resolve(tempVideoEl.duration);
        });
        tempVideoEl.src = window.URL.createObjectURL(blob);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        tempVideoEl.onerror = (event) => reject(event.target.error);
    });
    if (duration === Infinity) {
        tempVideoEl.currentTime = Number.MAX_SAFE_INTEGER;
        duration = await new Promise((resolve, reject) => {
            tempVideoEl.ontimeupdate = () => {
                tempVideoEl.ontimeupdate = null;
                tempVideoEl.currentTime = 0;
                resolve(tempVideoEl.duration);
            };
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            tempVideoEl.onerror = (event) => reject(event.target.error);
        });
    }
    const thumbnail = await new Promise((resolve, reject) => {
        // Get Thumbnail
        const cb = () => {
            try {
                canvas.width = thumbnailWidth;
                canvas.height = (thumbnailWidth * tempVideoEl.videoHeight) / tempVideoEl.videoWidth;
                const w = (canvas.height * tempVideoEl.videoWidth) / tempVideoEl.videoHeight;
                // canvas.getContext('2d').drawImage(tempVideoEl, 0, 0, canvas.width, canvas.height);
                canvas
                    .getContext('2d')
                    .drawImage(tempVideoEl, canvas.width / 2 - w / 2, 0, w, canvas.height);
                const thumb = canvas.toDataURL('image/jpeg');
                tempVideoEl.pause();
                tempVideoEl.removeEventListener('timeupdate', cb);
                resolve(thumb);
            }
            catch (error) {
                reject(error);
            }
        };
        tempVideoEl.addEventListener('timeupdate', cb);
        tempVideoEl.currentTime = duration / 2;
    });
    return [duration, thumbnail];
}

/* src/components/media-recorder/media-recorder.view.svelte generated by Svelte v3.59.1 */

function create_default_slot$o(ctx) {
	let div2;
	let div0;
	let input;
	let t0;
	let label;
	let t1;
	let div1;
	let t2;
	let mounted;
	let dispose;

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			t1 = space();
			div1 = element("div");
			t2 = text$1(/*elapsedTime*/ ctx[2]);
			attr(input, "type", "checkbox");
			attr(input, "id", "btn");
			attr(input, "class", "svelte-r0mvso");
			attr(label, "for", "btn");
			attr(label, "class", "svelte-r0mvso");
			attr(div0, "class", "recorder-container svelte-r0mvso");
			attr(div1, "class", "text-gray-600");
			attr(div2, "class", "flex flex-col items-center");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, input);
			input.checked = /*$active*/ ctx[3];
			append(div0, t0);
			append(div0, label);
			append(div2, t1);
			append(div2, div1);
			append(div1, t2);

			if (!mounted) {
				dispose = listen(input, "change", /*input_change_handler*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$active*/ 8) {
				input.checked = /*$active*/ ctx[3];
			}

			if (dirty & /*elapsedTime*/ 4) set_data(t2, /*elapsedTime*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(div2);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$z(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$o] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, elapsedTime, $active*/ 2060) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$z($$self, $$props, $$invalidate) {
	let $active,
		$$unsubscribe_active = noop$2,
		$$subscribe_active = () => ($$unsubscribe_active(), $$unsubscribe_active = subscribe(active, $$value => $$invalidate(3, $active = $$value)), active);

	$$self.$$.on_destroy.push(() => $$unsubscribe_active());
	let { title } = $$props;
	let { mediaStream } = $$props;
	let { active } = $$props;
	$$subscribe_active();
	let { recordings } = $$props;
	let recorder;
	let elapsedTime = '';
	let thumbnail = '';

	function checkRecorder() {
		if (!recorder) {
			const e = new Error('Cannot find an input MediaStream');
			e.name = 'Check if your input device is active';
			throwError(e);
		}
	}

	function startRecording() {
		const data = [];
		recorder.ondataavailable = event => data.push(event.data);
		recorder.start();
		const startTime = Date.now();
		$$invalidate(2, elapsedTime = '00:00:00');

		const intvId = setInterval(
			() => {
				const interval = new Date(Date.now() - startTime);
				const hours = interval.getUTCHours().toString().padStart(2, '0');
				const minutes = interval.getUTCMinutes().toString().padStart(2, '0');
				const seconds = interval.getSeconds().toString().padStart(2, '0');
				$$invalidate(2, elapsedTime = `${hours}:${minutes}:${seconds}`);
			},
			1000
		);

		let stopped = new Promise((resolve, reject) => {
				recorder.onstop = resolve;

				// eslint-disable-next-line @typescript-eslint/no-explicit-any
				recorder.onerror = event => reject(event.name);
			});

		return stopped.then(() => {
			clearInterval(intvId);
			const recordedBlob = new Blob(data, { type: data[0].type.split(';')[0] });
			return Promise.all([recordedBlob, getBlobMeta(recordedBlob)]);
		}).then(([blob, [duration, thumb]]) => {
			return Promise.all([fixWebmDuration(blob, duration, { logger: false }), duration, thumb]);
		}).then(([blob, duration, thumb]) => {
			thumbnail = thumb;

			recordings.set({
				blob,
				type: blob.type,
				duration,
				thumbnail
			});

			return data;
		});
	}

	onMount(() => {
		mediaStream.filter(s => !!s).subscribe(s => {
			if (recorder && recorder.state === 'recording') {
				recorder.stop();
			}

			recorder = new MediaRecorder(s);
		});

		active.subscribe(shouldRecord => {
			if (shouldRecord) {
				try {
					checkRecorder();
					startRecording();
				} catch(error) {
					active.set(false);
				}
			} else {
				recorder === null || recorder === void 0
				? void 0
				: recorder.stop();
			}
		});
	});

	function input_change_handler() {
		$active = this.checked;
		active.set($active);
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('mediaStream' in $$props) $$invalidate(4, mediaStream = $$props.mediaStream);
		if ('active' in $$props) $$subscribe_active($$invalidate(1, active = $$props.active));
		if ('recordings' in $$props) $$invalidate(5, recordings = $$props.recordings);
	};

	return [
		title,
		active,
		elapsedTime,
		$active,
		mediaStream,
		recordings,
		input_change_handler
	];
}

class Media_recorder_view extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$z, create_fragment$z, safe_not_equal, {
			title: 0,
			mediaStream: 4,
			active: 1,
			recordings: 5
		});
	}
}

let MediaRecorder$1 = class MediaRecorder extends Component$1 {
    constructor(mediaStream) {
        super();
        this.title = 'Media Recorder';
        this.$active = new Stream(false, true);
        this.$recordings = new Stream(undefined).skip(1);
        this.$mediaStream = new Stream(mediaStream, true);
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Media_recorder_view({
            target: t,
            props: {
                title: this.title,
                mediaStream: this.$mediaStream,
                active: this.$active,
                recordings: this.$recordings,
            },
        });
    }
};

function mediaRecorder(...args) {
    return new MediaRecorder$1(...args);
}

/* src/components/microphone/microphone.view.svelte generated by Svelte v3.59.1 */

function create_default_slot$n(ctx) {
	let div2;
	let div0;
	let switch_1;
	let updating_checked;
	let t;
	let div1;
	let canvas;
	let current;

	function switch_1_checked_binding(value) {
		/*switch_1_checked_binding*/ ctx[5](value);
	}

	let switch_1_props = { text: "activate microphone" };

	if (/*$active*/ ctx[3] !== void 0) {
		switch_1_props.checked = /*$active*/ ctx[3];
	}

	switch_1 = new Switch({ props: switch_1_props });
	binding_callbacks.push(() => bind(switch_1, 'checked', switch_1_checked_binding));

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			create_component(switch_1.$$.fragment);
			t = space();
			div1 = element("div");
			canvas = element("canvas");
			attr(canvas, "class", "w-full");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			mount_component(switch_1, div0, null);
			append(div2, t);
			append(div2, div1);
			append(div1, canvas);
			/*canvas_binding*/ ctx[6](canvas);
			current = true;
		},
		p(ctx, dirty) {
			const switch_1_changes = {};

			if (!updating_checked && dirty & /*$active*/ 8) {
				updating_checked = true;
				switch_1_changes.checked = /*$active*/ ctx[3];
				add_flush_callback(() => updating_checked = false);
			}

			switch_1.$set(switch_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(switch_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(switch_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_component(switch_1);
			/*canvas_binding*/ ctx[6](null);
		}
	};
}

function create_fragment$y(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$n] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, canvasElt, $active*/ 65548) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$y($$self, $$props, $$invalidate) {
	let $active,
		$$unsubscribe_active = noop$2,
		$$subscribe_active = () => ($$unsubscribe_active(), $$unsubscribe_active = subscribe(active, $$value => $$invalidate(3, $active = $$value)), active);

	$$self.$$.on_destroy.push(() => $$unsubscribe_active());
	let { title } = $$props;
	let { active } = $$props;
	$$subscribe_active();
	let { mediaStream } = $$props;
	let canvasElt;
	let unSub;
	let drawRequest = 0;
	let ctx;
	const audioContext = new window.AudioContext();
	const analyser = audioContext.createAnalyser();
	analyser.fftSize = 4096;
	console.log('analyser.fftSize', analyser.fftSize);
	const timeDomain = new Uint8Array(analyser.fftSize);

	// stop default signal animation
	function stop() {
		if (drawRequest) {
			window.cancelAnimationFrame(drawRequest);
			drawRequest = 0;
			ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
		}
	}

	// draw signal
	function draw(x0 = 0, y0 = 0, width = ctx.canvas.width - x0, height = ctx.canvas.height - y0) {
		analyser.getByteTimeDomainData(timeDomain);
		const step = width / timeDomain.length;
		ctx.beginPath();

		// drawing loop (skipping every second record)
		for (let i = 0; i < timeDomain.length; i += 2) {
			const percent = timeDomain[i] / 256;
			const x = x0 + i * step;
			const y = y0 + height * percent;
			ctx.lineTo(x, y);
		}

		ctx.stroke();
	}

	function animate() {
		const drawLoop = () => {
			ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
			draw();
			drawRequest = window.requestAnimationFrame(drawLoop);
		};

		drawLoop();
	}

	onMount(() => {
		ctx = canvasElt.getContext('2d');
		let source;

		unSub = mediaStream.subscribe(stream => {
			if (!stream) return;

			if (source) {
				source.disconnect();
				stop();
			}

			source = audioContext.createMediaStreamSource(stream);
			source.connect(analyser);
			animate();
		});
	});

	onDestroy(unSub);

	function switch_1_checked_binding(value) {
		$active = value;
		active.set($active);
	}

	function canvas_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			canvasElt = $$value;
			$$invalidate(2, canvasElt);
		});
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('active' in $$props) $$subscribe_active($$invalidate(1, active = $$props.active));
		if ('mediaStream' in $$props) $$invalidate(4, mediaStream = $$props.mediaStream);
	};

	return [
		title,
		active,
		canvasElt,
		$active,
		mediaStream,
		switch_1_checked_binding,
		canvas_binding
	];
}

class Microphone_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$y, create_fragment$y, safe_not_equal, { title: 0, active: 1, mediaStream: 4 });
	}
}

class Microphone extends Component$1 {
    constructor() {
        super();
        this.$active = new Stream(false, true);
        this.$ready = new Stream(false, true);
        this.$mediastream = new Stream(undefined, true);
        this.title = 'Microphone';
        this.$active.subscribe((active) => {
            if (active) {
                this.loadMicrophone();
            }
            else {
                if (this.$mediastream.get()) {
                    const tracks = this.$mediastream.get().getTracks();
                    for (const track of tracks) {
                        track.stop();
                    }
                    this.$ready.set(false);
                }
            }
        });
        this.start();
    }
    async loadMicrophone() {
        try {
            const mediaStream = await navigator.mediaDevices.getUserMedia({
                video: false,
                audio: true,
            });
            this.$mediastream.set(mediaStream);
            this.$ready.set(true);
        }
        catch (error) {
            throwError(new Error('Webcam not supported'));
        }
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Microphone_view({
            target: t,
            props: {
                title: this.title,
                active: this.$active,
                mediaStream: this.$mediastream,
            },
        });
    }
}

function microphone(...args) {
    return new Microphone(...args);
}

class MLPClassifier extends TFJSCustomClassifier {
    constructor({ layers = [64, 32], ...rest } = {}) {
        super(rest);
        this.title = 'MLPClassifier';
        this.parameters = {
            layers: new Stream(layers, true),
            ...this.parameters,
        };
    }
    buildModel(inputShape, outputShape) {
        this.model = sequential();
        for (const [i, units] of this.parameters.layers.get().entries()) {
            const layerParams = {
                units,
                activation: 'relu',
            };
            if (i === 0) {
                layerParams.inputDim = inputShape[0];
            }
            this.model.add(layers.dense(layerParams));
        }
        this.model.add(layers.dense({
            units: outputShape[0],
            activation: 'softmax',
        }));
        const optimizer = train.adam();
        this.model.compile({
            optimizer,
            loss: 'categoricalCrossentropy',
            metrics: ['accuracy'],
        });
    }
}

function mlpClassifier(...args) {
    return new MLPClassifier(...args);
}

class MLPRegressor extends TFJSCustomModel {
    constructor({ units = [64, 32], ...rest } = {}) {
        super(rest);
        this.title = 'MLPRegressor';
        this.parameters = {
            units: new Stream(units, true),
            ...this.parameters,
        };
    }
    async train(dataset, validationDataset) {
        this.transformDataset = (ds) => ds.map((instance) => ({
            xs: tensor(instance.x),
            ys: tensor(instance.y),
        }));
        super.train(dataset, validationDataset);
    }
    buildModel(inputShape, outputShape) {
        const units = this.parameters.units.get();
        this.model = sequential();
        this.model.add(layers.inputLayer({ inputShape }));
        for (const u of units) {
            this.model.add(layers.dense({
                units: u,
                activation: 'relu',
            }));
        }
        this.model.add(layers.dense({
            units: outputShape.length > 0 ? outputShape[0] : 1,
        }));
        const optimizer = train.adam();
        this.model.compile({
            optimizer,
            loss: 'meanSquaredError',
            metrics: [metrics.meanAbsoluteError],
        });
    }
    async predict(x) {
        if (!this.model)
            return null;
        return tidy(() => {
            const pred = this._predict(x).arraySync();
            return pred.length === 1 ? pred[0] : pred;
        });
    }
}

function mlpRegressor(...args) {
    return new MLPRegressor(...args);
}

/* src/components/mobile-net/mobile-net.view.svelte generated by Svelte v3.59.1 */

function create_else_block$e(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;

	return {
		c() {
			t0 = text$1("Using Mobilenet v");
			t1 = text$1(/*version*/ ctx[2]);
			t2 = text$1(" with alpha = ");
			t3 = text$1(/*alpha*/ ctx[3]);
			t4 = text$1(".");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			insert(target, t2, anchor);
			insert(target, t3, anchor);
			insert(target, t4, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*version*/ 4) set_data(t1, /*version*/ ctx[2]);
			if (dirty & /*alpha*/ 8) set_data(t3, /*alpha*/ ctx[3]);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (detaching) detach(t2);
			if (detaching) detach(t3);
			if (detaching) detach(t4);
		}
	};
}

// (10:4) {#if $loading}
function create_if_block$k(ctx) {
	let t;

	return {
		c() {
			t = text$1(" ");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (8:0) <ViewContainer {title} loading={$loading}>
function create_default_slot$m(ctx) {
	let p;

	function select_block_type(ctx, dirty) {
		if (/*$loading*/ ctx[4]) return create_if_block$k;
		return create_else_block$e;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			p = element("p");
			if_block.c();
			attr(p, "class", "p-2 text-sm text-gray-600");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			if_block.m(p, null);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(p, null);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(p);
			if_block.d();
		}
	};
}

function create_fragment$x(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				loading: /*$loading*/ ctx[4],
				$$slots: { default: [create_default_slot$m] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];
			if (dirty & /*$loading*/ 16) viewcontainer_changes.loading = /*$loading*/ ctx[4];

			if (dirty & /*$$scope, $loading, alpha, version*/ 60) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$x($$self, $$props, $$invalidate) {
	let $loading,
		$$unsubscribe_loading = noop$2,
		$$subscribe_loading = () => ($$unsubscribe_loading(), $$unsubscribe_loading = subscribe(loading, $$value => $$invalidate(4, $loading = $$value)), loading);

	$$self.$$.on_destroy.push(() => $$unsubscribe_loading());
	let { title } = $$props;
	let { loading } = $$props;
	$$subscribe_loading();
	let { version } = $$props;
	let { alpha } = $$props;

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('loading' in $$props) $$subscribe_loading($$invalidate(1, loading = $$props.loading));
		if ('version' in $$props) $$invalidate(2, version = $$props.version);
		if ('alpha' in $$props) $$invalidate(3, alpha = $$props.alpha);
	};

	return [title, loading, version, alpha, $loading];
}

class Mobile_net_view extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$x, create_fragment$x, safe_not_equal, {
			title: 0,
			loading: 1,
			version: 2,
			alpha: 3
		});
	}
}

var _MobileNet_mobilenet;
class MobileNet extends Model {
    constructor({ version = 1, alpha = 1 } = {}) {
        super();
        this.title = 'mobileNet';
        this.parameters = {};
        this.serviceName = 'undefined';
        _MobileNet_mobilenet.set(this, void 0);
        this.$loading = new Stream(true, true);
        if (![1, 2].includes(version)) {
            throw new Error('Mobilenet version must be 1 or 2');
        }
        if (![0.25, 0.5, 0.75, 1.0].includes(alpha)) {
            throw new Error('Mobilenet alpha must be 0.25 | 0.50 | 0.75 | 1.0');
        }
        this.version = version;
        this.alpha = alpha;
        this.setup();
    }
    async setup() {
        await ready();
        const cachedModels = await io$1.listModels();
        const cachedMobilenet = Object.keys(cachedModels).filter((x) => x.includes('mobileNet'));
        try {
            __classPrivateFieldSet(this, _MobileNet_mobilenet, await load$1({
                modelUrl: `indexeddb://mobilenet-v${this.version}-${this.alpha}`,
                version: this.version,
                alpha: this.alpha,
            }), "f");
        }
        catch (error) {
            if (cachedMobilenet.length > 0) {
                await io$1.removeModel(cachedMobilenet[0]);
            }
            __classPrivateFieldSet(this, _MobileNet_mobilenet, await load$1({
                version: this.version,
                alpha: this.alpha,
            }), "f");
            await __classPrivateFieldGet(this, _MobileNet_mobilenet, "f").model.save(`indexeddb://mobilenet-v${this.version}-${this.alpha}`);
        }
        logger.info(`MobileNet v${this.version} loaded with alpha = ${this.alpha}`);
        this.$loading.set(false);
        this.start();
        return this;
    }
    async process(image) {
        if (!__classPrivateFieldGet(this, _MobileNet_mobilenet, "f"))
            return [];
        return tidy(() => {
            const x = __classPrivateFieldGet(this, _MobileNet_mobilenet, "f").infer(image, true).arraySync();
            return x[0];
        });
    }
    async predict(image) {
        if (!__classPrivateFieldGet(this, _MobileNet_mobilenet, "f")) {
            throw new Error('Mobilenet is not loaded');
        }
        const results = await __classPrivateFieldGet(this, _MobileNet_mobilenet, "f").classify(image, 5);
        return {
            label: results[0].className,
            confidences: results.reduce((x, y) => ({ ...x, [y.className]: y.probability }), {}),
        };
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Mobile_net_view({
            target: t,
            props: {
                title: this.title,
                loading: this.$loading,
                version: this.version,
                alpha: this.alpha,
            },
        });
    }
    // eslint-disable-next-line class-methods-use-this
    train() {
        throw new TrainingError('Model `MobileNet` cannot be trained');
    }
    // eslint-disable-next-line class-methods-use-this
    save() {
        throw new Error('MobileNet does not support saving');
    }
    // eslint-disable-next-line class-methods-use-this
    load() {
        throw new Error('MobileNet does not support loading');
    }
    // eslint-disable-next-line class-methods-use-this
    download() {
        throw new Error('MobileNet does not support downloading');
    }
    // eslint-disable-next-line class-methods-use-this
    upload() {
        throw new Error('MobileNet does not support uploading');
    }
}
_MobileNet_mobilenet = new WeakMap();
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], MobileNet.prototype, "train", null);
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], MobileNet.prototype, "save", null);
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], MobileNet.prototype, "load", null);
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], MobileNet.prototype, "download", null);
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], MobileNet.prototype, "upload", null);

function mobileNet(...args) {
    return new MobileNet(...args);
}

/* src/components/model-parameters/ParamWrapper.svelte generated by Svelte v3.59.1 */

function create_else_block$d(ctx) {
	let input;
	let updating_value;
	let current;

	function input_value_binding(value) {
		/*input_value_binding*/ ctx[7](value);
	}

	let input_props = { type: "text" };

	if (/*$stream*/ ctx[2] !== void 0) {
		input_props.value = /*$stream*/ ctx[2];
	}

	input = new Input({ props: input_props });
	binding_callbacks.push(() => bind(input, 'value', input_value_binding));

	return {
		c() {
			create_component(input.$$.fragment);
		},
		m(target, anchor) {
			mount_component(input, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const input_changes = {};

			if (!updating_value && dirty & /*$stream*/ 4) {
				updating_value = true;
				input_changes.value = /*$stream*/ ctx[2];
				add_flush_callback(() => updating_value = false);
			}

			input.$set(input_changes);
		},
		i(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(input, detaching);
		}
	};
}

// (14:160) 
function create_if_block_3$3(ctx) {
	let numberarray;
	let updating_value;
	let current;

	function numberarray_value_binding(value) {
		/*numberarray_value_binding*/ ctx[6](value);
	}

	let numberarray_props = {};

	if (/*$stream*/ ctx[2] !== void 0) {
		numberarray_props.value = /*$stream*/ ctx[2];
	}

	numberarray = new NumberArray$1({ props: numberarray_props });
	binding_callbacks.push(() => bind(numberarray, 'value', numberarray_value_binding));

	return {
		c() {
			create_component(numberarray.$$.fragment);
		},
		m(target, anchor) {
			mount_component(numberarray, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const numberarray_changes = {};

			if (!updating_value && dirty & /*$stream*/ 4) {
				updating_value = true;
				numberarray_changes.value = /*$stream*/ ctx[2];
				add_flush_callback(() => updating_value = false);
			}

			numberarray.$set(numberarray_changes);
		},
		i(local) {
			if (current) return;
			transition_in(numberarray.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(numberarray.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(numberarray, detaching);
		}
	};
}

// (12:97) 
function create_if_block_2$6(ctx) {
	let number;
	let updating_value;
	let current;

	function number_value_binding(value) {
		/*number_value_binding*/ ctx[5](value);
	}

	let number_props = {};

	if (/*$stream*/ ctx[2] !== void 0) {
		number_props.value = /*$stream*/ ctx[2];
	}

	number = new Number_1({ props: number_props });
	binding_callbacks.push(() => bind(number, 'value', number_value_binding));

	return {
		c() {
			create_component(number.$$.fragment);
		},
		m(target, anchor) {
			mount_component(number, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const number_changes = {};

			if (!updating_value && dirty & /*$stream*/ 4) {
				updating_value = true;
				number_changes.value = /*$stream*/ ctx[2];
				add_flush_callback(() => updating_value = false);
			}

			number.$set(number_changes);
		},
		i(local) {
			if (current) return;
			transition_in(number.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(number.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(number, detaching);
		}
	};
}

// (10:99) 
function create_if_block_1$c(ctx) {
	let switch_1;
	let updating_checked;
	let current;

	function switch_1_checked_binding(value) {
		/*switch_1_checked_binding*/ ctx[4](value);
	}

	let switch_1_props = {};

	if (/*$stream*/ ctx[2] !== void 0) {
		switch_1_props.checked = /*$stream*/ ctx[2];
	}

	switch_1 = new Switch({ props: switch_1_props });
	binding_callbacks.push(() => bind(switch_1, 'checked', switch_1_checked_binding));

	return {
		c() {
			create_component(switch_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(switch_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const switch_1_changes = {};

			if (!updating_checked && dirty & /*$stream*/ 4) {
				updating_checked = true;
				switch_1_changes.checked = /*$stream*/ ctx[2];
				add_flush_callback(() => updating_checked = false);
			}

			switch_1.$set(switch_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(switch_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(switch_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(switch_1, detaching);
		}
	};
}

// (8:2) {#if spec.type === 'menu' && Array.isArray(spec.options) && spec.options.length > 0}
function create_if_block$j(ctx) {
	let select;
	let updating_value;
	let current;

	function select_value_binding(value) {
		/*select_value_binding*/ ctx[3](value);
	}

	let select_props = { options: /*spec*/ ctx[1].options };

	if (/*$stream*/ ctx[2] !== void 0) {
		select_props.value = /*$stream*/ ctx[2];
	}

	select = new Select$1({ props: select_props });
	binding_callbacks.push(() => bind(select, 'value', select_value_binding));

	return {
		c() {
			create_component(select.$$.fragment);
		},
		m(target, anchor) {
			mount_component(select, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const select_changes = {};
			if (dirty & /*spec*/ 2) select_changes.options = /*spec*/ ctx[1].options;

			if (!updating_value && dirty & /*$stream*/ 4) {
				updating_value = true;
				select_changes.value = /*$stream*/ ctx[2];
				add_flush_callback(() => updating_value = false);
			}

			select.$set(select_changes);
		},
		i(local) {
			if (current) return;
			transition_in(select.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(select.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(select, detaching);
		}
	};
}

function create_fragment$w(ctx) {
	let div;
	let show_if;
	let show_if_1;
	let show_if_2;
	let show_if_3;
	let current_block_type_index;
	let if_block;
	let current;

	const if_block_creators = [
		create_if_block$j,
		create_if_block_1$c,
		create_if_block_2$6,
		create_if_block_3$3,
		create_else_block$d
	];

	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (dirty & /*spec*/ 2) show_if = null;
		if (dirty & /*spec, stream*/ 3) show_if_1 = null;
		if (dirty & /*spec, stream*/ 3) show_if_2 = null;
		if (dirty & /*spec, stream*/ 3) show_if_3 = null;
		if (show_if == null) show_if = !!(/*spec*/ ctx[1].type === 'menu' && Array.isArray(/*spec*/ ctx[1].options) && /*spec*/ ctx[1].options.length > 0);
		if (show_if) return 0;
		if (show_if_1 == null) show_if_1 = !!(/*spec*/ ctx[1].type === 'boolean' || /*spec*/ ctx[1].type === 'auto' && typeof /*stream*/ ctx[0].get() === 'boolean');
		if (show_if_1) return 1;
		if (show_if_2 == null) show_if_2 = !!(/*spec*/ ctx[1].type === 'number' || /*spec*/ ctx[1].type === 'auto' && typeof /*stream*/ ctx[0].get() === 'number');
		if (show_if_2) return 2;
		if (show_if_3 == null) show_if_3 = !!(/*spec*/ ctx[1].type === 'number array' || /*spec*/ ctx[1].type === 'auto' && Array.isArray(/*stream*/ ctx[0].get()) && /*stream*/ ctx[0].get().length && typeof /*stream*/ ctx[0].get()[0] === 'number');
		if (show_if_3) return 3;
		return 4;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div = element("div");
			if_block.c();
			set_style(div, "flex-grow", "1");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if_blocks[current_block_type_index].d();
		}
	};
}

function instance$w($$self, $$props, $$invalidate) {
	let $stream,
		$$unsubscribe_stream = noop$2,
		$$subscribe_stream = () => ($$unsubscribe_stream(), $$unsubscribe_stream = subscribe(stream, $$value => $$invalidate(2, $stream = $$value)), stream);

	$$self.$$.on_destroy.push(() => $$unsubscribe_stream());
	let { stream } = $$props;
	$$subscribe_stream();
	let { spec } = $$props;

	function select_value_binding(value) {
		$stream = value;
		stream.set($stream);
	}

	function switch_1_checked_binding(value) {
		$stream = value;
		stream.set($stream);
	}

	function number_value_binding(value) {
		$stream = value;
		stream.set($stream);
	}

	function numberarray_value_binding(value) {
		$stream = value;
		stream.set($stream);
	}

	function input_value_binding(value) {
		$stream = value;
		stream.set($stream);
	}

	$$self.$$set = $$props => {
		if ('stream' in $$props) $$subscribe_stream($$invalidate(0, stream = $$props.stream));
		if ('spec' in $$props) $$invalidate(1, spec = $$props.spec);
	};

	return [
		stream,
		spec,
		$stream,
		select_value_binding,
		switch_1_checked_binding,
		number_value_binding,
		numberarray_value_binding,
		input_value_binding
	];
}

class ParamWrapper extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$w, create_fragment$w, safe_not_equal, { stream: 0, spec: 1 });
	}
}

/* src/components/model-parameters/model-parameters.view.svelte generated by Svelte v3.59.1 */

function get_each_context$9(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i][0];
	child_ctx[5] = list[i][1];
	return child_ctx;
}

// (23:8) {:else}
function create_else_block$c(ctx) {
	let paramwrapper;
	let current;

	paramwrapper = new ParamWrapper({
			props: {
				stream: /*stream*/ ctx[5],
				spec: { type: 'auto' }
			}
		});

	return {
		c() {
			create_component(paramwrapper.$$.fragment);
		},
		m(target, anchor) {
			mount_component(paramwrapper, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const paramwrapper_changes = {};
			if (dirty & /*parameters*/ 2) paramwrapper_changes.stream = /*stream*/ ctx[5];
			paramwrapper.$set(paramwrapper_changes);
		},
		i(local) {
			if (current) return;
			transition_in(paramwrapper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(paramwrapper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(paramwrapper, detaching);
		}
	};
}

// (21:8) {#if key in config}
function create_if_block$i(ctx) {
	let paramwrapper;
	let current;

	paramwrapper = new ParamWrapper({
			props: {
				stream: /*stream*/ ctx[5],
				spec: /*config*/ ctx[2][/*key*/ ctx[4]]
			}
		});

	return {
		c() {
			create_component(paramwrapper.$$.fragment);
		},
		m(target, anchor) {
			mount_component(paramwrapper, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const paramwrapper_changes = {};
			if (dirty & /*parameters*/ 2) paramwrapper_changes.stream = /*stream*/ ctx[5];
			if (dirty & /*config, parameters*/ 6) paramwrapper_changes.spec = /*config*/ ctx[2][/*key*/ ctx[4]];
			paramwrapper.$set(paramwrapper_changes);
		},
		i(local) {
			if (current) return;
			transition_in(paramwrapper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(paramwrapper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(paramwrapper, detaching);
		}
	};
}

// (18:4) {#each Object.entries(parameters) as [key, stream]}
function create_each_block$9(ctx) {
	let div;
	let p;
	let t0_value = /*key*/ ctx[4] + "";
	let t0;
	let t1;
	let current_block_type_index;
	let if_block;
	let t2;
	let current;
	const if_block_creators = [create_if_block$i, create_else_block$c];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*key*/ ctx[4] in /*config*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div = element("div");
			p = element("p");
			t0 = text$1(t0_value);
			t1 = space();
			if_block.c();
			t2 = space();
			attr(p, "class", "w-32 my-2");
			attr(div, "class", "flex my-1 items-center");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, p);
			append(p, t0);
			append(div, t1);
			if_blocks[current_block_type_index].m(div, null);
			append(div, t2);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*parameters*/ 2) && t0_value !== (t0_value = /*key*/ ctx[4] + "")) set_data(t0, t0_value);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, t2);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if_blocks[current_block_type_index].d();
		}
	};
}

// (16:0) <ViewContainer {title}>
function create_default_slot$l(ctx) {
	let div;
	let current;
	let each_value = Object.entries(/*parameters*/ ctx[1]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$9(get_each_context$9(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "m-2");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*Object, parameters, config*/ 6) {
				each_value = Object.entries(/*parameters*/ ctx[1]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$9(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$9(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

function create_fragment$v(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$l] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, parameters, config*/ 262) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$v($$self, $$props, $$invalidate) {
	let { title } = $$props;
	let { parameters } = $$props;
	let { config = {} } = $$props;
	let unSub = [];

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('parameters' in $$props) $$invalidate(1, parameters = $$props.parameters);
		if ('config' in $$props) $$invalidate(2, config = $$props.config);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*unSub, parameters*/ 10) {
			{
				for (const u of unSub) {
					u();
				}

				$$invalidate(3, unSub = Object.values(parameters).map(s => s.subscribe()));
			}
		}
	};

	return [title, parameters, config, unSub];
}

class Model_parameters_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$v, create_fragment$v, safe_not_equal, { title: 0, parameters: 1, config: 2 });
	}
}

var _ModelParameters_component;
class ModelParameters extends Component$1 {
    constructor(m, config = {}) {
        super();
        this.title = 'modelParameters';
        _ModelParameters_component.set(this, void 0);
        __classPrivateFieldSet(this, _ModelParameters_component, m, "f");
        this.config = config;
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Model_parameters_view({
            target: t,
            props: {
                title: this.title,
                parameters: __classPrivateFieldGet(this, _ModelParameters_component, "f").parameters,
                config: this.config,
            },
        });
    }
}
_ModelParameters_component = new WeakMap();

function modelParameters(m, config = {}) {
    if (!m.parameters) {
        throw new Error('The argument is not a valid component with parameters');
    }
    return new ModelParameters(m, config);
}

/* src/components/number/number.view.svelte generated by Svelte v3.59.1 */

function create_default_slot$k(ctx) {
	let div1;
	let div0;
	let number;
	let updating_value;
	let current;

	function number_value_binding(value) {
		/*number_value_binding*/ ctx[5](value);
	}

	let number_props = { disabled: /*$disabled*/ ctx[4] };

	if (/*$value*/ ctx[3] !== void 0) {
		number_props.value = /*$value*/ ctx[3];
	}

	number = new Number_1({ props: number_props });
	binding_callbacks.push(() => bind(number, 'value', number_value_binding));

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			create_component(number.$$.fragment);
			attr(div0, "class", "md:flex md:items-center mb-2");
			attr(div1, "class", "w-full max-w-sm");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			mount_component(number, div0, null);
			current = true;
		},
		p(ctx, dirty) {
			const number_changes = {};
			if (dirty & /*$disabled*/ 16) number_changes.disabled = /*$disabled*/ ctx[4];

			if (!updating_value && dirty & /*$value*/ 8) {
				updating_value = true;
				number_changes.value = /*$value*/ ctx[3];
				add_flush_callback(() => updating_value = false);
			}

			number.$set(number_changes);
		},
		i(local) {
			if (current) return;
			transition_in(number.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(number.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(number);
		}
	};
}

function create_fragment$u(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$k] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, $disabled, $value*/ 88) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$u($$self, $$props, $$invalidate) {
	let $value,
		$$unsubscribe_value = noop$2,
		$$subscribe_value = () => ($$unsubscribe_value(), $$unsubscribe_value = subscribe(value, $$value => $$invalidate(3, $value = $$value)), value);

	let $disabled,
		$$unsubscribe_disabled = noop$2,
		$$subscribe_disabled = () => ($$unsubscribe_disabled(), $$unsubscribe_disabled = subscribe(disabled, $$value => $$invalidate(4, $disabled = $$value)), disabled);

	$$self.$$.on_destroy.push(() => $$unsubscribe_value());
	$$self.$$.on_destroy.push(() => $$unsubscribe_disabled());
	let { title } = $$props;
	let { value } = $$props;
	$$subscribe_value();
	let { disabled } = $$props;
	$$subscribe_disabled();

	function number_value_binding(value$1) {
		$value = value$1;
		value.set($value);
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('value' in $$props) $$subscribe_value($$invalidate(1, value = $$props.value));
		if ('disabled' in $$props) $$subscribe_disabled($$invalidate(2, disabled = $$props.disabled));
	};

	return [title, value, disabled, $value, $disabled, number_value_binding];
}

class Number_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$u, create_fragment$u, safe_not_equal, { title: 0, value: 1, disabled: 2 });
	}
}

let Number$1 = class Number extends Component$1 {
    constructor(defaultValue) {
        super();
        this.title = 'number';
        this.$value = new Stream(0, true);
        this.$disabled = new Stream(false, true);
        if (defaultValue !== undefined) {
            this.$value.set(defaultValue);
        }
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Number_view({
            target: t,
            props: {
                title: this.title,
                value: this.$value,
                disabled: this.$disabled,
            },
        });
    }
};

function number(...args) {
    return new Number$1(...args);
}

/* src/components/number-array/number-array.view.svelte generated by Svelte v3.59.1 */

function create_default_slot$j(ctx) {
	let div1;
	let div0;
	let numberarray;
	let updating_value;
	let current;

	function numberarray_value_binding(value) {
		/*numberarray_value_binding*/ ctx[5](value);
	}

	let numberarray_props = { disabled: /*$disabled*/ ctx[4] };

	if (/*$value*/ ctx[3] !== void 0) {
		numberarray_props.value = /*$value*/ ctx[3];
	}

	numberarray = new NumberArray$1({ props: numberarray_props });
	binding_callbacks.push(() => bind(numberarray, 'value', numberarray_value_binding));

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			create_component(numberarray.$$.fragment);
			attr(div0, "class", "md:flex md:items-center mb-2");
			attr(div1, "class", "w-full max-w-sm");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			mount_component(numberarray, div0, null);
			current = true;
		},
		p(ctx, dirty) {
			const numberarray_changes = {};
			if (dirty & /*$disabled*/ 16) numberarray_changes.disabled = /*$disabled*/ ctx[4];

			if (!updating_value && dirty & /*$value*/ 8) {
				updating_value = true;
				numberarray_changes.value = /*$value*/ ctx[3];
				add_flush_callback(() => updating_value = false);
			}

			numberarray.$set(numberarray_changes);
		},
		i(local) {
			if (current) return;
			transition_in(numberarray.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(numberarray.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(numberarray);
		}
	};
}

function create_fragment$t(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$j] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, $disabled, $value*/ 88) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$t($$self, $$props, $$invalidate) {
	let $value,
		$$unsubscribe_value = noop$2,
		$$subscribe_value = () => ($$unsubscribe_value(), $$unsubscribe_value = subscribe(value, $$value => $$invalidate(3, $value = $$value)), value);

	let $disabled,
		$$unsubscribe_disabled = noop$2,
		$$subscribe_disabled = () => ($$unsubscribe_disabled(), $$unsubscribe_disabled = subscribe(disabled, $$value => $$invalidate(4, $disabled = $$value)), disabled);

	$$self.$$.on_destroy.push(() => $$unsubscribe_value());
	$$self.$$.on_destroy.push(() => $$unsubscribe_disabled());
	let { title } = $$props;
	let { value } = $$props;
	$$subscribe_value();
	let { disabled } = $$props;
	$$subscribe_disabled();

	function numberarray_value_binding(value$1) {
		$value = value$1;
		value.set($value);
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('value' in $$props) $$subscribe_value($$invalidate(1, value = $$props.value));
		if ('disabled' in $$props) $$subscribe_disabled($$invalidate(2, disabled = $$props.disabled));
	};

	return [title, value, disabled, $value, $disabled, numberarray_value_binding];
}

class Number_array_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$t, create_fragment$t, safe_not_equal, { title: 0, value: 1, disabled: 2 });
	}
}

class NumberArray extends Component$1 {
    constructor(defaultValue) {
        super();
        this.title = 'number array';
        this.$value = new Stream([], true);
        this.$disabled = new Stream(false, true);
        if (defaultValue !== undefined) {
            this.$value.set(defaultValue);
        }
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Number_array_view({
            target: t,
            props: {
                title: this.title,
                value: this.$value,
                disabled: this.$disabled,
            },
        });
    }
}

function numberArray(...args) {
    return new NumberArray(...args);
}

/* src/components/onnx-model/onnx-model.view.svelte generated by Svelte v3.59.1 */

function create_else_block$b(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "No model loaded";
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (19:34) 
function create_if_block_1$b(ctx) {
	let p;
	let t0;
	let t1;
	let t2;

	return {
		c() {
			p = element("p");
			t0 = text$1("Model Loaded from ");
			t1 = text$1(/*source*/ ctx[2]);
			t2 = text$1(".");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, t1);
			append(p, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*source*/ 4) set_data(t1, /*source*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (17:4) {#if status === 'loading'}
function create_if_block$h(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "Loading Model...";
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (15:0) <ViewContainer {title} loading={status === 'loading'}>
function create_default_slot$i(ctx) {
	let div;

	function select_block_type(ctx, dirty) {
		if (/*status*/ ctx[3] === 'loading') return create_if_block$h;
		if (/*status*/ ctx[3] === 'loaded') return create_if_block_1$b;
		return create_else_block$b;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div = element("div");
			if_block.c();
			attr(div, "class", "p-2 text-sm text-gray-600");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_block.m(div, null);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if_block.d();
		}
	};
}

function create_fragment$s(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				loading: /*status*/ ctx[3] === 'loading',
				$$slots: { default: [create_default_slot$i] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];
			if (dirty & /*status*/ 8) viewcontainer_changes.loading = /*status*/ ctx[3] === 'loading';

			if (dirty & /*$$scope, status, source*/ 268) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$s($$self, $$props, $$invalidate) {
	let status;
	let source;

	let $training,
		$$unsubscribe_training = noop$2,
		$$subscribe_training = () => ($$unsubscribe_training(), $$unsubscribe_training = subscribe(training, $$value => $$invalidate(7, $training = $$value)), training);

	$$self.$$.on_destroy.push(() => $$unsubscribe_training());
	var _a, _b, _c;
	let { title } = $$props;
	let { training } = $$props;
	$$subscribe_training();

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('training' in $$props) $$subscribe_training($$invalidate(1, training = $$props.training));
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$training*/ 128) {
			$$invalidate(3, status = $training.status);
		}

		if ($$self.$$.dirty & /*$training, _a, _b, _c*/ 240) {
			$$invalidate(2, source = !($$invalidate(4, _a = $training.data) === null || _a === void 0
			? void 0
			: _a.source)
			? 'unknown source'
			: $training.data.source === 'datastore'
				? `datastore at ${$$invalidate(5, _b = $training.data) === null || _b === void 0
					? void 0
					: _b.url}`
				: $training.data.source === 'url'
					? `url ${$$invalidate(6, _c = $training.data) === null || _c === void 0
						? void 0
						: _c.url}`
					: 'files');
		}
	};

	return [title, training, source, status, _a, _b, _c, $training];
}

class Onnx_model_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$s, create_fragment$s, safe_not_equal, { title: 0, training: 1 });
	}
}

var _OnnxModel_session;
function isInputType$1(t, tt) {
    return t === tt;
}
function isPredictionType$1(t, tt) {
    return t === tt;
}
class OnnxModel extends Model {
    constructor({ inputType, taskType, inputShape }) {
        super();
        this.title = 'onnx model';
        this.parameters = {};
        this.serviceName = 'onnx-models';
        this.$loading = new Stream(false, true);
        this.$ready = new Stream(false, true);
        this.modelName = '';
        this.lockLoading = Promise.resolve();
        _OnnxModel_session.set(this, void 0);
        this.inputType = inputType;
        this.taskType = taskType;
        this.inputShape = inputShape;
        this.start();
    }
    // eslint-disable-next-line class-methods-use-this
    train() {
        throw new TrainingError('Model `OnnxModel` cannot be trained');
    }
    async predict(input) {
        if (!__classPrivateFieldGet(this, _OnnxModel_session, "f") || !this.$ready.get()) {
            throw new Error('Model is not loaded');
        }
        const inputTensor = this.preprocess(input);
        const outputs = await __classPrivateFieldGet(this, _OnnxModel_session, "f").run({ [__classPrivateFieldGet(this, _OnnxModel_session, "f").inputNames[0]]: inputTensor });
        const result = await this.postprocess(outputs);
        return result;
    }
    async loadFromUrl(url) {
        this.$training.set({
            status: 'loading',
        });
        this.$ready.set(false);
        this.$loading.set(true);
        try {
            await this.loadModel(url, url);
            this.$training.set({
                status: 'loaded',
                data: {
                    source: 'url',
                    url,
                },
            });
            this.$loading.set(false);
            this.$ready.set(true);
        }
        catch (error) {
            this.$training.set({
                status: 'error',
            });
            this.$loading.set(false);
            throw error;
        }
    }
    async loadFromFile(file) {
        if (!file)
            return;
        this.$training.set({
            status: 'loading',
        });
        this.$ready.set(false);
        this.$loading.set(true);
        try {
            const buffer = await new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = function onload() {
                    const arrayBuffer = this.result;
                    resolve(arrayBuffer);
                };
                reader.onerror = function onerror() {
                    reject();
                };
                reader.readAsArrayBuffer(file);
            });
            await this.loadModel(buffer, file.name);
            this.$training.set({
                status: 'loaded',
                data: {
                    source: 'file',
                },
            });
            this.$loading.set(false);
            this.$ready.set(true);
        }
        catch (error) {
            this.$training.set({
                status: 'error',
            });
            this.$loading.set(false);
            throw error;
        }
    }
    async loadModel(source, modelName) {
        this.ready = false;
        this.lockLoading = this.lockLoading
            .then(() => ort.InferenceSession.create(source))
            .then((session) => {
            __classPrivateFieldSet(this, _OnnxModel_session, session, "f");
        });
        await this.lockLoading;
        this.modelName = modelName;
        try {
            await this.warmup();
        }
        catch (error) {
            // eslint-disable-next-line no-console
            console.log('ONNX Model warmup failed', error);
        }
        this.ready = true;
    }
    preprocess(input) {
        if (isInputType$1(this.inputType, 'image')) {
            return this.preprocessImage(input);
        }
        if (isInputType$1(this.inputType, 'generic')) {
            const flatInput = input.flat().flat().flat().flat().flat();
            return new ort.Tensor('float32', Float32Array.from(flatInput), this.inputShape);
        }
        throw new Error('Invalid input data type');
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    preprocessImage(img) {
        throw new Error('ONNX for Images: Not yet implemented');
        // See: https://github.com/marcellejs/marcelle/blob/dc9f5183f6d8fefdc869748d22ec81a3310e4f04/src/components/onnx-model/onnx-model.component.ts
    }
    async postprocess(outputs) {
        if (isPredictionType$1(this.taskType, 'classification')) {
            // throw new Error('Classifier is not yet implemented');
            const getLabel = this.labels
                ? (index) => this.labels[index]
                : (index) => index.toString();
            const confidences = Array.from(outputs.probabilities.data).reduce((x, y, i) => ({ ...x, [getLabel(i)]: y }), {});
            return {
                label: getLabel(outputs.label.data[0]),
                confidences,
            };
        }
        if (isPredictionType$1(this.taskType, 'generic')) {
            const res = {};
            for (const name of __classPrivateFieldGet(this, _OnnxModel_session, "f").outputNames) {
                res[name] = Array.from(outputs[name].data);
            }
            return res;
        }
        throw new Error('Invalid output data type');
    }
    async warmup() {
        const data = Float32Array.from(Array(this.inputShape.reduce((a, b) => a * b, 1)), () => Math.random());
        const warmupTensor = new ort.Tensor('float32', data, this.inputShape);
        await __classPrivateFieldGet(this, _OnnxModel_session, "f").run({ [__classPrivateFieldGet(this, _OnnxModel_session, "f").inputNames[0]]: warmupTensor });
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Onnx_model_view({
            target: t,
            props: {
                title: this.title,
                training: this.$training,
            },
        });
    }
    // eslint-disable-next-line class-methods-use-this
    save() {
        throw new Error('OnnxModel does not support saving');
    }
    // eslint-disable-next-line class-methods-use-this
    load() {
        throw new Error('OnnxModel does not support loading');
    }
    // eslint-disable-next-line class-methods-use-this
    download() {
        throw new Error('OnnxModel does not support downloading');
    }
    // eslint-disable-next-line class-methods-use-this
    upload() {
        throw new Error('OnnxModel does not support uploading');
    }
}
_OnnxModel_session = new WeakMap();
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], OnnxModel.prototype, "train", null);
__decorate([
    Catch
], OnnxModel.prototype, "predict", null);
__decorate([
    Catch
], OnnxModel.prototype, "loadFromUrl", null);
__decorate([
    Catch
], OnnxModel.prototype, "loadFromFile", null);
__decorate([
    Catch
], OnnxModel.prototype, "loadModel", null);
__decorate([
    Catch
], OnnxModel.prototype, "preprocess", null);
__decorate([
    Catch
], OnnxModel.prototype, "postprocess", null);
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], OnnxModel.prototype, "save", null);
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], OnnxModel.prototype, "load", null);
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], OnnxModel.prototype, "download", null);
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], OnnxModel.prototype, "upload", null);

function onnxModel(options) {
    return new OnnxModel(options);
}

class PCA extends Model {
    constructor() {
        super(...arguments);
        this.title = 'PCA';
        this.serviceName = 'pca';
        this.parameters = {};
    }
    async train(dataset) {
        this.$training.set({ status: 'start', epochs: -1 });
        const items = isDataset(dataset) ? dataset.items() : dataset;
        const instances = await items.toArray();
        const pcaData = instances.reduce((d, { x }) => d.concat([x]), []);
        this.model = new PCA$1(pcaData);
        this.$training.set({
            status: 'success',
            data: {
                explainedVariance: this.model.getExplainedVariance(),
            },
        });
    }
    async predict(x) {
        if (!this.model)
            return null;
        return this.model.predict([x]).to2DArray()[0].slice(0, 2);
    }
    clear() {
        this.model = null;
    }
    async save(store, name, metadata, id = null) {
        const storedModel = await this.write(metadata);
        storedModel.name = name;
        return this.saveToDatastore(store, storedModel, id);
    }
    async load(store, id) {
        const storedModel = await this.loadFromDatastore(store, id);
        await this.read(storedModel);
        return storedModel;
    }
    async download(metadata) {
        const model = await this.write(metadata);
        saveBlob(JSON.stringify(model), `${model.name}.json`, 'text/plain');
    }
    async upload(...files) {
        const jsonFiles = files.filter((x) => x.name.includes('.json'));
        const model = await new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => {
                const obj = JSON.parse(reader.result);
                resolve(obj);
            };
            reader.onerror = reject;
            reader.readAsText(jsonFiles[0]);
        });
        await this.read(model);
        return model;
    }
    async write(metadata = {}) {
        var _a;
        const name = toKebabCase(this.title);
        return {
            name,
            files: [],
            format: 'ml-pca',
            metadata: {
                PCAModel: (_a = this.model) === null || _a === void 0 ? void 0 : _a.toJSON(),
                ...metadata,
            },
        };
    }
    async read(s) {
        const m = s.metadata.PCAModel;
        if (!m)
            return;
        this.model = PCA$1.load(m);
        this.$training.set({
            status: 'loaded',
        });
    }
}

function pca(...args) {
    return new PCA(...args);
}

const scoreThresholds = {
    MoveNet: 0.35,
    PoseNet: 0.5,
    BlazePose: 0.65,
};
const COLOR_PALETTE = [
    '#ffffff',
    '#800000',
    '#469990',
    '#e6194b',
    '#42d4f4',
    '#fabed4',
    '#aaffc3',
    '#9a6324',
    '#000075',
    '#f58231',
    '#4363d8',
    '#ffd8b1',
    '#dcbeff',
    '#808000',
    '#ffe119',
    '#911eb4',
    '#bfef45',
    '#f032e6',
    '#3cb44b',
    '#a9a9a9', // #a9a9a9 - Silver Chalice
];
class SkeletonRenderer {
    constructor(model, width) {
        this.model = model;
        this.width = width;
        this.params = {
            lineWidth: 2,
            radius: 4,
            scoreThreshold: scoreThresholds[model],
        };
        this.canvas = document.createElement('canvas');
        this.canvas.width = this.width;
        this.canvas.height = this.width;
        this.ctx = this.canvas.getContext('2d');
    }
    drawKeypoint(keypoint) {
        // If score is null, just show the keypoint.
        const score = keypoint.score != null ? keypoint.score : 1;
        // const scoreThreshold = params.STATE.modelConfig.scoreThreshold || 0;
        if (score >= this.params.scoreThreshold) {
            const circle = new Path2D();
            circle.arc(keypoint.x, keypoint.y, this.params.radius, 0, 2 * Math.PI);
            this.ctx.fill(circle);
            this.ctx.stroke(circle);
        }
    }
    /**
     * Draw the keypoints on the video.
     * @param keypoints A list of keypoints.
     */
    drawKeypoints(keypoints) {
        const keypointInd = util.getKeypointIndexBySide(this.model);
        this.ctx.fillStyle = 'Red';
        this.ctx.strokeStyle = 'White';
        this.ctx.lineWidth = this.params.lineWidth;
        for (const i of keypointInd.middle) {
            this.drawKeypoint(keypoints[i]);
        }
        this.ctx.fillStyle = 'Green';
        for (const i of keypointInd.left) {
            this.drawKeypoint(keypoints[i]);
        }
        this.ctx.fillStyle = 'Orange';
        for (const i of keypointInd.right) {
            this.drawKeypoint(keypoints[i]);
        }
    }
    /**
     * Draw the skeleton of a body on the video.
     * @param keypoints A list of keypoints.
     */
    drawSkeleton(keypoints, poseId) {
        // Each poseId is mapped to a color in the color palette.
        const color = 
        //params.STATE.modelConfig.enableTracking &&
        poseId != null ? COLOR_PALETTE[poseId % 20] : 'White';
        this.ctx.fillStyle = color;
        this.ctx.strokeStyle = color;
        this.ctx.lineWidth = this.params.lineWidth;
        util.getAdjacentPairs(this.model).forEach(([i, j]) => {
            const kp1 = keypoints[i];
            const kp2 = keypoints[j];
            // If score is null, just show the keypoint.
            const score1 = kp1.score != null ? kp1.score : 1;
            const score2 = kp2.score != null ? kp2.score : 1;
            const scoreThreshold = this.params.scoreThreshold || 0;
            if (score1 >= scoreThreshold && score2 >= scoreThreshold) {
                this.ctx.beginPath();
                this.ctx.moveTo(kp1.x, kp1.y);
                this.ctx.lineTo(kp2.x, kp2.y);
                this.ctx.stroke();
            }
        });
    }
    // drawKeypoints3D(keypoints: Pose['keypoints3D']) {
    //   const pointsData = keypoints.map((keypoint) => [-keypoint.x, -keypoint.y, -keypoint.z]);
    //   const dataset = new scatter.ScatterGL.Dataset([...pointsData, ...ANCHOR_POINTS]);
    //   const keypointInd = util.getKeypointIndexBySide(model);
    //   this.scatterGL.setPointColorer((i) => {
    //     if (keypoints[i] == null || keypoints[i].score < params.scoreThreshold) {
    //       // hide anchor points and low-confident points.
    //       return '#ffffff';
    //     }
    //     if (i === 0) {
    //       return '#ff0000' /* Red */;
    //     }
    //     if (keypointInd.left.indexOf(i) > -1) {
    //       return '#00ff00' /* Green */;
    //     }
    //     if (keypointInd.right.indexOf(i) > -1) {
    //       return '#ffa500' /* Orange */;
    //     }
    //   });
    //   if (!this.scatterGLHasInitialized) {
    //     this.scatterGL.render(dataset);
    //   } else {
    //     this.scatterGL.updateDataset(dataset);
    //   }
    //   const connections = util.getAdjacentPairs(model);
    //   const sequences = connections.map((pair) => ({ indices: pair }));
    //   this.scatterGL.setSequences(sequences);
    //   this.scatterGLHasInitialized = true;
    // }
    drawResult(pose) {
        if (pose.keypoints != null) {
            this.drawKeypoints(pose.keypoints);
            this.drawSkeleton(pose.keypoints, pose.id);
        }
        if (pose.keypoints3D != null // && params.STATE.modelConfig.render3D
        // TODO: 3D as option?
        ) {
            // drawKeypoints3D(pose.keypoints3D);
            throw new Error('Keypoints 3D is not Implemented...');
        }
    }
    drawResults(poseList) {
        for (const pose of poseList) {
            this.drawResult(pose);
        }
    }
    drawImage(img) {
        this.ctx.clearRect(0, 0, img.width, img.width);
        this.canvas.height = img.height;
        this.canvas.width = img.width;
        this.ctx.putImageData(img, 0, 0);
    }
    render(img, poseList, format = 'ImageData') {
        this.drawImage(img);
        this.drawResults(poseList);
        if (format === 'ImageData')
            return this.ctx.getImageData(0, 0, this.width, this.width);
        return this.canvas.toDataURL('image/jpeg');
    }
}

/* src/components/pose-detection/pose-detection.view.svelte generated by Svelte v3.59.1 */

function create_else_block$a(ctx) {
	let t0;
	let t1;
	let t2;

	return {
		c() {
			t0 = text$1("Using ");
			t1 = text$1(/*model*/ ctx[2]);
			t2 = text$1(" pose detector.");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			insert(target, t2, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*model*/ 4) set_data(t1, /*model*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (detaching) detach(t2);
		}
	};
}

// (9:4) {#if $loading}
function create_if_block$g(ctx) {
	let t;

	return {
		c() {
			t = text$1(" ");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (7:0) <ViewContainer {title} loading={$loading}>
function create_default_slot$h(ctx) {
	let p;

	function select_block_type(ctx, dirty) {
		if (/*$loading*/ ctx[3]) return create_if_block$g;
		return create_else_block$a;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			p = element("p");
			if_block.c();
			attr(p, "class", "p-2 text-sm text-gray-600");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			if_block.m(p, null);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(p, null);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(p);
			if_block.d();
		}
	};
}

function create_fragment$r(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				loading: /*$loading*/ ctx[3],
				$$slots: { default: [create_default_slot$h] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];
			if (dirty & /*$loading*/ 8) viewcontainer_changes.loading = /*$loading*/ ctx[3];

			if (dirty & /*$$scope, $loading, model*/ 28) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$r($$self, $$props, $$invalidate) {
	let $loading,
		$$unsubscribe_loading = noop$2,
		$$subscribe_loading = () => ($$unsubscribe_loading(), $$unsubscribe_loading = subscribe(loading, $$value => $$invalidate(3, $loading = $$value)), loading);

	$$self.$$.on_destroy.push(() => $$unsubscribe_loading());
	let { title } = $$props;
	let { loading } = $$props;
	$$subscribe_loading();
	let { model } = $$props;

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('loading' in $$props) $$subscribe_loading($$invalidate(1, loading = $$props.loading));
		if ('model' in $$props) $$invalidate(2, model = $$props.model);
	};

	return [title, loading, model, $loading];
}

class Pose_detection_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$r, create_fragment$r, safe_not_equal, { title: 0, loading: 1, model: 2 });
	}
}

var _PoseDetection_detector, _PoseDetection_fullRenderer, _PoseDetection_thumbnailRenderer;
class PoseDetection extends Model {
    constructor(model = 'MoveNet', modelConfig) {
        super();
        this.model = model;
        this.modelConfig = modelConfig;
        this.title = 'Pose Detection';
        this.parameters = {};
        this.serviceName = 'undefined';
        _PoseDetection_detector.set(this, void 0);
        this.$loading = new Stream(true, true);
        this.$bodyParts = new Stream('Full body', false);
        _PoseDetection_fullRenderer.set(this, void 0);
        _PoseDetection_thumbnailRenderer.set(this, void 0);
        __classPrivateFieldSet(this, _PoseDetection_fullRenderer, new SkeletonRenderer(SupportedModels[model], 224), "f");
        __classPrivateFieldSet(this, _PoseDetection_thumbnailRenderer, new SkeletonRenderer(SupportedModels[model], 60), "f");
        this.start();
        this.setup(model, modelConfig);
    }
    async setup(model, modelConfig) {
        await ready();
        __classPrivateFieldSet(this, _PoseDetection_detector, await createDetector(SupportedModels[model], modelConfig), "f");
        logger.info(`${model} loaded`);
        this.$loading.set(false);
        this.start();
    }
    async predict(image) {
        if (!__classPrivateFieldGet(this, _PoseDetection_detector, "f")) {
            logger.error('Movenet is not loaded');
            return [];
        }
        const results = await __classPrivateFieldGet(this, _PoseDetection_detector, "f").estimatePoses(image);
        return results;
    }
    postprocess(poses, indices) {
        const filt = indices && Array.isArray(indices) && indices.length > 0
            ? (_, i) => indices.includes(i)
            : () => true;
        return poses
            .map((pose) => {
            const nose = pose.keypoints[0];
            return pose.keypoints
                .filter(filt)
                .reduce((res, x) => [...res, (x.x - nose.x) / 100, (x.y - nose.y) / 100], []);
        })
            .reduce((res, x) => [...res, ...x], []);
    }
    thumbnail(img, result) {
        return __classPrivateFieldGet(this, _PoseDetection_thumbnailRenderer, "f").render(img, result, 'dataURL');
    }
    render(img, result) {
        return __classPrivateFieldGet(this, _PoseDetection_fullRenderer, "f").render(img, result);
    }
    // https://colab.research.google.com/drive/19txHpN8exWhstO6WVkfmYYVC6uug_oVR#scrollTo=0L6HLFd9AXmh
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Pose_detection_view({
            target: t,
            props: {
                title: this.title,
                loading: this.$loading,
                model: this.model,
            },
        });
    }
    // eslint-disable-next-line class-methods-use-this
    train() {
        throw new TrainingError('Model `MobileNet` cannot be trained');
    }
    // eslint-disable-next-line class-methods-use-this
    save() {
        throw new Error('MobileNet does not support saving');
    }
    // eslint-disable-next-line class-methods-use-this
    load() {
        throw new Error('MobileNet does not support loading');
    }
    // eslint-disable-next-line class-methods-use-this
    download() {
        throw new Error('MobileNet does not support downloading');
    }
    // eslint-disable-next-line class-methods-use-this
    upload() {
        throw new Error('MobileNet does not support uploading');
    }
}
_PoseDetection_detector = new WeakMap(), _PoseDetection_fullRenderer = new WeakMap(), _PoseDetection_thumbnailRenderer = new WeakMap();
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], PoseDetection.prototype, "train", null);
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], PoseDetection.prototype, "save", null);
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], PoseDetection.prototype, "load", null);
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], PoseDetection.prototype, "download", null);
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], PoseDetection.prototype, "upload", null);

function poseDetection(...args) {
    return new PoseDetection(...args);
}

/* src/components/scatter-plot/scatter-plot.view.svelte generated by Svelte v3.59.1 */

function create_default_slot$g(ctx) {
	let div;

	return {
		c() {
			div = element("div");
			attr(div, "id", "scatter-container");
			attr(div, "class", "svelte-f0tf1i");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			/*div_binding*/ ctx[4](div);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(div);
			/*div_binding*/ ctx[4](null);
		}
	};
}

function create_fragment$q(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$g] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, scatterContainer*/ 66) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$q($$self, $$props, $$invalidate) {
	let { title } = $$props;
	let { embedding } = $$props;
	let { labels } = $$props;
	let scatterContainer;
	let scatterGL;

	onMount(() => {
		// scatter GL object
		const containerElement = document.getElementById('scatter-container');

		scatterGL = new ScatterGL(containerElement,
		{
				styles: {
					point: {
						scaleDefault: 1.6,
						scaleSelected: 2,
						scaleHover: 2
					}
				}
			});

		// behavior when data are changing
		embedding.subscribe(points => {
			if (points.length > 0) {
				let labs = [];

				if (labels === undefined || labels.get().length === 0) {
					labs = new Array(points.length).fill(0);
				} else {
					labs = labels.get();
				}

				const dataset = new ScatterGL.Dataset(points);
				scatterGL.render(dataset);
				const classIndices = Array.from(new Set(labs));
				const hues = [...new Array(classIndices.length)].map((_, i) => Math.floor(255 / classIndices.length * i));
				const lightTransparentColorsByLabel = hues.map(hue => `hsla(${hue}, 100%, 50%, 0.1)`);
				const heavyTransparentColorsByLabel = hues.map(hue => `hsla(${hue}, 100%, 50%, 0.75)`);
				const opaqueColorsByLabel = hues.map(hue => `hsla(${hue}, 100%, 50%, 1)`);

				scatterGL.setPointColorer((index, selectedIndices, hoverIndex) => {
					if (selectedIndices.size > 0) {
						if (!selectedIndices.has(index)) {
							return lightTransparentColorsByLabel[classIndices.indexOf(labs[index])];
						}

						return opaqueColorsByLabel[classIndices.indexOf(labs[index])];
					}

					if (index === hoverIndex) {
						return opaqueColorsByLabel[classIndices.indexOf(labs[index])];
					}

					return heavyTransparentColorsByLabel[classIndices.indexOf(labs[index])];
				});
			}
		});

		// behavior when labels are changing
		labels.subscribe(labs => {
			const classIndices = Array.from(new Set(labs));
			const hues = [...new Array(classIndices.length)].map((_, i) => Math.floor(255 / classIndices.length * i));
			const lightTransparentColorsByLabel = hues.map(hue => `hsla(${hue}, 100%, 50%, 0.1)`);
			const heavyTransparentColorsByLabel = hues.map(hue => `hsla(${hue}, 100%, 50%, 0.75)`);
			const opaqueColorsByLabel = hues.map(hue => `hsla(${hue}, 100%, 50%, 1)`);

			scatterGL.setPointColorer((index, selectedIndices, hoverIndex) => {
				if (selectedIndices.size > 0) {
					if (!selectedIndices.has(index)) {
						return lightTransparentColorsByLabel[classIndices.indexOf(labs[index])];
					}

					return opaqueColorsByLabel[classIndices.indexOf(labs[index])];
				}

				if (index === hoverIndex) {
					return opaqueColorsByLabel[classIndices.indexOf(labs[index])];
				}

				return heavyTransparentColorsByLabel[classIndices.indexOf(labs[index])];
			});
		});
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			scatterContainer = $$value;
			$$invalidate(1, scatterContainer);
		});
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('embedding' in $$props) $$invalidate(2, embedding = $$props.embedding);
		if ('labels' in $$props) $$invalidate(3, labels = $$props.labels);
	};

	return [title, scatterContainer, embedding, labels, div_binding];
}

class Scatter_plot_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$q, create_fragment$q, safe_not_equal, { title: 0, embedding: 2, labels: 3 });
	}

	get title() {
		return this.$$.ctx[0];
	}

	set title(title) {
		this.$$set({ title });
		flush();
	}

	get embedding() {
		return this.$$.ctx[2];
	}

	set embedding(embedding) {
		this.$$set({ embedding });
		flush();
	}

	get labels() {
		return this.$$.ctx[3];
	}

	set labels(labels) {
		this.$$set({ labels });
		flush();
	}
}

class ScatterPlot extends Component$1 {
    constructor(dataset, labels) {
        super();
        this.title = 'Scatter plot';
        this.$data = dataset.hold();
        this.$labels = labels.hold();
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Scatter_plot_view({
            target: t,
            props: {
                title: this.title,
                embedding: this.$data,
                labels: this.$labels,
            },
        });
    }
}

function scatterPlot(...args) {
    return new ScatterPlot(...args);
}

/* src/components/select/select.view.svelte generated by Svelte v3.59.1 */

function create_default_slot$f(ctx) {
	let select;
	let current;

	select = new Select$1({
			props: {
				options: /*$options*/ ctx[3],
				value: /*$value*/ ctx[4]
			}
		});

	select.$on("change", /*updateStream*/ ctx[5]);

	return {
		c() {
			create_component(select.$$.fragment);
		},
		m(target, anchor) {
			mount_component(select, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const select_changes = {};
			if (dirty & /*$options*/ 8) select_changes.options = /*$options*/ ctx[3];
			if (dirty & /*$value*/ 16) select_changes.value = /*$value*/ ctx[4];
			select.$set(select_changes);
		},
		i(local) {
			if (current) return;
			transition_in(select.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(select.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(select, detaching);
		}
	};
}

function create_fragment$p(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$f] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, $options, $value*/ 88) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$p($$self, $$props, $$invalidate) {
	let $options,
		$$unsubscribe_options = noop$2,
		$$subscribe_options = () => ($$unsubscribe_options(), $$unsubscribe_options = subscribe(options, $$value => $$invalidate(3, $options = $$value)), options);

	let $value,
		$$unsubscribe_value = noop$2,
		$$subscribe_value = () => ($$unsubscribe_value(), $$unsubscribe_value = subscribe(value, $$value => $$invalidate(4, $value = $$value)), value);

	$$self.$$.on_destroy.push(() => $$unsubscribe_options());
	$$self.$$.on_destroy.push(() => $$unsubscribe_value());
	let { title } = $$props;
	let { options } = $$props;
	$$subscribe_options();
	let { value } = $$props;
	$$subscribe_value();

	function updateStream({ detail }) {
		value.set(detail);
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('options' in $$props) $$subscribe_options($$invalidate(1, options = $$props.options));
		if ('value' in $$props) $$subscribe_value($$invalidate(2, value = $$props.value));
	};

	return [title, options, value, $options, $value, updateStream];
}

class Select_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$p, create_fragment$p, safe_not_equal, { title: 0, options: 1, value: 2 });
	}
}

class Select extends Component$1 {
    constructor(options, value) {
        super();
        this.title = 'select';
        this.$options = new Stream(options, true);
        this.$value = new Stream(value !== undefined ? value : options[0], true);
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Select_view({
            target: t,
            props: {
                title: this.title,
                options: this.$options,
                value: this.$value,
            },
        });
    }
}

function select(...args) {
    return new Select(...args);
}

/* src/components/sketch-pad/sketch-pad.view.svelte generated by Svelte v3.59.1 */

const { document: document_1 } = globals;

function create_default_slot_1$8(ctx) {
	let t;

	return {
		c() {
			t = text$1("Clear");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (63:0) <ViewContainer {title}>
function create_default_slot$e(ctx) {
	let div1;
	let canvas;
	let t;
	let div0;
	let button;
	let current;
	let mounted;
	let dispose;

	button = new Button$1({
			props: {
				size: "small",
				type: "danger",
				$$slots: { default: [create_default_slot_1$8] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*clearDrawing*/ ctx[2]);

	return {
		c() {
			div1 = element("div");
			canvas = element("canvas");
			t = space();
			div0 = element("div");
			create_component(button.$$.fragment);
			attr(canvas, "id", "fxid");
			attr(canvas, "class", "sketchpad-container svelte-1trukpy");
			attr(canvas, "width", "300");
			attr(canvas, "height", "300");
			attr(div0, "class", "m-1");
			attr(div1, "class", "w-full flex flex-col items-center box-border");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, canvas);
			/*canvas_binding*/ ctx[8](canvas);
			append(div1, t);
			append(div1, div0);
			mount_component(button, div0, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(canvas, "mousemove", /*draw*/ ctx[3]),
					listen(canvas, "mousedown", /*startDrawing*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 16384) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			/*canvas_binding*/ ctx[8](null);
			destroy_component(button);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$o(ctx) {
	let t;
	let viewcontainer;
	let current;
	let mounted;
	let dispose;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$e] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			t = space();
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			insert(target, t, anchor);
			mount_component(viewcontainer, target, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(document_1.body, "mouseup", /*stopDrawing*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, canvasElement*/ 16386) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(t);
			destroy_component(viewcontainer, detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance$o($$self, $$props, $$invalidate) {
	let { title } = $$props;
	let { strokeStart } = $$props;
	let { strokeEnd } = $$props;
	let canvasElement;
	let isDrawing = false;
	let offset = { left: 0, top: 0 };
	let previous = { x: 0, y: 0 };
	let ctx;
	const dispatch = createEventDispatcher();

	function clearDrawing() {
		ctx.clearRect(0, 0, canvasElement.width, canvasElement.height);
		ctx.fillStyle = 'white';
		ctx.fillRect(0, 0, canvasElement.width, canvasElement.height);
		isDrawing = false;
	}

	onMount(async () => {
		await tick$1();
		await tick$1();
		ctx = canvasElement.getContext('2d');
		clearDrawing();
		dispatch('canvasElement', canvasElement);
	});

	function draw(e) {
		const x = e.clientX - offset.left;
		const y = e.clientY - offset.top;

		if (isDrawing) {
			ctx.beginPath();
			ctx.strokeStyle = 'black';
			ctx.lineWidth = 10;
			ctx.lineJoin = 'round';
			ctx.moveTo(previous.x, previous.y);
			ctx.lineTo(x, y);
			ctx.closePath();
			ctx.stroke();
		}

		previous.x = x;
		previous.y = y;
	}

	function startDrawing(e) {
		const rect = canvasElement.getBoundingClientRect();

		offset = {
			top: rect.top + document.body.scrollTop,
			left: rect.left + document.body.scrollLeft
		};

		draw(e);
		strokeStart.set();
		isDrawing = true;
	}

	function stopDrawing() {
		if (isDrawing) {
			strokeEnd.set();
		}

		isDrawing = false;
	}

	function canvas_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			canvasElement = $$value;
			$$invalidate(1, canvasElement);
		});
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('strokeStart' in $$props) $$invalidate(6, strokeStart = $$props.strokeStart);
		if ('strokeEnd' in $$props) $$invalidate(7, strokeEnd = $$props.strokeEnd);
	};

	return [
		title,
		canvasElement,
		clearDrawing,
		draw,
		startDrawing,
		stopDrawing,
		strokeStart,
		strokeEnd,
		canvas_binding
	];
}

class Sketch_pad_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$o, create_fragment$o, safe_not_equal, { title: 0, strokeStart: 6, strokeEnd: 7 });
	}
}

var _SketchPad_thumbnailWidth, _SketchPad_thumbnailCanvas, _SketchPad_thumbnailCtx, _SketchPad_sketchCtx;
class SketchPad extends Component$1 {
    constructor() {
        super();
        this.title = 'sketchPad';
        this.$images = new Stream(never());
        this.$thumbnails = new Stream(never());
        this.$strokeStart = new Stream(never());
        this.$strokeEnd = new Stream(never());
        _SketchPad_thumbnailWidth.set(this, 60);
        _SketchPad_thumbnailCanvas.set(this, void 0);
        _SketchPad_thumbnailCtx.set(this, void 0);
        _SketchPad_sketchCtx.set(this, void 0);
        this.setupCapture();
        this.$strokeEnd.subscribe(() => {
            this.capture();
        });
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Sketch_pad_view({
            target: t,
            props: {
                title: this.title,
                strokeStart: this.$strokeStart,
                strokeEnd: this.$strokeEnd,
            },
        });
        this.$$.app.$on('canvasElement', (e) => {
            this.sketchElement = e.detail;
            __classPrivateFieldSet(this, _SketchPad_sketchCtx, this.sketchElement.getContext('2d'), "f");
        });
    }
    setupCapture() {
        __classPrivateFieldSet(this, _SketchPad_thumbnailCanvas, document.createElement('canvas'), "f");
        __classPrivateFieldGet(this, _SketchPad_thumbnailCanvas, "f").width = __classPrivateFieldGet(this, _SketchPad_thumbnailWidth, "f");
        __classPrivateFieldGet(this, _SketchPad_thumbnailCanvas, "f").height = __classPrivateFieldGet(this, _SketchPad_thumbnailWidth, "f");
        __classPrivateFieldSet(this, _SketchPad_thumbnailCtx, __classPrivateFieldGet(this, _SketchPad_thumbnailCanvas, "f").getContext('2d'), "f");
    }
    capture() {
        const t = this.captureThumbnail();
        this.$thumbnails.set(t);
        this.$images.set(this.captureImage());
    }
    captureThumbnail() {
        __classPrivateFieldGet(this, _SketchPad_thumbnailCtx, "f").drawImage(this.sketchElement, 0, 0, __classPrivateFieldGet(this, _SketchPad_thumbnailCanvas, "f").width, __classPrivateFieldGet(this, _SketchPad_thumbnailCanvas, "f").height);
        return __classPrivateFieldGet(this, _SketchPad_thumbnailCanvas, "f").toDataURL('image/jpeg');
    }
    captureImage() {
        return __classPrivateFieldGet(this, _SketchPad_sketchCtx, "f").getImageData(0, 0, this.sketchElement.width, this.sketchElement.height);
    }
}
_SketchPad_thumbnailWidth = new WeakMap(), _SketchPad_thumbnailCanvas = new WeakMap(), _SketchPad_thumbnailCtx = new WeakMap(), _SketchPad_sketchCtx = new WeakMap();

function sketchPad(...args) {
    return new SketchPad(...args);
}

function is_date(obj) {
    return Object.prototype.toString.call(obj) === '[object Date]';
}

function tick_spring(ctx, last_value, current_value, target_value) {
    if (typeof current_value === 'number' || is_date(current_value)) {
        // @ts-ignore
        const delta = target_value - current_value;
        // @ts-ignore
        const velocity = (current_value - last_value) / (ctx.dt || 1 / 60); // guard div by 0
        const spring = ctx.opts.stiffness * delta;
        const damper = ctx.opts.damping * velocity;
        const acceleration = (spring - damper) * ctx.inv_mass;
        const d = (velocity + acceleration) * ctx.dt;
        if (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {
            return target_value; // settled
        }
        else {
            ctx.settled = false; // signal loop to keep ticking
            // @ts-ignore
            return is_date(current_value) ?
                new Date(current_value.getTime() + d) : current_value + d;
        }
    }
    else if (Array.isArray(current_value)) {
        // @ts-ignore
        return current_value.map((_, i) => tick_spring(ctx, last_value[i], current_value[i], target_value[i]));
    }
    else if (typeof current_value === 'object') {
        const next_value = {};
        for (const k in current_value) {
            // @ts-ignore
            next_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);
        }
        // @ts-ignore
        return next_value;
    }
    else {
        throw new Error(`Cannot spring ${typeof current_value} values`);
    }
}
function spring(value, opts = {}) {
    const store = writable(value);
    const { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;
    let last_time;
    let task;
    let current_token;
    let last_value = value;
    let target_value = value;
    let inv_mass = 1;
    let inv_mass_recovery_rate = 0;
    let cancel_task = false;
    function set(new_value, opts = {}) {
        target_value = new_value;
        const token = current_token = {};
        if (value == null || opts.hard || (spring.stiffness >= 1 && spring.damping >= 1)) {
            cancel_task = true; // cancel any running animation
            last_time = now$1();
            last_value = new_value;
            store.set(value = target_value);
            return Promise.resolve();
        }
        else if (opts.soft) {
            const rate = opts.soft === true ? .5 : +opts.soft;
            inv_mass_recovery_rate = 1 / (rate * 60);
            inv_mass = 0; // infinite mass, unaffected by spring forces
        }
        if (!task) {
            last_time = now$1();
            cancel_task = false;
            task = loop(now => {
                if (cancel_task) {
                    cancel_task = false;
                    task = null;
                    return false;
                }
                inv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);
                const ctx = {
                    inv_mass,
                    opts: spring,
                    settled: true,
                    dt: (now - last_time) * 60 / 1000
                };
                const next_value = tick_spring(ctx, last_value, value, target_value);
                last_time = now;
                last_value = value;
                store.set(value = next_value);
                if (ctx.settled) {
                    task = null;
                }
                return !ctx.settled;
            });
        }
        return new Promise(fulfil => {
            task.promise.then(() => {
                if (token === current_token)
                    fulfil();
            });
        });
    }
    const spring = {
        set,
        update: (fn, opts) => set(fn(target_value, value), opts),
        subscribe: store.subscribe,
        stiffness,
        damping,
        precision
    };
    return spring;
}

/* ../../node_modules/.pnpm/svelte-range-slider-pips@2.1.1/node_modules/svelte-range-slider-pips/src/RangePips.svelte generated by Svelte v3.59.1 */

function get_each_context$8(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[28] = list[i];
	child_ctx[30] = i;
	return child_ctx;
}

// (177:2) {#if ( all && first !== false ) || first }
function create_if_block_9(ctx) {
	let span;
	let span_style_value;
	let mounted;
	let dispose;
	let if_block = (/*all*/ ctx[6] === 'label' || /*first*/ ctx[7] === 'label') && create_if_block_10(ctx);

	return {
		c() {
			span = element("span");
			if (if_block) if_block.c();
			attr(span, "class", "pip first");
			attr(span, "style", span_style_value = "" + (/*orientationStart*/ ctx[14] + ": 0%;"));
			toggle_class(span, "selected", /*isSelected*/ ctx[18](/*min*/ ctx[0]));
			toggle_class(span, "in-range", /*inRange*/ ctx[17](/*min*/ ctx[0]));
		},
		m(target, anchor) {
			insert(target, span, anchor);
			if (if_block) if_block.m(span, null);

			if (!mounted) {
				dispose = [
					listen(span, "click", function () {
						if (is_function(/*labelClick*/ ctx[21](/*min*/ ctx[0]))) /*labelClick*/ ctx[21](/*min*/ ctx[0]).apply(this, arguments);
					}),
					listen(span, "touchend", prevent_default(function () {
						if (is_function(/*labelClick*/ ctx[21](/*min*/ ctx[0]))) /*labelClick*/ ctx[21](/*min*/ ctx[0]).apply(this, arguments);
					}))
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (/*all*/ ctx[6] === 'label' || /*first*/ ctx[7] === 'label') {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_10(ctx);
					if_block.c();
					if_block.m(span, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*orientationStart*/ 16384 && span_style_value !== (span_style_value = "" + (/*orientationStart*/ ctx[14] + ": 0%;"))) {
				attr(span, "style", span_style_value);
			}

			if (dirty & /*isSelected, min*/ 262145) {
				toggle_class(span, "selected", /*isSelected*/ ctx[18](/*min*/ ctx[0]));
			}

			if (dirty & /*inRange, min*/ 131073) {
				toggle_class(span, "in-range", /*inRange*/ ctx[17](/*min*/ ctx[0]));
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (186:6) {#if all === 'label' || first === 'label'}
function create_if_block_10(ctx) {
	let span;
	let t_value = /*formatter*/ ctx[12](/*fixFloat*/ ctx[16](/*min*/ ctx[0]), 0, 0) + "";
	let t;
	let if_block0 = /*prefix*/ ctx[10] && create_if_block_12(ctx);
	let if_block1 = /*suffix*/ ctx[11] && create_if_block_11(ctx);

	return {
		c() {
			span = element("span");
			if (if_block0) if_block0.c();
			t = text$1(t_value);
			if (if_block1) if_block1.c();
			attr(span, "class", "pipVal");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			if (if_block0) if_block0.m(span, null);
			append(span, t);
			if (if_block1) if_block1.m(span, null);
		},
		p(ctx, dirty) {
			if (/*prefix*/ ctx[10]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_12(ctx);
					if_block0.c();
					if_block0.m(span, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*formatter, fixFloat, min*/ 69633 && t_value !== (t_value = /*formatter*/ ctx[12](/*fixFloat*/ ctx[16](/*min*/ ctx[0]), 0, 0) + "")) set_data(t, t_value);

			if (/*suffix*/ ctx[11]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_11(ctx);
					if_block1.c();
					if_block1.m(span, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

// (188:10) {#if prefix}
function create_if_block_12(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text$1(/*prefix*/ ctx[10]);
			attr(span, "class", "pipVal-prefix");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*prefix*/ 1024) set_data(t, /*prefix*/ ctx[10]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (188:100) {#if suffix}
function create_if_block_11(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text$1(/*suffix*/ ctx[11]);
			attr(span, "class", "pipVal-suffix");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*suffix*/ 2048) set_data(t, /*suffix*/ ctx[11]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (194:2) {#if ( all && rest !== false ) || rest}
function create_if_block_4$1(ctx) {
	let each_1_anchor;
	let each_value = Array(/*pipCount*/ ctx[20] + 1);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$8(get_each_context$8(ctx, each_value, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*orientationStart, percentOf, pipVal, isSelected, inRange, labelClick, suffix, formatter, prefix, all, rest, min, max, pipCount*/ 4120131) {
				each_value = Array(/*pipCount*/ ctx[20] + 1);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$8(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$8(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (196:6) {#if pipVal(i) !== min && pipVal(i) !== max}
function create_if_block_5(ctx) {
	let span;
	let t;
	let span_style_value;
	let mounted;
	let dispose;
	let if_block = (/*all*/ ctx[6] === 'label' || /*rest*/ ctx[9] === 'label') && create_if_block_6(ctx);

	return {
		c() {
			span = element("span");
			if (if_block) if_block.c();
			t = space();
			attr(span, "class", "pip");
			attr(span, "style", span_style_value = "" + (/*orientationStart*/ ctx[14] + ": " + /*percentOf*/ ctx[15](/*pipVal*/ ctx[19](/*i*/ ctx[30])) + "%;"));
			toggle_class(span, "selected", /*isSelected*/ ctx[18](/*pipVal*/ ctx[19](/*i*/ ctx[30])));
			toggle_class(span, "in-range", /*inRange*/ ctx[17](/*pipVal*/ ctx[19](/*i*/ ctx[30])));
		},
		m(target, anchor) {
			insert(target, span, anchor);
			if (if_block) if_block.m(span, null);
			append(span, t);

			if (!mounted) {
				dispose = [
					listen(span, "click", function () {
						if (is_function(/*labelClick*/ ctx[21](/*pipVal*/ ctx[19](/*i*/ ctx[30])))) /*labelClick*/ ctx[21](/*pipVal*/ ctx[19](/*i*/ ctx[30])).apply(this, arguments);
					}),
					listen(span, "touchend", prevent_default(function () {
						if (is_function(/*labelClick*/ ctx[21](/*pipVal*/ ctx[19](/*i*/ ctx[30])))) /*labelClick*/ ctx[21](/*pipVal*/ ctx[19](/*i*/ ctx[30])).apply(this, arguments);
					}))
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (/*all*/ ctx[6] === 'label' || /*rest*/ ctx[9] === 'label') {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_6(ctx);
					if_block.c();
					if_block.m(span, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*orientationStart, percentOf, pipVal*/ 573440 && span_style_value !== (span_style_value = "" + (/*orientationStart*/ ctx[14] + ": " + /*percentOf*/ ctx[15](/*pipVal*/ ctx[19](/*i*/ ctx[30])) + "%;"))) {
				attr(span, "style", span_style_value);
			}

			if (dirty & /*isSelected, pipVal*/ 786432) {
				toggle_class(span, "selected", /*isSelected*/ ctx[18](/*pipVal*/ ctx[19](/*i*/ ctx[30])));
			}

			if (dirty & /*inRange, pipVal*/ 655360) {
				toggle_class(span, "in-range", /*inRange*/ ctx[17](/*pipVal*/ ctx[19](/*i*/ ctx[30])));
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (205:10) {#if all === 'label' || rest === 'label'}
function create_if_block_6(ctx) {
	let span;
	let t_value = /*formatter*/ ctx[12](/*pipVal*/ ctx[19](/*i*/ ctx[30]), /*i*/ ctx[30], /*percentOf*/ ctx[15](/*pipVal*/ ctx[19](/*i*/ ctx[30]))) + "";
	let t;
	let if_block0 = /*prefix*/ ctx[10] && create_if_block_8(ctx);
	let if_block1 = /*suffix*/ ctx[11] && create_if_block_7(ctx);

	return {
		c() {
			span = element("span");
			if (if_block0) if_block0.c();
			t = text$1(t_value);
			if (if_block1) if_block1.c();
			attr(span, "class", "pipVal");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			if (if_block0) if_block0.m(span, null);
			append(span, t);
			if (if_block1) if_block1.m(span, null);
		},
		p(ctx, dirty) {
			if (/*prefix*/ ctx[10]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_8(ctx);
					if_block0.c();
					if_block0.m(span, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*formatter, pipVal, percentOf*/ 561152 && t_value !== (t_value = /*formatter*/ ctx[12](/*pipVal*/ ctx[19](/*i*/ ctx[30]), /*i*/ ctx[30], /*percentOf*/ ctx[15](/*pipVal*/ ctx[19](/*i*/ ctx[30]))) + "")) set_data(t, t_value);

			if (/*suffix*/ ctx[11]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_7(ctx);
					if_block1.c();
					if_block1.m(span, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

// (207:14) {#if prefix}
function create_if_block_8(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text$1(/*prefix*/ ctx[10]);
			attr(span, "class", "pipVal-prefix");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*prefix*/ 1024) set_data(t, /*prefix*/ ctx[10]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (207:119) {#if suffix}
function create_if_block_7(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text$1(/*suffix*/ ctx[11]);
			attr(span, "class", "pipVal-suffix");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*suffix*/ 2048) set_data(t, /*suffix*/ ctx[11]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (195:4) {#each Array(pipCount + 1) as _, i}
function create_each_block$8(ctx) {
	let show_if = /*pipVal*/ ctx[19](/*i*/ ctx[30]) !== /*min*/ ctx[0] && /*pipVal*/ ctx[19](/*i*/ ctx[30]) !== /*max*/ ctx[1];
	let if_block_anchor;
	let if_block = show_if && create_if_block_5(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*pipVal, min, max*/ 524291) show_if = /*pipVal*/ ctx[19](/*i*/ ctx[30]) !== /*min*/ ctx[0] && /*pipVal*/ ctx[19](/*i*/ ctx[30]) !== /*max*/ ctx[1];

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_5(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (215:2) {#if ( all && last !== false ) || last}
function create_if_block$f(ctx) {
	let span;
	let span_style_value;
	let mounted;
	let dispose;
	let if_block = (/*all*/ ctx[6] === 'label' || /*last*/ ctx[8] === 'label') && create_if_block_1$a(ctx);

	return {
		c() {
			span = element("span");
			if (if_block) if_block.c();
			attr(span, "class", "pip last");
			attr(span, "style", span_style_value = "" + (/*orientationStart*/ ctx[14] + ": 100%;"));
			toggle_class(span, "selected", /*isSelected*/ ctx[18](/*max*/ ctx[1]));
			toggle_class(span, "in-range", /*inRange*/ ctx[17](/*max*/ ctx[1]));
		},
		m(target, anchor) {
			insert(target, span, anchor);
			if (if_block) if_block.m(span, null);

			if (!mounted) {
				dispose = [
					listen(span, "click", function () {
						if (is_function(/*labelClick*/ ctx[21](/*max*/ ctx[1]))) /*labelClick*/ ctx[21](/*max*/ ctx[1]).apply(this, arguments);
					}),
					listen(span, "touchend", prevent_default(function () {
						if (is_function(/*labelClick*/ ctx[21](/*max*/ ctx[1]))) /*labelClick*/ ctx[21](/*max*/ ctx[1]).apply(this, arguments);
					}))
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (/*all*/ ctx[6] === 'label' || /*last*/ ctx[8] === 'label') {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$a(ctx);
					if_block.c();
					if_block.m(span, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*orientationStart*/ 16384 && span_style_value !== (span_style_value = "" + (/*orientationStart*/ ctx[14] + ": 100%;"))) {
				attr(span, "style", span_style_value);
			}

			if (dirty & /*isSelected, max*/ 262146) {
				toggle_class(span, "selected", /*isSelected*/ ctx[18](/*max*/ ctx[1]));
			}

			if (dirty & /*inRange, max*/ 131074) {
				toggle_class(span, "in-range", /*inRange*/ ctx[17](/*max*/ ctx[1]));
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (224:6) {#if all === 'label' || last === 'label'}
function create_if_block_1$a(ctx) {
	let span;
	let t_value = /*formatter*/ ctx[12](/*fixFloat*/ ctx[16](/*max*/ ctx[1]), /*pipCount*/ ctx[20], 100) + "";
	let t;
	let if_block0 = /*prefix*/ ctx[10] && create_if_block_3$2(ctx);
	let if_block1 = /*suffix*/ ctx[11] && create_if_block_2$5(ctx);

	return {
		c() {
			span = element("span");
			if (if_block0) if_block0.c();
			t = text$1(t_value);
			if (if_block1) if_block1.c();
			attr(span, "class", "pipVal");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			if (if_block0) if_block0.m(span, null);
			append(span, t);
			if (if_block1) if_block1.m(span, null);
		},
		p(ctx, dirty) {
			if (/*prefix*/ ctx[10]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3$2(ctx);
					if_block0.c();
					if_block0.m(span, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*formatter, fixFloat, max, pipCount*/ 1118210 && t_value !== (t_value = /*formatter*/ ctx[12](/*fixFloat*/ ctx[16](/*max*/ ctx[1]), /*pipCount*/ ctx[20], 100) + "")) set_data(t, t_value);

			if (/*suffix*/ ctx[11]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_2$5(ctx);
					if_block1.c();
					if_block1.m(span, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

// (226:10) {#if prefix}
function create_if_block_3$2(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text$1(/*prefix*/ ctx[10]);
			attr(span, "class", "pipVal-prefix");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*prefix*/ 1024) set_data(t, /*prefix*/ ctx[10]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (226:109) {#if suffix}
function create_if_block_2$5(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text$1(/*suffix*/ ctx[11]);
			attr(span, "class", "pipVal-suffix");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*suffix*/ 2048) set_data(t, /*suffix*/ ctx[11]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment$n(ctx) {
	let div;
	let t0;
	let t1;
	let if_block0 = (/*all*/ ctx[6] && /*first*/ ctx[7] !== false || /*first*/ ctx[7]) && create_if_block_9(ctx);
	let if_block1 = (/*all*/ ctx[6] && /*rest*/ ctx[9] !== false || /*rest*/ ctx[9]) && create_if_block_4$1(ctx);
	let if_block2 = (/*all*/ ctx[6] && /*last*/ ctx[8] !== false || /*last*/ ctx[8]) && create_if_block$f(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			attr(div, "class", "rangePips");
			toggle_class(div, "disabled", /*disabled*/ ctx[5]);
			toggle_class(div, "hoverable", /*hoverable*/ ctx[4]);
			toggle_class(div, "vertical", /*vertical*/ ctx[2]);
			toggle_class(div, "reversed", /*reversed*/ ctx[3]);
			toggle_class(div, "focus", /*focus*/ ctx[13]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t0);
			if (if_block1) if_block1.m(div, null);
			append(div, t1);
			if (if_block2) if_block2.m(div, null);
		},
		p(ctx, [dirty]) {
			if (/*all*/ ctx[6] && /*first*/ ctx[7] !== false || /*first*/ ctx[7]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_9(ctx);
					if_block0.c();
					if_block0.m(div, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*all*/ ctx[6] && /*rest*/ ctx[9] !== false || /*rest*/ ctx[9]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_4$1(ctx);
					if_block1.c();
					if_block1.m(div, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*all*/ ctx[6] && /*last*/ ctx[8] !== false || /*last*/ ctx[8]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block$f(ctx);
					if_block2.c();
					if_block2.m(div, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty & /*disabled*/ 32) {
				toggle_class(div, "disabled", /*disabled*/ ctx[5]);
			}

			if (dirty & /*hoverable*/ 16) {
				toggle_class(div, "hoverable", /*hoverable*/ ctx[4]);
			}

			if (dirty & /*vertical*/ 4) {
				toggle_class(div, "vertical", /*vertical*/ ctx[2]);
			}

			if (dirty & /*reversed*/ 8) {
				toggle_class(div, "reversed", /*reversed*/ ctx[3]);
			}

			if (dirty & /*focus*/ 8192) {
				toggle_class(div, "focus", /*focus*/ ctx[13]);
			}
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
		}
	};
}

function instance$n($$self, $$props, $$invalidate) {
	let pipStep;
	let pipCount;
	let pipVal;
	let isSelected;
	let inRange;
	let { range = false } = $$props;
	let { min = 0 } = $$props;
	let { max = 100 } = $$props;
	let { step = 1 } = $$props;
	let { values = [(max + min) / 2] } = $$props;
	let { vertical = false } = $$props;
	let { reversed = false } = $$props;
	let { hoverable = true } = $$props;
	let { disabled = false } = $$props;
	let { pipstep = undefined } = $$props;
	let { all = true } = $$props;
	let { first = undefined } = $$props;
	let { last = undefined } = $$props;
	let { rest = undefined } = $$props;
	let { prefix = "" } = $$props;
	let { suffix = "" } = $$props;
	let { formatter = (v, i) => v } = $$props;
	let { focus = undefined } = $$props;
	let { orientationStart = undefined } = $$props;
	let { percentOf = undefined } = $$props;
	let { moveHandle = undefined } = $$props;
	let { fixFloat = undefined } = $$props;

	function labelClick(val) {
		if (!disabled) {
			moveHandle(undefined, val);
		}
	}

	$$self.$$set = $$props => {
		if ('range' in $$props) $$invalidate(22, range = $$props.range);
		if ('min' in $$props) $$invalidate(0, min = $$props.min);
		if ('max' in $$props) $$invalidate(1, max = $$props.max);
		if ('step' in $$props) $$invalidate(23, step = $$props.step);
		if ('values' in $$props) $$invalidate(24, values = $$props.values);
		if ('vertical' in $$props) $$invalidate(2, vertical = $$props.vertical);
		if ('reversed' in $$props) $$invalidate(3, reversed = $$props.reversed);
		if ('hoverable' in $$props) $$invalidate(4, hoverable = $$props.hoverable);
		if ('disabled' in $$props) $$invalidate(5, disabled = $$props.disabled);
		if ('pipstep' in $$props) $$invalidate(25, pipstep = $$props.pipstep);
		if ('all' in $$props) $$invalidate(6, all = $$props.all);
		if ('first' in $$props) $$invalidate(7, first = $$props.first);
		if ('last' in $$props) $$invalidate(8, last = $$props.last);
		if ('rest' in $$props) $$invalidate(9, rest = $$props.rest);
		if ('prefix' in $$props) $$invalidate(10, prefix = $$props.prefix);
		if ('suffix' in $$props) $$invalidate(11, suffix = $$props.suffix);
		if ('formatter' in $$props) $$invalidate(12, formatter = $$props.formatter);
		if ('focus' in $$props) $$invalidate(13, focus = $$props.focus);
		if ('orientationStart' in $$props) $$invalidate(14, orientationStart = $$props.orientationStart);
		if ('percentOf' in $$props) $$invalidate(15, percentOf = $$props.percentOf);
		if ('moveHandle' in $$props) $$invalidate(26, moveHandle = $$props.moveHandle);
		if ('fixFloat' in $$props) $$invalidate(16, fixFloat = $$props.fixFloat);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*pipstep, max, min, step, vertical*/ 41943047) {
			$$invalidate(27, pipStep = pipstep || ((max - min) / step >= (vertical ? 50 : 100)
			? (max - min) / (vertical ? 10 : 20)
			: 1));
		}

		if ($$self.$$.dirty & /*max, min, step, pipStep*/ 142606339) {
			$$invalidate(20, pipCount = parseInt((max - min) / (step * pipStep), 10));
		}

		if ($$self.$$.dirty & /*fixFloat, min, step, pipStep*/ 142671873) {
			$$invalidate(19, pipVal = function (val) {
				return fixFloat(min + val * step * pipStep);
			});
		}

		if ($$self.$$.dirty & /*values, fixFloat*/ 16842752) {
			$$invalidate(18, isSelected = function (val) {
				return values.some(v => fixFloat(v) === fixFloat(val));
			});
		}

		if ($$self.$$.dirty & /*range, values*/ 20971520) {
			$$invalidate(17, inRange = function (val) {
				if (range === "min") {
					return values[0] > val;
				} else if (range === "max") {
					return values[0] < val;
				} else if (range) {
					return values[0] < val && values[1] > val;
				}
			});
		}
	};

	return [
		min,
		max,
		vertical,
		reversed,
		hoverable,
		disabled,
		all,
		first,
		last,
		rest,
		prefix,
		suffix,
		formatter,
		focus,
		orientationStart,
		percentOf,
		fixFloat,
		inRange,
		isSelected,
		pipVal,
		pipCount,
		labelClick,
		range,
		step,
		values,
		pipstep,
		moveHandle,
		pipStep
	];
}

class RangePips extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$n, create_fragment$n, safe_not_equal, {
			range: 22,
			min: 0,
			max: 1,
			step: 23,
			values: 24,
			vertical: 2,
			reversed: 3,
			hoverable: 4,
			disabled: 5,
			pipstep: 25,
			all: 6,
			first: 7,
			last: 8,
			rest: 9,
			prefix: 10,
			suffix: 11,
			formatter: 12,
			focus: 13,
			orientationStart: 14,
			percentOf: 15,
			moveHandle: 26,
			fixFloat: 16
		});
	}
}

/* ../../node_modules/.pnpm/svelte-range-slider-pips@2.1.1/node_modules/svelte-range-slider-pips/src/RangeSlider.svelte generated by Svelte v3.59.1 */

function get_each_context$7(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[64] = list[i];
	child_ctx[66] = i;
	return child_ctx;
}

// (844:6) {#if float}
function create_if_block_2$4(ctx) {
	let span;
	let t_value = /*handleFormatter*/ ctx[21](/*value*/ ctx[64], /*index*/ ctx[66], /*percentOf*/ ctx[23](/*value*/ ctx[64])) + "";
	let t;
	let if_block0 = /*prefix*/ ctx[18] && create_if_block_4(ctx);
	let if_block1 = /*suffix*/ ctx[19] && create_if_block_3$1(ctx);

	return {
		c() {
			span = element("span");
			if (if_block0) if_block0.c();
			t = text$1(t_value);
			if (if_block1) if_block1.c();
			attr(span, "class", "rangeFloat");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			if (if_block0) if_block0.m(span, null);
			append(span, t);
			if (if_block1) if_block1.m(span, null);
		},
		p(ctx, dirty) {
			if (/*prefix*/ ctx[18]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					if_block0.m(span, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty[0] & /*handleFormatter, values, percentOf*/ 10485761 && t_value !== (t_value = /*handleFormatter*/ ctx[21](/*value*/ ctx[64], /*index*/ ctx[66], /*percentOf*/ ctx[23](/*value*/ ctx[64])) + "")) set_data(t, t_value);

			if (/*suffix*/ ctx[19]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_3$1(ctx);
					if_block1.c();
					if_block1.m(span, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};
}

// (846:10) {#if prefix}
function create_if_block_4(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text$1(/*prefix*/ ctx[18]);
			attr(span, "class", "rangeFloat-prefix");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*prefix*/ 262144) set_data(t, /*prefix*/ ctx[18]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (846:121) {#if suffix}
function create_if_block_3$1(ctx) {
	let span;
	let t;

	return {
		c() {
			span = element("span");
			t = text$1(/*suffix*/ ctx[19]);
			attr(span, "class", "rangeFloat-suffix");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*suffix*/ 524288) set_data(t, /*suffix*/ ctx[19]);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (823:2) {#each values as value, index}
function create_each_block$7(ctx) {
	let span1;
	let span0;
	let t;
	let span1_style_value;
	let span1_aria_valuemin_value;
	let span1_aria_valuemax_value;
	let span1_aria_valuenow_value;
	let span1_aria_valuetext_value;
	let span1_aria_orientation_value;
	let span1_tabindex_value;
	let mounted;
	let dispose;
	let if_block = /*float*/ ctx[7] && create_if_block_2$4(ctx);

	return {
		c() {
			span1 = element("span");
			span0 = element("span");
			t = space();
			if (if_block) if_block.c();
			attr(span0, "class", "rangeNub");
			attr(span1, "role", "slider");
			attr(span1, "class", "rangeHandle");
			attr(span1, "data-handle", /*index*/ ctx[66]);
			attr(span1, "style", span1_style_value = "" + (/*orientationStart*/ ctx[28] + ": " + /*$springPositions*/ ctx[29][/*index*/ ctx[66]] + "%; z-index: " + (/*activeHandle*/ ctx[26] === /*index*/ ctx[66] ? 3 : 2) + ";"));

			attr(span1, "aria-valuemin", span1_aria_valuemin_value = /*range*/ ctx[2] === true && /*index*/ ctx[66] === 1
			? /*values*/ ctx[0][0]
			: /*min*/ ctx[3]);

			attr(span1, "aria-valuemax", span1_aria_valuemax_value = /*range*/ ctx[2] === true && /*index*/ ctx[66] === 0
			? /*values*/ ctx[0][1]
			: /*max*/ ctx[4]);

			attr(span1, "aria-valuenow", span1_aria_valuenow_value = /*value*/ ctx[64]);
			attr(span1, "aria-valuetext", span1_aria_valuetext_value = "" + (/*prefix*/ ctx[18] + /*handleFormatter*/ ctx[21](/*value*/ ctx[64], /*index*/ ctx[66], /*percentOf*/ ctx[23](/*value*/ ctx[64])) + /*suffix*/ ctx[19]));
			attr(span1, "aria-orientation", span1_aria_orientation_value = /*vertical*/ ctx[6] ? 'vertical' : 'horizontal');
			attr(span1, "aria-disabled", /*disabled*/ ctx[10]);
			attr(span1, "disabled", /*disabled*/ ctx[10]);
			attr(span1, "tabindex", span1_tabindex_value = /*disabled*/ ctx[10] ? -1 : 0);
			toggle_class(span1, "active", /*focus*/ ctx[24] && /*activeHandle*/ ctx[26] === /*index*/ ctx[66]);
			toggle_class(span1, "press", /*handlePressed*/ ctx[25] && /*activeHandle*/ ctx[26] === /*index*/ ctx[66]);
		},
		m(target, anchor) {
			insert(target, span1, anchor);
			append(span1, span0);
			append(span1, t);
			if (if_block) if_block.m(span1, null);

			if (!mounted) {
				dispose = [
					listen(span1, "blur", /*sliderBlurHandle*/ ctx[34]),
					listen(span1, "focus", /*sliderFocusHandle*/ ctx[35]),
					listen(span1, "keydown", /*sliderKeydown*/ ctx[36])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*float*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2$4(ctx);
					if_block.c();
					if_block.m(span1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty[0] & /*orientationStart, $springPositions, activeHandle*/ 872415232 && span1_style_value !== (span1_style_value = "" + (/*orientationStart*/ ctx[28] + ": " + /*$springPositions*/ ctx[29][/*index*/ ctx[66]] + "%; z-index: " + (/*activeHandle*/ ctx[26] === /*index*/ ctx[66] ? 3 : 2) + ";"))) {
				attr(span1, "style", span1_style_value);
			}

			if (dirty[0] & /*range, values, min*/ 13 && span1_aria_valuemin_value !== (span1_aria_valuemin_value = /*range*/ ctx[2] === true && /*index*/ ctx[66] === 1
			? /*values*/ ctx[0][0]
			: /*min*/ ctx[3])) {
				attr(span1, "aria-valuemin", span1_aria_valuemin_value);
			}

			if (dirty[0] & /*range, values, max*/ 21 && span1_aria_valuemax_value !== (span1_aria_valuemax_value = /*range*/ ctx[2] === true && /*index*/ ctx[66] === 0
			? /*values*/ ctx[0][1]
			: /*max*/ ctx[4])) {
				attr(span1, "aria-valuemax", span1_aria_valuemax_value);
			}

			if (dirty[0] & /*values*/ 1 && span1_aria_valuenow_value !== (span1_aria_valuenow_value = /*value*/ ctx[64])) {
				attr(span1, "aria-valuenow", span1_aria_valuenow_value);
			}

			if (dirty[0] & /*prefix, handleFormatter, values, percentOf, suffix*/ 11272193 && span1_aria_valuetext_value !== (span1_aria_valuetext_value = "" + (/*prefix*/ ctx[18] + /*handleFormatter*/ ctx[21](/*value*/ ctx[64], /*index*/ ctx[66], /*percentOf*/ ctx[23](/*value*/ ctx[64])) + /*suffix*/ ctx[19]))) {
				attr(span1, "aria-valuetext", span1_aria_valuetext_value);
			}

			if (dirty[0] & /*vertical*/ 64 && span1_aria_orientation_value !== (span1_aria_orientation_value = /*vertical*/ ctx[6] ? 'vertical' : 'horizontal')) {
				attr(span1, "aria-orientation", span1_aria_orientation_value);
			}

			if (dirty[0] & /*disabled*/ 1024) {
				attr(span1, "aria-disabled", /*disabled*/ ctx[10]);
			}

			if (dirty[0] & /*disabled*/ 1024) {
				attr(span1, "disabled", /*disabled*/ ctx[10]);
			}

			if (dirty[0] & /*disabled*/ 1024 && span1_tabindex_value !== (span1_tabindex_value = /*disabled*/ ctx[10] ? -1 : 0)) {
				attr(span1, "tabindex", span1_tabindex_value);
			}

			if (dirty[0] & /*focus, activeHandle*/ 83886080) {
				toggle_class(span1, "active", /*focus*/ ctx[24] && /*activeHandle*/ ctx[26] === /*index*/ ctx[66]);
			}

			if (dirty[0] & /*handlePressed, activeHandle*/ 100663296) {
				toggle_class(span1, "press", /*handlePressed*/ ctx[25] && /*activeHandle*/ ctx[26] === /*index*/ ctx[66]);
			}
		},
		d(detaching) {
			if (detaching) detach(span1);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (851:2) {#if range}
function create_if_block_1$9(ctx) {
	let span;
	let span_style_value;

	return {
		c() {
			span = element("span");
			attr(span, "class", "rangeBar");
			attr(span, "style", span_style_value = "" + (/*orientationStart*/ ctx[28] + ": " + /*rangeStart*/ ctx[32](/*$springPositions*/ ctx[29]) + "%; " + /*orientationEnd*/ ctx[27] + ": " + /*rangeEnd*/ ctx[33](/*$springPositions*/ ctx[29]) + "%;"));
		},
		m(target, anchor) {
			insert(target, span, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*orientationStart, $springPositions, orientationEnd*/ 939524096 && span_style_value !== (span_style_value = "" + (/*orientationStart*/ ctx[28] + ": " + /*rangeStart*/ ctx[32](/*$springPositions*/ ctx[29]) + "%; " + /*orientationEnd*/ ctx[27] + ": " + /*rangeEnd*/ ctx[33](/*$springPositions*/ ctx[29]) + "%;"))) {
				attr(span, "style", span_style_value);
			}
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (857:2) {#if pips}
function create_if_block$e(ctx) {
	let rangepips;
	let current;

	rangepips = new RangePips({
			props: {
				values: /*values*/ ctx[0],
				min: /*min*/ ctx[3],
				max: /*max*/ ctx[4],
				step: /*step*/ ctx[5],
				range: /*range*/ ctx[2],
				vertical: /*vertical*/ ctx[6],
				reversed: /*reversed*/ ctx[8],
				orientationStart: /*orientationStart*/ ctx[28],
				hoverable: /*hoverable*/ ctx[9],
				disabled: /*disabled*/ ctx[10],
				all: /*all*/ ctx[13],
				first: /*first*/ ctx[14],
				last: /*last*/ ctx[15],
				rest: /*rest*/ ctx[16],
				pipstep: /*pipstep*/ ctx[12],
				prefix: /*prefix*/ ctx[18],
				suffix: /*suffix*/ ctx[19],
				formatter: /*formatter*/ ctx[20],
				focus: /*focus*/ ctx[24],
				percentOf: /*percentOf*/ ctx[23],
				moveHandle: /*moveHandle*/ ctx[31],
				fixFloat: /*fixFloat*/ ctx[30]
			}
		});

	return {
		c() {
			create_component(rangepips.$$.fragment);
		},
		m(target, anchor) {
			mount_component(rangepips, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const rangepips_changes = {};
			if (dirty[0] & /*values*/ 1) rangepips_changes.values = /*values*/ ctx[0];
			if (dirty[0] & /*min*/ 8) rangepips_changes.min = /*min*/ ctx[3];
			if (dirty[0] & /*max*/ 16) rangepips_changes.max = /*max*/ ctx[4];
			if (dirty[0] & /*step*/ 32) rangepips_changes.step = /*step*/ ctx[5];
			if (dirty[0] & /*range*/ 4) rangepips_changes.range = /*range*/ ctx[2];
			if (dirty[0] & /*vertical*/ 64) rangepips_changes.vertical = /*vertical*/ ctx[6];
			if (dirty[0] & /*reversed*/ 256) rangepips_changes.reversed = /*reversed*/ ctx[8];
			if (dirty[0] & /*orientationStart*/ 268435456) rangepips_changes.orientationStart = /*orientationStart*/ ctx[28];
			if (dirty[0] & /*hoverable*/ 512) rangepips_changes.hoverable = /*hoverable*/ ctx[9];
			if (dirty[0] & /*disabled*/ 1024) rangepips_changes.disabled = /*disabled*/ ctx[10];
			if (dirty[0] & /*all*/ 8192) rangepips_changes.all = /*all*/ ctx[13];
			if (dirty[0] & /*first*/ 16384) rangepips_changes.first = /*first*/ ctx[14];
			if (dirty[0] & /*last*/ 32768) rangepips_changes.last = /*last*/ ctx[15];
			if (dirty[0] & /*rest*/ 65536) rangepips_changes.rest = /*rest*/ ctx[16];
			if (dirty[0] & /*pipstep*/ 4096) rangepips_changes.pipstep = /*pipstep*/ ctx[12];
			if (dirty[0] & /*prefix*/ 262144) rangepips_changes.prefix = /*prefix*/ ctx[18];
			if (dirty[0] & /*suffix*/ 524288) rangepips_changes.suffix = /*suffix*/ ctx[19];
			if (dirty[0] & /*formatter*/ 1048576) rangepips_changes.formatter = /*formatter*/ ctx[20];
			if (dirty[0] & /*focus*/ 16777216) rangepips_changes.focus = /*focus*/ ctx[24];
			if (dirty[0] & /*percentOf*/ 8388608) rangepips_changes.percentOf = /*percentOf*/ ctx[23];
			rangepips.$set(rangepips_changes);
		},
		i(local) {
			if (current) return;
			transition_in(rangepips.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(rangepips.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(rangepips, detaching);
		}
	};
}

function create_fragment$m(ctx) {
	let div;
	let t0;
	let t1;
	let current;
	let mounted;
	let dispose;
	let each_value = /*values*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$7(get_each_context$7(ctx, each_value, i));
	}

	let if_block0 = /*range*/ ctx[2] && create_if_block_1$9(ctx);
	let if_block1 = /*pips*/ ctx[11] && create_if_block$e(ctx);

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			attr(div, "id", /*id*/ ctx[17]);
			attr(div, "class", "rangeSlider");
			toggle_class(div, "range", /*range*/ ctx[2]);
			toggle_class(div, "disabled", /*disabled*/ ctx[10]);
			toggle_class(div, "hoverable", /*hoverable*/ ctx[9]);
			toggle_class(div, "vertical", /*vertical*/ ctx[6]);
			toggle_class(div, "reversed", /*reversed*/ ctx[8]);
			toggle_class(div, "focus", /*focus*/ ctx[24]);
			toggle_class(div, "min", /*range*/ ctx[2] === 'min');
			toggle_class(div, "max", /*range*/ ctx[2] === 'max');
			toggle_class(div, "pips", /*pips*/ ctx[11]);
			toggle_class(div, "pip-labels", /*all*/ ctx[13] === 'label' || /*first*/ ctx[14] === 'label' || /*last*/ ctx[15] === 'label' || /*rest*/ ctx[16] === 'label');
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			append(div, t0);
			if (if_block0) if_block0.m(div, null);
			append(div, t1);
			if (if_block1) if_block1.m(div, null);
			/*div_binding*/ ctx[50](div);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "mousedown", /*bodyInteractStart*/ ctx[39]),
					listen(window, "touchstart", /*bodyInteractStart*/ ctx[39]),
					listen(window, "mousemove", /*bodyInteract*/ ctx[40]),
					listen(window, "touchmove", /*bodyInteract*/ ctx[40]),
					listen(window, "mouseup", /*bodyMouseUp*/ ctx[41]),
					listen(window, "touchend", /*bodyTouchEnd*/ ctx[42]),
					listen(window, "keydown", /*bodyKeyDown*/ ctx[43]),
					listen(div, "mousedown", /*sliderInteractStart*/ ctx[37]),
					listen(div, "mouseup", /*sliderInteractEnd*/ ctx[38]),
					listen(div, "touchstart", prevent_default(/*sliderInteractStart*/ ctx[37])),
					listen(div, "touchend", prevent_default(/*sliderInteractEnd*/ ctx[38]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty[0] & /*orientationStart, $springPositions, activeHandle, range, values, min, max, prefix, handleFormatter, percentOf, suffix, vertical, disabled, focus, handlePressed, float*/ 934020317 | dirty[1] & /*sliderBlurHandle, sliderFocusHandle, sliderKeydown*/ 56) {
				each_value = /*values*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$7(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$7(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, t0);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (/*range*/ ctx[2]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1$9(ctx);
					if_block0.c();
					if_block0.m(div, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*pips*/ ctx[11]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*pips*/ 2048) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$e(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*id*/ 131072) {
				attr(div, "id", /*id*/ ctx[17]);
			}

			if (!current || dirty[0] & /*range*/ 4) {
				toggle_class(div, "range", /*range*/ ctx[2]);
			}

			if (!current || dirty[0] & /*disabled*/ 1024) {
				toggle_class(div, "disabled", /*disabled*/ ctx[10]);
			}

			if (!current || dirty[0] & /*hoverable*/ 512) {
				toggle_class(div, "hoverable", /*hoverable*/ ctx[9]);
			}

			if (!current || dirty[0] & /*vertical*/ 64) {
				toggle_class(div, "vertical", /*vertical*/ ctx[6]);
			}

			if (!current || dirty[0] & /*reversed*/ 256) {
				toggle_class(div, "reversed", /*reversed*/ ctx[8]);
			}

			if (!current || dirty[0] & /*focus*/ 16777216) {
				toggle_class(div, "focus", /*focus*/ ctx[24]);
			}

			if (!current || dirty[0] & /*range*/ 4) {
				toggle_class(div, "min", /*range*/ ctx[2] === 'min');
			}

			if (!current || dirty[0] & /*range*/ 4) {
				toggle_class(div, "max", /*range*/ ctx[2] === 'max');
			}

			if (!current || dirty[0] & /*pips*/ 2048) {
				toggle_class(div, "pips", /*pips*/ ctx[11]);
			}

			if (!current || dirty[0] & /*all, first, last, rest*/ 122880) {
				toggle_class(div, "pip-labels", /*all*/ ctx[13] === 'label' || /*first*/ ctx[14] === 'label' || /*last*/ ctx[15] === 'label' || /*rest*/ ctx[16] === 'label');
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			/*div_binding*/ ctx[50](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function index(el) {
	if (!el) return -1;
	var i = 0;

	while (el = el.previousElementSibling) {
		i++;
	}

	return i;
}

/**
 * normalise a mouse or touch event to return the
 * client (x/y) object for that event
 * @param {event} e a mouse/touch event to normalise
 * @returns {object} normalised event client object (x,y)
 **/
function normalisedClient(e) {
	if (e.type.includes("touch")) {
		return e.touches[0];
	} else {
		return e;
	}
}

function instance$m($$self, $$props, $$invalidate) {
	let percentOf;
	let clampValue;
	let alignValueToStep;
	let orientationStart;
	let orientationEnd;

	let $springPositions,
		$$unsubscribe_springPositions = noop$2,
		$$subscribe_springPositions = () => ($$unsubscribe_springPositions(), $$unsubscribe_springPositions = subscribe(springPositions, $$value => $$invalidate(29, $springPositions = $$value)), springPositions);

	$$self.$$.on_destroy.push(() => $$unsubscribe_springPositions());
	let { slider = undefined } = $$props;
	let { range = false } = $$props;
	let { pushy = false } = $$props;
	let { min = 0 } = $$props;
	let { max = 100 } = $$props;
	let { step = 1 } = $$props;
	let { values = [(max + min) / 2] } = $$props;
	let { vertical = false } = $$props;
	let { float = false } = $$props;
	let { reversed = false } = $$props;
	let { hoverable = true } = $$props;
	let { disabled = false } = $$props;
	let { pips = false } = $$props;
	let { pipstep = undefined } = $$props;
	let { all = undefined } = $$props;
	let { first = undefined } = $$props;
	let { last = undefined } = $$props;
	let { rest = undefined } = $$props;
	let { id = undefined } = $$props;
	let { prefix = "" } = $$props;
	let { suffix = "" } = $$props;
	let { formatter = (v, i, p) => v } = $$props;
	let { handleFormatter = formatter } = $$props;
	let { precision = 2 } = $$props;
	let { springValues = { stiffness: 0.15, damping: 0.4 } } = $$props;

	// prepare dispatched events
	const dispatch = createEventDispatcher();

	// state management
	let valueLength = 0;

	let focus = false;
	let handleActivated = false;
	let handlePressed = false;
	let keyboardActive = false;
	let activeHandle = values.length - 1;
	let startValue;
	let previousValue;

	// copy the initial values in to a spring function which
	// will update every time the values array is modified
	let springPositions;

	const fixFloat = v => parseFloat(v.toFixed(precision));

	/**
 * check if an element is a handle on the slider
 * @param {object} el dom object reference we want to check
 * @returns {boolean}
 **/
	function targetIsHandle(el) {
		const handles = slider.querySelectorAll(".handle");
		const isHandle = Array.prototype.includes.call(handles, el);
		const isChild = Array.prototype.some.call(handles, e => e.contains(el));
		return isHandle || isChild;
	}

	/**
 * trim the values array based on whether the property
 * for 'range' is 'min', 'max', or truthy. This is because we
 * do not want more than one handle for a min/max range, and we do
 * not want more than two handles for a true range.
 * @param {array} values the input values for the rangeSlider
 * @return {array} the range array for creating a rangeSlider
 **/
	function trimRange(values) {
		if (range === "min" || range === "max") {
			return values.slice(0, 1);
		} else if (range) {
			return values.slice(0, 2);
		} else {
			return values;
		}
	}

	/**
 * helper to return the slider dimensions for finding
 * the closest handle to user interaction
 * @return {object} the range slider DOM client rect
 **/
	function getSliderDimensions() {
		return slider.getBoundingClientRect();
	}

	/**
 * helper to return closest handle to user interaction
 * @param {object} clientPos the client{x,y} positions to check against
 * @return {number} the index of the closest handle to clientPos
 **/
	function getClosestHandle(clientPos) {
		// first make sure we have the latest dimensions
		// of the slider, as it may have changed size
		const dims = getSliderDimensions();

		// calculate the interaction position, percent and value
		let handlePos = 0;

		let handlePercent = 0;
		let handleVal = 0;

		if (vertical) {
			handlePos = clientPos.clientY - dims.top;
			handlePercent = handlePos / dims.height * 100;
			handlePercent = reversed ? handlePercent : 100 - handlePercent;
		} else {
			handlePos = clientPos.clientX - dims.left;
			handlePercent = handlePos / dims.width * 100;
			handlePercent = reversed ? 100 - handlePercent : handlePercent;
		}

		handleVal = (max - min) / 100 * handlePercent + min;
		let closest;

		// if we have a range, and the handles are at the same
		// position, we want a simple check if the interaction
		// value is greater than return the second handle
		if (range === true && values[0] === values[1]) {
			if (handleVal > values[1]) {
				return 1;
			} else {
				return 0;
			}
		} else // we sort the handles values, and return the first one closest
		// to the interaction value
		{
			closest = values.indexOf([...values].sort((a, b) => Math.abs(handleVal - a) - Math.abs(handleVal - b))[0]); // if there are multiple handles, and not a range, then
		}

		return closest;
	}

	/**
 * take the interaction position on the slider, convert
 * it to a value on the range, and then send that value
 * through to the moveHandle() method to set the active
 * handle's position
 * @param {object} clientPos the client{x,y} of the interaction
 **/
	function handleInteract(clientPos) {
		// first make sure we have the latest dimensions
		// of the slider, as it may have changed size
		const dims = getSliderDimensions();

		// calculate the interaction position, percent and value
		let handlePos = 0;

		let handlePercent = 0;
		let handleVal = 0;

		if (vertical) {
			handlePos = clientPos.clientY - dims.top;
			handlePercent = handlePos / dims.height * 100;
			handlePercent = reversed ? handlePercent : 100 - handlePercent;
		} else {
			handlePos = clientPos.clientX - dims.left;
			handlePercent = handlePos / dims.width * 100;
			handlePercent = reversed ? 100 - handlePercent : handlePercent;
		}

		handleVal = (max - min) / 100 * handlePercent + min;

		// move handle to the value
		moveHandle(activeHandle, handleVal);
	}

	/**
 * move a handle to a specific value, respecting the clamp/align rules
 * @param {number} index the index of the handle we want to move
 * @param {number} value the value to move the handle to
 * @return {number} the value that was moved to (after alignment/clamping)
 **/
	function moveHandle(index, value) {
		// align & clamp the value so we're not doing extra
		// calculation on an out-of-range value down below
		value = alignValueToStep(value);

		// use the active handle if handle index is not provided
		if (typeof index === 'undefined') {
			index = activeHandle;
		}

		// if this is a range slider perform special checks
		if (range) {
			// restrict the handles of a range-slider from
			// going past one-another unless "pushy" is true
			if (index === 0 && value > values[1]) {
				if (pushy) {
					$$invalidate(0, values[1] = value, values);
				} else {
					value = values[1];
				}
			} else if (index === 1 && value < values[0]) {
				if (pushy) {
					$$invalidate(0, values[0] = value, values);
				} else {
					value = values[0];
				}
			}
		}

		// if the value has changed, update it
		if (values[index] !== value) {
			$$invalidate(0, values[index] = value, values);
		}

		// fire the change event when the handle moves,
		// and store the previous value for the next time
		if (previousValue !== value) {
			eChange();
			previousValue = value;
		}

		return value;
	}

	/**
 * helper to find the beginning range value for use with css style
 * @param {array} values the input values for the rangeSlider
 * @return {number} the beginning of the range
 **/
	function rangeStart(values) {
		if (range === "min") {
			return 0;
		} else {
			return values[0];
		}
	}

	/**
 * helper to find the ending range value for use with css style
 * @param {array} values the input values for the rangeSlider
 * @return {number} the end of the range
 **/
	function rangeEnd(values) {
		if (range === "max") {
			return 0;
		} else if (range === "min") {
			return 100 - values[0];
		} else {
			return 100 - values[1];
		}
	}

	/**
 * when the user has unfocussed (blurred) from the
 * slider, deactivate all handles
 * @param {event} e the event from browser
 **/
	function sliderBlurHandle(e) {
		if (keyboardActive) {
			$$invalidate(24, focus = false);
			handleActivated = false;
			$$invalidate(25, handlePressed = false);
		}
	}

	/**
 * when the user focusses the handle of a slider
 * set it to be active
 * @param {event} e the event from browser
 **/
	function sliderFocusHandle(e) {
		if (!disabled) {
			$$invalidate(26, activeHandle = index(e.target));
			$$invalidate(24, focus = true);
		}
	}

	/**
 * handle the keyboard accessible features by checking the
 * input type, and modfier key then moving handle by appropriate amount
 * @param {event} e the event from browser
 **/
	function sliderKeydown(e) {
		if (!disabled) {
			const handle = index(e.target);
			let jump = e.ctrlKey || e.metaKey || e.shiftKey ? step * 10 : step;
			let prevent = false;

			switch (e.key) {
				case "PageDown":
					jump *= 10;
				case "ArrowRight":
				case "ArrowUp":
					moveHandle(handle, values[handle] + jump);
					prevent = true;
					break;
				case "PageUp":
					jump *= 10;
				case "ArrowLeft":
				case "ArrowDown":
					moveHandle(handle, values[handle] - jump);
					prevent = true;
					break;
				case "Home":
					moveHandle(handle, min);
					prevent = true;
					break;
				case "End":
					moveHandle(handle, max);
					prevent = true;
					break;
			}

			if (prevent) {
				e.preventDefault();
				e.stopPropagation();
			}
		}
	}

	/**
 * function to run when the user touches
 * down on the slider element anywhere
 * @param {event} e the event from browser
 **/
	function sliderInteractStart(e) {
		if (!disabled) {
			const el = e.target;
			const clientPos = normalisedClient(e);

			// set the closest handle as active
			$$invalidate(24, focus = true);

			handleActivated = true;
			$$invalidate(25, handlePressed = true);
			$$invalidate(26, activeHandle = getClosestHandle(clientPos));

			// fire the start event
			startValue = previousValue = alignValueToStep(values[activeHandle]);

			eStart();

			// for touch devices we want the handle to instantly
			// move to the position touched for more responsive feeling
			if (e.type === "touchstart" && !el.matches(".pipVal")) {
				handleInteract(clientPos);
			}
		}
	}

	/**
 * function to run when the user stops touching
 * down on the slider element anywhere
 * @param {event} e the event from browser
 **/
	function sliderInteractEnd(e) {
		// fire the stop event for touch devices
		if (e.type === "touchend") {
			eStop();
		}

		$$invalidate(25, handlePressed = false);
	}

	/**
 * unfocus the slider if the user clicked off of
 * it, somewhere else on the screen
 * @param {event} e the event from browser
 **/
	function bodyInteractStart(e) {
		keyboardActive = false;

		if (focus && e.target !== slider && !slider.contains(e.target)) {
			$$invalidate(24, focus = false);
		}
	}

	/**
 * send the clientX through to handle the interaction
 * whenever the user moves acros screen while active
 * @param {event} e the event from browser
 **/
	function bodyInteract(e) {
		if (!disabled) {
			if (handleActivated) {
				handleInteract(normalisedClient(e));
			}
		}
	}

	/**
 * if user triggers mouseup on the body while
 * a handle is active (without moving) then we
 * trigger an interact event there
 * @param {event} e the event from browser
 **/
	function bodyMouseUp(e) {
		if (!disabled) {
			const el = e.target;

			// this only works if a handle is active, which can
			// only happen if there was sliderInteractStart triggered
			// on the slider, already
			if (handleActivated) {
				if (el === slider || slider.contains(el)) {
					$$invalidate(24, focus = true);

					// don't trigger interact if the target is a handle (no need) or
					// if the target is a label (we want to move to that value from rangePips)
					if (!targetIsHandle(el) && !el.matches(".pipVal")) {
						handleInteract(normalisedClient(e));
					}
				}

				// fire the stop event for mouse device
				// when the body is triggered with an active handle
				eStop();
			}
		}

		handleActivated = false;
		$$invalidate(25, handlePressed = false);
	}

	/**
 * if user triggers touchend on the body then we
 * defocus the slider completely
 * @param {event} e the event from browser
 **/
	function bodyTouchEnd(e) {
		handleActivated = false;
		$$invalidate(25, handlePressed = false);
	}

	function bodyKeyDown(e) {
		if (!disabled) {
			if (e.target === slider || slider.contains(e.target)) {
				keyboardActive = true;
			}
		}
	}

	function eStart() {
		!disabled && dispatch("start", {
			activeHandle,
			value: startValue,
			values: values.map(v => alignValueToStep(v))
		});
	}

	function eStop() {
		!disabled && dispatch("stop", {
			activeHandle,
			startValue,
			value: values[activeHandle],
			values: values.map(v => alignValueToStep(v))
		});
	}

	function eChange() {
		!disabled && dispatch("change", {
			activeHandle,
			startValue,
			previousValue: typeof previousValue === "undefined"
			? startValue
			: previousValue,
			value: values[activeHandle],
			values: values.map(v => alignValueToStep(v))
		});
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			slider = $$value;
			$$invalidate(1, slider);
		});
	}

	$$self.$$set = $$props => {
		if ('slider' in $$props) $$invalidate(1, slider = $$props.slider);
		if ('range' in $$props) $$invalidate(2, range = $$props.range);
		if ('pushy' in $$props) $$invalidate(44, pushy = $$props.pushy);
		if ('min' in $$props) $$invalidate(3, min = $$props.min);
		if ('max' in $$props) $$invalidate(4, max = $$props.max);
		if ('step' in $$props) $$invalidate(5, step = $$props.step);
		if ('values' in $$props) $$invalidate(0, values = $$props.values);
		if ('vertical' in $$props) $$invalidate(6, vertical = $$props.vertical);
		if ('float' in $$props) $$invalidate(7, float = $$props.float);
		if ('reversed' in $$props) $$invalidate(8, reversed = $$props.reversed);
		if ('hoverable' in $$props) $$invalidate(9, hoverable = $$props.hoverable);
		if ('disabled' in $$props) $$invalidate(10, disabled = $$props.disabled);
		if ('pips' in $$props) $$invalidate(11, pips = $$props.pips);
		if ('pipstep' in $$props) $$invalidate(12, pipstep = $$props.pipstep);
		if ('all' in $$props) $$invalidate(13, all = $$props.all);
		if ('first' in $$props) $$invalidate(14, first = $$props.first);
		if ('last' in $$props) $$invalidate(15, last = $$props.last);
		if ('rest' in $$props) $$invalidate(16, rest = $$props.rest);
		if ('id' in $$props) $$invalidate(17, id = $$props.id);
		if ('prefix' in $$props) $$invalidate(18, prefix = $$props.prefix);
		if ('suffix' in $$props) $$invalidate(19, suffix = $$props.suffix);
		if ('formatter' in $$props) $$invalidate(20, formatter = $$props.formatter);
		if ('handleFormatter' in $$props) $$invalidate(21, handleFormatter = $$props.handleFormatter);
		if ('precision' in $$props) $$invalidate(45, precision = $$props.precision);
		if ('springValues' in $$props) $$invalidate(46, springValues = $$props.springValues);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*min, max*/ 24) {
			/**
 * clamp a value from the range so that it always
 * falls within the min/max values
 * @param {number} val the value to clamp
 * @return {number} the value after it's been clamped
 **/
			$$invalidate(49, clampValue = function (val) {
				// return the min/max if outside of that range
				return val <= min ? min : val >= max ? max : val;
			});
		}

		if ($$self.$$.dirty[0] & /*min, max, step*/ 56 | $$self.$$.dirty[1] & /*clampValue*/ 262144) {
			/**
 * align the value with the steps so that it
 * always sits on the closest (above/below) step
 * @param {number} val the value to align
 * @return {number} the value after it's been aligned
 **/
			$$invalidate(48, alignValueToStep = function (val) {
				// sanity check for performance
				if (val <= min) {
					return fixFloat(min);
				} else if (val >= max) {
					return fixFloat(max);
				}

				// find the middle-point between steps
				// and see if the value is closer to the
				// next step, or previous step
				let remainder = (val - min) % step;

				let aligned = val - remainder;

				if (Math.abs(remainder) * 2 >= step) {
					aligned += remainder > 0 ? step : -step;
				}

				// make sure the value is within acceptable limits
				aligned = clampValue(aligned);

				// make sure the returned value is set to the precision desired
				// this is also because javascript often returns weird floats
				// when dealing with odd numbers and percentages
				return fixFloat(aligned);
			});
		}

		if ($$self.$$.dirty[0] & /*min, max*/ 24) {
			/**
 * take in a value, and then calculate that value's percentage
 * of the overall range (min-max);
 * @param {number} val the value we're getting percent for
 * @return {number} the percentage value
 **/
			$$invalidate(23, percentOf = function (val) {
				let perc = (val - min) / (max - min) * 100;

				if (isNaN(perc) || perc <= 0) {
					return 0;
				} else if (perc >= 100) {
					return 100;
				} else {
					return fixFloat(perc);
				}
			});
		}

		if ($$self.$$.dirty[0] & /*values, max, min, percentOf, springPositions*/ 12582937 | $$self.$$.dirty[1] & /*alignValueToStep, valueLength, springValues*/ 229376) {
			{
				// check that "values" is an array, or set it as array
				// to prevent any errors in springs, or range trimming
				if (!Array.isArray(values)) {
					$$invalidate(0, values = [(max + min) / 2]);
					console.error("'values' prop should be an Array (https://github.com/simeydotme/svelte-range-slider-pips#slider-props)");
				}

				// trim the range so it remains as a min/max (only 2 handles)
				// and also align the handles to the steps
				$$invalidate(0, values = trimRange(values.map(v => alignValueToStep(v))));

				// check if the valueLength (length of values[]) has changed,
				// because if so we need to re-seed the spring function with the
				// new values array.
				if (valueLength !== values.length) {
					// set the initial spring values when the slider initialises,
					// or when values array length has changed
					$$subscribe_springPositions($$invalidate(22, springPositions = spring(values.map(v => percentOf(v)), springValues)));
				} else {
					// update the value of the spring function for animated handles
					// whenever the values has updated
					springPositions.set(values.map(v => percentOf(v)));
				}

				// set the valueLength for the next check
				$$invalidate(47, valueLength = values.length);
			}
		}

		if ($$self.$$.dirty[0] & /*vertical, reversed*/ 320) {
			/**
 * the orientation of the handles/pips based on the
 * input values of vertical and reversed
 **/
			$$invalidate(28, orientationStart = vertical
			? reversed ? 'top' : 'bottom'
			: reversed ? 'right' : 'left');
		}

		if ($$self.$$.dirty[0] & /*vertical, reversed*/ 320) {
			$$invalidate(27, orientationEnd = vertical
			? reversed ? 'bottom' : 'top'
			: reversed ? 'left' : 'right');
		}
	};

	return [
		values,
		slider,
		range,
		min,
		max,
		step,
		vertical,
		float,
		reversed,
		hoverable,
		disabled,
		pips,
		pipstep,
		all,
		first,
		last,
		rest,
		id,
		prefix,
		suffix,
		formatter,
		handleFormatter,
		springPositions,
		percentOf,
		focus,
		handlePressed,
		activeHandle,
		orientationEnd,
		orientationStart,
		$springPositions,
		fixFloat,
		moveHandle,
		rangeStart,
		rangeEnd,
		sliderBlurHandle,
		sliderFocusHandle,
		sliderKeydown,
		sliderInteractStart,
		sliderInteractEnd,
		bodyInteractStart,
		bodyInteract,
		bodyMouseUp,
		bodyTouchEnd,
		bodyKeyDown,
		pushy,
		precision,
		springValues,
		valueLength,
		alignValueToStep,
		clampValue,
		div_binding
	];
}

class RangeSlider extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance$m,
			create_fragment$m,
			safe_not_equal,
			{
				slider: 1,
				range: 2,
				pushy: 44,
				min: 3,
				max: 4,
				step: 5,
				values: 0,
				vertical: 6,
				float: 7,
				reversed: 8,
				hoverable: 9,
				disabled: 10,
				pips: 11,
				pipstep: 12,
				all: 13,
				first: 14,
				last: 15,
				rest: 16,
				id: 17,
				prefix: 18,
				suffix: 19,
				formatter: 20,
				handleFormatter: 21,
				precision: 45,
				springValues: 46
			},
			null,
			[-1, -1, -1]
		);
	}
}

/* src/components/slider/slider.view.svelte generated by Svelte v3.59.1 */

function create_else_block$9(ctx) {
	let rangeslider;
	let current;

	rangeslider = new RangeSlider({
			props: {
				values: /*$values*/ ctx[12],
				min: /*$min*/ ctx[13],
				max: /*$max*/ ctx[14],
				step: /*$step*/ ctx[15],
				range: /*range*/ ctx[5],
				float: /*float*/ ctx[6],
				vertical: /*vertical*/ ctx[7],
				pips: /*pips*/ ctx[8],
				pipstep: /*pipstep*/ ctx[9],
				formatter: /*formatter*/ ctx[10],
				all: "label",
				springValues: { stiffness: 0.2, damping: 0.8 }
			}
		});

	rangeslider.$on("stop", /*dispatchValues*/ ctx[16]);

	return {
		c() {
			create_component(rangeslider.$$.fragment);
		},
		m(target, anchor) {
			mount_component(rangeslider, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const rangeslider_changes = {};
			if (dirty & /*$values*/ 4096) rangeslider_changes.values = /*$values*/ ctx[12];
			if (dirty & /*$min*/ 8192) rangeslider_changes.min = /*$min*/ ctx[13];
			if (dirty & /*$max*/ 16384) rangeslider_changes.max = /*$max*/ ctx[14];
			if (dirty & /*$step*/ 32768) rangeslider_changes.step = /*$step*/ ctx[15];
			if (dirty & /*range*/ 32) rangeslider_changes.range = /*range*/ ctx[5];
			if (dirty & /*float*/ 64) rangeslider_changes.float = /*float*/ ctx[6];
			if (dirty & /*vertical*/ 128) rangeslider_changes.vertical = /*vertical*/ ctx[7];
			if (dirty & /*pips*/ 256) rangeslider_changes.pips = /*pips*/ ctx[8];
			if (dirty & /*pipstep*/ 512) rangeslider_changes.pipstep = /*pipstep*/ ctx[9];
			if (dirty & /*formatter*/ 1024) rangeslider_changes.formatter = /*formatter*/ ctx[10];
			rangeslider.$set(rangeslider_changes);
		},
		i(local) {
			if (current) return;
			transition_in(rangeslider.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(rangeslider.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(rangeslider, detaching);
		}
	};
}

// (21:2) {#if continuous}
function create_if_block$d(ctx) {
	let rangeslider;
	let updating_values;
	let current;

	function rangeslider_values_binding(value) {
		/*rangeslider_values_binding*/ ctx[17](value);
	}

	let rangeslider_props = {
		min: /*$min*/ ctx[13],
		max: /*$max*/ ctx[14],
		step: /*$step*/ ctx[15],
		range: /*range*/ ctx[5],
		float: /*float*/ ctx[6],
		vertical: /*vertical*/ ctx[7],
		pips: /*pips*/ ctx[8],
		pipstep: /*pipstep*/ ctx[9],
		formatter: /*formatter*/ ctx[10],
		all: "label",
		springValues: { stiffness: 0.2, damping: 0.8 }
	};

	if (/*$values*/ ctx[12] !== void 0) {
		rangeslider_props.values = /*$values*/ ctx[12];
	}

	rangeslider = new RangeSlider({ props: rangeslider_props });
	binding_callbacks.push(() => bind(rangeslider, 'values', rangeslider_values_binding));

	return {
		c() {
			create_component(rangeslider.$$.fragment);
		},
		m(target, anchor) {
			mount_component(rangeslider, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const rangeslider_changes = {};
			if (dirty & /*$min*/ 8192) rangeslider_changes.min = /*$min*/ ctx[13];
			if (dirty & /*$max*/ 16384) rangeslider_changes.max = /*$max*/ ctx[14];
			if (dirty & /*$step*/ 32768) rangeslider_changes.step = /*$step*/ ctx[15];
			if (dirty & /*range*/ 32) rangeslider_changes.range = /*range*/ ctx[5];
			if (dirty & /*float*/ 64) rangeslider_changes.float = /*float*/ ctx[6];
			if (dirty & /*vertical*/ 128) rangeslider_changes.vertical = /*vertical*/ ctx[7];
			if (dirty & /*pips*/ 256) rangeslider_changes.pips = /*pips*/ ctx[8];
			if (dirty & /*pipstep*/ 512) rangeslider_changes.pipstep = /*pipstep*/ ctx[9];
			if (dirty & /*formatter*/ 1024) rangeslider_changes.formatter = /*formatter*/ ctx[10];

			if (!updating_values && dirty & /*$values*/ 4096) {
				updating_values = true;
				rangeslider_changes.values = /*$values*/ ctx[12];
				add_flush_callback(() => updating_values = false);
			}

			rangeslider.$set(rangeslider_changes);
		},
		i(local) {
			if (current) return;
			transition_in(rangeslider.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(rangeslider.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(rangeslider, detaching);
		}
	};
}

// (20:0) <ViewContainer {title}>
function create_default_slot$d(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$d, create_else_block$9];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*continuous*/ ctx[11]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$l(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$d] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, $min, $max, $step, range, float, vertical, pips, pipstep, formatter, $values, continuous*/ 327648) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$l($$self, $$props, $$invalidate) {
	let $values,
		$$unsubscribe_values = noop$2,
		$$subscribe_values = () => ($$unsubscribe_values(), $$unsubscribe_values = subscribe(values, $$value => $$invalidate(12, $values = $$value)), values);

	let $min,
		$$unsubscribe_min = noop$2,
		$$subscribe_min = () => ($$unsubscribe_min(), $$unsubscribe_min = subscribe(min, $$value => $$invalidate(13, $min = $$value)), min);

	let $max,
		$$unsubscribe_max = noop$2,
		$$subscribe_max = () => ($$unsubscribe_max(), $$unsubscribe_max = subscribe(max, $$value => $$invalidate(14, $max = $$value)), max);

	let $step,
		$$unsubscribe_step = noop$2,
		$$subscribe_step = () => ($$unsubscribe_step(), $$unsubscribe_step = subscribe(step, $$value => $$invalidate(15, $step = $$value)), step);

	$$self.$$.on_destroy.push(() => $$unsubscribe_values());
	$$self.$$.on_destroy.push(() => $$unsubscribe_min());
	$$self.$$.on_destroy.push(() => $$unsubscribe_max());
	$$self.$$.on_destroy.push(() => $$unsubscribe_step());
	let { title } = $$props;
	let { values } = $$props;
	$$subscribe_values();
	let { min } = $$props;
	$$subscribe_min();
	let { max } = $$props;
	$$subscribe_max();
	let { step } = $$props;
	$$subscribe_step();
	let { range } = $$props;
	let { float } = $$props;
	let { vertical } = $$props;
	let { pips } = $$props;
	let { pipstep } = $$props;
	let { formatter } = $$props;
	let { continuous } = $$props;

	function dispatchValues({ detail }) {
		values.set(detail.values);
	}

	function rangeslider_values_binding(value) {
		$values = value;
		values.set($values);
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('values' in $$props) $$subscribe_values($$invalidate(1, values = $$props.values));
		if ('min' in $$props) $$subscribe_min($$invalidate(2, min = $$props.min));
		if ('max' in $$props) $$subscribe_max($$invalidate(3, max = $$props.max));
		if ('step' in $$props) $$subscribe_step($$invalidate(4, step = $$props.step));
		if ('range' in $$props) $$invalidate(5, range = $$props.range);
		if ('float' in $$props) $$invalidate(6, float = $$props.float);
		if ('vertical' in $$props) $$invalidate(7, vertical = $$props.vertical);
		if ('pips' in $$props) $$invalidate(8, pips = $$props.pips);
		if ('pipstep' in $$props) $$invalidate(9, pipstep = $$props.pipstep);
		if ('formatter' in $$props) $$invalidate(10, formatter = $$props.formatter);
		if ('continuous' in $$props) $$invalidate(11, continuous = $$props.continuous);
	};

	return [
		title,
		values,
		min,
		max,
		step,
		range,
		float,
		vertical,
		pips,
		pipstep,
		formatter,
		continuous,
		$values,
		$min,
		$max,
		$step,
		dispatchValues,
		rangeslider_values_binding
	];
}

class Slider_view extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$l, create_fragment$l, safe_not_equal, {
			title: 0,
			values: 1,
			min: 2,
			max: 3,
			step: 4,
			range: 5,
			float: 6,
			vertical: 7,
			pips: 8,
			pipstep: 9,
			formatter: 10,
			continuous: 11
		});
	}
}

function round$2(value, exp) {
    if (typeof exp === 'undefined' || +exp === 0)
        return Math.round(value);
    let v = +value;
    const e = +exp;
    if (isNaN(v) || !(typeof e === 'number' && e % 1 === 0))
        return NaN;
    // Shift
    let vv = v.toString().split('e');
    v = Math.round(+(vv[0] + 'e' + (vv[1] ? +vv[1] + e : e)));
    // Shift back
    vv = v.toString().split('e');
    return +(vv[0] + 'e' + (vv[1] ? +vv[1] - e : -e));
}
let Slider$1 = class Slider extends Component$1 {
    constructor({ values = [0.2], min = 0, max = 1, step = 0.01, range = 'min', float = true, vertical = false, pips = false, pipstep = undefined, formatter = (x) => round$2(x, 3), continuous = true, } = {}) {
        super();
        this.title = 'slider';
        this.$values = new Stream(values, true);
        this.$min = new Stream(min, true);
        this.$max = new Stream(max, true);
        this.$step = new Stream(step, true);
        this.range = range;
        this.float = float;
        this.vertical = vertical;
        this.pips = pips;
        this.pipstep = pipstep !== undefined ? pipstep : Math.floor((max - min) / (10 * step));
        this.formatter = formatter;
        this.continuous = continuous;
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Slider_view({
            target: t,
            props: {
                title: this.title,
                values: this.$values,
                min: this.$min,
                max: this.$max,
                step: this.$step,
                range: this.range,
                float: this.float,
                vertical: this.vertical,
                pips: this.pips,
                pipstep: this.pipstep,
                formatter: this.formatter,
                continuous: this.continuous,
            },
        });
    }
};

function slider(...args) {
    return new Slider$1(...args);
}

/* src/components/text-area/text-area.view.svelte generated by Svelte v3.59.1 */

function create_default_slot$c(ctx) {
	let div;
	let textarea;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			textarea = element("textarea");
			attr(textarea, "class", "w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none svelte-1nngj94");
			attr(textarea, "placeholder", /*placeholder*/ ctx[2]);
			textarea.disabled = /*$disabled*/ ctx[4];
			attr(div, "class", "w-full svelte-1nngj94");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, textarea);
			set_input_value(textarea, /*$value*/ ctx[5]);

			if (!mounted) {
				dispose = listen(textarea, "input", /*textarea_input_handler*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*placeholder*/ 4) {
				attr(textarea, "placeholder", /*placeholder*/ ctx[2]);
			}

			if (dirty & /*$disabled*/ 16) {
				textarea.disabled = /*$disabled*/ ctx[4];
			}

			if (dirty & /*$value*/ 32) {
				set_input_value(textarea, /*$value*/ ctx[5]);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment$k(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$c] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, placeholder, $disabled, $value*/ 180) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$k($$self, $$props, $$invalidate) {
	let $disabled,
		$$unsubscribe_disabled = noop$2,
		$$subscribe_disabled = () => ($$unsubscribe_disabled(), $$unsubscribe_disabled = subscribe(disabled, $$value => $$invalidate(4, $disabled = $$value)), disabled);

	let $value,
		$$unsubscribe_value = noop$2,
		$$subscribe_value = () => ($$unsubscribe_value(), $$unsubscribe_value = subscribe(value, $$value => $$invalidate(5, $value = $$value)), value);

	$$self.$$.on_destroy.push(() => $$unsubscribe_disabled());
	$$self.$$.on_destroy.push(() => $$unsubscribe_value());
	let { title } = $$props;
	let { value } = $$props;
	$$subscribe_value();
	let { placeholder } = $$props;
	let { disabled } = $$props;
	$$subscribe_disabled();

	function textarea_input_handler() {
		$value = this.value;
		value.set($value);
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('value' in $$props) $$subscribe_value($$invalidate(1, value = $$props.value));
		if ('placeholder' in $$props) $$invalidate(2, placeholder = $$props.placeholder);
		if ('disabled' in $$props) $$subscribe_disabled($$invalidate(3, disabled = $$props.disabled));
	};

	return [title, value, placeholder, disabled, $disabled, $value, textarea_input_handler];
}

class Text_area_view extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$k, create_fragment$k, safe_not_equal, {
			title: 0,
			value: 1,
			placeholder: 2,
			disabled: 3
		});
	}
}

class TextArea extends Component$1 {
    constructor(defaultValue = '', placeholder = '') {
        super();
        this.title = 'text area';
        this.$disabled = new Stream(false, true);
        this.$value = new Stream(defaultValue, true);
        this.placeholder = placeholder;
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Text_area_view({
            target: t,
            props: {
                title: this.title,
                value: this.$value,
                placeholder: this.placeholder,
                disabled: this.$disabled,
            },
        });
    }
}

function textArea(...args) {
    return new TextArea(...args);
}

/* src/components/text-input/text-input.view.svelte generated by Svelte v3.59.1 */

function create_default_slot$b(ctx) {
	let div1;
	let div0;
	let input;
	let updating_value;
	let current;

	function input_value_binding(value) {
		/*input_value_binding*/ ctx[5](value);
	}

	let input_props = {
		type: "text",
		placeholder: "Enter a label..",
		disabled: /*$disabled*/ ctx[4]
	};

	if (/*$value*/ ctx[3] !== void 0) {
		input_props.value = /*$value*/ ctx[3];
	}

	input = new Input({ props: input_props });
	binding_callbacks.push(() => bind(input, 'value', input_value_binding));

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			create_component(input.$$.fragment);
			attr(div0, "class", "md:flex md:items-center mb-2");
			attr(div1, "class", "w-full max-w-sm");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			mount_component(input, div0, null);
			current = true;
		},
		p(ctx, dirty) {
			const input_changes = {};
			if (dirty & /*$disabled*/ 16) input_changes.disabled = /*$disabled*/ ctx[4];

			if (!updating_value && dirty & /*$value*/ 8) {
				updating_value = true;
				input_changes.value = /*$value*/ ctx[3];
				add_flush_callback(() => updating_value = false);
			}

			input.$set(input_changes);
		},
		i(local) {
			if (current) return;
			transition_in(input.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(input.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(input);
		}
	};
}

function create_fragment$j(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$b] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, $disabled, $value*/ 88) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$j($$self, $$props, $$invalidate) {
	let $value,
		$$unsubscribe_value = noop$2,
		$$subscribe_value = () => ($$unsubscribe_value(), $$unsubscribe_value = subscribe(value, $$value => $$invalidate(3, $value = $$value)), value);

	let $disabled,
		$$unsubscribe_disabled = noop$2,
		$$subscribe_disabled = () => ($$unsubscribe_disabled(), $$unsubscribe_disabled = subscribe(disabled, $$value => $$invalidate(4, $disabled = $$value)), disabled);

	$$self.$$.on_destroy.push(() => $$unsubscribe_value());
	$$self.$$.on_destroy.push(() => $$unsubscribe_disabled());
	let { title } = $$props;
	let { value } = $$props;
	$$subscribe_value();
	let { disabled } = $$props;
	$$subscribe_disabled();

	function input_value_binding(value$1) {
		$value = value$1;
		value.set($value);
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('value' in $$props) $$subscribe_value($$invalidate(1, value = $$props.value));
		if ('disabled' in $$props) $$subscribe_disabled($$invalidate(2, disabled = $$props.disabled));
	};

	return [title, value, disabled, $value, $disabled, input_value_binding];
}

class Text_input_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$j, create_fragment$j, safe_not_equal, { title: 0, value: 1, disabled: 2 });
	}
}

class TextInput extends Component$1 {
    constructor(defaultValue) {
        super();
        this.title = 'text input';
        this.$value = new Stream('', true);
        this.$disabled = new Stream(false, true);
        if (defaultValue !== undefined) {
            this.$value.set(defaultValue);
        }
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Text_input_view({
            target: t,
            props: {
                title: this.title,
                value: this.$value,
                disabled: this.$disabled,
            },
        });
    }
}

function textInput(...args) {
    return new TextInput(...args);
}
/** @deprecated */
function textField() {
    const e = new Error('textField has been renamed to textInput');
    e.name = 'Deprecation Notice';
    throwError(e);
    return textInput();
}

/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
getGlobalTensorClass().prototype.mul = function (b) {
    this.throwIfDisposed();
    return mul(this, b);
};

/* src/components/tfjs-model/tfjs-model.view.svelte generated by Svelte v3.59.1 */

function create_else_block$8(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "No model loaded";
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (19:34) 
function create_if_block_1$8(ctx) {
	let p;
	let t0;
	let t1;
	let t2;

	return {
		c() {
			p = element("p");
			t0 = text$1("Model Loaded from ");
			t1 = text$1(/*source*/ ctx[2]);
			t2 = text$1(".");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, t1);
			append(p, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*source*/ 4) set_data(t1, /*source*/ ctx[2]);
		},
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (17:4) {#if status === 'loading'}
function create_if_block$c(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "Loading Model...";
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(p);
		}
	};
}

// (15:0) <ViewContainer {title} loading={status === 'loading'}>
function create_default_slot$a(ctx) {
	let div;

	function select_block_type(ctx, dirty) {
		if (/*status*/ ctx[3] === 'loading') return create_if_block$c;
		if (/*status*/ ctx[3] === 'loaded') return create_if_block_1$8;
		return create_else_block$8;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div = element("div");
			if_block.c();
			attr(div, "class", "p-2 text-sm text-gray-600");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_block.m(div, null);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if_block.d();
		}
	};
}

function create_fragment$i(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				loading: /*status*/ ctx[3] === 'loading',
				$$slots: { default: [create_default_slot$a] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];
			if (dirty & /*status*/ 8) viewcontainer_changes.loading = /*status*/ ctx[3] === 'loading';

			if (dirty & /*$$scope, status, source*/ 268) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$i($$self, $$props, $$invalidate) {
	let status;
	let source;

	let $training,
		$$unsubscribe_training = noop$2,
		$$subscribe_training = () => ($$unsubscribe_training(), $$unsubscribe_training = subscribe(training, $$value => $$invalidate(7, $training = $$value)), training);

	$$self.$$.on_destroy.push(() => $$unsubscribe_training());
	var _a, _b, _c;
	let { title } = $$props;
	let { training } = $$props;
	$$subscribe_training();

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('training' in $$props) $$subscribe_training($$invalidate(1, training = $$props.training));
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$training*/ 128) {
			$$invalidate(3, status = $training.status);
		}

		if ($$self.$$.dirty & /*$training, _a, _b, _c*/ 240) {
			$$invalidate(2, source = !($$invalidate(4, _a = $training.data) === null || _a === void 0
			? void 0
			: _a.source)
			? 'unknown source'
			: $training.data.source === 'datastore'
				? `datastore at ${$$invalidate(5, _b = $training.data) === null || _b === void 0
					? void 0
					: _b.url}`
				: $training.data.source === 'url'
					? `url ${$$invalidate(6, _c = $training.data) === null || _c === void 0
						? void 0
						: _c.url}`
					: 'files');
		}
	};

	return [title, training, source, status, _a, _b, _c, $training];
}

class Tfjs_model_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$i, create_fragment$i, safe_not_equal, { title: 0, training: 1 });
	}
}

function isInputType(t, tt) {
    return t === tt;
}
function isPredictionType(t, tt) {
    return t === tt;
}
class TFJSModel extends TFJSBaseModel {
    constructor({ inputType, taskType, segmentationOptions = { applyArgmax: false, output: 'image' }, }) {
        super();
        this.title = 'tfjs model';
        this.parameters = {};
        this.segmentationOptions = { applyArgmax: false, output: 'image', ...segmentationOptions };
        this.inputType = inputType;
        this.taskType = taskType;
        this.$training.subscribe(({ status }) => {
            if (status === 'loaded') {
                this.inputShape = this.model.inputs[0].shape.map((x) => (x && x > 0 ? x : 1));
            }
        });
    }
    // eslint-disable-next-line class-methods-use-this
    train() {
        throw new TrainingError('Model `TfModel` cannot be trained');
    }
    async predict(input) {
        if (!this.model || this.$training.get().status !== 'loaded') {
            throw new Error('Model is not loaded');
        }
        const outputs = tidy(() => {
            const inputTensor = this.preprocess(input);
            return this.model.predict(inputTensor.expandDims(0)).gather(0);
        });
        const result = await this.postprocess(outputs);
        outputs.dispose();
        return result;
    }
    preprocess(input) {
        if (isInputType(this.inputType, 'image')) {
            return this.preprocessImage(input);
        }
        if (isInputType(this.inputType, 'generic')) {
            return tensor(input);
        }
        throw new Error('Invalid input data type');
    }
    preprocessImage(img) {
        return image.resizeBilinear(browser.fromPixels(img), [
            this.inputShape[1],
            this.inputShape[2],
        ]);
    }
    async postprocess(outputs) {
        if (isPredictionType(this.taskType, 'classification')) {
            // throw new Error('Classifier is not yet implemented');
            const getLabel = this.labels
                ? (index) => this.labels[index]
                : (index) => index.toString();
            const likeliest = tidy(() => outputs.argMax().dataSync()[0]);
            const confidences = outputs
                .arraySync()
                .reduce((x, y, i) => ({ ...x, [getLabel(i)]: y }), {});
            return {
                label: getLabel(likeliest),
                confidences,
            };
        }
        if (isPredictionType(this.taskType, 'segmentation')) {
            const [width, height] = outputs.shape;
            const processedOutputs = this.segmentationOptions.applyArgmax
                ? tidy(() => outputs.argMax(-1).mul(0.5))
                : outputs;
            const mask = this.segmentationOptions.output === 'image'
                ? new ImageData(await browser.toPixels(processedOutputs), width, height)
                : await processedOutputs.array();
            if (this.segmentationOptions.applyArgmax) {
                processedOutputs.dispose();
            }
            return mask;
        }
        if (isPredictionType(this.taskType, 'generic')) {
            return outputs.array();
        }
        throw new Error('Invalid output data type');
    }
    async loadFromFiles(files) {
        this.$training.set({
            status: 'loading',
        });
        await ready();
        try {
            const jsonFiles = files.filter((x) => x.name.includes('.json'));
            const weightFiles = files.filter((x) => x.name.includes('.bin'));
            if (jsonFiles.length !== 1) {
                const e = new Error('The provided files are not compatible with this model');
                e.name = 'File upload error';
                throw e;
            }
            this.$training.set({ status: 'loading' });
            if (files.length) {
                const jsonData = await readJSONFile(jsonFiles[0]);
                this.loadFn = jsonData.format === 'graph-model' ? loadGraphModel : loadLayersModel;
                this.model = await this.loadFn(browserFiles([jsonFiles[0], ...weightFiles]));
                await this.warmup();
                this.$training.set({
                    status: 'loaded',
                    data: {
                        source: 'file',
                    },
                });
            }
        }
        catch (error) {
            this.$training.set({
                status: 'error',
            });
            throw error;
        }
    }
    async loadFromUrl(url) {
        this.$training.set({
            status: 'loading',
        });
        await ready();
        try {
            const modelJson = await fetch(url).then((res) => res.json());
            this.loadFn = modelJson.format === 'graph-model' ? loadGraphModel : loadLayersModel;
            this.model = await this.loadFn(http(url));
            await this.warmup();
            this.$training.set({
                status: 'loaded',
                data: {
                    source: 'url',
                    url,
                },
            });
        }
        catch (error) {
            // eslint-disable-next-line no-console
            console.log('[tf-model] Loading error', error);
            this.$training.set({
                status: 'error',
            });
            throw error;
        }
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Tfjs_model_view({
            target: t,
            props: {
                title: this.title,
                training: this.$training,
            },
        });
    }
}
__decorate([
    Catch
    // eslint-disable-next-line class-methods-use-this
], TFJSModel.prototype, "train", null);
__decorate([
    Catch
], TFJSModel.prototype, "predict", null);
__decorate([
    Catch
], TFJSModel.prototype, "preprocess", null);
__decorate([
    Catch
], TFJSModel.prototype, "preprocessImage", null);
__decorate([
    Catch
], TFJSModel.prototype, "postprocess", null);
__decorate([
    Catch
], TFJSModel.prototype, "loadFromFiles", null);
__decorate([
    Catch
], TFJSModel.prototype, "loadFromUrl", null);

function tfjsModel(options) {
    return new TFJSModel(options);
}

/* src/components/toggle/toggle.view.svelte generated by Svelte v3.59.1 */

function create_default_slot$9(ctx) {
	let switch_1;
	let updating_checked;
	let current;

	function switch_1_checked_binding(value) {
		/*switch_1_checked_binding*/ ctx[7](value);
	}

	let switch_1_props = {
		disabled: /*$disabled*/ ctx[5],
		text: /*$text*/ ctx[6]
	};

	if (/*$checked*/ ctx[4] !== void 0) {
		switch_1_props.checked = /*$checked*/ ctx[4];
	}

	switch_1 = new Switch({ props: switch_1_props });
	binding_callbacks.push(() => bind(switch_1, 'checked', switch_1_checked_binding));

	return {
		c() {
			create_component(switch_1.$$.fragment);
		},
		m(target, anchor) {
			mount_component(switch_1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const switch_1_changes = {};
			if (dirty & /*$disabled*/ 32) switch_1_changes.disabled = /*$disabled*/ ctx[5];
			if (dirty & /*$text*/ 64) switch_1_changes.text = /*$text*/ ctx[6];

			if (!updating_checked && dirty & /*$checked*/ 16) {
				updating_checked = true;
				switch_1_changes.checked = /*$checked*/ ctx[4];
				add_flush_callback(() => updating_checked = false);
			}

			switch_1.$set(switch_1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(switch_1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(switch_1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(switch_1, detaching);
		}
	};
}

function create_fragment$h(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$9] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, $disabled, $text, $checked*/ 368) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$h($$self, $$props, $$invalidate) {
	let $checked,
		$$unsubscribe_checked = noop$2,
		$$subscribe_checked = () => ($$unsubscribe_checked(), $$unsubscribe_checked = subscribe(checked, $$value => $$invalidate(4, $checked = $$value)), checked);

	let $disabled,
		$$unsubscribe_disabled = noop$2,
		$$subscribe_disabled = () => ($$unsubscribe_disabled(), $$unsubscribe_disabled = subscribe(disabled, $$value => $$invalidate(5, $disabled = $$value)), disabled);

	let $text,
		$$unsubscribe_text = noop$2,
		$$subscribe_text = () => ($$unsubscribe_text(), $$unsubscribe_text = subscribe(text, $$value => $$invalidate(6, $text = $$value)), text);

	$$self.$$.on_destroy.push(() => $$unsubscribe_checked());
	$$self.$$.on_destroy.push(() => $$unsubscribe_disabled());
	$$self.$$.on_destroy.push(() => $$unsubscribe_text());
	let { title } = $$props;
	let { text } = $$props;
	$$subscribe_text();
	let { checked } = $$props;
	$$subscribe_checked();
	let { disabled } = $$props;
	$$subscribe_disabled();

	function switch_1_checked_binding(value) {
		$checked = value;
		checked.set($checked);
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('text' in $$props) $$subscribe_text($$invalidate(1, text = $$props.text));
		if ('checked' in $$props) $$subscribe_checked($$invalidate(2, checked = $$props.checked));
		if ('disabled' in $$props) $$subscribe_disabled($$invalidate(3, disabled = $$props.disabled));
	};

	return [
		title,
		text,
		checked,
		disabled,
		$checked,
		$disabled,
		$text,
		switch_1_checked_binding
	];
}

class Toggle_view extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$h, create_fragment$h, safe_not_equal, {
			title: 0,
			text: 1,
			checked: 2,
			disabled: 3
		});
	}
}

class Toggle extends Component$1 {
    constructor(text = 'toggle me') {
        super();
        this.title = 'toggle';
        this.$checked = new Stream(false, true);
        this.$disabled = new Stream(false, true);
        this.$text = new Stream(text, true);
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Toggle_view({
            target: t,
            props: {
                title: this.title,
                text: this.$text,
                checked: this.$checked,
                disabled: this.$disabled,
            },
        });
    }
}

function toggle(...args) {
    return new Toggle(...args);
}

const preventConcurrentCalls = (propertyName) => function preventConcurrentCallsDecorator(target, propertyKey, descriptor) {
    const originalMethod = descriptor.value;
    // eslint-disable-next-line no-param-reassign
    descriptor.value = function checkMethod(...args) {
        const res = this[propertyName].then(() => originalMethod.apply(this, args));
        this[propertyName] = res;
        return res;
    };
    return descriptor;
};

/* src/components/training-history/RunMeta.svelte generated by Svelte v3.59.1 */

function create_else_block$7(ctx) {
	let div;

	return {
		c() {
			div = element("div");

			div.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7l4-4m0 0l4 4m-4-4v18"></path></svg> 
    <p>Select one or several runs to display information</p>`;

			attr(div, "class", "empty svelte-yj1ygt");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop$2,
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (11:0) {#if runs.length > 0}
function create_if_block$b(ctx) {
	let table;
	let current;

	table = new Table({
			props: {
				columns: [{ name: 'field' }, .../*columns*/ ctx[2]],
				provider: /*provider*/ ctx[1],
				selectable: false
			}
		});

	return {
		c() {
			create_component(table.$$.fragment);
		},
		m(target, anchor) {
			mount_component(table, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const table_changes = {};
			if (dirty & /*columns*/ 4) table_changes.columns = [{ name: 'field' }, .../*columns*/ ctx[2]];
			if (dirty & /*provider*/ 2) table_changes.provider = /*provider*/ ctx[1];
			table.$set(table_changes);
		},
		i(local) {
			if (current) return;
			transition_in(table.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(table.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(table, detaching);
		}
	};
}

function create_fragment$g(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block$b, create_else_block$7];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*runs*/ ctx[0].length > 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$g($$self, $$props, $$invalidate) {
	let columns;
	let rows;
	let data;
	let provider;
	let { runs } = $$props;

	$$self.$$set = $$props => {
		if ('runs' in $$props) $$invalidate(0, runs = $$props.runs);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*runs*/ 1) {
			$$invalidate(2, columns = runs.map((_, i) => ({ name: `Run ${i + 1}` })));
		}

		if ($$self.$$.dirty & /*runs*/ 1) {
			$$invalidate(4, rows = runs.length > 0
			? Object.keys(runs[0]).filter(x => x !== 'logs')
			: []);
		}

		if ($$self.$$.dirty & /*rows, runs*/ 17) {
			$$invalidate(3, data = rows.map(field => runs.map((x, i) => ({ [`Run ${i + 1}`]: x[field] })).reduce((o, x) => ({ ...o, ...x }), { field })));
		}

		if ($$self.$$.dirty & /*data*/ 8) {
			$$invalidate(1, provider = new TableArrayProvider({ data }));
		}
	};

	return [runs, provider, columns, data, rows];
}

class RunMeta extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$g, create_fragment$g, safe_not_equal, { runs: 0 });
	}
}

/* src/components/training-plot/training-plot.view.svelte generated by Svelte v3.59.1 */

function get_each_context$6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	child_ctx[6] = list;
	child_ctx[7] = i;
	return child_ctx;
}

// (23:2) {#each Object.values(charts) as chart, i}
function create_each_block$6(ctx) {
	let div;
	let i = /*i*/ ctx[7];
	const assign_div = () => /*div_binding*/ ctx[3](div, i);
	const unassign_div = () => /*div_binding*/ ctx[3](null, i);

	return {
		c() {
			div = element("div");
			attr(div, "class", "card inner-card xl:flex-1 svelte-1o4ebpu");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			assign_div();
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (i !== /*i*/ ctx[7]) {
				unassign_div();
				i = /*i*/ ctx[7];
				assign_div();
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			unassign_div();
		}
	};
}

function create_fragment$f(ctx) {
	let div;
	let each_value = Object.values(/*charts*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "grid grid-cols-1 gap-1");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			/*div_binding_1*/ ctx[4](div);
		},
		p(ctx, [dirty]) {
			if (dirty & /*refs, charts*/ 5) {
				each_value = Object.values(/*charts*/ ctx[0]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$6(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$6(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			/*div_binding_1*/ ctx[4](null);
		}
	};
}

function instance$f($$self, $$props, $$invalidate) {
	let { charts } = $$props;
	let container;
	let refs = [];

	onMount(async () => {
		await tick$1();
		await tick$1();

		if (Object.keys(charts).length > 1 && container.clientWidth > 700) {
			$$invalidate(1, container.style.gridTemplateColumns = 'repeat(2, minmax(0, 1fr))', container);
		}

		for (const [i, chart] of Object.values(charts).entries()) {
			chart.mount(refs[i]);
		}
	});

	onDestroy(() => {
		for (const chart of Object.values(charts)) {
			chart.destroy();
		}
	});

	function div_binding($$value, i) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			refs[i] = $$value;
			$$invalidate(2, refs);
		});
	}

	function div_binding_1($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			container = $$value;
			$$invalidate(1, container);
		});
	}

	$$self.$$set = $$props => {
		if ('charts' in $$props) $$invalidate(0, charts = $$props.charts);
	};

	return [charts, container, refs, div_binding, div_binding_1];
}

class Training_plot_view extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$f, create_fragment$f, safe_not_equal, { charts: 0 });
	}
}

class TrainingPlot extends Component$1 {
    constructor(model, logs = {
        loss: ['loss', 'lossVal'],
        accuracy: ['acc', 'accVal'],
    }) {
        super();
        this.model = model;
        this.title = 'training plot';
        this.charts = {};
        if (!model) {
            const e = new Error('[training plot] No model was provided');
            e.name = 'Component Compatibility Error';
            throwError(e);
        }
        if (!model.$training) {
            const e = new Error('[training plot] The provided model is incompatible with the training plot component, missing `$training` stream');
            e.name = 'Component Compatibility Error';
            throwError(e);
        }
        let processedLogs = logs;
        if (typeof logs === 'string') {
            processedLogs = [logs];
        }
        if (Array.isArray(processedLogs)) {
            processedLogs = processedLogs.reduce((x, y) => ({ ...x, [y]: y }), {});
        }
        const streams = {};
        for (const [key, val] of Object.entries(processedLogs)) {
            const x = Array.isArray(val) ? val : [val];
            this.charts[key] = genericChart({
                preset: 'line-fast',
                options: {
                    xlabel: 'Epoch',
                    ylabel: key,
                },
            });
            for (const y of x) {
                if (!Object.keys(streams).includes(y)) {
                    streams[y] = new Stream([], true);
                }
                this.charts[key].addSeries(streams[y], y);
            }
            this.charts[key].title = key;
        }
        function resetCharts() {
            for (const stream of Object.values(streams)) {
                stream.set([]);
            }
        }
        model.$training.subscribe((x) => {
            if (x.status === 'start') {
                resetCharts();
            }
            else if (x.data) {
                for (const [key, val] of Object.entries(x.data)) {
                    if (!Object.keys(streams).includes(key))
                        return;
                    if (Array.isArray(val)) {
                        streams[key].set(val.map((y, j) => ({ x: j + 1, y })));
                    }
                    else {
                        streams[key].set(streams[key].get().concat([{ x: streams[key].get().length + 1, y: val }]));
                    }
                }
            }
        });
        this.start();
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Training_plot_view({
            target: t,
            props: {
                charts: this.charts,
            },
        });
    }
}

function trainingPlot(...args) {
    return new TrainingPlot(...args);
}

/* src/components/training-history/RunGraphs.svelte generated by Svelte v3.59.1 */

function create_else_block$6(ctx) {
	let div;

	return {
		c() {
			div = element("div");

			div.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7l4-4m0 0l4 4m-4-4v18"></path></svg> 
    <p>Select one or several runs to display information</p>`;

			attr(div, "class", "empty svelte-yj1ygt");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (36:0) {#if logs.length > 0}
function create_if_block$a(ctx) {
	let div;

	return {
		c() {
			div = element("div");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			/*div_binding*/ ctx[7](div);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(div);
			/*div_binding*/ ctx[7](null);
		}
	};
}

function create_fragment$e(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*logs*/ ctx[0].length > 0) return create_if_block$a;
		return create_else_block$6;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$e($$self, $$props, $$invalidate) {
	let indexedLogs;
	let logSpec;
	let { names } = $$props;
	let { logs } = $$props;
	let chartElt;
	let logKeys;
	let chart;

	onDestroy(() => {
		if (chart) {
			chart.destroy();
		}
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			chartElt = $$value;
			$$invalidate(1, chartElt);
		});
	}

	$$self.$$set = $$props => {
		if ('names' in $$props) $$invalidate(2, names = $$props.names);
		if ('logs' in $$props) $$invalidate(0, logs = $$props.logs);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*logs, logKeys*/ 9) {
			{
				$$invalidate(3, logKeys = Array.from(new Set(logs.map(Object.keys).flat())));
				logKeys.sort();
			}
		}

		if ($$self.$$.dirty & /*logs, names*/ 5) {
			$$invalidate(6, indexedLogs = logs.map((x, i) => Object.entries(x).reduce((a, [key, val]) => ({ ...a, [`${key} (${names[i]})`]: val }), {})).reduce((a, b) => ({ ...a, ...b }), {}));
		}

		if ($$self.$$.dirty & /*logKeys, indexedLogs*/ 72) {
			$$invalidate(5, logSpec = logKeys.reduce(
				(res, key) => ({
					...res,
					[key]: Object.keys(indexedLogs).filter(k => k.startsWith(`${key} (`))
				}),
				{}
			));
		}

		if ($$self.$$.dirty & /*chart, indexedLogs, logSpec, chartElt*/ 114) {
			{
				if (chart) {
					chart.destroy();
				}

				$$invalidate(4, chart = trainingPlot(
					{
						$training: new Stream({ status: 'success', data: indexedLogs }, true)
					},
					logSpec
				));

				chart.mount(chartElt);
			}
		}
	};

	return [logs, chartElt, names, logKeys, chart, logSpec, indexedLogs, div_binding];
}

class RunGraphs extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$e, create_fragment$e, safe_not_equal, { names: 2, logs: 0 });
	}
}

/* src/components/training-history/training-history.view.svelte generated by Svelte v3.59.1 */

function get_each_context$5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	child_ctx[15] = i;
	return child_ctx;
}

// (73:6) <Tab>
function create_default_slot_10(ctx) {
	let t;

	return {
		c() {
			t = text$1("Graphs");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (74:6) <Tab>
function create_default_slot_9(ctx) {
	let t;

	return {
		c() {
			t = text$1("Metadata");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (75:6) <Tab>
function create_default_slot_8(ctx) {
	let t;

	return {
		c() {
			t = text$1("Parameters");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (76:6) <Tab>
function create_default_slot_7(ctx) {
	let t;

	return {
		c() {
			t = text$1("Model Summary");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (72:4) <TabList>
function create_default_slot_6(ctx) {
	let tab0;
	let t0;
	let tab1;
	let t1;
	let tab2;
	let t2;
	let tab3;
	let current;

	tab0 = new Tab({
			props: {
				$$slots: { default: [create_default_slot_10] },
				$$scope: { ctx }
			}
		});

	tab1 = new Tab({
			props: {
				$$slots: { default: [create_default_slot_9] },
				$$scope: { ctx }
			}
		});

	tab2 = new Tab({
			props: {
				$$slots: { default: [create_default_slot_8] },
				$$scope: { ctx }
			}
		});

	tab3 = new Tab({
			props: {
				$$slots: { default: [create_default_slot_7] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(tab0.$$.fragment);
			t0 = space();
			create_component(tab1.$$.fragment);
			t1 = space();
			create_component(tab2.$$.fragment);
			t2 = space();
			create_component(tab3.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tab0, target, anchor);
			insert(target, t0, anchor);
			mount_component(tab1, target, anchor);
			insert(target, t1, anchor);
			mount_component(tab2, target, anchor);
			insert(target, t2, anchor);
			mount_component(tab3, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tab0_changes = {};

			if (dirty & /*$$scope*/ 65536) {
				tab0_changes.$$scope = { dirty, ctx };
			}

			tab0.$set(tab0_changes);
			const tab1_changes = {};

			if (dirty & /*$$scope*/ 65536) {
				tab1_changes.$$scope = { dirty, ctx };
			}

			tab1.$set(tab1_changes);
			const tab2_changes = {};

			if (dirty & /*$$scope*/ 65536) {
				tab2_changes.$$scope = { dirty, ctx };
			}

			tab2.$set(tab2_changes);
			const tab3_changes = {};

			if (dirty & /*$$scope*/ 65536) {
				tab3_changes.$$scope = { dirty, ctx };
			}

			tab3.$set(tab3_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tab0.$$.fragment, local);
			transition_in(tab1.$$.fragment, local);
			transition_in(tab2.$$.fragment, local);
			transition_in(tab3.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tab0.$$.fragment, local);
			transition_out(tab1.$$.fragment, local);
			transition_out(tab2.$$.fragment, local);
			transition_out(tab3.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tab0, detaching);
			if (detaching) detach(t0);
			destroy_component(tab1, detaching);
			if (detaching) detach(t1);
			destroy_component(tab2, detaching);
			if (detaching) detach(t2);
			destroy_component(tab3, detaching);
		}
	};
}

// (79:4) <TabPanel>
function create_default_slot_5(ctx) {
	let rungraphs;
	let current;

	rungraphs = new RunGraphs({
			props: {
				logs: /*$selection*/ ctx[4].map(func_1),
				names: /*$selection*/ ctx[4].map(func_2)
			}
		});

	return {
		c() {
			create_component(rungraphs.$$.fragment);
		},
		m(target, anchor) {
			mount_component(rungraphs, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const rungraphs_changes = {};
			if (dirty & /*$selection*/ 16) rungraphs_changes.logs = /*$selection*/ ctx[4].map(func_1);
			if (dirty & /*$selection*/ 16) rungraphs_changes.names = /*$selection*/ ctx[4].map(func_2);
			rungraphs.$set(rungraphs_changes);
		},
		i(local) {
			if (current) return;
			transition_in(rungraphs.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(rungraphs.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(rungraphs, detaching);
		}
	};
}

// (83:4) <TabPanel>
function create_default_slot_4(ctx) {
	let runmeta;
	let current;
	runmeta = new RunMeta({ props: { runs: /*$selection*/ ctx[4] } });

	return {
		c() {
			create_component(runmeta.$$.fragment);
		},
		m(target, anchor) {
			mount_component(runmeta, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const runmeta_changes = {};
			if (dirty & /*$selection*/ 16) runmeta_changes.runs = /*$selection*/ ctx[4];
			runmeta.$set(runmeta_changes);
		},
		i(local) {
			if (current) return;
			transition_in(runmeta.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(runmeta.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(runmeta, detaching);
		}
	};
}

// (87:4) <TabPanel>
function create_default_slot_3(ctx) {
	let runmeta;
	let current;

	runmeta = new RunMeta({
			props: { runs: /*$selection*/ ctx[4].map(func_3) }
		});

	return {
		c() {
			create_component(runmeta.$$.fragment);
		},
		m(target, anchor) {
			mount_component(runmeta, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const runmeta_changes = {};
			if (dirty & /*$selection*/ 16) runmeta_changes.runs = /*$selection*/ ctx[4].map(func_3);
			runmeta.$set(runmeta_changes);
		},
		i(local) {
			if (current) return;
			transition_in(runmeta.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(runmeta.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(runmeta, detaching);
		}
	};
}

// (93:8) {#each $selection.map((x) => x.model?.summary || 'No summary available') as summary, i}
function create_each_block$5(ctx) {
	let div1;
	let h2;
	let t0;
	let t1_value = /*i*/ ctx[15] + 1 + "";
	let t1;
	let t2;
	let div0;
	let pre;
	let t3_value = /*summary*/ ctx[13] + "";
	let t3;
	let br;
	let t4;

	return {
		c() {
			div1 = element("div");
			h2 = element("h2");
			t0 = text$1("Model ");
			t1 = text$1(t1_value);
			t2 = space();
			div0 = element("div");
			pre = element("pre");
			t3 = text$1(t3_value);
			br = element("br");
			t4 = space();
			attr(div0, "class", "summary svelte-y4izzs");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, h2);
			append(h2, t0);
			append(h2, t1);
			append(div1, t2);
			append(div1, div0);
			append(div0, pre);
			append(pre, t3);
			append(pre, br);
			append(div1, t4);
		},
		p(ctx, dirty) {
			if (dirty & /*$selection*/ 16 && t3_value !== (t3_value = /*summary*/ ctx[13] + "")) set_data(t3, t3_value);
		},
		d(detaching) {
			if (detaching) detach(div1);
		}
	};
}

// (91:4) <TabPanel>
function create_default_slot_2$3(ctx) {
	let div;
	let each_value = /*$selection*/ ctx[4].map(func_4);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "summaries svelte-y4izzs");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$selection*/ 16) {
				each_value = /*$selection*/ ctx[4].map(func_4);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$5(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$5(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (71:2) <Tabs>
function create_default_slot_1$7(ctx) {
	let tablist;
	let t0;
	let tabpanel0;
	let t1;
	let tabpanel1;
	let t2;
	let tabpanel2;
	let t3;
	let tabpanel3;
	let current;

	tablist = new TabList({
			props: {
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			}
		});

	tabpanel0 = new TabPanel({
			props: {
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			}
		});

	tabpanel1 = new TabPanel({
			props: {
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			}
		});

	tabpanel2 = new TabPanel({
			props: {
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			}
		});

	tabpanel3 = new TabPanel({
			props: {
				$$slots: { default: [create_default_slot_2$3] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(tablist.$$.fragment);
			t0 = space();
			create_component(tabpanel0.$$.fragment);
			t1 = space();
			create_component(tabpanel1.$$.fragment);
			t2 = space();
			create_component(tabpanel2.$$.fragment);
			t3 = space();
			create_component(tabpanel3.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tablist, target, anchor);
			insert(target, t0, anchor);
			mount_component(tabpanel0, target, anchor);
			insert(target, t1, anchor);
			mount_component(tabpanel1, target, anchor);
			insert(target, t2, anchor);
			mount_component(tabpanel2, target, anchor);
			insert(target, t3, anchor);
			mount_component(tabpanel3, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const tablist_changes = {};

			if (dirty & /*$$scope*/ 65536) {
				tablist_changes.$$scope = { dirty, ctx };
			}

			tablist.$set(tablist_changes);
			const tabpanel0_changes = {};

			if (dirty & /*$$scope, $selection*/ 65552) {
				tabpanel0_changes.$$scope = { dirty, ctx };
			}

			tabpanel0.$set(tabpanel0_changes);
			const tabpanel1_changes = {};

			if (dirty & /*$$scope, $selection*/ 65552) {
				tabpanel1_changes.$$scope = { dirty, ctx };
			}

			tabpanel1.$set(tabpanel1_changes);
			const tabpanel2_changes = {};

			if (dirty & /*$$scope, $selection*/ 65552) {
				tabpanel2_changes.$$scope = { dirty, ctx };
			}

			tabpanel2.$set(tabpanel2_changes);
			const tabpanel3_changes = {};

			if (dirty & /*$$scope, $selection*/ 65552) {
				tabpanel3_changes.$$scope = { dirty, ctx };
			}

			tabpanel3.$set(tabpanel3_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tablist.$$.fragment, local);
			transition_in(tabpanel0.$$.fragment, local);
			transition_in(tabpanel1.$$.fragment, local);
			transition_in(tabpanel2.$$.fragment, local);
			transition_in(tabpanel3.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tablist.$$.fragment, local);
			transition_out(tabpanel0.$$.fragment, local);
			transition_out(tabpanel1.$$.fragment, local);
			transition_out(tabpanel2.$$.fragment, local);
			transition_out(tabpanel3.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tablist, detaching);
			if (detaching) detach(t0);
			destroy_component(tabpanel0, detaching);
			if (detaching) detach(t1);
			destroy_component(tabpanel1, detaching);
			if (detaching) detach(t2);
			destroy_component(tabpanel2, detaching);
			if (detaching) detach(t3);
			destroy_component(tabpanel3, detaching);
		}
	};
}

// (56:0) <ViewContainer {title}>
function create_default_slot$8(ctx) {
	let table;
	let updating_selection;
	let t0;
	let br;
	let t1;
	let tabs;
	let current;

	function table_selection_binding(value) {
		/*table_selection_binding*/ ctx[10](value);
	}

	let table_props = {
		columns: /*columns*/ ctx[7],
		provider: /*provider*/ ctx[6],
		actions: [.../*actions*/ ctx[1].map(func), { name: 'delete', confirm: true }]
	};

	if (/*$selection*/ ctx[4] !== void 0) {
		table_props.selection = /*$selection*/ ctx[4];
	}

	table = new Table({ props: table_props });
	binding_callbacks.push(() => bind(table, 'selection', table_selection_binding));
	/*table_binding*/ ctx[11](table);
	table.$on("select", /*select_handler*/ ctx[12]);

	tabs = new Tabs({
			props: {
				$$slots: { default: [create_default_slot_1$7] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(table.$$.fragment);
			t0 = space();
			br = element("br");
			t1 = space();
			create_component(tabs.$$.fragment);
		},
		m(target, anchor) {
			mount_component(table, target, anchor);
			insert(target, t0, anchor);
			insert(target, br, anchor);
			insert(target, t1, anchor);
			mount_component(tabs, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const table_changes = {};
			if (dirty & /*actions*/ 2) table_changes.actions = [.../*actions*/ ctx[1].map(func), { name: 'delete', confirm: true }];

			if (!updating_selection && dirty & /*$selection*/ 16) {
				updating_selection = true;
				table_changes.selection = /*$selection*/ ctx[4];
				add_flush_callback(() => updating_selection = false);
			}

			table.$set(table_changes);
			const tabs_changes = {};

			if (dirty & /*$$scope, $selection*/ 65552) {
				tabs_changes.$$scope = { dirty, ctx };
			}

			tabs.$set(tabs_changes);
		},
		i(local) {
			if (current) return;
			transition_in(table.$$.fragment, local);
			transition_in(tabs.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(table.$$.fragment, local);
			transition_out(tabs.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			/*table_binding*/ ctx[11](null);
			destroy_component(table, detaching);
			if (detaching) detach(t0);
			if (detaching) detach(br);
			if (detaching) detach(t1);
			destroy_component(tabs, detaching);
		}
	};
}

function create_fragment$d(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$8] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, $selection, actions, mainTable*/ 65562) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

const func = name => typeof name === 'string' ? { name } : name;
const func_1 = x => x.logs;
const func_2 = x => x.name;
const func_3 = x => x.params;
const func_4 = x => x.model?.summary || 'No summary available';

function instance$d($$self, $$props, $$invalidate) {
	let $selection,
		$$unsubscribe_selection = noop$2,
		$$subscribe_selection = () => ($$unsubscribe_selection(), $$unsubscribe_selection = subscribe(selection, $$value => $$invalidate(4, $selection = $$value)), selection);

	$$self.$$.on_destroy.push(() => $$unsubscribe_selection());
	let { title } = $$props;
	let { service } = $$props;
	let { metrics } = $$props;
	let { actions } = $$props;
	let { selection } = $$props;
	$$subscribe_selection();
	const dispatch = createEventDispatcher();

	const provider = new TableServiceProvider({
			service,
			transform: {
				...metrics.reduce(
					(res, metricName) => ({
						...res,
						[metricName]: x => {
							if (metricName in x.logs) {
								return x.logs[metricName][x.logs[metricName].length - 1];
							}

							return 'metrics not found';
						}
					}),
					{}
				),
				...actions.reduce(
					(res, action) => ({
						...res,
						[typeof action === 'string' ? action : action.name]: () => typeof action === 'string' ? action : action.name
					}),
					{}
				)
			}
		});

	provider.data.subscribe(() => {
		selection.set([]);
	});

	const columns = [
		{ name: 'name', sortable: true },
		{
			name: 'start',
			sortable: true,
			type: 'date'
		},
		...metrics.map(metricName => ({ name: metricName })),
		{ name: 'epochs' },
		{ name: 'status' },
		...actions.map(action => ({
			name: typeof action === 'string' ? action : action.name,
			type: 'action'
		}))
	];

	let mainTable;

	onMount(async () => {
		await tick$1();
		await tick$1();

		for (const action of actions) {
			const name = typeof action === 'string' ? action : action.name;

			mainTable.$on(name, ({ detail }) => {
				dispatch(name, detail);
			});
		}
	});

	function table_selection_binding(value) {
		$selection = value;
		selection.set($selection);
	}

	function table_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			mainTable = $$value;
			$$invalidate(3, mainTable);
		});
	}

	const select_handler = ({ detail }) => dispatch('load', detail);

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('service' in $$props) $$invalidate(8, service = $$props.service);
		if ('metrics' in $$props) $$invalidate(9, metrics = $$props.metrics);
		if ('actions' in $$props) $$invalidate(1, actions = $$props.actions);
		if ('selection' in $$props) $$subscribe_selection($$invalidate(2, selection = $$props.selection));
	};

	return [
		title,
		actions,
		selection,
		mainTable,
		$selection,
		dispatch,
		provider,
		columns,
		service,
		metrics,
		table_selection_binding,
		table_binding,
		select_handler
	];
}

class Training_history_view extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$d, create_fragment$d, safe_not_equal, {
			title: 0,
			service: 8,
			metrics: 9,
			actions: 1,
			selection: 2
		});
	}
}

function appendLogs(logs, d) {
    const l = { ...logs };
    for (const [key, val] of Object.entries(d)) {
        l[key] = (l[key] || []).concat([val]);
    }
    return l;
}
const defaultOptions = {
    metrics: ['accuracy', 'accuracyVal', 'loss', 'lossVal'],
    actions: [],
};
class TrainingHistory extends Component$1 {
    constructor(dataStore, options = {}) {
        super();
        this.dataStore = dataStore;
        this.title = 'Training History';
        this.$selection = new Stream([], true);
        this.$actions = new Stream(null).skip(1);
        this.ready = Promise.resolve();
        this.stopTracking = noop$1;
        this.lock = Promise.resolve();
        this.options = { ...defaultOptions, ...options };
        this.lock = this.lock.then(noop$1);
        this.start();
        this.ready = this.ready
            .then(() => this.dataStore.connect())
            .then(() => {
            this.runService = this.dataStore.service('runs');
        })
            .catch(() => {
            logger.log('[dataset] dataStore connection failed');
        });
    }
    track(model, basename = 'anonymous') {
        this.ready
            .then(() => {
            this.stopTracking();
            this.model = model;
            this.modelName = basename;
            return this.runService.find({
                query: {
                    basename,
                    $sort: {
                        createdAt: -1,
                    },
                    $select: ['name'],
                    $limit: 1,
                },
            });
        })
            .then(({ data: foundRuns }) => {
            if (foundRuns.length > 0) {
                return parseInt(foundRuns[0].name.split(`${basename}-`)[1]) + 1;
            }
            return 1;
        })
            .then((nextIndex) => {
            this.nextIndex = nextIndex;
            this.crtRun = null;
            this.stopTracking = this.model
                ? this.model.$training.subscribe(this.trackTrainingStream)
                : noop$1;
        });
        return this;
    }
    async trackTrainingStream(x) {
        if (x.status === 'start') {
            this.crtRun = await this.runService.create({
                name: `${this.modelName}-${this.nextIndex++}`,
                basename: this.modelName,
                start: new Date(Date.now()).toISOString(),
                source: 'js',
                status: x.status,
                epochs: x.epochs,
                params: Object.entries(this.model.parameters)
                    .map(([key, s]) => ({ [key]: s.get() }))
                    .reduce((o, y) => ({ ...o, ...y }), {}),
                logs: {},
            });
        }
        else if (x.status === 'epoch') {
            this.runService.patch(this.crtRun.id, {
                status: x.status,
                epoch: x.epoch,
                logs: appendLogs(this.crtRun.logs, x.data),
            });
        }
        else if (x.status === 'success') {
            const modelId = await this.model.save(this.dataStore, this.modelName, {});
            this.runService.patch(this.crtRun.id, {
                status: x.status,
                epoch: x.epoch,
                logs: x.data,
                checkpoints: (this.crtRun.checkpoints || []).concat([
                    {
                        id: modelId,
                        name: `${this.crtRun.name}@final`,
                        service: this.model.serviceName,
                    },
                ]),
            });
        }
        else if (x.status === 'error') {
            this.runService.patch(this.crtRun.id, {
                status: x.status,
            });
        }
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.ready.then(() => {
            this.$$.app = new Training_history_view({
                target: t,
                props: {
                    title: this.title,
                    service: this.runService,
                    metrics: this.options.metrics,
                    actions: this.options.actions,
                    selection: this.$selection,
                },
            });
            for (const action of this.options.actions) {
                const name = typeof action === 'string' ? action : action.name;
                this.$$.app.$on(name, ({ detail }) => {
                    this.$actions.set({ name, data: detail });
                });
            }
        });
    }
}
__decorate([
    preventConcurrentCalls('lock')
], TrainingHistory.prototype, "trackTrainingStream", null);

function trainingHistory(...args) {
    return new TrainingHistory(...args);
}

/**
 * A Multi-layer Perceptron for regression with two hidden layers
 */
class Umap extends Model {
    constructor({ nComponents = 2, nNeighbors = 15, minDist = 0.1, spread = 1, supervised = false, } = {}) {
        super();
        this.title = 'UMAP';
        this.serviceName = 'umap';
        this.parameters = {
            nComponents: new Stream(nComponents, true),
            nNeighbors: new Stream(nNeighbors, true),
            minDist: new Stream(minDist, true),
            spread: new Stream(spread, true),
            supervised: new Stream(supervised, true),
        };
    }
    async train(dataset) {
        this.$training.set({ status: 'start', epochs: -1 });
        const items = isDataset(dataset) ? dataset.items() : dataset;
        const instances = await items.toArray();
        const umapData = instances.reduce((d, { x }) => d.concat([x]), []);
        this.model = new UMAP({ nComponents: this.parameters.nComponents.get() });
        if (this.parameters.supervised.get()) {
            const labels = instances.map((x) => x.y);
            this.model.setSupervisedProjection(labels);
        }
        const nEpochs = this.model.initializeFit(umapData);
        this.$training.set({ status: 'start', epochs: nEpochs });
        for (let i = 0; i < nEpochs; i++) {
            this.model.step();
            this.$training.set({
                status: 'epoch',
                epoch: i + 1,
                epochs: nEpochs,
                data: { embedding: this.model.getEmbedding() },
            });
        }
        this.$training.set({
            status: 'success',
            data: { embedding: this.model.getEmbedding() },
        });
    }
    async predict(x) {
        if (!this.model)
            return null;
        return this.model.transform([x])[0];
    }
    // eslint-disable-next-line class-methods-use-this
    save() {
        throw new Error('Umap does not support saving');
    }
    // eslint-disable-next-line class-methods-use-this
    load() {
        throw new Error('Umap does not support loading');
    }
    // eslint-disable-next-line class-methods-use-this
    download() {
        throw new Error('Umap does not support downloading');
    }
    // eslint-disable-next-line class-methods-use-this
    upload() {
        throw new Error('Umap does not support uploading');
    }
}

function umap(...args) {
    return new Umap(...args);
}

const SCOPE = Symbol(0);
let scheduledEffects = false, runningEffects = false, currentScope = null, currentObserver = null, currentObservers = null, currentObserversIndex = 0, effects = [], defaultContext = {};
const NOOP = () => {
}, STATE_CLEAN = 0, STATE_CHECK = 1, STATE_DIRTY = 2, STATE_DISPOSED = 3;
function flushEffects() {
  scheduledEffects = true;
  queueMicrotask(runEffects);
}
function runEffects() {
  if (!effects.length) {
    scheduledEffects = false;
    return;
  }
  runningEffects = true;
  for (let i = 0; i < effects.length; i++) {
    if (effects[i].$st !== STATE_CLEAN)
      runTop(effects[i]);
  }
  effects = [];
  scheduledEffects = false;
  runningEffects = false;
}
function runTop(node) {
  let ancestors = [node];
  while (node = node[SCOPE]) {
    if (node.$e && node.$st !== STATE_CLEAN)
      ancestors.push(node);
  }
  for (let i = ancestors.length - 1; i >= 0; i--) {
    updateCheck(ancestors[i]);
  }
}
function root(init) {
  const scope = createScope();
  return compute(scope, !init.length ? init : init.bind(null, dispose.bind(scope)), null);
}
function peek(fn) {
  return compute(currentScope, fn, null);
}
function untrack(fn) {
  return compute(null, fn, null);
}
function tick() {
  if (!runningEffects)
    runEffects();
}
function getScope() {
  return currentScope;
}
function scoped(run, scope) {
  try {
    return compute(scope, run, null);
  } catch (error) {
    handleError(scope, error);
    return;
  }
}
function getContext(key, scope = currentScope) {
  return scope?.$cx[key];
}
function setContext(key, value, scope = currentScope) {
  if (scope)
    scope.$cx = { ...scope.$cx, [key]: value };
}
function onDispose(disposable) {
  if (!disposable || !currentScope)
    return disposable || NOOP;
  const node = currentScope;
  if (!node.$d) {
    node.$d = disposable;
  } else if (Array.isArray(node.$d)) {
    node.$d.push(disposable);
  } else {
    node.$d = [node.$d, disposable];
  }
  return function removeDispose() {
    if (node.$st === STATE_DISPOSED)
      return;
    disposable.call(null);
    if (isFunction$1(node.$d)) {
      node.$d = null;
    } else if (Array.isArray(node.$d)) {
      node.$d.splice(node.$d.indexOf(disposable), 1);
    }
  };
}
function dispose(self = true) {
  if (this.$st === STATE_DISPOSED)
    return;
  let head = self ? this.$ps || this[SCOPE] : this, current = this.$ns, next = null;
  while (current && current[SCOPE] === this) {
    dispose.call(current, true);
    disposeNode(current);
    next = current.$ns;
    current.$ns = null;
    current = next;
  }
  if (self)
    disposeNode(this);
  if (current)
    current.$ps = !self ? this : this.$ps;
  if (head)
    head.$ns = current;
}
function disposeNode(node) {
  node.$st = STATE_DISPOSED;
  if (node.$d)
    emptyDisposal(node);
  if (node.$s)
    removeSourceObservers(node, 0);
  if (node.$ps)
    node.$ps.$ns = null;
  node[SCOPE] = null;
  node.$s = null;
  node.$o = null;
  node.$ps = null;
  node.$cx = defaultContext;
  node.$eh = null;
}
function emptyDisposal(scope) {
  try {
    if (Array.isArray(scope.$d)) {
      for (let i = scope.$d.length - 1; i >= 0; i--) {
        const callable = scope.$d[i];
        callable.call(callable);
      }
    } else {
      scope.$d.call(scope.$d);
    }
    scope.$d = null;
  } catch (error) {
    handleError(scope, error);
  }
}
function compute(scope, compute2, observer) {
  const prevScope = currentScope, prevObserver = currentObserver;
  currentScope = scope;
  currentObserver = observer;
  try {
    return compute2.call(scope);
  } finally {
    currentScope = prevScope;
    currentObserver = prevObserver;
  }
}
function handleError(scope, error) {
  if (!scope || !scope.$eh)
    throw error;
  let i = 0, len = scope.$eh.length, coercedError = coerceError(error);
  for (i = 0; i < len; i++) {
    try {
      scope.$eh[i](coercedError);
      break;
    } catch (error2) {
      coercedError = coerceError(error2);
    }
  }
  if (i === len)
    throw coercedError;
}
function coerceError(error) {
  return error instanceof Error ? error : Error(JSON.stringify(error));
}
function read() {
  if (this.$st === STATE_DISPOSED)
    return this.$v;
  if (currentObserver && !this.$e) {
    if (!currentObservers && currentObserver.$s && currentObserver.$s[currentObserversIndex] == this) {
      currentObserversIndex++;
    } else if (!currentObservers)
      currentObservers = [this];
    else
      currentObservers.push(this);
  }
  if (this.$c)
    updateCheck(this);
  return this.$v;
}
function write(newValue) {
  const value = isFunction$1(newValue) ? newValue(this.$v) : newValue;
  if (this.$ch(this.$v, value)) {
    this.$v = value;
    if (this.$o) {
      for (let i = 0; i < this.$o.length; i++) {
        notify(this.$o[i], STATE_DIRTY);
      }
    }
  }
  return this.$v;
}
const ScopeNode = function Scope() {
  this[SCOPE] = null;
  this.$ns = null;
  this.$ps = null;
  if (currentScope)
    currentScope.append(this);
};
const ScopeProto = ScopeNode.prototype;
ScopeProto.$cx = defaultContext;
ScopeProto.$eh = null;
ScopeProto.$c = null;
ScopeProto.$d = null;
ScopeProto.append = function(child) {
  child[SCOPE] = this;
  child.$ps = this;
  if (this.$ns) {
    if (child.$ns) {
      let tail = child.$ns;
      while (tail.$ns)
        tail = tail.$ns;
      tail.$ns = this.$ns;
      this.$ns.$ps = tail;
    } else {
      child.$ns = this.$ns;
      this.$ns.$ps = child;
    }
  }
  this.$ns = child;
  child.$cx = child.$cx === defaultContext ? this.$cx : { ...this.$cx, ...child.$cx };
  if (this.$eh) {
    child.$eh = !child.$eh ? this.$eh : [...child.$eh, ...this.$eh];
  }
};
ScopeProto.dispose = function() {
  dispose.call(this);
};
function createScope() {
  return new ScopeNode();
}
const ComputeNode = function Computation(initialValue, compute2, options) {
  ScopeNode.call(this);
  this.$st = compute2 ? STATE_DIRTY : STATE_CLEAN;
  this.$i = false;
  this.$e = false;
  this.$s = null;
  this.$o = null;
  this.$v = initialValue;
  if (compute2)
    this.$c = compute2;
  if (options && options.dirty)
    this.$ch = options.dirty;
};
const ComputeProto = ComputeNode.prototype;
Object.setPrototypeOf(ComputeProto, ScopeProto);
ComputeProto.$ch = isNotEqual;
ComputeProto.call = read;
function createComputation(initialValue, compute2, options) {
  return new ComputeNode(initialValue, compute2, options);
}
function isNotEqual(a, b) {
  return a !== b;
}
function isFunction$1(value) {
  return typeof value === "function";
}
function updateCheck(node) {
  if (node.$st === STATE_CHECK) {
    for (let i = 0; i < node.$s.length; i++) {
      updateCheck(node.$s[i]);
      if (node.$st === STATE_DIRTY) {
        break;
      }
    }
  }
  if (node.$st === STATE_DIRTY)
    update(node);
  else
    node.$st = STATE_CLEAN;
}
function cleanup(node) {
  if (node.$ns && node.$ns[SCOPE] === node)
    dispose.call(node, false);
  if (node.$d)
    emptyDisposal(node);
  node.$eh = node[SCOPE] ? node[SCOPE].$eh : null;
}
function update(node) {
  let prevObservers = currentObservers, prevObserversIndex = currentObserversIndex;
  currentObservers = null;
  currentObserversIndex = 0;
  try {
    cleanup(node);
    const result = compute(node, node.$c, node);
    if (currentObservers) {
      if (node.$s)
        removeSourceObservers(node, currentObserversIndex);
      if (node.$s && currentObserversIndex > 0) {
        node.$s.length = currentObserversIndex + currentObservers.length;
        for (let i = 0; i < currentObservers.length; i++) {
          node.$s[currentObserversIndex + i] = currentObservers[i];
        }
      } else {
        node.$s = currentObservers;
      }
      let source;
      for (let i = currentObserversIndex; i < node.$s.length; i++) {
        source = node.$s[i];
        if (!source.$o)
          source.$o = [node];
        else
          source.$o.push(node);
      }
    } else if (node.$s && currentObserversIndex < node.$s.length) {
      removeSourceObservers(node, currentObserversIndex);
      node.$s.length = currentObserversIndex;
    }
    if (!node.$e && node.$i) {
      write.call(node, result);
    } else {
      node.$v = result;
      node.$i = true;
    }
  } catch (error) {
    handleError(node, error);
    if (node.$st === STATE_DIRTY) {
      cleanup(node);
      if (node.$s)
        removeSourceObservers(node, 0);
    }
    return;
  }
  currentObservers = prevObservers;
  currentObserversIndex = prevObserversIndex;
  node.$st = STATE_CLEAN;
}
function notify(node, state) {
  if (node.$st >= state)
    return;
  if (node.$e && node.$st === STATE_CLEAN) {
    effects.push(node);
    if (!scheduledEffects)
      flushEffects();
  }
  node.$st = state;
  if (node.$o) {
    for (let i = 0; i < node.$o.length; i++) {
      notify(node.$o[i], STATE_CHECK);
    }
  }
}
function removeSourceObservers(node, index) {
  let source, swap;
  for (let i = index; i < node.$s.length; i++) {
    source = node.$s[i];
    if (source.$o) {
      swap = source.$o.indexOf(node);
      source.$o[swap] = source.$o[source.$o.length - 1];
      source.$o.pop();
    }
  }
}
function noop(...args) {
}
function isNull(value) {
  return value === null;
}
function isUndefined(value) {
  return typeof value === "undefined";
}
function isNil(value) {
  return isNull(value) || isUndefined(value);
}
function isNumber(value) {
  return typeof value === "number" && !Number.isNaN(value);
}
function isString(value) {
  return typeof value === "string";
}
function isFunction(value) {
  return typeof value === "function";
}
function isArray(value) {
  return Array.isArray(value);
}
const EVENT = Event, DOM_EVENT = Symbol("DOM_EVENT");
class DOMEvent extends EVENT {
  [DOM_EVENT] = true;
  /**
   * The event detail.
   */
  detail;
  /**
   * The preceding event that was responsible for this event being fired.
   */
  trigger;
  /**
   * Walks up the event chain (following each `trigger`) and returns the origin event
   * that started the chain.
   */
  get originEvent() {
    return getOriginEvent(this) ?? this;
  }
  /**
   * Walks up the event chain (following each `trigger`) and determines whether the initial
   * event was triggered by the end user (ie: check whether `isTrusted` on the `originEvent` `true`).
   */
  get isOriginTrusted() {
    return getOriginEvent(this)?.isTrusted ?? false;
  }
  constructor(type, ...init) {
    super(type, init[0]);
    this.detail = init[0]?.detail;
    this.trigger = init[0]?.trigger;
  }
}
function getOriginEvent(event) {
  let trigger = event.trigger;
  while (trigger && trigger.trigger) {
    trigger = trigger.trigger;
  }
  return trigger;
}
function appendTriggerEvent(event, trigger) {
  const origin = getOriginEvent(event) ?? event;
  if (origin === trigger) {
    throw Error(
      ""
    );
  }
  Object.defineProperty(origin, "trigger", {
    configurable: true,
    enumerable: true,
    get: () => trigger
  });
}
class EventsTarget extends EventTarget {
  /** @internal type only */
  $ts__events;
  addEventListener(type, callback, options) {
    return super.addEventListener(type, callback, options);
  }
  removeEventListener(type, callback, options) {
    return super.removeEventListener(type, callback, options);
  }
}
function listenEvent(target, type, handler, options) {
  target.addEventListener(type, handler, options);
  return onDispose(() => target.removeEventListener(type, handler, options));
}
function isPointerEvent(event) {
  return !!event?.type.startsWith("pointer");
}
function isTouchEvent(event) {
  return !!event?.type.startsWith("touch");
}
function isMouseEvent(event) {
  return /^(click|mouse)/.test(event?.type ?? "");
}
function isKeyboardEvent(event) {
  return !!event?.type.startsWith("key");
}
function isKeyboardClick(event) {
  return isKeyboardEvent(event) && (event.key === "Enter" || event.key === " ");
}
function setAttribute(host, name, value) {
  if (!host)
    return;
  else if (!value && value !== "" && value !== 0) {
    host.removeAttribute(name);
  } else {
    const attrValue = value === true ? "" : value + "";
    if (host.getAttribute(name) !== attrValue) {
      host.setAttribute(name, attrValue);
    }
  }
}
function setStyle(host, property, value) {
  if (!host)
    return;
  else if (!value && value !== 0) {
    host.style.removeProperty(property);
  } else {
    host.style.setProperty(property, value + "");
  }
}

function signal(initialValue, options) {
  const node = createComputation(initialValue, null, options), signal2 = read.bind(node);
  signal2[SCOPE] = true;
  signal2.set = write.bind(node);
  return signal2;
}
function isReadSignal(fn) {
  return isFunction$1(fn) && SCOPE in fn;
}
function computed(compute, options) {
  const node = createComputation(
    options?.initial,
    compute,
    options
  ), signal2 = read.bind(node);
  signal2[SCOPE] = true;
  return signal2;
}
function effect$1(effect2, options) {
  const signal2 = createComputation(
    null,
    function runEffect() {
      let effectResult = effect2();
      isFunction$1(effectResult) && onDispose(effectResult);
      return null;
    },
    void 0
  );
  signal2.$e = true;
  update(signal2);
  return dispose.bind(signal2, true);
}
function isWriteSignal(fn) {
  return isReadSignal(fn) && "set" in fn;
}
const effect = effect$1;
function createContext(provide) {
  return { id: Symbol(), provide };
}
function provideContext(context, value, scope = getScope()) {
  const hasProvidedValue = !isUndefined(value);
  setContext(context.id, hasProvidedValue ? value : context.provide?.(), scope);
}
function useContext(context) {
  const value = getContext(context.id);
  return value;
}
function hasProvidedContext(context) {
  return !isUndefined(getContext(context.id));
}
const PROPS = /* @__PURE__ */ Symbol(0);
const METHODS = /* @__PURE__ */ Symbol(0);
const ON_DISPATCH = /* @__PURE__ */ Symbol(0);
const EMPTY_PROPS = {};
class Instance {
  /** @internal type only */
  $ts__events;
  /** @internal type only */
  $ts__vars;
  /* @internal */
  [ON_DISPATCH] = null;
  $el = signal(null);
  f = null;
  a = null;
  g = null;
  h = null;
  e = null;
  q = false;
  i = EMPTY_PROPS;
  c = null;
  d = null;
  k;
  j;
  n = [];
  o = [];
  m = [];
  p = [];
  constructor(Component, scope, init) {
    this.a = scope;
    if (init?.scope)
      init.scope.append(scope);
    let stateFactory = Component.state, props = Component.props;
    if (stateFactory) {
      this.j = stateFactory.create();
      this.k = new Proxy(this.j, {
        get: (_, prop) => this.j[prop]()
      });
      provideContext(stateFactory, this.j);
    }
    if (props) {
      this.i = createInstanceProps(props);
      if (init?.props) {
        for (const prop of Object.keys(init.props)) {
          this.i[prop]?.set(init.props[prop]);
        }
      }
    }
    onDispose(this.b.bind(this));
  }
  w() {
    scoped(() => {
      for (const callback of this.n)
        callback();
    }, this.a);
  }
  x(el) {
    if (this.f)
      return;
    this.f = el;
    this.$el.set(el);
    scoped(() => {
      this.g = createScope();
      scoped(() => {
        for (const callback of this.o)
          callback(this.f);
        this.r();
        this.s();
      }, this.g);
    }, this.a);
    el.dispatchEvent(new Event("attached"));
  }
  t() {
    this.g?.dispose();
    this.g = null;
    this.h = null;
    this.f = null;
    this.$el.set(null);
  }
  y() {
    if (!this.f || !this.g || !this.m.length)
      return;
    scoped(() => {
      this.h = createScope();
      scoped(() => {
        for (const callback of this.m)
          callback(this.f);
      }, this.h);
    }, this.g);
  }
  z() {
    this.h?.dispose();
    this.h = null;
  }
  b() {
    if (this.q)
      return;
    this.q = true;
    scoped(() => {
      for (const callback of this.p)
        callback(this.f);
    }, this.a);
    const el = this.f;
    this.t();
    this.a.dispose();
    this.n.length = 0;
    this.o.length = 0;
    this.m.length = 0;
    this.p.length = 0;
    this.e = null;
    this.c = null;
    this.d = null;
    this.i = EMPTY_PROPS;
    this.a = null;
    this.k = EMPTY_PROPS;
    this.j = null;
    if (el)
      delete el.$;
  }
  l(target) {
    if (target.onSetup)
      this.n.push(target.onSetup.bind(target));
    if (target.onAttach)
      this.o.push(target.onAttach.bind(target));
    if (target.onConnect)
      this.m.push(target.onConnect.bind(target));
    if (target.onDestroy)
      this.p.push(target.onDestroy.bind(target));
  }
  r() {
    if (!this.c)
      return;
    for (const name of Object.keys(this.c)) {
      if (isFunction(this.c[name])) {
        effect(this.u.bind(this, name));
      } else {
        setAttribute(this.f, name, this.c[name]);
      }
    }
  }
  s() {
    if (!this.d)
      return;
    for (const name of Object.keys(this.d)) {
      if (isFunction(this.d[name])) {
        effect(this.v.bind(this, name));
      } else {
        setStyle(this.f, name, this.d[name]);
      }
    }
  }
  u(name) {
    setAttribute(this.f, name, this.c[name].call(this.e));
  }
  v(name) {
    setStyle(this.f, name, this.d[name].call(this.e));
  }
}
function createInstanceProps(props) {
  const $props = {};
  for (const name of Object.keys(props)) {
    const def = props[name];
    $props[name] = signal(def, def);
  }
  return $props;
}
let currentInstance = { $$: null };
function createComponent(Component, init) {
  return root(() => {
    currentInstance.$$ = new Instance(Component, getScope(), init);
    const component = new Component();
    currentInstance.$$.e = component;
    currentInstance.$$ = null;
    return component;
  });
}
class ViewController extends EventTarget {
  /** @internal */
  $$;
  get el() {
    return this.$$.f;
  }
  get $el() {
    return this.$$.$el();
  }
  get scope() {
    return this.$$.a;
  }
  get attachScope() {
    return this.$$.g;
  }
  get connectScope() {
    return this.$$.h;
  }
  /** @internal */
  get $props() {
    return this.$$.i;
  }
  /** @internal */
  get $state() {
    return this.$$.j;
  }
  get state() {
    return this.$$.k;
  }
  constructor() {
    super();
    if (currentInstance.$$)
      this.attach(currentInstance);
  }
  attach({ $$ }) {
    this.$$ = $$;
    $$.l(this);
    return this;
  }
  addEventListener(type, callback, options) {
    this.listen(type, callback, options);
  }
  removeEventListener(type, callback, options) {
    this.el?.removeEventListener(type, callback, options);
  }
  /**
   * This method can be used to specify attributes that should be set on the host element. Any
   * attributes that are assigned to a function will be considered a signal and updated accordingly.
   */
  setAttributes(attributes) {
    if (!this.$$.c)
      this.$$.c = {};
    Object.assign(this.$$.c, attributes);
  }
  /**
   * This method can be used to specify styles that should set be set on the host element. Any
   * styles that are assigned to a function will be considered a signal and updated accordingly.
   */
  setStyles(styles) {
    if (!this.$$.d)
      this.$$.d = {};
    Object.assign(this.$$.d, styles);
  }
  /**
   * This method is used to satisfy the CSS variables contract specified on the current
   * component. Other CSS variables can be set via the `setStyles` method.
   */
  setCSSVars(vars) {
    this.setStyles(vars);
  }
  /**
   * Type-safe utility for creating component DOM events.
   */
  createEvent(type, ...init) {
    return new DOMEvent(type, init[0]);
  }
  /**
   * Creates a `DOMEvent` and dispatches it from the host element. This method is typed to
   * match all component events.
   */
  dispatch(type, ...init) {
    if (!this.el)
      return false;
    const event = type instanceof Event ? type : new DOMEvent(type, init[0]);
    Object.defineProperty(event, "target", {
      get: () => this.$$.e
    });
    return untrack(() => {
      this.$$[ON_DISPATCH]?.(event);
      return this.el.dispatchEvent(event);
    });
  }
  dispatchEvent(event) {
    return this.dispatch(event);
  }
  /**
   * Adds an event listener for the given `type` and returns a function which can be invoked to
   * remove the event listener.
   *
   * - The listener is removed if the current scope is disposed.
   * - This method is safe to use on the server (noop).
   */
  listen(type, handler, options) {
    if (!this.el)
      return noop;
    return listenEvent(this.el, type, handler, options);
  }
}

class Component extends ViewController {
  subscribe(callback) {
    return scoped(() => effect(() => callback(this.state)), this.$$.a);
  }
  destroy() {
    this.$$.b();
  }
}
function prop(target, propertyKey, descriptor) {
  if (!target[PROPS])
    target[PROPS] = /* @__PURE__ */ new Set();
  target[PROPS].add(propertyKey);
}
function method(target, propertyKey, descriptor) {
  if (!target[METHODS])
    target[METHODS] = /* @__PURE__ */ new Set();
  target[METHODS].add(propertyKey);
}
class State {
  id = Symbol(0);
  record;
  A;
  constructor(record) {
    this.record = record;
    this.A = Object.getOwnPropertyDescriptors(record);
  }
  create() {
    const store = {}, state = new Proxy(store, { get: (_, prop2) => store[prop2]() });
    for (const name of Object.keys(this.record)) {
      const getter = this.A[name].get;
      store[name] = getter ? computed(getter.bind(state)) : signal(this.record[name]);
    }
    return store;
  }
  reset(record, filter) {
    for (const name of Object.keys(record)) {
      if (!this.A[name].get && (!filter || filter(name))) {
        record[name].set(this.record[name]);
      }
    }
  }
}
function useState(state) {
  return useContext(state);
}

function runAll(fns, arg) {
  for (const fn of fns)
    fn(arg);
}

function camelToKebabCase(str) {
  return str.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
}
function kebabToCamelCase(str) {
  return str.replace(/-./g, (x) => x[1].toUpperCase());
}
function uppercaseFirstChar(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

function unwrap(fn) {
  return isFunction(fn) ? fn() : fn;
}
function ariaBool$1(value) {
  return value ? "true" : "false";
}
function createDisposalBin() {
  const disposal = /* @__PURE__ */ new Set();
  return {
    add(...callbacks) {
      for (const callback of callbacks)
        disposal.add(callback);
    },
    empty() {
      for (const callback of disposal)
        callback();
      disposal.clear();
    }
  };
}
function useDisposalBin() {
  const disposal = createDisposalBin();
  onDispose(disposal.empty);
  return disposal;
}
function deferredPromise() {
  let resolve, reject;
  const promise = new Promise((res, rej) => {
    resolve = res;
    reject = rej;
  });
  return { promise, resolve, reject };
}
function waitTimeout(delay) {
  return new Promise((resolve) => setTimeout(resolve, delay));
}
function animationFrameThrottle(func) {
  let id = -1, lastArgs;
  function throttle(...args) {
    lastArgs = args;
    if (id >= 0)
      return;
    id = window.requestAnimationFrame(() => {
      func.apply(this, lastArgs);
      id = -1;
      lastArgs = void 0;
    });
  }
  return throttle;
}
const requestIdleCallback = typeof window !== "undefined" ? "requestIdleCallback" in window ? window.requestIdleCallback : (cb) => window.setTimeout(cb, 1) : noop;
function waitIdlePeriod(callback, options) {
  return new Promise((resolve) => {
    requestIdleCallback((deadline) => {
      callback?.(deadline);
      resolve();
    }, options);
  });
}

const min = Math.min;
const max = Math.max;
const round$1 = Math.round;
const floor = Math.floor;
const createCoords = (v) => ({
  x: v,
  y: v
});
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function rectToClientRect(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}

function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
const computePosition$1 = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));
  let rects = await platform.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
      continue;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};

function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle$1(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const webkit = isWebKit();
  const css = getComputedStyle$1(element);
  return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      currentNode = getParentNode(currentNode);
    }
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle$1(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}

function getCssDimensions(element) {
  const css = getComputedStyle$1(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round$1(width) !== offsetWidth || round$1(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round$1(rect.width) : rect.width) / width;
  let y = ($ ? round$1(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}
const noOffsets = /* @__PURE__ */ createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentIFrame = win.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== win) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle$1(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentIFrame = getWindow(currentIFrame).frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  if (offsetParent === documentElement) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle$1(body).direction === "rtl") {
    x += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle$1(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle$1(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle$1(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element, this.Dh) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  return getCssDimensions(element);
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle$1(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}
function getOffsetParent(element, polyfill) {
  const window = getWindow(element);
  if (!isHTMLElement(element)) {
    return window;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
    return window;
  }
  return offsetParent || getContainingBlock(element) || window;
}
const getElementRects = async function(_ref) {
  let {
    reference,
    floating,
    strategy
  } = _ref;
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  return {
    reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),
    floating: {
      x: 0,
      y: 0,
      ...await getDimensionsFn(floating)
    }
  };
};
function isRTL(element) {
  return getComputedStyle$1(element).direction === "rtl";
}
const platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    clearTimeout(timeoutId);
    io && io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 100);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          resizeObserver && resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo && cleanupIo();
    resizeObserver && resizeObserver.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
const computePosition = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    Dh: cache
  };
  return computePosition$1(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

const STRING = (v) => v === null ? "" : v + "";
const NULLABLE_STRING = (v) => v === null ? null : v + "";
const NUMBER = (v) => v === null ? 0 : Number(v);
const BOOLEAN = (v) => v !== null;
const FUNCTION = () => null;
const ARRAY = (v) => v === null ? [] : JSON.parse(v);
const OBJECT = (v) => v === null ? {} : JSON.parse(v);
function inferAttributeConverter(value) {
  if (value === null)
    return NULLABLE_STRING;
  switch (typeof value) {
    case "undefined":
      return STRING;
    case "string":
      return STRING;
    case "boolean":
      return BOOLEAN;
    case "number":
      return NUMBER;
    case "function":
      return FUNCTION;
    case "object":
      return isArray(value) ? ARRAY : OBJECT;
    default:
      return STRING;
  }
}
const ATTRS = /* @__PURE__ */ Symbol(0);
const SETUP$1 = /* @__PURE__ */ Symbol(0);
const SETUP_STATE = /* @__PURE__ */ Symbol(0);
const SETUP_CALLBACKS = /* @__PURE__ */ Symbol(0);
function Host(Super, Component) {
  class MaverickElement extends Super {
    static attrs;
    static [ATTRS] = null;
    static get observedAttributes() {
      if (!this[ATTRS] && Component.props) {
        const map = /* @__PURE__ */ new Map();
        for (const propName of Object.keys(Component.props)) {
          let attr = this.attrs?.[propName], attrName = isString(attr) ? attr : !attr ? attr : attr?.attr;
          if (attrName === false)
            continue;
          if (!attrName)
            attrName = camelToKebabCase(propName);
          map.set(attrName, {
            C: propName,
            B: attr && !isString(attr) && attr?.converter || inferAttributeConverter(Component.props[propName])
          });
        }
        this[ATTRS] = map;
      }
      return this[ATTRS] ? Array.from(this[ATTRS].keys()) : [];
    }
    $;
    [SETUP_STATE] = 0;
    [SETUP_CALLBACKS] = null;
    keepAlive = false;
    forwardKeepAlive = true;
    get scope() {
      return this.$.$$.a;
    }
    get attachScope() {
      return this.$.$$.g;
    }
    get connectScope() {
      return this.$.$$.h;
    }
    get $props() {
      return this.$.$$.i;
    }
    get $state() {
      return this.$.$$.j;
    }
    get state() {
      return this.$.state;
    }
    constructor(...args) {
      super(...args);
      this.$ = scoped(() => createComponent(Component), null);
      this.$.$$.l(this);
      if (Component.props) {
        const props = this.$props, descriptors = Object.getOwnPropertyDescriptors(this);
        for (const prop of Object.keys(descriptors)) {
          if (prop in Component.props) {
            props[prop].set(this[prop]);
            delete this[prop];
          }
        }
      }
    }
    attributeChangedCallback(name, _, newValue) {
      const Ctor = this.constructor;
      if (!Ctor[ATTRS]) {
        super.attributeChangedCallback?.(name, _, newValue);
        return;
      }
      const def = Ctor[ATTRS].get(name);
      if (def)
        this[def.C] = def.B(newValue);
    }
    connectedCallback() {
      const instance = this.$?.$$;
      if (!instance || instance.q)
        return;
      if (this[SETUP_STATE] !== 2) {
        setup.call(this);
        return;
      }
      if (!this.isConnected)
        return;
      if (this.hasAttribute("keep-alive")) {
        this.keepAlive = true;
      }
      instance.y();
      if (isArray(this[SETUP_CALLBACKS]))
        runAll(this[SETUP_CALLBACKS], this);
      this[SETUP_CALLBACKS] = null;
      const callback = super.connectedCallback;
      if (callback)
        scoped(() => callback.call(this), this.connectScope);
      return;
    }
    disconnectedCallback() {
      const instance = this.$?.$$;
      if (!instance || instance.q)
        return;
      instance.z();
      const callback = super.disconnectedCallback;
      if (callback)
        callback.call(this);
      if (!this.keepAlive && !this.hasAttribute("keep-alive")) {
        setTimeout(() => {
          requestAnimationFrame(() => {
            if (!this.isConnected)
              instance.b();
          });
        }, 0);
      }
    }
    [SETUP$1]() {
      const instance = this.$.$$, Ctor = this.constructor;
      if (instance.q)
        return;
      const attrs = Ctor[ATTRS];
      if (attrs) {
        for (const attr of this.attributes) {
          let def = attrs.get(attr.name);
          if (def && def.B) {
            instance.i[def.C].set(def.B(this.getAttribute(attr.name)));
          }
        }
      }
      instance.w();
      instance.x(this);
      this[SETUP_STATE] = 2;
      this.connectedCallback();
    }
    // @ts-expect-error
    subscribe(callback) {
      return this.$.subscribe(callback);
    }
    destroy() {
      this.disconnectedCallback();
      this.$.destroy();
    }
  }
  extendProto(MaverickElement, Component);
  return MaverickElement;
}
function extendProto(Element, Component) {
  const ElementProto = Element.prototype, ComponentProto = Component.prototype;
  if (Component.props) {
    for (const prop of Object.keys(Component.props)) {
      Object.defineProperty(ElementProto, prop, {
        enumerable: true,
        configurable: true,
        get() {
          return this.$props[prop]();
        },
        set(value) {
          this.$props[prop].set(value);
        }
      });
    }
  }
  if (ComponentProto[PROPS]) {
    for (const name of ComponentProto[PROPS]) {
      Object.defineProperty(ElementProto, name, {
        enumerable: true,
        configurable: true,
        get() {
          return this.$[name];
        },
        set(value) {
          this.$[name] = value;
        }
      });
    }
  }
  if (ComponentProto[METHODS]) {
    for (const name of ComponentProto[METHODS]) {
      ElementProto[name] = function(...args) {
        return this.$[name](...args);
      };
    }
  }
}
function setup() {
  if (this[SETUP_STATE] !== 0)
    return;
  this[SETUP_STATE] = 1;
  const parent = findParent(this), isParentRegistered = parent && window.customElements.get(parent.localName), isParentSetup = parent && parent[SETUP_STATE] === 2;
  if (parent && (!isParentRegistered || !isParentSetup)) {
    waitForParent.call(this, parent);
    return;
  }
  attach.call(this, parent);
}
async function waitForParent(parent) {
  await window.customElements.whenDefined(parent.localName);
  if (parent[SETUP_STATE] !== 2) {
    await new Promise((res) => (parent[SETUP_CALLBACKS] ??= []).push(res));
  }
  attach.call(this, parent);
}
function attach(parent) {
  if (!this.isConnected)
    return;
  if (parent) {
    if (parent.keepAlive && parent.forwardKeepAlive) {
      this.keepAlive = true;
      this.setAttribute("keep-alive", "");
    }
    const scope = this.$.$$.a;
    if (scope)
      parent.$.$$.g.append(scope);
  }
  this[SETUP$1]();
}
function findParent(host) {
  let node = host.parentNode, prefix = host.localName.split("-", 1)[0] + "-";
  while (node) {
    if (node.nodeType === 1 && node.localName.startsWith(prefix)) {
      return node;
    }
    node = node.parentNode;
  }
  return null;
}
function defineCustomElement(element, throws = false) {
  if (throws || !window.customElements.get(element.tagName)) {
    window.customElements.define(element.tagName, element);
  }
}

function preconnect(url, rel = "preconnect") {
  const exists = document.querySelector(`link[href="${url}"]`);
  if (!isNull(exists))
    return true;
  const link = document.createElement("link");
  link.rel = rel;
  link.href = url;
  link.crossOrigin = "true";
  document.head.append(link);
  return true;
}
const pendingRequests = {};
function loadScript(src) {
  if (pendingRequests[src])
    return pendingRequests[src].promise;
  const promise = deferredPromise(), exists = document.querySelector(`script[src="${src}"]`);
  if (!isNull(exists)) {
    promise.resolve();
    return promise.promise;
  }
  const script = document.createElement("script");
  script.src = src;
  script.onload = () => {
    promise.resolve();
    delete pendingRequests[src];
  };
  script.onerror = () => {
    promise.reject();
    delete pendingRequests[src];
  };
  setTimeout(() => document.head.append(script), 0);
  return promise.promise;
}
function getRequestCredentials(crossorigin) {
  return crossorigin === "use-credentials" ? "include" : isString(crossorigin) ? "same-origin" : void 0;
}

const CROSSORIGIN = Symbol(0), READY_STATE = Symbol(0), UPDATE_ACTIVE_CUES = Symbol(0), CAN_LOAD = Symbol(0), ON_MODE_CHANGE = Symbol(0), NATIVE = Symbol(0), NATIVE_HLS = Symbol(0);
const TextTrackSymbol = {
  Rc: CROSSORIGIN,
  ka: READY_STATE,
  Lc: UPDATE_ACTIVE_CUES,
  Mc: CAN_LOAD,
  la: ON_MODE_CHANGE,
  Ba: NATIVE,
  Ca: NATIVE_HLS
};

function findActiveCue(cues, time) {
  for (let i = 0, len = cues.length; i < len; i++) {
    if (isCueActive(cues[i], time))
      return cues[i];
  }
  return null;
}
function isCueActive(cue, time) {
  return time >= cue.startTime && time < cue.endTime;
}
function observeActiveTextTrack(tracks, kind, onChange) {
  let currentTrack = null;
  function onModeChange() {
    const kinds = isString(kind) ? [kind] : kind, track = tracks.toArray().find((track2) => kinds.includes(track2.kind) && track2.mode === "showing");
    if (track === currentTrack)
      return;
    if (!track) {
      onChange(null);
      return;
    }
    if (track.readyState == 2) {
      onChange(track);
    } else {
      onChange(null);
      track.addEventListener("load", () => onChange(track), { once: true });
    }
    currentTrack = track;
  }
  onModeChange();
  return listenEvent(tracks, "mode-change", onModeChange);
}

var _a$1, _b, _c;
class TextTrack extends EventsTarget {
  constructor(init) {
    super();
    this.id = "";
    this.label = "";
    this.language = "";
    this.default = false;
    this.Mc = false;
    this.Ic = 0;
    this.Ga = "disabled";
    this.Nc = {};
    this.Kc = [];
    this.Hc = [];
    this.Jc = [];
    /* @internal */
    this[_a$1] = 0;
    /* @internal */
    this[_b] = null;
    /* @internal */
    this[_c] = null;
    for (const prop of Object.keys(init))
      this[prop] = init[prop];
    if (!this.type)
      this.type = "vtt";
    if (init.content) {
      Promise.resolve().then(function () { return prod; }).then(({ parseText, VTTCue, VTTRegion }) => {
        if (init.type === "json") {
          this.Oc(init.content, VTTCue, VTTRegion);
        } else {
          parseText(init.content, { type: init.type }).then(({ cues, regions }) => {
            this.Hc = cues;
            this.Kc = regions;
            this.ka();
          });
        }
      });
    } else if (!init.src)
      this[TextTrackSymbol.ka] = 2;
  }
  static createId(track) {
    return `id::${track.type}-${track.kind}-${track.src ?? track.label}`;
  }
  get metadata() {
    return this.Nc;
  }
  get regions() {
    return this.Kc;
  }
  get cues() {
    return this.Hc;
  }
  get activeCues() {
    return this.Jc;
  }
  /**
   * - 0: Not Loading
   * - 1: Loading
   * - 2: Ready
   * - 3: Error
   */
  get readyState() {
    return this[TextTrackSymbol.ka];
  }
  get mode() {
    return this.Ga;
  }
  set mode(mode) {
    this.setMode(mode);
  }
  addCue(cue, trigger) {
    let i = 0, length = this.Hc.length;
    for (i = 0; i < length; i++)
      if (cue.endTime <= this.Hc[i].startTime)
        break;
    if (i === length)
      this.Hc.push(cue);
    else
      this.Hc.splice(i, 0, cue);
    if (trigger?.type !== "cuechange") {
      this[TextTrackSymbol.Ba]?.track.addCue(cue);
    }
    this.dispatchEvent(new DOMEvent("add-cue", { detail: cue, trigger }));
    if (isCueActive(cue, this.Ic)) {
      this[TextTrackSymbol.Lc](this.Ic, trigger);
    }
  }
  removeCue(cue, trigger) {
    const index = this.Hc.indexOf(cue);
    if (index >= 0) {
      const isActive = this.Jc.includes(cue);
      this.Hc.splice(index, 1);
      this[TextTrackSymbol.Ba]?.track.removeCue(cue);
      this.dispatchEvent(new DOMEvent("remove-cue", { detail: cue, trigger }));
      if (isActive) {
        this[TextTrackSymbol.Lc](this.Ic, trigger);
      }
    }
  }
  setMode(mode, trigger) {
    if (this.Ga === mode)
      return;
    this.Ga = mode;
    if (mode === "disabled") {
      this.Jc = [];
      this.Pc();
    } else if (this.readyState === 2) {
      this[TextTrackSymbol.Lc](this.Ic, trigger);
    } else {
      this.Kb();
    }
    this.dispatchEvent(new DOMEvent("mode-change", { detail: this, trigger }));
    this[TextTrackSymbol.la]?.();
  }
  /* @internal */
  [(_a$1 = TextTrackSymbol.ka, _b = TextTrackSymbol.la, _c = TextTrackSymbol.Ba, TextTrackSymbol.Lc)](currentTime, trigger) {
    this.Ic = currentTime;
    if (this.mode === "disabled" || !this.Hc.length)
      return;
    const activeCues = [];
    for (let i = 0, length = this.Hc.length; i < length; i++) {
      const cue = this.Hc[i];
      if (isCueActive(cue, currentTime))
        activeCues.push(cue);
    }
    let changed = activeCues.length !== this.Jc.length;
    if (!changed) {
      for (let i = 0; i < activeCues.length; i++) {
        if (!this.Jc.includes(activeCues[i])) {
          changed = true;
          break;
        }
      }
    }
    this.Jc = activeCues;
    if (changed)
      this.Pc(trigger);
  }
  /* @internal */
  [TextTrackSymbol.Mc]() {
    this.Mc = true;
    if (this.Ga !== "disabled")
      this.Kb();
  }
  async Kb() {
    if (!this.Mc || !this.src || this[TextTrackSymbol.ka] > 0)
      return;
    this[TextTrackSymbol.ka] = 1;
    this.dispatchEvent(new DOMEvent("load-start"));
    try {
      const { parseResponse, VTTCue, VTTRegion } = await Promise.resolve().then(function () { return prod; }), crossorigin = this[TextTrackSymbol.Rc]?.();
      const response = fetch(this.src, {
        headers: this.type === "json" ? { "Content-Type": "application/json" } : void 0,
        credentials: getRequestCredentials(crossorigin)
      });
      if (this.type === "json") {
        this.Oc(await (await response).text(), VTTCue, VTTRegion);
      } else {
        const { errors, metadata, regions, cues } = await parseResponse(response, {
          type: this.type,
          encoding: this.encoding
        });
        if (errors[0]?.code === 0) {
          throw errors[0];
        } else {
          this.Nc = metadata;
          this.Kc = regions;
          this.Hc = cues;
        }
      }
      this.ka();
    } catch (error) {
      this.Qc(error);
    }
  }
  ka() {
    this[TextTrackSymbol.ka] = 2;
    if (!this.src || this.type !== "vtt") {
      const nativeTrack = this[TextTrackSymbol.Ba]?.track;
      if (nativeTrack)
        for (const cue of this.Hc)
          nativeTrack.addCue(cue);
    }
    const loadEvent = new DOMEvent("load");
    this[TextTrackSymbol.Lc](this.Ic, loadEvent);
    this.dispatchEvent(loadEvent);
  }
  Qc(error) {
    this[TextTrackSymbol.ka] = 3;
    this.dispatchEvent(new DOMEvent("error", { detail: error }));
  }
  Oc(json, VTTCue, VTTRegion) {
    try {
      const { regions, cues } = parseJSONCaptionsFile(json, VTTCue, VTTRegion);
      this.Kc = regions;
      this.Hc = cues;
    } catch (error) {
      this.Qc(error);
    }
  }
  Pc(trigger) {
    this.dispatchEvent(new DOMEvent("cue-change", { trigger }));
  }
}
const captionRE = /captions|subtitles/;
function isTrackCaptionKind(track) {
  return captionRE.test(track.kind);
}
function parseJSONCaptionsFile(json, Cue, Region) {
  const content = JSON.parse(json);
  let regions = [], cues = [];
  if (content.regions && Region) {
    regions = content.regions.map((region) => Object.assign(new Region(), region));
  }
  if (content.cues || isArray(content)) {
    cues = (isArray(content) ? content : content.cues).filter((content2) => isNumber(content2.startTime) && isNumber(content2.endTime)).map((cue) => Object.assign(new Cue(0, 0, ""), cue));
  }
  return { regions, cues };
}

function setAttributeIfEmpty(target, name, value) {
  if (!target.hasAttribute(name))
    target.setAttribute(name, value);
}
function setARIALabel(target, $label) {
  if (target.hasAttribute("aria-label"))
    return;
  function updateAriaDescription() {
    setAttribute(target, "aria-label", $label());
  }
  effect(updateAriaDescription);
}
function isElementParent(owner, node, test) {
  while (node) {
    if (node === owner) {
      return true;
    } else if (test?.(node)) {
      break;
    } else {
      node = node.parentElement;
    }
  }
  return false;
}
function onPress(target, handler) {
  listenEvent(target, "pointerup", (event) => {
    if (event.button === 0)
      handler(event);
  });
  listenEvent(target, "keydown", (event) => {
    if (isKeyboardClick(event))
      handler(event);
  });
}
function isTouchPinchEvent(event) {
  return isTouchEvent(event) && (event.touches.length > 1 || event.changedTouches.length > 1);
}
function requestScopedAnimationFrame(callback) {
  let scope = getScope(), id = window.requestAnimationFrame(() => {
    scoped(callback, scope);
    id = -1;
  });
  return () => void window.cancelAnimationFrame(id);
}
function cloneTemplate(template, length, onCreate) {
  let current, prev = template, parent = template.parentElement, content = template.content.firstElementChild, elements = [];
  if (!content && template.firstElementChild) {
    template.innerHTML = template.firstElementChild.outerHTML;
    template.firstElementChild.remove();
    content = template.content.firstElementChild;
  }
  for (let i = 0; i < length; i++) {
    current = document.importNode(content, true);
    onCreate?.(current, i);
    parent.insertBefore(current, prev.nextSibling);
    elements.push(current);
    prev = current;
  }
  onDispose(() => {
    for (let i = 0; i < elements.length; i++)
      elements[i].remove();
  });
  return elements;
}
function createTemplate(content) {
  const template = document.createElement("template");
  template.innerHTML = content;
  return template.content;
}
function cloneTemplateContent(content) {
  const fragment = content.cloneNode(true);
  return fragment.firstElementChild;
}
function autoPlacement(el, trigger, placement, {
  offsetVarName,
  xOffset,
  yOffset,
  ...options
}) {
  if (!el)
    return;
  const floatingPlacement = placement.replace(" ", "-").replace("-center", "");
  setStyle(el, "visibility", !trigger ? "hidden" : null);
  if (!trigger)
    return;
  const negateY = (y) => placement.includes("top") ? `calc(-1 * ${y})` : y;
  return autoUpdate(trigger, el, () => {
    computePosition(trigger, el, { placement: floatingPlacement, ...options }).then(({ x, y }) => {
      Object.assign(el.style, {
        top: `calc(${y + "px"} + ${negateY(
          yOffset ? yOffset + "px" : `var(--${offsetVarName}-y-offset, 0px)`
        )})`,
        left: `calc(${x + "px"} + ${xOffset ? xOffset + "px" : `var(--${offsetVarName}-x-offset, 0px)`}`
      });
    });
  });
}
function hasAnimation(el) {
  const styles = getComputedStyle(el);
  return styles.animationName !== "none";
}

const ADD = Symbol(0), REMOVE = Symbol(0), RESET = Symbol(0), SELECT = Symbol(0), READONLY = Symbol(0), SET_READONLY = Symbol(0), ON_RESET = Symbol(0), ON_REMOVE = Symbol(0), ON_USER_SELECT = Symbol(0);
const ListSymbol = {
  F: ADD,
  D: REMOVE,
  H: RESET,
  ha: SELECT,
  C: READONLY,
  E: SET_READONLY,
  I: ON_RESET,
  G: ON_REMOVE,
  fc: ON_USER_SELECT
};

const UA = navigator?.userAgent.toLowerCase() || "";
const IS_IOS = /iphone|ipad|ipod|ios|crios|fxios/i.test(UA);
const IS_IPHONE = /(iphone|ipod)/gi.test(navigator?.platform || "");
const IS_CHROME = !!window.chrome;
const IS_SAFARI = !!window.safari || IS_IOS;
function canOrientScreen() {
  return canRotateScreen() && isFunction(screen.orientation.unlock);
}
function canRotateScreen() {
  return !isUndefined(window.screen.orientation) && !isUndefined(window.screen.orientation.lock);
}
function canPlayHLSNatively(video) {
  if (!video)
    video = document.createElement("video");
  return video.canPlayType("application/vnd.apple.mpegurl").length > 0;
}
function canUsePictureInPicture(video) {
  return !!document.pictureInPictureEnabled && !video.disablePictureInPicture;
}
function canUseVideoPresentation(video) {
  return isFunction(video.webkitSupportsPresentationMode) && isFunction(video.webkitSetPresentationMode);
}
async function canChangeVolume() {
  const video = document.createElement("video");
  video.volume = 0.5;
  await waitTimeout(0);
  return video.volume === 0.5;
}
function getMediaSource() {
  return window?.MediaSource ?? window?.WebKitMediaSource;
}
function getSourceBuffer() {
  return window?.SourceBuffer ?? window?.WebKitSourceBuffer;
}
function isHLSSupported() {
  const MediaSource = getMediaSource();
  if (isUndefined(MediaSource))
    return false;
  const isTypeSupported = MediaSource && isFunction(MediaSource.isTypeSupported) && MediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"');
  const SourceBuffer = getSourceBuffer();
  const isSourceBufferValid = isUndefined(SourceBuffer) || !isUndefined(SourceBuffer.prototype) && isFunction(SourceBuffer.prototype.appendBuffer) && isFunction(SourceBuffer.prototype.remove);
  return !!isTypeSupported && !!isSourceBufferValid;
}

const AUDIO_EXTENSIONS = /\.(m4a|m4b|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\?)/i;
const AUDIO_TYPES = /* @__PURE__ */ new Set([
  "audio/mpeg",
  "audio/ogg",
  "audio/3gp",
  "audio/mp4",
  "audio/webm",
  "audio/flac"
]);
const VIDEO_EXTENSIONS = /\.(mp4|og[gv]|webm|mov|m4v)(#t=[,\d+]+)?($|\?)/i;
const VIDEO_TYPES = /* @__PURE__ */ new Set([
  "video/mp4",
  "video/webm",
  "video/3gp",
  "video/ogg",
  "video/avi",
  "video/mpeg"
]);
const HLS_VIDEO_EXTENSIONS = /\.(m3u8)($|\?)/i;
const HLS_VIDEO_TYPES = /* @__PURE__ */ new Set([
  // Apple sanctioned
  "application/vnd.apple.mpegurl",
  // Apple sanctioned for backwards compatibility
  "audio/mpegurl",
  // Very common
  "audio/x-mpegurl",
  // Very common
  "application/x-mpegurl",
  // Included for completeness
  "video/x-mpegurl",
  "video/mpegurl",
  "application/mpegurl"
]);
function isHLSSrc({ src, type }) {
  return isString(src) && HLS_VIDEO_EXTENSIONS.test(src) || HLS_VIDEO_TYPES.has(type);
}
function isMediaStream(src) {
  return typeof window.MediaStream !== "undefined" && src instanceof window.MediaStream;
}

function round(num, decimalPlaces = 2) {
  return Number(num.toFixed(decimalPlaces));
}
function getNumberOfDecimalPlaces(num) {
  return String(num).split(".")[1]?.length ?? 0;
}
function clampNumber(min, value, max) {
  return Math.max(min, Math.min(max, value));
}

const SET_AUTO = Symbol(0), ENABLE_AUTO = Symbol(0);
const QualitySymbol = {
  ma: SET_AUTO,
  ba: ENABLE_AUTO
};

function coerceToError(error) {
  return error instanceof Error ? error : Error(JSON.stringify(error));
}

var _a;
class List extends EventsTarget {
  constructor() {
    super(...arguments);
    this.B = [];
    /* @internal */
    this[_a] = false;
  }
  get length() {
    return this.B.length;
  }
  get readonly() {
    return this[ListSymbol.C];
  }
  /**
   * Transform list to an array.
   */
  toArray() {
    return [...this.B];
  }
  [(_a = ListSymbol.C, Symbol.iterator)]() {
    return this.B.values();
  }
  /* @internal */
  [ListSymbol.F](item, trigger) {
    const index = this.B.length;
    if (!("" + index in this)) {
      Object.defineProperty(this, index, {
        get() {
          return this.B[index];
        }
      });
    }
    if (this.B.includes(item))
      return;
    this.B.push(item);
    this.dispatchEvent(new DOMEvent("add", { detail: item, trigger }));
  }
  /* @internal */
  [ListSymbol.D](item, trigger) {
    const index = this.B.indexOf(item);
    if (index >= 0) {
      this[ListSymbol.G]?.(item, trigger);
      this.B.splice(index, 1);
      this.dispatchEvent(new DOMEvent("remove", { detail: item, trigger }));
    }
  }
  /* @internal */
  [ListSymbol.H](trigger) {
    for (const item of [...this.B])
      this[ListSymbol.D](item, trigger);
    this.B = [];
    this[ListSymbol.E](false, trigger);
    this[ListSymbol.I]?.();
  }
  /* @internal */
  [ListSymbol.E](readonly, trigger) {
    if (this[ListSymbol.C] === readonly)
      return;
    this[ListSymbol.C] = readonly;
    this.dispatchEvent(new DOMEvent("readonly-change", { detail: readonly, trigger }));
  }
}

var key = {
  fullscreenEnabled: 0,
  fullscreenElement: 1,
  requestFullscreen: 2,
  exitFullscreen: 3,
  fullscreenchange: 4,
  fullscreenerror: 5,
  fullscreen: 6
};
var webkit = [
  "webkitFullscreenEnabled",
  "webkitFullscreenElement",
  "webkitRequestFullscreen",
  "webkitExitFullscreen",
  "webkitfullscreenchange",
  "webkitfullscreenerror",
  "-webkit-full-screen"
];
var moz = [
  "mozFullScreenEnabled",
  "mozFullScreenElement",
  "mozRequestFullScreen",
  "mozCancelFullScreen",
  "mozfullscreenchange",
  "mozfullscreenerror",
  "-moz-full-screen"
];
var ms = [
  "msFullscreenEnabled",
  "msFullscreenElement",
  "msRequestFullscreen",
  "msExitFullscreen",
  "MSFullscreenChange",
  "MSFullscreenError",
  "-ms-fullscreen"
];
var document$1 = typeof window !== "undefined" && typeof window.document !== "undefined" ? window.document : {};
var vendor = "fullscreenEnabled" in document$1 && Object.keys(key) || webkit[0] in document$1 && webkit || moz[0] in document$1 && moz || ms[0] in document$1 && ms || [];
var fscreen = {
  requestFullscreen: function(element) {
    return element[vendor[key.requestFullscreen]]();
  },
  requestFullscreenFunction: function(element) {
    return element[vendor[key.requestFullscreen]];
  },
  get exitFullscreen() {
    return document$1[vendor[key.exitFullscreen]].bind(document$1);
  },
  get fullscreenPseudoClass() {
    return ":" + vendor[key.fullscreen];
  },
  addEventListener: function(type, handler, options) {
    return document$1.addEventListener(vendor[key[type]], handler, options);
  },
  removeEventListener: function(type, handler, options) {
    return document$1.removeEventListener(vendor[key[type]], handler, options);
  },
  get fullscreenEnabled() {
    return Boolean(document$1[vendor[key.fullscreenEnabled]]);
  },
  set fullscreenEnabled(val) {
  },
  get fullscreenElement() {
    return document$1[vendor[key.fullscreenElement]];
  },
  set fullscreenElement(val) {
  },
  get onfullscreenchange() {
    return document$1[("on" + vendor[key.fullscreenchange]).toLowerCase()];
  },
  set onfullscreenchange(handler) {
    return document$1[("on" + vendor[key.fullscreenchange]).toLowerCase()] = handler;
  },
  get onfullscreenerror() {
    return document$1[("on" + vendor[key.fullscreenerror]).toLowerCase()];
  },
  set onfullscreenerror(handler) {
    return document$1[("on" + vendor[key.fullscreenerror]).toLowerCase()] = handler;
  }
};
var fscreen$1 = fscreen;

const CAN_FULLSCREEN = fscreen$1.fullscreenEnabled;
class FullscreenController extends ViewController {
  constructor() {
    super(...arguments);
    /**
     * Tracks whether we're the active fullscreen event listener. Fullscreen events can only be
     * listened to globally on the document so we need to know if they relate to the current host
     * element or not.
     */
    this.J = false;
    this.K = false;
  }
  get active() {
    return this.K;
  }
  get supported() {
    return CAN_FULLSCREEN;
  }
  onConnect() {
    listenEvent(fscreen$1, "fullscreenchange", this.L.bind(this));
    listenEvent(fscreen$1, "fullscreenerror", this.M.bind(this));
    onDispose(this.A.bind(this));
  }
  async A() {
    if (CAN_FULLSCREEN)
      await this.exit();
  }
  L(event) {
    const active = isFullscreen(this.el);
    if (active === this.K)
      return;
    if (!active)
      this.J = false;
    this.K = active;
    this.dispatch("fullscreen-change", { detail: active, trigger: event });
  }
  M(event) {
    if (!this.J)
      return;
    this.dispatch("fullscreen-error", { detail: null, trigger: event });
    this.J = false;
  }
  async enter() {
    try {
      this.J = true;
      if (!this.el || isFullscreen(this.el))
        return;
      assertFullscreenAPI();
      return fscreen$1.requestFullscreen(this.el);
    } catch (error) {
      this.J = false;
      throw error;
    }
  }
  async exit() {
    if (!this.el || !isFullscreen(this.el))
      return;
    assertFullscreenAPI();
    return fscreen$1.exitFullscreen();
  }
}
function canFullscreen() {
  return CAN_FULLSCREEN;
}
function isFullscreen(host) {
  if (fscreen$1.fullscreenElement === host)
    return true;
  try {
    return host.matches(
      // @ts-expect-error - `fullscreenPseudoClass` is missing from `@types/fscreen`.
      fscreen$1.fullscreenPseudoClass
    );
  } catch (error) {
    return false;
  }
}
function assertFullscreenAPI() {
  if (CAN_FULLSCREEN)
    return;
  throw Error(
    "[vidstack] no fullscreen API"
  );
}

class ScreenOrientationController extends ViewController {
  constructor() {
    super(...arguments);
    this.O = signal(this.Q());
    this.N = signal(false);
  }
  /**
   * The current screen orientation type.
   *
   * @signal
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation}
   * @see https://w3c.github.io/screen-orientation/#screen-orientation-types-and-locks
   */
  get type() {
    return this.O();
  }
  /**
   * Whether the screen orientation is currently locked.
   *
   * @signal
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation}
   * @see https://w3c.github.io/screen-orientation/#screen-orientation-types-and-locks
   */
  get locked() {
    return this.N();
  }
  /**
   * Whether the viewport is in a portrait orientation.
   *
   * @signal
   */
  get portrait() {
    return this.O().startsWith("portrait");
  }
  /**
   * Whether the viewport is in a landscape orientation.
   *
   * @signal
   */
  get landscape() {
    return this.O().startsWith("landscape");
  }
  static {
    /**
     * Whether the native Screen Orientation API is available.
     */
    this.supported = canOrientScreen();
  }
  /**
   * Whether the native Screen Orientation API is available.
   */
  get supported() {
    return ScreenOrientationController.supported;
  }
  onConnect() {
    if (this.supported) {
      listenEvent(screen.orientation, "change", this.R.bind(this));
    } else {
      const query = window.matchMedia("(orientation: landscape)");
      query.onchange = this.R.bind(this);
      onDispose(() => query.onchange = null);
    }
    onDispose(this.A.bind(this));
  }
  async A() {
    if (this.supported && this.N())
      await this.unlock();
  }
  R(event) {
    this.O.set(this.Q());
    this.dispatch("orientation-change", {
      detail: {
        orientation: peek(this.O),
        lock: this.P
      },
      trigger: event
    });
  }
  /**
   * Locks the orientation of the screen to the desired orientation type using the
   * Screen Orientation API.
   *
   * @param lockType - The screen lock orientation type.
   * @throws Error - If screen orientation API is unavailable.
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation}
   * @see {@link https://w3c.github.io/screen-orientation}
   */
  async lock(lockType) {
    if (peek(this.N) || this.P === lockType)
      return;
    this.S();
    await screen.orientation.lock(lockType);
    this.N.set(true);
    this.P = lockType;
  }
  /**
   * Unlocks the orientation of the screen to it's default state using the Screen Orientation
   * API. This method will throw an error if the API is unavailable.
   *
   * @throws Error - If screen orientation API is unavailable.
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation}
   * @see {@link https://w3c.github.io/screen-orientation}
   */
  async unlock() {
    if (!peek(this.N))
      return;
    this.S();
    this.P = void 0;
    await screen.orientation.unlock();
    this.N.set(false);
  }
  S() {
    if (this.supported)
      return;
    throw Error(
      "[vidstack] no orientation API"
    );
  }
  Q() {
    if (this.supported)
      return window.screen.orientation.type;
    return window.innerWidth >= window.innerHeight ? "landscape-primary" : "portrait-primary";
  }
}

class TimeRange {
  get length() {
    return this.gc.length;
  }
  constructor(start, end) {
    if (isArray(start)) {
      this.gc = start;
    } else if (!isUndefined(start) && !isUndefined(end)) {
      this.gc = [[start, end]];
    } else {
      this.gc = [];
    }
  }
  start(index) {
    return this.gc[index][0] ?? Infinity;
  }
  end(index) {
    return this.gc[index][1] ?? Infinity;
  }
}
function getTimeRangesStart(range) {
  if (!range.length)
    return null;
  let min = range.start(0);
  for (let i = 1; i < range.length; i++) {
    const value = range.start(i);
    if (value < min)
      min = value;
  }
  return min;
}
function getTimeRangesEnd(range) {
  if (!range.length)
    return null;
  let max = range.end(0);
  for (let i = 1; i < range.length; i++) {
    const value = range.end(i);
    if (value > max)
      max = value;
  }
  return max;
}

const mediaState = new State({
  audioTracks: [],
  audioTrack: null,
  autoplay: false,
  autoplayError: null,
  buffered: new TimeRange(),
  duration: 0,
  canLoad: false,
  canFullscreen: false,
  canOrientScreen: canOrientScreen(),
  canPictureInPicture: false,
  canPlay: false,
  controls: false,
  controlsVisible: false,
  crossorigin: null,
  poster: "",
  currentTime: 0,
  ended: false,
  error: null,
  fullscreen: false,
  loop: false,
  logLevel: "silent",
  mediaType: "unknown",
  muted: false,
  paused: true,
  played: new TimeRange(),
  playing: false,
  playsinline: false,
  pictureInPicture: false,
  preload: "metadata",
  playbackRate: 1,
  qualities: [],
  quality: null,
  autoQuality: false,
  canSetQuality: true,
  canSetVolume: false,
  seekable: new TimeRange(),
  seeking: false,
  source: { src: "", type: "" },
  sources: [],
  started: false,
  title: "",
  textTracks: [],
  textTrack: null,
  volume: 1,
  waiting: false,
  get viewType() {
    return this.providedViewType !== "unknown" ? this.providedViewType : this.inferredViewType;
  },
  get streamType() {
    return this.providedStreamType !== "unknown" ? this.providedStreamType : this.inferredStreamType;
  },
  get currentSrc() {
    return this.source;
  },
  get bufferedStart() {
    return getTimeRangesStart(this.buffered) ?? 0;
  },
  get bufferedEnd() {
    return getTimeRangesEnd(this.buffered) ?? 0;
  },
  get seekableStart() {
    return getTimeRangesStart(this.seekable) ?? 0;
  },
  get seekableEnd() {
    return this.canPlay ? getTimeRangesEnd(this.seekable) ?? Infinity : 0;
  },
  get seekableWindow() {
    return Math.max(0, this.seekableEnd - this.seekableStart);
  },
  // ~~ responsive design ~~
  pointer: "fine",
  orientation: "landscape",
  width: 0,
  height: 0,
  mediaWidth: 0,
  mediaHeight: 0,
  // ~~ user props ~~
  userBehindLiveEdge: false,
  // ~~ live props ~~
  liveEdgeTolerance: 10,
  minLiveDVRWindow: 60,
  get canSeek() {
    return /unknown|on-demand|:dvr/.test(this.streamType) && Number.isFinite(this.seekableWindow) && (!this.live || /:dvr/.test(this.streamType) && this.seekableWindow >= this.minLiveDVRWindow);
  },
  get live() {
    return this.streamType.includes("live") || !Number.isFinite(this.duration);
  },
  get liveEdgeStart() {
    return this.live && Number.isFinite(this.seekableEnd) ? Math.max(0, (this.liveSyncPosition ?? this.seekableEnd) - this.liveEdgeTolerance) : 0;
  },
  get liveEdge() {
    return this.live && (!this.canSeek || !this.userBehindLiveEdge && this.currentTime >= this.liveEdgeStart);
  },
  get liveEdgeWindow() {
    return this.live && Number.isFinite(this.seekableEnd) ? this.seekableEnd - this.liveEdgeStart : 0;
  },
  // ~~ internal props ~~
  autoplaying: false,
  inferredViewType: "unknown",
  providedViewType: "unknown",
  providedStreamType: "unknown",
  inferredStreamType: "unknown",
  liveSyncPosition: null
});
const DO_NOT_RESET_ON_SRC_CHANGE = /* @__PURE__ */ new Set([
  "autoplay",
  "canFullscreen",
  "canLoad",
  "canPictureInPicture",
  "canSetVolume",
  "controls",
  "crossorigin",
  "fullscreen",
  "height",
  "logLevel",
  "loop",
  "mediaHeight",
  "mediaWidth",
  "mediaType",
  "muted",
  "orientation",
  "pictureInPicture",
  "playsinline",
  "pointer",
  "poster",
  "preload",
  "providedStreamType",
  "inferredViewType",
  "providedViewType",
  "source",
  "sources",
  "textTrack",
  "textTracks",
  "title",
  "volume",
  "width"
]);
function softResetMediaState($media) {
  mediaState.reset($media, (prop) => !DO_NOT_RESET_ON_SRC_CHANGE.has(prop));
  tick();
}

const mediaContext = createContext();
function useMediaContext() {
  return useContext(mediaContext);
}

class MediaRemoteControl {
  constructor(_logger = void 0) {
    this.z = null;
    this.ic = null;
    this.kc = -1;
    this.y = _logger;
  }
  /**
   * Set the target from which to dispatch media requests events from. The events should bubble
   * up from this target to the `<media-player>` element.
   *
   * @example
   * ```ts
   * const button = document.querySelector('button');
   * remote.setTarget(button);
   * ```
   */
  setTarget(target) {
    this.z = target;
  }
  /**
   * Returns the current `<media-player>` element. This method will attempt to find the player by
   * searching up from either the given `target` or default target set via `remote.setTarget`.
   *
   * @example
   * ```ts
   * const player = remote.getPlayer();
   * ```
   */
  getPlayer(target) {
    if (this.ic)
      return this.ic;
    (target ?? this.z)?.dispatchEvent(
      new DOMEvent("find-media-player", {
        detail: (player) => void (this.ic = player),
        bubbles: true,
        composed: true
      })
    );
    return this.ic;
  }
  /**
   * Set the current `<media-player>` element so the remote can support toggle methods such as
   * `togglePaused` as they rely on the current media state.
   */
  setPlayer(player) {
    this.ic = player;
  }
  /**
   * Dispatch a request to start the media loading process. This will only work if the media
   * player has been initialized with a custom loading strategy `<media-player load="custom">`.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/loading#loading-strategies}
   */
  startLoading(trigger) {
    this.hc("media-start-loading", trigger);
  }
  /**
   * Dispatch a request to begin/resume media playback.
   */
  play(trigger) {
    this.hc("media-play-request", trigger);
  }
  /**
   * Dispatch a request to pause media playback.
   */
  pause(trigger) {
    this.hc("media-pause-request", trigger);
  }
  /**
   * Dispatch a request to set the media volume to mute (0).
   */
  mute(trigger) {
    this.hc("media-mute-request", trigger);
  }
  /**
   * Dispatch a request to unmute the media volume and set it back to it's previous state.
   */
  unmute(trigger) {
    this.hc("media-unmute-request", trigger);
  }
  /**
   * Dispatch a request to enter fullscreen.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/fullscreen#remote-control}
   */
  enterFullscreen(target, trigger) {
    this.hc("media-enter-fullscreen-request", trigger, target);
  }
  /**
   * Dispatch a request to exit fullscreen.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/fullscreen#remote-control}
   */
  exitFullscreen(target, trigger) {
    this.hc("media-exit-fullscreen-request", trigger, target);
  }
  /**
   * Dispatch a request to lock the screen orientation.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/screen-orientation#remote-control}
   */
  lockScreenOrientation(lockType, trigger) {
    this.hc("media-orientation-lock-request", trigger, lockType);
  }
  /**
   * Dispatch a request to unlock the screen orientation.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/screen-orientation#remote-control}
   */
  unlockScreenOrientation(trigger) {
    this.hc("media-orientation-unlock-request", trigger);
  }
  /**
   * Dispatch a request to enter picture-in-picture mode.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/picture-in-picture#remote-control}
   */
  enterPictureInPicture(trigger) {
    this.hc("media-enter-pip-request", trigger);
  }
  /**
   * Dispatch a request to exit picture-in-picture mode.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/picture-in-picture#remote-control}
   */
  exitPictureInPicture(trigger) {
    this.hc("media-exit-pip-request", trigger);
  }
  /**
   * Notify the media player that a seeking process is happening and to seek to the given `time`.
   */
  seeking(time, trigger) {
    this.hc("media-seeking-request", trigger, time);
  }
  /**
   * Notify the media player that a seeking operation has completed and to seek to the given `time`.
   * This is generally called after a series of `remote.seeking()` calls.
   */
  seek(time, trigger) {
    this.hc("media-seek-request", trigger, time);
  }
  seekToLiveEdge(trigger) {
    this.hc("media-live-edge-request", trigger);
  }
  /**
   * Dispatch a request to update the media volume to the given `volume` level which is a value
   * between 0 and 1.
   *
   * @example
   * ```ts
   * remote.changeVolume(0); // 0%
   * remote.changeVolume(0.05); // 5%
   * remote.changeVolume(0.5); // 50%
   * remote.changeVolume(0.75); // 70%
   * remote.changeVolume(1); // 100%
   * ```
   */
  changeVolume(volume, trigger) {
    this.hc("media-volume-change-request", trigger, Math.max(0, Math.min(1, volume)));
  }
  /**
   * Dispatch a request to change the current audio track.
   *
   * @example
   * ```ts
   * remote.changeAudioTrack(1); // track at index 1
   * ```
   */
  changeAudioTrack(index, trigger) {
    this.hc("media-audio-track-change-request", trigger, index);
  }
  /**
   * Dispatch a request to change the video quality. The special value `-1` represents auto quality
   * selection.
   *
   * @example
   * ```ts
   * remote.changeQuality(-1); // auto
   * remote.changeQuality(1); // quality at index 1
   * ```
   */
  changeQuality(index, trigger) {
    this.hc("media-quality-change-request", trigger, index);
  }
  /**
   * Request auto quality selection.
   */
  requestAutoQuality(trigger) {
    this.changeQuality(-1, trigger);
  }
  /**
   * Dispatch a request to change the mode of the text track at the given index.
   *
   * @example
   * ```ts
   * remote.changeTextTrackMode(1, 'showing'); // track at index 1
   * ```
   */
  changeTextTrackMode(index, mode, trigger) {
    this.hc("media-text-track-change-request", trigger, {
      index,
      mode
    });
  }
  /**
   * Dispatch a request to change the media playback rate.
   *
   * @example
   * ```ts
   * remote.changePlaybackRate(0.5); // Half the normal speed
   * remote.changePlaybackRate(1); // Normal speed
   * remote.changePlaybackRate(1.5); // 50% faster than normal
   * remote.changePlaybackRate(2); // Double the normal speed
   * ```
   */
  changePlaybackRate(rate, trigger) {
    this.hc("media-rate-change-request", trigger, rate);
  }
  /**
   * Dispatch a request to resume idle tracking on controls.
   */
  resumeControls(trigger) {
    this.hc("media-resume-controls-request", trigger);
  }
  /**
   * Dispatch a request to pause controls idle tracking. Pausing tracking will result in the
   * controls being visible until `remote.resumeControls()` is called. This method
   * is generally used when building custom controls and you'd like to prevent the UI from
   * disappearing.
   *
   * @example
   * ```ts
   * // Prevent controls hiding while menu is being interacted with.
   * function onSettingsOpen() {
   *   remote.pauseControls();
   * }
   *
   * function onSettingsClose() {
   *   remote.resumeControls();
   * }
   * ```
   */
  pauseControls(trigger) {
    this.hc("media-pause-controls-request", trigger);
  }
  /**
   * Dispatch a request to toggle the media playback state.
   */
  togglePaused(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    if (player.state.paused)
      this.play(trigger);
    else
      this.pause(trigger);
  }
  /**
   * Dispatch a request to toggle the controls visibility.
   */
  toggleControls(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    if (!player.controls.showing) {
      player.controls.show(0, trigger);
    } else {
      player.controls.hide(0, trigger);
    }
  }
  /**
   * Dispatch a request to toggle the media muted state.
   */
  toggleMuted(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    if (player.state.muted)
      this.unmute(trigger);
    else
      this.mute(trigger);
  }
  /**
   * Dispatch a request to toggle the media fullscreen state.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/fullscreen#remote-control}
   */
  toggleFullscreen(target, trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    if (player.state.fullscreen)
      this.exitFullscreen(target, trigger);
    else
      this.enterFullscreen(target, trigger);
  }
  /**
   * Dispatch a request to toggle the media picture-in-picture mode.
   *
   * @docs {@link https://www.vidstack.io/docs/player/core-concepts/picture-in-picture#remote-control}
   */
  togglePictureInPicture(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    if (player.state.pictureInPicture)
      this.exitPictureInPicture(trigger);
    else
      this.enterPictureInPicture(trigger);
  }
  /**
   * Turn captions off.
   */
  disableCaptions(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    const tracks = player.state.textTracks, track = player.state.textTrack;
    if (track) {
      const index = tracks.indexOf(track);
      this.changeTextTrackMode(index, "disabled", trigger);
    }
  }
  /**
   * Dispatch a request to toggle the current captions mode.
   */
  toggleCaptions(trigger) {
    const player = this.getPlayer(trigger?.target);
    if (!player) {
      return;
    }
    const tracks = player.state.textTracks, track = player.state.textTrack;
    if (track) {
      const index = tracks.indexOf(track);
      this.changeTextTrackMode(index, "disabled", trigger);
      this.kc = index;
    } else {
      let index = this.kc;
      if (!tracks[index] || !isTrackCaptionKind(tracks[index])) {
        index = -1;
      }
      if (index === -1) {
        index = tracks.findIndex((track2) => isTrackCaptionKind(track2) && track2.default);
      }
      if (index === -1) {
        index = tracks.findIndex((track2) => isTrackCaptionKind(track2));
      }
      if (index >= 0)
        this.changeTextTrackMode(index, "showing", trigger);
      this.kc = -1;
    }
  }
  hc(type, trigger, detail) {
    const request = new DOMEvent(type, {
      bubbles: true,
      composed: true,
      detail,
      trigger
    });
    let target = trigger?.target || null;
    if (target && target instanceof Component)
      target = target.el;
    const shouldUsePlayer = !target || target === document || target === window || target === document.body || this.ic?.el && target instanceof Node && !this.ic.el.contains(target);
    target = shouldUsePlayer ? this.z ?? this.getPlayer()?.el : target ?? this.z;
    if (this.ic) {
      this.ic.canPlayQueue.lc(type, () => target?.dispatchEvent(request));
    } else {
      target?.dispatchEvent(request);
    }
  }
  jc(method) {
  }
}

class MediaPlayerController extends ViewController {
}

class MediaControls extends MediaPlayerController {
  constructor() {
    super(...arguments);
    this.pc = -2;
    this.mc = false;
    this.nc = null;
    /**
     * The default amount of delay in milliseconds while media playback is progressing without user
     * activity to indicate an idle state (i.e., hide controls).
     *
     * @defaultValue 2000
     */
    this.defaultDelay = 2e3;
  }
  /**
   * Whether media controls are currently visible.
   */
  get showing() {
    return this.$state.controlsVisible();
  }
  /**
   * Show controls.
   */
  show(delay = 0, trigger) {
    this.qc();
    if (!this.mc) {
      this.oc(true, delay, trigger);
    }
  }
  /**
   * Hide controls.
   */
  hide(delay = this.defaultDelay, trigger) {
    this.qc();
    if (!this.mc) {
      this.oc(false, delay, trigger);
    }
  }
  /**
   * Whether all idle tracking on controls should be paused until resumed again.
   */
  pause(trigger) {
    this.mc = true;
    this.qc();
    this.oc(true, 0, trigger);
  }
  resume(trigger) {
    this.mc = false;
    if (this.$state.paused())
      return;
    this.oc(false, this.defaultDelay, trigger);
  }
  onConnect() {
    effect(this.rc.bind(this));
    const onPlay = this.db.bind(this), onPause = this.ib.bind(this);
    this.listen("can-play", (event) => this.show(0, event));
    this.listen("play", onPlay);
    this.listen("pause", onPause);
    this.listen("autoplay-fail", onPause);
  }
  rc() {
    const { paused, started, autoplayError } = this.$state;
    if (paused() || autoplayError() && !started())
      return;
    const onStopIdle = this.sc.bind(this);
    effect(() => {
      const pointer = this.$state.pointer(), isTouch = pointer === "coarse", events = [isTouch ? "touchend" : "pointerup", "keydown"];
      for (const eventType of events) {
        listenEvent(this.el, eventType, onStopIdle, { passive: false });
      }
      if (!isTouch) {
        listenEvent(this.el, "pointermove", onStopIdle);
      }
    });
  }
  db(event) {
    this.show(0, event);
    this.hide(this.defaultDelay, event);
  }
  ib(event) {
    this.show(0, event);
  }
  qc() {
    window.clearTimeout(this.pc);
    this.pc = -1;
  }
  sc(event) {
    if (
      // @ts-expect-error
      event.MEDIA_GESTURE || this.mc || isTouchPinchEvent(event)
    ) {
      return;
    }
    if (isKeyboardEvent(event)) {
      if (event.key === "Escape") {
        this.el?.focus();
        this.nc = null;
      } else if (this.nc) {
        event.preventDefault();
        requestAnimationFrame(() => {
          this.nc?.focus();
          this.nc = null;
        });
      }
    }
    this.show(0, event);
    this.hide(this.defaultDelay, event);
  }
  oc(visible, delay, trigger) {
    if (delay === 0) {
      this.Da(visible, trigger);
      return;
    }
    this.pc = window.setTimeout(() => {
      if (!this.scope)
        return;
      this.Da(visible && !this.mc, trigger);
    }, delay);
  }
  Da(visible, trigger) {
    if (this.$state.controlsVisible() === visible)
      return;
    this.$state.controlsVisible.set(visible);
    if (!visible && document.activeElement && this.el?.contains(document.activeElement)) {
      this.nc = document.activeElement;
      requestAnimationFrame(() => this.el?.focus());
    }
    this.dispatch("controls-change", {
      detail: visible,
      trigger
    });
  }
}

class NativeTextRenderer {
  constructor() {
    this.priority = 0;
    this.Fh = true;
    this.v = null;
    this.Dc = null;
    this.Eh = /* @__PURE__ */ new Set();
  }
  canRender() {
    return true;
  }
  attach(video) {
    this.v = video;
    video.textTracks.onchange = this.Da.bind(this);
  }
  addTrack(track) {
    this.Eh.add(track);
    this.Hh(track);
  }
  removeTrack(track) {
    track[TextTrackSymbol.Ba]?.remove?.();
    track[TextTrackSymbol.Ba] = null;
    this.Eh.delete(track);
  }
  changeTrack(track) {
    const current = track?.[TextTrackSymbol.Ba];
    if (current && current.track.mode !== "showing") {
      current.track.mode = "showing";
    }
    this.Dc = track;
  }
  setDisplay(display) {
    this.Fh = display;
    this.Da();
  }
  detach() {
    if (this.v)
      this.v.textTracks.onchange = null;
    for (const track of this.Eh)
      this.removeTrack(track);
    this.Eh.clear();
    this.v = null;
    this.Dc = null;
  }
  Hh(track) {
    if (!this.v)
      return;
    const el = track[TextTrackSymbol.Ba] ??= this.Ih(track);
    if (el instanceof HTMLElement) {
      this.v.append(el);
      el.track.mode = el.default ? "showing" : "hidden";
    }
  }
  Ih(track) {
    const el = document.createElement("track"), isDefault = track.default || track.mode === "showing", isSupported = track.src && track.type === "vtt";
    el.id = track.id;
    el.src = isSupported ? track.src : "https://cdn.jsdelivr.net/npm/vidstack@next/empty.vtt";
    el.label = track.label;
    el.kind = track.kind;
    el.default = isDefault;
    track.language && (el.srclang = track.language);
    if (isDefault && !isSupported) {
      this.Gh(track, el.track);
    }
    return el;
  }
  Gh(track, native) {
    if (track.src && track.type === "vtt" || native.cues?.length)
      return;
    for (const cue of track.cues)
      native.addCue(cue);
  }
  Da(event) {
    for (const track of this.Eh) {
      const nativeTrack = track[TextTrackSymbol.Ba]?.track;
      if (!nativeTrack)
        continue;
      if (!this.Fh) {
        nativeTrack.mode = "disabled";
        continue;
      }
      const isShowing = nativeTrack.mode === "showing";
      if (isShowing)
        this.Gh(track, nativeTrack);
      track.setMode(isShowing ? "showing" : "disabled", event);
    }
  }
}

class TextRenderers {
  constructor(_media) {
    this.v = null;
    this.vc = [];
    this.xc = false;
    this.tc = null;
    this.uc = null;
    this.g = _media;
    const textTracks = _media.textTracks;
    this.wc = textTracks;
    effect(this.Ac.bind(this));
    onDispose(this.yc.bind(this));
    listenEvent(textTracks, "add", this.za.bind(this));
    listenEvent(textTracks, "remove", this.Bc.bind(this));
    listenEvent(textTracks, "mode-change", this.Hb.bind(this));
  }
  Ac() {
    const { $state, $iosControls } = this.g;
    this.xc = $state.controls() || $iosControls();
    this.Hb();
  }
  add(renderer) {
    this.vc.push(renderer);
    this.Hb();
  }
  remove(renderer) {
    renderer.detach();
    this.vc.splice(this.vc.indexOf(renderer), 1);
    this.Hb();
  }
  /* @internal */
  j(video) {
    requestAnimationFrame(() => {
      this.v = video;
      if (video) {
        this.tc = new NativeTextRenderer();
        this.tc.attach(video);
        for (const track of this.wc)
          this.zc(track);
      }
      this.Hb();
    });
  }
  zc(track) {
    if (!isTrackCaptionKind(track))
      return;
    this.tc?.addTrack(track);
  }
  Cc(track) {
    if (!isTrackCaptionKind(track))
      return;
    this.tc?.removeTrack(track);
  }
  za(event) {
    this.zc(event.detail);
  }
  Bc(event) {
    this.Cc(event.detail);
  }
  Hb() {
    if (!this.v) {
      this.yc();
      return;
    }
    const currentTrack = this.wc.selected;
    if (this.xc || currentTrack?.[TextTrackSymbol.Ca]) {
      this.uc?.changeTrack(null);
      this.tc?.setDisplay(true);
      this.tc?.changeTrack(currentTrack);
      return;
    }
    this.tc?.setDisplay(false);
    this.tc?.changeTrack(null);
    if (!currentTrack) {
      this.uc?.changeTrack(null);
      return;
    }
    const customRenderer = this.vc.sort((a, b) => a.priority - b.priority).find((loader) => loader.canRender(currentTrack));
    if (this.uc !== customRenderer) {
      this.uc?.detach();
      customRenderer?.attach(this.v);
      this.uc = customRenderer ?? null;
    }
    customRenderer?.changeTrack(currentTrack);
  }
  yc() {
    this.tc?.detach();
    this.tc = null;
    this.uc?.detach();
    this.uc = null;
  }
}

class TextTrackList extends List {
  constructor() {
    super(...arguments);
    this.Mc = false;
    this.Sc = {};
    this.Tc = this.Uc.bind(this);
  }
  get selected() {
    const track = this.B.find((t) => t.mode === "showing" && isTrackCaptionKind(t));
    return track ?? null;
  }
  add(init, trigger) {
    const isTrack = init instanceof TextTrack, track = isTrack ? init : new TextTrack(init);
    if (this.Sc[init.kind] && init.default)
      delete init.default;
    track.addEventListener("mode-change", this.Tc);
    this[ListSymbol.F](track, trigger);
    track[TextTrackSymbol.Rc] = this[TextTrackSymbol.Rc];
    if (this.Mc)
      track[TextTrackSymbol.Mc]();
    if (init.default) {
      this.Sc[init.kind] = track;
      track.mode = "showing";
    }
    return this;
  }
  remove(track, trigger) {
    if (!this.B.includes(track))
      return;
    if (track === this.Sc[track.kind])
      delete this.Sc[track.kind];
    track.mode = "disabled";
    track[TextTrackSymbol.la] = null;
    track.removeEventListener("mode-change", this.Tc);
    this[ListSymbol.D](track, trigger);
    return this;
  }
  clear(trigger) {
    for (const track of [...this.B]) {
      this.remove(track, trigger);
    }
    return this;
  }
  getById(id) {
    return this.B.find((track) => track.id === id) ?? null;
  }
  getByKind(kind) {
    const kinds = Array.isArray(kind) ? kind : [kind];
    return this.B.filter((track) => kinds.includes(track.kind));
  }
  /* @internal */
  [(TextTrackSymbol.Mc)]() {
    if (this.Mc)
      return;
    for (const track of this.B)
      track[TextTrackSymbol.Mc]();
    this.Mc = true;
  }
  Uc(event) {
    const track = event.detail;
    if (track.mode === "showing") {
      const kinds = isTrackCaptionKind(track) ? ["captions", "subtitles"] : [track.kind];
      for (const t of this.B) {
        if (t.mode === "showing" && t != track && kinds.includes(t.kind)) {
          t.mode = "disabled";
        }
      }
    }
    this.dispatchEvent(
      new DOMEvent("mode-change", {
        detail: event.detail,
        trigger: event
      })
    );
  }
}

const SELECTED = Symbol(0);
class SelectList extends List {
  get selected() {
    return this.B.find((item) => item.selected) ?? null;
  }
  get selectedIndex() {
    return this.B.findIndex((item) => item.selected);
  }
  /* @internal */
  [ListSymbol.G](item, trigger) {
    this[ListSymbol.ha](item, false, trigger);
  }
  /* @internal */
  [ListSymbol.F](item, trigger) {
    item[SELECTED] = false;
    Object.defineProperty(item, "selected", {
      get() {
        return this[SELECTED];
      },
      set: (selected) => {
        if (this.readonly)
          return;
        this[ListSymbol.fc]?.();
        this[ListSymbol.ha](item, selected);
      }
    });
    super[ListSymbol.F](item, trigger);
  }
  /* @internal */
  [ListSymbol.ha](item, selected, trigger) {
    if (selected === item[SELECTED])
      return;
    const prev = this.selected;
    item[SELECTED] = selected;
    const changed = !selected ? prev === item : prev !== item;
    if (changed) {
      if (prev)
        prev[SELECTED] = false;
      this.dispatchEvent(
        new DOMEvent("change", {
          detail: { prev, current: this.selected },
          trigger
        })
      );
    }
  }
}

class AudioTrackList extends SelectList {
  getById(id) {
    if (id === "")
      return null;
    return this.B.find((track) => track.id === id) ?? null;
  }
}

const globalEval = eval;
const equalsRE = /:\s+'?"?(.*?)'?"?\)/g, notRE = /\s+not\s+/g, andRE = /\s+and\s+/g, orRE = /\s+or\s+/g, pxRE = /(\d)px/g;
class PlayerQueryList extends EventsTarget {
  constructor(store, query) {
    super();
    this.Vc = signal("true");
    this.Wc = /* @__PURE__ */ new Set();
    this.Xc = signal(true);
    this.$matches = computed(() => {
      let currentEval = this.Vc();
      if (currentEval === "never")
        return false;
      for (const prop of this.Wc) {
        const value = this.Zc[prop](), replaceValue = isString(value) ? `'${value}'` : value + "";
        currentEval = currentEval.replace(camelToKebabCase(prop), replaceValue);
      }
      return globalEval(`!!(${currentEval})`) && this.Xc();
    });
    this.Yc = query;
    this.Zc = store;
    root((dispose) => {
      effect(this.r.bind(this));
      effect(this.$c.bind(this));
      this._c = dispose;
    });
  }
  static {
    this.create = (query) => {
      const media = useMediaContext();
      return new PlayerQueryList(media.$state, query);
    };
  }
  get query() {
    return unwrap(this.Yc);
  }
  get matches() {
    return this.$matches();
  }
  r() {
    const query = this.query;
    if (query === "")
      return;
    if (query === "never") {
      this.Vc.set(query);
      return;
    }
    const queryList = query.trim().split(/\s*,\s*/g), mediaQueries = queryList.filter((q) => q.startsWith("@media")).join(","), playerQueries = queryList.filter((q) => !q.startsWith("@media"));
    if (mediaQueries.length) {
      const mediaQuery = window.matchMedia(mediaQueries.replace(/@media\s/g, "")), onChange = () => void this.Xc.set(mediaQuery.matches);
      onChange();
      listenEvent(mediaQuery, "change", onChange);
    }
    if (playerQueries.length) {
      const evaluation = this.ad(playerQueries), validProps = Object.keys(mediaState.record);
      for (const query2 of evaluation.matchAll(/\(([-a-zA-Z]+)\s/g)) {
        const prop = kebabToCamelCase(query2[1]);
        if (validProps.includes(prop)) {
          this.Wc.add(prop);
        }
      }
      this.Vc.set(evaluation);
    }
    return () => {
      this.Wc.clear();
      this.Vc.set("true");
      this.Xc.set(true);
    };
  }
  $c() {
    this.$matches();
    this.dispatchEvent(new Event("change"));
  }
  ad(queryList) {
    return queryList.map(
      (query) => "(" + query.replace(equalsRE, ' == "$1")').replace(notRE, "!").replace(andRE, " && ").replace(orRE, " || ").replace(pxRE, "$1").trim() + ")"
    ).join(" || ");
  }
  destroy() {
    this._c();
  }
}

class VideoQualityList extends SelectList {
  constructor() {
    super(...arguments);
    this.bd = false;
    /**
     * Configures quality switching:
     *
     * - `current`: Trigger an immediate quality level switch. This will abort the current fragment
     * request if any, flush the whole buffer, and fetch fragment matching with current position
     * and requested quality level.
     *
     * - `next`: Trigger a quality level switch for next fragment. This could eventually flush
     * already buffered next fragment.
     *
     * - `load`: Set quality level for next loaded fragment.
     *
     * @see {@link https://vidstack.io/docs/player/core-concepts/quality#switch}
     * @see {@link https://github.com/video-dev/hls.js/blob/master/docs/API.md#quality-switch-control-api}
     */
    this.switch = "current";
  }
  /**
   * Whether automatic quality selection is enabled.
   */
  get auto() {
    return this.bd || this.readonly;
  }
  /* @internal */
  [(ListSymbol.fc)]() {
    this[QualitySymbol.ma](false);
  }
  /* @internal */
  [ListSymbol.I](trigger) {
    this[QualitySymbol.ma](false, trigger);
  }
  /**
   * Request automatic quality selection (if supported). This will be a no-op if the list is
   * `readonly` as that already implies auto-selection.
   */
  autoSelect(trigger) {
    if (this.readonly || this.bd || !this[QualitySymbol.ba])
      return;
    this[QualitySymbol.ba]?.();
    this[QualitySymbol.ma](true, trigger);
  }
  /* @internal */
  [QualitySymbol.ma](auto, trigger) {
    if (this.bd === auto)
      return;
    this.bd = auto;
    this.dispatchEvent(
      new DOMEvent("auto-change", {
        detail: auto,
        trigger
      })
    );
  }
}
function isHTMLAudioElement(element) {
  return element instanceof HTMLAudioElement;
}
function isHTMLVideoElement(element) {
  return element instanceof HTMLVideoElement;
}
function isHTMLMediaElement(element) {
  return isHTMLAudioElement(element) || isHTMLVideoElement(element);
}

const MEDIA_KEY_SHORTCUTS = {
  togglePaused: "k Space",
  toggleMuted: "m",
  toggleFullscreen: "f",
  togglePictureInPicture: "i",
  toggleCaptions: "c",
  seekBackward: "j J ArrowLeft",
  seekForward: "l L ArrowRight",
  volumeUp: "ArrowUp",
  volumeDown: "ArrowDown",
  speedUp: ">",
  slowDown: "<"
};
const MODIFIER_KEYS = /* @__PURE__ */ new Set(["Shift", "Alt", "Meta", "Control"]), BUTTON_SELECTORS = 'button, [role="button"]', IGNORE_SELECTORS = 'input, textarea, select, [contenteditable], [role^="menuitem"]';
class MediaKeyboardController extends MediaPlayerController {
  constructor(_media) {
    super();
    this.cd = null;
    this.g = _media;
  }
  onConnect() {
    effect(this.gd.bind(this));
  }
  gd() {
    const { keyDisabled, keyTarget } = this.$props;
    if (keyDisabled())
      return;
    const target = keyTarget() === "player" ? this.el : document, $active = signal(false);
    if (target === this.el) {
      this.listen("focusin", () => $active.set(true));
      this.listen("focusout", (event) => {
        if (!this.el.contains(event.target))
          $active.set(false);
      });
    } else {
      if (!peek($active))
        $active.set(document.querySelector("[data-media-player]") === this.el);
      listenEvent(document, "focusin", (event) => {
        const activePlayer = event.composedPath().find((el) => el instanceof Element && el.localName === "media-player");
        if (activePlayer !== void 0)
          $active.set(this.el === activePlayer);
      });
    }
    effect(() => {
      if (!$active())
        return;
      listenEvent(target, "keyup", this.hd.bind(this));
      listenEvent(target, "keydown", this.id.bind(this));
      listenEvent(target, "keydown", this.jd.bind(this), { capture: true });
    });
  }
  hd(event) {
    const focusedEl = document.activeElement;
    if (!event.key || !this.$state.canSeek() || focusedEl?.matches(IGNORE_SELECTORS)) {
      return;
    }
    let { method, value } = this.ed(event);
    if (!isString(value) && !isArray(value)) {
      value?.callback(event);
      return;
    }
    if (method?.startsWith("seek")) {
      event.preventDefault();
      event.stopPropagation();
      if (this.cd) {
        this.fd(event, method === "seekForward");
        this.cd = null;
      } else {
        this.g.remote.seek(this.dd, event);
        this.dd = void 0;
      }
    }
    if (method?.startsWith("volume")) {
      const volumeSlider = this.el.querySelector("[data-media-volume-slider]");
      volumeSlider?.dispatchEvent(
        new KeyboardEvent("keyup", {
          key: method === "volumeUp" ? "Up" : "Down",
          shiftKey: event.shiftKey,
          trigger: event
        })
      );
    }
  }
  id(event) {
    if (!event.key || MODIFIER_KEYS.has(event.key))
      return;
    const focusedEl = document.activeElement;
    if (focusedEl?.matches(IGNORE_SELECTORS) || isKeyboardClick(event) && focusedEl?.matches(BUTTON_SELECTORS)) {
      return;
    }
    let { method, value } = this.ed(event);
    if (!isString(value) && !isArray(value)) {
      value?.callback(event);
      return;
    }
    if (!method && !event.metaKey && /[0-9]/.test(event.key)) {
      event.preventDefault();
      event.stopPropagation();
      this.g.remote.seek(this.$state.duration() / 10 * Number(event.key), event);
      return;
    }
    if (!method)
      return;
    event.preventDefault();
    event.stopPropagation();
    switch (method) {
      case "seekForward":
      case "seekBackward":
        this.kd(event, method, method === "seekForward");
        break;
      case "volumeUp":
      case "volumeDown":
        const volumeSlider = this.el.querySelector("[data-media-volume-slider]");
        if (volumeSlider) {
          volumeSlider.dispatchEvent(
            new KeyboardEvent("keydown", {
              key: method === "volumeUp" ? "Up" : "Down",
              shiftKey: event.shiftKey,
              trigger: event
            })
          );
        } else {
          const value2 = event.shiftKey ? 0.1 : 0.05;
          this.g.remote.changeVolume(
            this.$state.volume() + (method === "volumeUp" ? +value2 : -value2),
            event
          );
        }
        break;
      case "toggleFullscreen":
        this.g.remote.toggleFullscreen("prefer-media", event);
        break;
      case "speedUp":
      case "slowDown":
        const playbackRate = this.$state.playbackRate();
        this.g.remote.changePlaybackRate(
          Math.max(0.25, Math.min(2, playbackRate + (method === "speedUp" ? 0.25 : -0.25))),
          event
        );
        break;
      default:
        this.g.remote[method]?.(event);
    }
  }
  jd(event) {
    if (isHTMLMediaElement(event.target) && this.ed(event).method) {
      event.preventDefault();
    }
  }
  ed(event) {
    const keyShortcuts = {
      ...this.$props.keyShortcuts(),
      ...this.g.ariaKeys
    };
    const method = Object.keys(keyShortcuts).find((method2) => {
      const value = keyShortcuts[method2], keys = isArray(value) ? value.join(" ") : isString(value) ? value : value?.keys;
      return (isArray(keys) ? keys : keys?.split(" "))?.some((keys2) => {
        return replaceSymbolKeys(keys2).replace(/Control/g, "Ctrl").split("+").every(
          (key) => MODIFIER_KEYS.has(key) ? event[key.toLowerCase() + "Key"] : event.key === key.replace("Space", " ")
        );
      });
    });
    return {
      method,
      value: method ? keyShortcuts[method] : null
    };
  }
  ld(event, type) {
    const seekBy = event.shiftKey ? 10 : 5;
    return this.dd = Math.max(
      0,
      Math.min(
        (this.dd ?? this.$state.currentTime()) + (type === "seekForward" ? +seekBy : -seekBy),
        this.$state.duration()
      )
    );
  }
  fd(event, forward) {
    this.cd?.dispatchEvent(
      new KeyboardEvent(event.type, {
        key: !forward ? "Left" : "Right",
        shiftKey: event.shiftKey,
        trigger: event
      })
    );
  }
  kd(event, type, forward) {
    if (!this.$state.canSeek())
      return;
    if (!this.cd)
      this.cd = this.el.querySelector("[data-media-time-slider]");
    if (this.cd) {
      this.fd(event, forward);
    } else {
      this.g.remote.seeking(this.ld(event, type), event);
    }
  }
}
const SYMBOL_KEY_MAP = ["!", "@", "#", "$", "%", "^", "&", "*", "(", ")"];
function replaceSymbolKeys(key) {
  return key.replace(/Shift\+(\d)/g, (_, num) => SYMBOL_KEY_MAP[num - 1]);
}

class ARIAKeyShortcuts extends ViewController {
  constructor(_shortcut) {
    super();
    this.md = _shortcut;
  }
  onAttach(el) {
    const { $props, ariaKeys } = useMediaContext(), keys = el.getAttribute("aria-keyshortcuts");
    if (keys) {
      ariaKeys[this.md] = keys;
      {
        onDispose(() => {
          delete ariaKeys[this.md];
        });
      }
      return;
    }
    const shortcuts = $props.keyShortcuts()[this.md];
    if (shortcuts) {
      const keys2 = isArray(shortcuts) ? shortcuts.join(" ") : isString(shortcuts) ? shortcuts : shortcuts?.keys;
      el.setAttribute("aria-keyshortcuts", isArray(keys2) ? keys2.join(" ") : keys2);
    }
  }
}

class AudioProviderLoader {
  canPlay({ src, type }) {
    return isString(src) ? AUDIO_EXTENSIONS.test(src) || AUDIO_TYPES.has(type) || src.startsWith("blob:") && type === "audio/object" : type === "audio/object";
  }
  mediaType() {
    return "audio";
  }
  async load() {
    return new (await Promise.resolve().then(function () { return vidstackAudio; })).AudioProvider(this.target);
  }
}

class VideoProviderLoader {
  canPlay(src) {
    return isString(src.src) ? VIDEO_EXTENSIONS.test(src.src) || VIDEO_TYPES.has(src.type) || src.src.startsWith("blob:") && src.type === "video/object" || isHLSSrc(src) && canPlayHLSNatively() : src.type === "video/object";
  }
  mediaType() {
    return "video";
  }
  async load(context) {
    return new (await Promise.resolve().then(function () { return vidstackVideo; })).VideoProvider(this.target, context);
  }
}

class HLSProviderLoader extends VideoProviderLoader {
  static {
    this.supported = isHLSSupported();
  }
  preconnect() {
    preconnect("https://cdn.jsdelivr.net", "preconnect");
  }
  canPlay(src) {
    return HLSProviderLoader.supported && isHLSSrc(src);
  }
  async load(context) {
    return new (await Promise.resolve().then(function () { return vidstackHls; })).HLSProvider(this.target, context);
  }
}

const MEDIA_ATTRIBUTES = Symbol(0);
const mediaAttributes = [
  "autoplay",
  "autoplayError",
  "canFullscreen",
  "canPictureInPicture",
  "canLoad",
  "canPlay",
  "canSeek",
  "ended",
  "fullscreen",
  "loop",
  "live",
  "liveEdge",
  "mediaType",
  "muted",
  "paused",
  "pictureInPicture",
  "playing",
  "playsinline",
  "seeking",
  "started",
  "streamType",
  "viewType",
  "waiting"
];

const mediaPlayerProps = {
  autoplay: false,
  controls: false,
  currentTime: 0,
  crossorigin: null,
  fullscreenOrientation: "landscape",
  load: "visible",
  logLevel: "silent",
  loop: false,
  muted: false,
  paused: true,
  playsinline: false,
  playbackRate: 1,
  poster: "",
  preload: "metadata",
  preferNativeHLS: false,
  src: "",
  controlsDelay: 2e3,
  viewType: "unknown",
  streamType: "unknown",
  volume: 1,
  liveEdgeTolerance: 10,
  minLiveDVRWindow: 60,
  keyDisabled: false,
  keyTarget: "player",
  keyShortcuts: MEDIA_KEY_SHORTCUTS,
  title: ""
};

class MediaLoadController extends MediaPlayerController {
  constructor(_callback) {
    super();
    this.sa = _callback;
  }
  async onAttach(el) {
    const load = this.$props.load();
    if (load === "eager") {
      requestAnimationFrame(this.sa);
    } else if (load === "idle") {
      waitIdlePeriod(this.sa);
    } else if (load === "visible") {
      const observer = new IntersectionObserver((entries) => {
        if (!this.scope)
          return;
        if (entries[0].isIntersecting) {
          observer.disconnect();
          this.sa();
        }
      });
      observer.observe(el);
      return observer.disconnect.bind(observer);
    }
  }
}

class MediaPlayerDelegate {
  constructor(_handle, _media) {
    this.Md = _handle;
    this.g = _media;
  }
  f(type, ...init) {
    this.Md(new DOMEvent(type, init?.[0]));
  }
  async sb(info, trigger) {
    const { $state, logger } = this.g;
    if (peek($state.canPlay))
      return;
    this.f("can-play", { detail: info, trigger });
    tick();
    if ($state.canPlay() && $state.autoplay() && !$state.started()) {
      await this.Kh(trigger);
    }
  }
  async Kh(trigger) {
    const { player, $state } = this.g;
    $state.autoplaying.set(true);
    const attemptEvent = new DOMEvent("autoplay-attempt", { trigger });
    try {
      await player.play(attemptEvent);
    } catch (error) {
    }
  }
}

class Queue {
  constructor() {
    this.Mh = /* @__PURE__ */ new Map();
  }
  /**
   * Queue the given `item` under the given `key` to be processed at a later time by calling
   * `serve(key)`.
   */
  lc(key, item) {
    if (!this.Mh.has(key))
      this.Mh.set(key, /* @__PURE__ */ new Set());
    this.Mh.get(key).add(item);
  }
  /**
   * Process all items in queue for the given `key`.
   */
  ti(key, callback) {
    const items = this.Mh.get(key);
    if (items)
      for (const item of items)
        callback(item);
    this.Mh.delete(key);
  }
  /**
   * Removes all queued items under the given `key`.
   */
  Qh(key) {
    this.Mh.delete(key);
  }
  /**
   * The number of items currently queued under the given `key`.
   */
  Ri(key) {
    return this.Mh.get(key)?.size ?? 0;
  }
  /**
   * Clear all items in the queue.
   */
  H() {
    this.Mh.clear();
  }
}

class MediaRequestContext {
  constructor() {
    this.kd = false;
    this.Rh = false;
    this.Oh = false;
    this.Mh = new Queue();
  }
}
class MediaRequestManager extends MediaPlayerController {
  constructor(_stateMgr, _request, _media) {
    super();
    this.Ph = false;
    this.od = _stateMgr;
    this.Lh = _request;
    this.g = _media;
    this.Ra = _media.$provider;
    this.Nd = new MediaControls();
    this.Nh = new FullscreenController();
    this.Ke = new ScreenOrientationController();
  }
  onAttach() {
    this.listen("fullscreen-change", this.L.bind(this));
  }
  onConnect() {
    const names = Object.getOwnPropertyNames(Object.getPrototypeOf(this)), handle = this.Vh.bind(this);
    for (const name of names) {
      if (name.startsWith("media-")) {
        this.listen(name, handle);
      }
    }
    effect(this.Wh.bind(this));
    effect(this.Xh.bind(this));
    effect(this.Yh.bind(this));
  }
  Vh(event) {
    event.stopPropagation();
    if (peek(this.Ra))
      this[event.type]?.(event);
  }
  async Kd(trigger) {
    const { canPlay, paused, ended, autoplaying, seekableStart } = this.$state;
    if (!peek(paused))
      return;
    if (trigger?.type !== "media-play-request") {
      this.dispatchEvent(this.createEvent("media-play-request", { trigger }));
      return;
    }
    this.Lh.Mh.lc("play", trigger);
    try {
      const provider = peek(this.Ra);
      throwIfNotReadyForPlayback(provider, peek(canPlay));
      if (peek(ended)) {
        provider.currentTime = seekableStart() + 0.1;
      }
      return await provider.play();
    } catch (error) {
      const errorEvent = this.createEvent("play-fail", {
        detail: coerceToError(error),
        trigger
      });
      errorEvent.autoplay = autoplaying();
      this.od.Md(errorEvent);
      throw error;
    }
  }
  async Jd(trigger) {
    const { canPlay, paused } = this.$state;
    if (peek(paused))
      return;
    if (trigger?.type !== "media-pause-request") {
      this.dispatchEvent(this.createEvent("media-pause-request", { trigger }));
      return;
    }
    this.Lh.Mh.lc("pause", trigger);
    const provider = peek(this.Ra);
    throwIfNotReadyForPlayback(provider, peek(canPlay));
    return provider.pause();
  }
  Sd(trigger) {
    const { canPlay, live, liveEdge, canSeek, liveSyncPosition, seekableEnd, userBehindLiveEdge } = this.$state;
    userBehindLiveEdge.set(false);
    if (peek(() => !live() || liveEdge() || !canSeek()))
      return;
    const provider = peek(this.Ra);
    throwIfNotReadyForPlayback(provider, peek(canPlay));
    provider.currentTime = liveSyncPosition() ?? seekableEnd() - 2;
  }
  async Od(target = "prefer-media", trigger) {
    const adapter = this.Sh(target);
    throwIfFullscreenNotSupported(target, adapter);
    if (adapter.active)
      return;
    if (peek(this.$state.pictureInPicture)) {
      this.Ph = true;
      await this.Rd(trigger);
    }
    if (trigger?.type !== "media-enter-fullscreen-request") {
      this.dispatchEvent(
        this.createEvent("media-enter-fullscreen-request", {
          detail: target,
          trigger
        })
      );
      return;
    }
    this.Lh.Mh.lc("fullscreen", trigger);
    return adapter.enter();
  }
  async Pd(target = "prefer-media", trigger) {
    const adapter = this.Sh(target);
    throwIfFullscreenNotSupported(target, adapter);
    if (!adapter.active)
      return;
    if (trigger?.type !== "media-exit-fullscreen-request") {
      this.dispatchEvent(
        this.createEvent("media-exit-fullscreen-request", {
          detail: target,
          trigger
        })
      );
      return;
    }
    try {
      this.Lh.Mh.lc("fullscreen", trigger);
      const result = await adapter.exit();
      if (this.Ph && peek(this.$state.canPictureInPicture)) {
        await this.Qd();
      }
      return result;
    } finally {
      this.Ph = false;
    }
  }
  Sh(target) {
    const provider = peek(this.Ra);
    return target === "prefer-media" && this.Nh.supported || target === "media" ? this.Nh : provider?.fullscreen;
  }
  async Qd(trigger) {
    this.Th();
    if (this.$state.pictureInPicture())
      return;
    if (trigger?.type !== "media-enter-pip-request") {
      this.dispatchEvent(this.createEvent("media-enter-pip-request", { trigger }));
      return;
    }
    this.Lh.Mh.lc("pip", trigger);
    return await this.Ra().pictureInPicture.enter();
  }
  async Rd(trigger) {
    this.Th();
    if (!this.$state.pictureInPicture())
      return;
    if (trigger?.type !== "media-exit-pip-request") {
      this.dispatchEvent(this.createEvent("media-exit-pip-request", { trigger }));
      return;
    }
    this.Lh.Mh.lc("pip", trigger);
    return await this.Ra().pictureInPicture.exit();
  }
  Th() {
    if (this.$state.canPictureInPicture())
      return;
    throw Error(
      "[vidstack] no pip support"
    );
  }
  Wh() {
    this.Nd.defaultDelay = this.$props.controlsDelay();
  }
  Xh() {
    const { canLoad, canFullscreen } = this.$state, supported = this.Nh.supported || this.Ra()?.fullscreen?.supported || false;
    if (canLoad() && peek(canFullscreen) === supported)
      return;
    canFullscreen.set(supported);
  }
  Yh() {
    const { canLoad, canPictureInPicture } = this.$state, supported = this.Ra()?.pictureInPicture?.supported || false;
    if (canLoad() && peek(canPictureInPicture) === supported)
      return;
    canPictureInPicture.set(supported);
  }
  ["media-audio-track-change-request"](event) {
    if (this.g.audioTracks.readonly) {
      return;
    }
    const index = event.detail, track = this.g.audioTracks[index];
    if (track) {
      this.Lh.Mh.lc("audioTrack", event);
      track.selected = true;
    }
  }
  async ["media-enter-fullscreen-request"](event) {
    try {
      await this.Od(event.detail, event);
    } catch (error) {
      this.M(error, event);
    }
  }
  async ["media-exit-fullscreen-request"](event) {
    try {
      await this.Pd(event.detail, event);
    } catch (error) {
      this.M(error, event);
    }
  }
  async L(event) {
    const lockType = peek(this.$props.fullscreenOrientation), isFullscreen = event.detail;
    if (isUndefined(lockType) || !this.Ke.supported)
      return;
    if (isFullscreen) {
      if (this.Ke.locked)
        return;
      this.dispatch("media-orientation-lock-request", {
        detail: lockType,
        trigger: event
      });
    } else if (this.Ke.locked) {
      this.dispatch("media-orientation-unlock-request", {
        trigger: event
      });
    }
  }
  M(error, request) {
    this.od.Md(
      this.createEvent("fullscreen-error", {
        detail: coerceToError(error)
      })
    );
  }
  async ["media-orientation-lock-request"](event) {
    try {
      this.Lh.Mh.lc("orientation", event);
      await this.Ke.lock(event.detail);
    } catch (error) {
      this.Lh.Mh.Qh("orientation");
    }
  }
  async ["media-orientation-unlock-request"](event) {
    try {
      this.Lh.Mh.lc("orientation", event);
      await this.Ke.unlock();
    } catch (error) {
      this.Lh.Mh.Qh("orientation");
    }
  }
  async ["media-enter-pip-request"](event) {
    try {
      await this.Qd(event);
    } catch (error) {
      this.Uh(error, event);
    }
  }
  async ["media-exit-pip-request"](event) {
    try {
      await this.Rd(event);
    } catch (error) {
      this.Uh(error, event);
    }
  }
  Uh(error, request) {
    this.od.Md(
      this.createEvent("picture-in-picture-error", {
        detail: coerceToError(error)
      })
    );
  }
  ["media-live-edge-request"](event) {
    const { live, liveEdge, canSeek } = this.$state;
    if (!live() || liveEdge() || !canSeek())
      return;
    this.Lh.Mh.lc("seeked", event);
    try {
      this.Sd();
    } catch (error) {
    }
  }
  ["media-loop-request"](event) {
    window.requestAnimationFrame(async () => {
      try {
        this.Lh.Rh = true;
        this.Lh.Oh = true;
        await this.Kd(event);
      } catch (e) {
        this.Lh.Rh = false;
        this.Lh.Oh = false;
      }
    });
  }
  async ["media-pause-request"](event) {
    if (this.$state.paused())
      return;
    try {
      await this.Jd(event);
    } catch (error) {
      this.Lh.Mh.Qh("pause");
    }
  }
  async ["media-play-request"](event) {
    if (!this.$state.paused())
      return;
    try {
      await this.Kd(event);
    } catch (e) {
    }
  }
  ["media-rate-change-request"](event) {
    if (this.$state.playbackRate() === event.detail)
      return;
    this.Lh.Mh.lc("rate", event);
    this.Ra().playbackRate = event.detail;
  }
  ["media-quality-change-request"](event) {
    if (this.g.qualities.readonly) {
      return;
    }
    this.Lh.Mh.lc("quality", event);
    const index = event.detail;
    if (index < 0) {
      this.g.qualities.autoSelect(event);
    } else {
      const quality = this.g.qualities[index];
      if (quality) {
        quality.selected = true;
      }
    }
  }
  ["media-pause-controls-request"](event) {
    this.Lh.Mh.lc("controls", event);
    this.Nd.pause(event);
  }
  ["media-resume-controls-request"](event) {
    this.Lh.Mh.lc("controls", event);
    this.Nd.resume(event);
  }
  ["media-seek-request"](event) {
    const { seekableStart, seekableEnd, ended, canSeek, live, userBehindLiveEdge } = this.$state;
    if (ended())
      this.Lh.Oh = true;
    this.Lh.kd = false;
    this.Lh.Mh.Qh("seeking");
    const boundTime = Math.min(Math.max(seekableStart() + 0.1, event.detail), seekableEnd() - 0.1);
    if (!Number.isFinite(boundTime) || !canSeek())
      return;
    this.Lh.Mh.lc("seeked", event);
    this.Ra().currentTime = boundTime;
    if (live() && event.isOriginTrusted && Math.abs(seekableEnd() - boundTime) >= 2) {
      userBehindLiveEdge.set(true);
    }
  }
  ["media-seeking-request"](event) {
    this.Lh.Mh.lc("seeking", event);
    this.$state.seeking.set(true);
    this.Lh.kd = true;
  }
  ["media-start-loading"](event) {
    if (this.$state.canLoad())
      return;
    this.Lh.Mh.lc("load", event);
    this.od.Md(this.createEvent("can-load"));
  }
  ["media-text-track-change-request"](event) {
    const { index, mode } = event.detail, track = this.g.textTracks[index];
    if (track) {
      this.Lh.Mh.lc("textTrack", event);
      track.setMode(mode, event);
    }
  }
  ["media-mute-request"](event) {
    if (this.$state.muted())
      return;
    this.Lh.Mh.lc("volume", event);
    this.Ra().muted = true;
  }
  ["media-unmute-request"](event) {
    const { muted, volume } = this.$state;
    if (!muted())
      return;
    this.Lh.Mh.lc("volume", event);
    this.g.$provider().muted = false;
    if (volume() === 0) {
      this.Lh.Mh.lc("volume", event);
      this.Ra().volume = 0.25;
    }
  }
  ["media-volume-change-request"](event) {
    const { muted, volume } = this.$state;
    const newVolume = event.detail;
    if (volume() === newVolume)
      return;
    this.Lh.Mh.lc("volume", event);
    this.Ra().volume = newVolume;
    if (newVolume > 0 && muted()) {
      this.Lh.Mh.lc("volume", event);
      this.Ra().muted = false;
    }
  }
}
function throwIfNotReadyForPlayback(provider, canPlay) {
  if (provider && canPlay)
    return;
  throw Error(
    "[vidstack] media not ready"
  );
}
function throwIfFullscreenNotSupported(target, fullscreen) {
  if (fullscreen?.supported)
    return;
  throw Error(
    "[vidstack] no fullscreen support"
  );
}

var functionDebounce = debounce$1;
function debounce$1(fn, wait, callFirst) {
  var timeout = null;
  var debouncedFn = null;
  var clear = function() {
    if (timeout) {
      clearTimeout(timeout);
      debouncedFn = null;
      timeout = null;
    }
  };
  var flush = function() {
    var call = debouncedFn;
    clear();
    if (call) {
      call();
    }
  };
  var debounceWrapper = function() {
    if (!wait) {
      return fn.apply(this, arguments);
    }
    var context = this;
    var args = arguments;
    var callNow = callFirst && !timeout;
    clear();
    debouncedFn = function() {
      fn.apply(context, args);
    };
    timeout = setTimeout(function() {
      timeout = null;
      if (!callNow) {
        var call = debouncedFn;
        debouncedFn = null;
        return call();
      }
    }, wait);
    if (callNow) {
      return debouncedFn();
    }
  };
  debounceWrapper.cancel = clear;
  debounceWrapper.flush = flush;
  return debounceWrapper;
}

var functionThrottle = throttle;
function throttle(fn, interval, options) {
  var timeoutId = null;
  var throttledFn = null;
  var leading = options && options.leading;
  var trailing = options && options.trailing;
  if (leading == null) {
    leading = true;
  }
  if (trailing == null) {
    trailing = !leading;
  }
  if (leading == true) {
    trailing = false;
  }
  var cancel = function() {
    if (timeoutId) {
      clearTimeout(timeoutId);
      timeoutId = null;
    }
  };
  var flush = function() {
    var call = throttledFn;
    cancel();
    if (call) {
      call();
    }
  };
  var throttleWrapper = function() {
    var callNow = leading && !timeoutId;
    var context = this;
    var args = arguments;
    throttledFn = function() {
      return fn.apply(context, args);
    };
    if (!timeoutId) {
      timeoutId = setTimeout(function() {
        timeoutId = null;
        if (trailing) {
          return throttledFn();
        }
      }, interval);
    }
    if (callNow) {
      callNow = false;
      return throttledFn();
    }
  };
  throttleWrapper.cancel = cancel;
  throttleWrapper.flush = flush;
  return throttleWrapper;
}

const TRACKED_EVENT = /* @__PURE__ */ new Set([
  "autoplay",
  "autoplay-fail",
  "can-load",
  "sources-change",
  "source-change",
  "load-start",
  "abort",
  "error",
  "loaded-metadata",
  "loaded-data",
  "can-play",
  "play",
  "play-fail",
  "pause",
  "playing",
  "seeking",
  "seeked",
  "waiting"
]);

class MediaStateManager extends MediaPlayerController {
  constructor(_request, _media) {
    super();
    this.Zh = /* @__PURE__ */ new Map();
    this.ci = false;
    this.bi = false;
    this["seeking"] = functionThrottle(
      (event) => {
        const { seeking, currentTime, paused } = this.$state;
        seeking.set(true);
        currentTime.set(event.detail);
        this._h("seeking", event);
        if (paused()) {
          this.$h = event;
          this.ei();
        }
      },
      150,
      { leading: true }
    );
    this.ei = functionDebounce(() => {
      if (!this.$h)
        return;
      this.ci = true;
      const { waiting, playing } = this.$state;
      waiting.set(true);
      playing.set(false);
      const event = this.createEvent("waiting", { trigger: this.$h });
      this.Zh.set("waiting", event);
      this.dispatch(event);
      this.$h = void 0;
      this.ci = false;
    }, 300);
    this.Lh = _request;
    this.g = _media;
  }
  onAttach(el) {
    el.setAttribute("aria-busy", "true");
    this.listen("fullscreen-change", this["fullscreen-change"].bind(this));
    this.listen("fullscreen-error", this["fullscreen-error"].bind(this));
    this.listen("orientation-change", this["orientation-change"].bind(this));
  }
  onConnect(el) {
    this.li();
    this.mi();
    this.ni();
    this.oi();
    onDispose(this.pi.bind(this));
  }
  Md(event) {
    if (!this.scope)
      return;
    const type = event.type;
    this[event.type]?.(event);
    {
      if (TRACKED_EVENT.has(type))
        this.Zh.set(type, event);
      this.dispatch(event);
    }
  }
  oi() {
    if (!this.bi)
      return;
    if (this.g.$provider()?.paused) {
      requestAnimationFrame(() => {
        if (!this.scope)
          return;
        this.g.remote.play(new DOMEvent("dom-connect"));
      });
    }
    this.bi = false;
  }
  pi() {
    if (this.bi)
      return;
    this.bi = !this.g.$state.paused();
    this.g.$provider()?.pause();
  }
  ai() {
    this.fi();
    this.Lh.Oh = false;
    this.Lh.Rh = false;
    this.ci = false;
    this.$h = void 0;
    this.Zh.clear();
  }
  _h(request, event) {
    this.Lh.Mh.ti(request, (requestEvent) => {
      event.request = requestEvent;
      appendTriggerEvent(event, requestEvent);
    });
  }
  li() {
    this.di();
    this.gi();
    const textTracks = this.g.textTracks;
    listenEvent(textTracks, "add", this.di.bind(this));
    listenEvent(textTracks, "remove", this.di.bind(this));
    listenEvent(textTracks, "mode-change", this.gi.bind(this));
  }
  mi() {
    const qualities = this.g.qualities;
    listenEvent(qualities, "add", this.hi.bind(this));
    listenEvent(qualities, "remove", this.hi.bind(this));
    listenEvent(qualities, "change", this.da.bind(this));
    listenEvent(qualities, "auto-change", this.qi.bind(this));
    listenEvent(qualities, "readonly-change", this.ri.bind(this));
  }
  ni() {
    const audioTracks = this.g.audioTracks;
    listenEvent(audioTracks, "add", this.ii.bind(this));
    listenEvent(audioTracks, "remove", this.ii.bind(this));
    listenEvent(audioTracks, "change", this.si.bind(this));
  }
  di(event) {
    const { textTracks } = this.$state;
    textTracks.set(this.g.textTracks.toArray());
    this.dispatch("text-tracks-change", {
      detail: textTracks(),
      trigger: event
    });
  }
  gi(event) {
    if (event)
      this._h("textTrack", event);
    const current = this.g.textTracks.selected, { textTrack } = this.$state;
    if (textTrack() !== current) {
      textTrack.set(current);
      this.dispatch("text-track-change", {
        detail: current,
        trigger: event
      });
    }
  }
  ii(event) {
    const { audioTracks } = this.$state;
    audioTracks.set(this.g.audioTracks.toArray());
    this.dispatch("audio-tracks-change", {
      detail: audioTracks(),
      trigger: event
    });
  }
  si(event) {
    const { audioTrack } = this.$state;
    audioTrack.set(this.g.audioTracks.selected);
    this._h("audioTrack", event);
    this.dispatch("audio-track-change", {
      detail: audioTrack(),
      trigger: event
    });
  }
  hi(event) {
    const { qualities } = this.$state;
    qualities.set(this.g.qualities.toArray());
    this.dispatch("qualities-change", {
      detail: qualities(),
      trigger: event
    });
  }
  da(event) {
    const { quality } = this.$state;
    quality.set(this.g.qualities.selected);
    this._h("quality", event);
    this.dispatch("quality-change", {
      detail: quality(),
      trigger: event
    });
  }
  qi() {
    this.$state.autoQuality.set(this.g.qualities.auto);
  }
  ri() {
    this.$state.canSetQuality.set(!this.g.qualities.readonly);
  }
  ["provider-change"](event) {
    const prevProvider = this.g.$provider(), newProvider = event.detail;
    if (prevProvider?.type === newProvider?.type)
      return;
    prevProvider?.destroy?.();
    prevProvider?.scope?.dispose();
    this.g.$provider.set(event.detail);
    if (prevProvider && event.detail === null)
      this.ji(event);
  }
  ["provider-loader-change"](event) {
  }
  ["autoplay"](event) {
    this.$state.autoplayError.set(null);
  }
  ["autoplay-fail"](event) {
    this.$state.autoplayError.set(event.detail);
    this.ai();
  }
  ["can-load"](event) {
    this.$state.canLoad.set(true);
    this.Zh.set("can-load", event);
    this._h("load", event);
    this.g.textTracks[TextTrackSymbol.Mc]();
  }
  ["media-type-change"](event) {
    appendTriggerEvent(event, this.Zh.get("source-change"));
    const viewType = this.$state.viewType();
    this.$state.mediaType.set(event.detail);
    const providedViewType = this.$state.providedViewType(), currentViewType = providedViewType === "unknown" ? event.detail : providedViewType;
    if (viewType !== currentViewType) {
      {
        setTimeout(() => {
          requestAnimationFrame(() => {
            if (!this.scope)
              return;
            this.$state.inferredViewType.set(event.detail);
            this.dispatch("view-type-change", {
              detail: currentViewType,
              trigger: event
            });
          });
        }, 0);
      }
    }
  }
  ["stream-type-change"](event) {
    const { streamType, inferredStreamType } = this.$state;
    appendTriggerEvent(event, this.Zh.get("source-change"));
    inferredStreamType.set(event.detail);
    event.detail = streamType();
  }
  ["rate-change"](event) {
    this.$state.playbackRate.set(event.detail);
    this._h("rate", event);
  }
  ["sources-change"](event) {
    this.$state.sources.set(event.detail);
  }
  ["source-change"](event) {
    appendTriggerEvent(event, this.Zh.get("sources-change"));
    this.ji(event);
    this.Zh.set(event.type, event);
    this.$state.source.set(event.detail);
    this.el?.setAttribute("aria-busy", "true");
  }
  ji(event) {
    this.g.audioTracks[ListSymbol.H](event);
    this.g.qualities[ListSymbol.H](event);
    this.ai();
    softResetMediaState(this.g.$state);
  }
  ["abort"](event) {
    const sourceChangeEvent = this.Zh.get("source-change");
    appendTriggerEvent(event, sourceChangeEvent);
    if (!sourceChangeEvent?.trigger) {
      appendTriggerEvent(event, this.Zh.get("can-load"));
    }
  }
  ["load-start"](event) {
    appendTriggerEvent(event, this.Zh.get("source-change"));
  }
  ["error"](event) {
    this.$state.error.set(event.detail);
    appendTriggerEvent(event, this.Zh.get("abort"));
  }
  ["loaded-metadata"](event) {
    appendTriggerEvent(event, this.Zh.get("load-start"));
  }
  ["loaded-data"](event) {
    appendTriggerEvent(event, this.Zh.get("load-start"));
  }
  ["can-play"](event) {
    if (event.trigger?.type !== "loadedmetadata") {
      appendTriggerEvent(event, this.Zh.get("loaded-metadata"));
    }
    this.ki(event.detail);
    this.el?.setAttribute("aria-busy", "false");
  }
  ["can-play-through"](event) {
    this.ki(event.detail);
    appendTriggerEvent(event, this.Zh.get("can-play"));
  }
  ki(detail) {
    const { seekable, seekableEnd, buffered, duration, canPlay } = this.$state;
    canPlay.set(true);
    buffered.set(detail.buffered);
    seekable.set(detail.seekable);
    duration.set(seekableEnd());
  }
  ["duration-change"](event) {
    const { live, duration } = this.$state, time = event.detail;
    if (!live())
      duration.set(!Number.isNaN(time) ? time : 0);
  }
  ["progress"](event) {
    const { buffered, seekable, live, duration, seekableEnd } = this.$state, detail = event.detail;
    buffered.set(detail.buffered);
    seekable.set(detail.seekable);
    if (live()) {
      duration.set(seekableEnd);
      this.dispatch("duration-change", {
        detail: seekableEnd(),
        trigger: event
      });
    }
  }
  ["play"](event) {
    const { paused, autoplayError, ended, autoplaying, playsinline, pointer, muted } = this.$state;
    event.autoplay = autoplaying();
    if (this.Lh.Rh || !paused()) {
      event.stopImmediatePropagation();
      return;
    }
    appendTriggerEvent(event, this.Zh.get("waiting"));
    this._h("play", event);
    this.Zh.set("play", event);
    paused.set(false);
    autoplayError.set(null);
    if (autoplaying()) {
      this.Md(
        this.createEvent("autoplay", {
          detail: { muted: muted() },
          trigger: event
        })
      );
      autoplaying.set(false);
    }
    if (ended() || this.Lh.Oh) {
      this.Lh.Oh = false;
      ended.set(false);
      this.Md(this.createEvent("replay", { trigger: event }));
    }
    if (!playsinline() && pointer() === "coarse") {
      this.g.remote.enterFullscreen("prefer-media", event);
    }
  }
  ["play-fail"](event) {
    const { muted, autoplaying } = this.$state;
    appendTriggerEvent(event, this.Zh.get("play"));
    this._h("play", event);
    const { paused, playing } = this.$state;
    paused.set(true);
    playing.set(false);
    this.ai();
    this.Zh.set("play-fail", event);
    if (autoplaying()) {
      this.Md(
        this.createEvent("autoplay-fail", {
          detail: {
            muted: muted(),
            error: event.detail
          },
          trigger: event
        })
      );
      autoplaying.set(false);
    }
  }
  ["playing"](event) {
    const playEvent = this.Zh.get("play");
    if (playEvent) {
      appendTriggerEvent(event, this.Zh.get("waiting"));
      appendTriggerEvent(event, playEvent);
    } else {
      appendTriggerEvent(event, this.Zh.get("seeked"));
    }
    setTimeout(() => this.ai(), 0);
    const {
      paused,
      playing,
      live,
      liveSyncPosition,
      seekableEnd,
      started,
      currentTime,
      seeking,
      ended
    } = this.$state;
    paused.set(false);
    playing.set(true);
    seeking.set(false);
    ended.set(false);
    if (this.Lh.Rh) {
      event.stopImmediatePropagation();
      this.Lh.Rh = false;
      return;
    }
    if (live() && !started() && currentTime() === 0) {
      const end = liveSyncPosition() ?? seekableEnd() - 2;
      if (Number.isFinite(end))
        this.g.$provider().currentTime = end;
    }
    this["started"](event);
  }
  ["started"](event) {
    const { started } = this.$state;
    if (!started()) {
      started.set(true);
      this.Md(this.createEvent("started", { trigger: event }));
    }
  }
  ["pause"](event) {
    if (!this.el?.isConnected) {
      this.bi = true;
    }
    if (this.Lh.Rh) {
      event.stopImmediatePropagation();
      return;
    }
    appendTriggerEvent(event, this.Zh.get("seeked"));
    this._h("pause", event);
    const { paused, playing, seeking } = this.$state;
    paused.set(true);
    playing.set(false);
    seeking.set(false);
    this.ai();
  }
  ["time-update"](event) {
    const { currentTime, played, waiting } = this.$state, detail = event.detail;
    currentTime.set(detail.currentTime);
    played.set(detail.played);
    waiting.set(false);
    for (const track of this.g.textTracks) {
      track[TextTrackSymbol.Lc](detail.currentTime, event);
    }
  }
  ["volume-change"](event) {
    const { volume, muted } = this.$state, detail = event.detail;
    volume.set(detail.volume);
    muted.set(detail.muted || detail.volume === 0);
    this._h("volume", event);
  }
  ["seeked"](event) {
    const { seeking, currentTime, paused, duration, ended } = this.$state;
    if (this.Lh.kd) {
      seeking.set(true);
      event.stopImmediatePropagation();
    } else if (seeking()) {
      const waitingEvent = this.Zh.get("waiting");
      appendTriggerEvent(event, waitingEvent);
      if (waitingEvent?.trigger?.type !== "seeking") {
        appendTriggerEvent(event, this.Zh.get("seeking"));
      }
      if (paused())
        this.fi();
      seeking.set(false);
      if (event.detail !== duration())
        ended.set(false);
      currentTime.set(event.detail);
      this._h("seeked", event);
      const origin = event.originEvent;
      if (origin && origin.isTrusted && !/seek/.test(origin.type)) {
        this["started"](event);
      }
    }
  }
  ["waiting"](event) {
    if (this.ci || this.Lh.kd)
      return;
    event.stopImmediatePropagation();
    this.$h = event;
    this.ei();
  }
  ["ended"](event) {
    if (this.Lh.Rh) {
      event.stopImmediatePropagation();
      return;
    }
    const { paused, playing, seeking, ended } = this.$state;
    paused.set(true);
    playing.set(false);
    seeking.set(false);
    ended.set(true);
    this.ai();
  }
  fi() {
    this.ei.cancel();
    this.$state.waiting.set(false);
  }
  ["fullscreen-change"](event) {
    this.$state.fullscreen.set(event.detail);
    this._h("fullscreen", event);
  }
  ["fullscreen-error"](event) {
    this._h("fullscreen", event);
  }
  ["orientation-change"](event) {
    this._h("orientation", event);
  }
  ["picture-in-picture-change"](event) {
    this.$state.pictureInPicture.set(event.detail);
    this._h("pip", event);
  }
  ["picture-in-picture-error"](event) {
    this._h("pip", event);
  }
  ["poster-change"](event) {
    this.$state.poster.set(event.detail);
  }
}

class MediaStateSync extends MediaPlayerController {
  onSetup() {
    effect(this.vi.bind(this));
    effect(this.wi.bind(this));
    effect(this.xi.bind(this));
    effect(this.yi.bind(this));
    effect(this.zi.bind(this));
    effect(this.Ai.bind(this));
    effect(this.Bi.bind(this));
    effect(this.Ci.bind(this));
    effect(this.Di.bind(this));
  }
  ui() {
    return;
  }
  vi() {
    const autoplay = this.$props.autoplay();
    this.$state.autoplay.set(autoplay);
    this.dispatch("autoplay-change", { detail: autoplay });
  }
  xi() {
    const loop = this.$props.loop();
    this.$state.loop.set(loop);
    this.dispatch("loop-change", { detail: loop });
  }
  yi() {
    const controls = this.$props.controls();
    this.$state.controls.set(controls);
  }
  wi() {
    const poster = this.$props.poster();
    this.$state.poster.set(poster);
    this.dispatch("poster-change", { detail: poster });
  }
  zi() {
    const crossorigin = this.$props.crossorigin();
    this.$state.crossorigin.set(crossorigin === true ? "" : crossorigin);
  }
  Ai() {
    const playsinline = this.$props.playsinline();
    this.$state.playsinline.set(playsinline);
    this.dispatch("playsinline-change", { detail: playsinline });
  }
  Ci() {
    this.dispatch("live-change", { detail: this.$state.live() });
  }
  Bi() {
    this.$state.liveEdgeTolerance.set(this.$props.liveEdgeTolerance());
    this.$state.minLiveDVRWindow.set(this.$props.minLiveDVRWindow());
  }
  Di() {
    this.dispatch("live-edge-change", { detail: this.$state.liveEdge() });
  }
}

let $keyboard = signal(false);
{
  listenEvent(document, "pointerdown", () => {
    $keyboard.set(false);
  });
  listenEvent(document, "keydown", (e) => {
    if (e.metaKey || e.altKey || e.ctrlKey)
      return;
    $keyboard.set(true);
  });
}
class FocusVisibleController extends ViewController {
  constructor() {
    super(...arguments);
    this.Ii = signal(false);
  }
  onConnect(el) {
    effect(() => {
      if (!$keyboard()) {
        this.Ii.set(false);
        updateFocusAttr(el, false);
        this.listen("pointerenter", this.Ji.bind(this));
        this.listen("pointerleave", this.Ki.bind(this));
        return;
      }
      const active = document.activeElement === el;
      this.Ii.set(active);
      updateFocusAttr(el, active);
      this.listen("focus", this.Li.bind(this));
      this.listen("blur", this.Mi.bind(this));
    });
  }
  focused() {
    return this.Ii();
  }
  Li() {
    this.Ii.set(true);
    updateFocusAttr(this.el, true);
  }
  Mi() {
    this.Ii.set(false);
    updateFocusAttr(this.el, false);
  }
  Ji() {
    updateHoverAttr(this.el, true);
  }
  Ki() {
    updateHoverAttr(this.el, false);
  }
}
function updateFocusAttr(el, isFocused) {
  setAttribute(el, "data-focus", isFocused);
  setAttribute(el, "data-hocus", isFocused);
}
function updateHoverAttr(el, isHovering) {
  setAttribute(el, "data-hocus", isHovering);
  setAttribute(el, "data-hover", isHovering);
}

class RequestQueue {
  constructor() {
    this.Ni = false;
    this.Oi = deferredPromise();
    this.Mh = /* @__PURE__ */ new Map();
  }
  /**
   * The number of callbacks that are currently in queue.
   */
  get Ri() {
    return this.Mh.size;
  }
  /**
   * Whether items in the queue are being served immediately, otherwise they're queued to
   * be processed later.
   */
  get Si() {
    return this.Ni;
  }
  /**
   * Waits for the queue to be flushed (ie: start serving).
   */
  async Ti() {
    if (this.Ni)
      return;
    await this.Oi.promise;
  }
  /**
   * Queue the given `callback` to be invoked at a later time by either calling the `serve()` or
   * `start()` methods. If the queue has started serving (i.e., `start()` was already called),
   * then the callback will be invoked immediately.
   *
   * @param key - Uniquely identifies this callback so duplicates are ignored.
   * @param callback - The function to call when this item in the queue is being served.
   */
  lc(key, callback) {
    if (this.Ni) {
      callback();
      return;
    }
    this.Mh.delete(key);
    this.Mh.set(key, callback);
  }
  /**
   * Invokes the callback with the given `key` in the queue (if it exists).
   */
  ti(key) {
    this.Mh.get(key)?.();
    this.Mh.delete(key);
  }
  /**
   * Flush all queued items and start serving future requests immediately until `stop()` is called.
   */
  ia() {
    this.Pi();
    this.Ni = true;
    if (this.Mh.size > 0)
      this.Pi();
  }
  /**
   * Stop serving requests, they'll be queued until you begin processing again by calling `start()`.
   */
  ja() {
    this.Ni = false;
  }
  /**
   * Stop serving requests, empty the request queue, and release any promises waiting for the
   * queue to flush.
   */
  H() {
    this.ja();
    this.Mh.clear();
    this.Qi();
  }
  Pi() {
    for (const key of this.Mh.keys())
      this.ti(key);
    this.Qi();
  }
  Qi() {
    this.Oi.resolve();
    this.Oi = deferredPromise();
  }
}

var __defProp$f = Object.defineProperty;
var __getOwnPropDesc$f = Object.getOwnPropertyDescriptor;
var __decorateClass$f = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$f(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$f(target, key, result);
  return result;
};
const _MediaPlayer = class _MediaPlayer extends Component {
  constructor() {
    super();
    this.canPlayQueue = new RequestQueue();
    this.zd();
    new MediaStateSync();
    const context = {
      player: this,
      scope: getScope(),
      qualities: new VideoQualityList(),
      audioTracks: new AudioTrackList(),
      $provider: signal(null),
      $props: this.$props,
      $state: this.$state
    };
    context.remote = new MediaRemoteControl(void 0);
    context.remote.setPlayer(this);
    context.$iosControls = computed(this.Ad.bind(this));
    context.textTracks = new TextTrackList();
    context.textTracks[TextTrackSymbol.Rc] = this.$state.crossorigin;
    context.textRenderers = new TextRenderers(context);
    context.ariaKeys = {};
    this.g = context;
    provideContext(mediaContext, context);
    this.orientation = new ScreenOrientationController();
    new FocusVisibleController();
    new MediaKeyboardController(context);
    const request = new MediaRequestContext();
    this.od = new MediaStateManager(request, context);
    this.nd = new MediaRequestManager(this.od, request, context);
    context.delegate = new MediaPlayerDelegate(
      this.od.Md.bind(this.od),
      context
    );
    new MediaLoadController(this.startLoading.bind(this));
  }
  static {
    this.props = mediaPlayerProps;
  }
  static {
    this.state = mediaState;
  }
  get Ra() {
    return this.g.$provider();
  }
  onSetup() {
    this.Bd();
    effect(this.Cd.bind(this));
    effect(this.Dd.bind(this));
    effect(this.rc.bind(this));
    effect(this.Ed.bind(this));
    effect(this.Fd.bind(this));
    effect(this.Gd.bind(this));
    effect(this.Hd.bind(this));
  }
  onAttach(el) {
    el.setAttribute("data-media-player", "");
    setAttributeIfEmpty(el, "tabindex", "0");
    setAttributeIfEmpty(el, "role", "region");
    effect(this.qd.bind(this));
    effect(this.rd.bind(this));
    listenEvent(el, "find-media-player", this.Id.bind(this));
  }
  onConnect(el) {
    if (IS_IPHONE)
      setAttribute(el, "data-iphone", "");
    canChangeVolume().then(this.$state.canSetVolume.set);
    const pointerQuery = window.matchMedia("(pointer: coarse)");
    this.sd(pointerQuery);
    pointerQuery.onchange = this.sd.bind(this);
    const resize = new ResizeObserver(animationFrameThrottle(this.pd.bind(this)));
    resize.observe(el);
    effect(this.pd.bind(this));
    this.dispatch("media-player-connect", {
      detail: this,
      bubbles: true,
      composed: true
    });
    onDispose(() => {
      resize.disconnect();
      pointerQuery.onchange = null;
    });
  }
  onDestroy() {
    this.g.player = null;
    this.canPlayQueue.H();
  }
  zd() {
    const providedProps = {
      viewType: "providedViewType",
      streamType: "providedStreamType"
    };
    for (const prop2 of Object.keys(this.$props)) {
      this.$state[providedProps[prop2] ?? prop2]?.set(this.$props[prop2]());
    }
    effect(this.td.bind(this));
    this.$state.muted.set(this.$props.muted() || this.$props.volume() === 0);
  }
  qd() {
    const { title } = this.$props, { live, viewType } = this.$state, isLive = live(), type = uppercaseFirstChar(viewType()), typeText = type !== "Unknown" ? `${isLive ? "Live " : ""}${type}` : isLive ? "Live" : "Media";
    const newTitle = title();
    if (newTitle) {
      this.el?.setAttribute("data-title", newTitle);
      this.el?.removeAttribute("title");
    }
    const currentTitle = this.el?.getAttribute("data-title") || "";
    this.$state.title.set(currentTitle);
    setAttribute(
      this.el,
      "aria-label",
      currentTitle ? `${typeText} - ${currentTitle}` : typeText + " Player"
    );
  }
  rd() {
    const orientation = this.orientation.landscape ? "landscape" : "portrait";
    this.$state.orientation.set(orientation);
    setAttribute(this.el, "data-orientation", orientation);
    this.pd();
  }
  Cd() {
    if (this.$state.canPlay() && this.Ra)
      this.canPlayQueue.ia();
    else
      this.canPlayQueue.ja();
  }
  td() {
    this.$state.providedViewType.set(this.$props.viewType());
    this.$state.providedStreamType.set(this.$props.streamType());
  }
  Bd() {
    if (_MediaPlayer[MEDIA_ATTRIBUTES]) {
      this.setAttributes(_MediaPlayer[MEDIA_ATTRIBUTES]);
      return;
    }
    const $attrs = {
      "data-captions": function() {
        const track = this.$state.textTrack();
        return !!track && isTrackCaptionKind(track);
      },
      "data-ios-controls": function() {
        return this.g.$iosControls();
      },
      "data-controls": function() {
        return this.controls.showing;
      },
      "data-buffering": function() {
        const { canPlay, waiting } = this.$state;
        return !canPlay() || waiting();
      },
      "data-error": function() {
        const { error } = this.$state;
        return !!error();
      }
    };
    const alias = {
      canPictureInPicture: "can-pip",
      pictureInPicture: "pip"
    };
    for (const prop2 of mediaAttributes) {
      const attrName = "data-" + (alias[prop2] ?? camelToKebabCase(prop2));
      $attrs[attrName] = function() {
        return this.$state[prop2]();
      };
    }
    delete $attrs.title;
    _MediaPlayer[MEDIA_ATTRIBUTES] = $attrs;
    this.setAttributes($attrs);
  }
  Id(event) {
    event.detail(this);
  }
  pd() {
    if (!this.el)
      return;
    const width = this.el.clientWidth, height = this.el.clientHeight;
    this.$state.width.set(width);
    this.$state.height.set(height);
    setStyle(this.el, "--player-width", width + "px");
    setStyle(this.el, "--player-height", height + "px");
  }
  sd(queryList) {
    const pointer = queryList.matches ? "coarse" : "fine";
    setAttribute(this.el, "data-pointer", pointer);
    this.$state.pointer.set(pointer);
    this.pd();
  }
  Ad() {
    const { playsinline, fullscreen } = this.$state;
    return IS_IPHONE && !canFullscreen() && this.$state.mediaType() === "video" && (!playsinline() || fullscreen());
  }
  get provider() {
    return this.Ra;
  }
  get controls() {
    return this.nd.Nd;
  }
  get qualities() {
    return this.g.qualities;
  }
  get audioTracks() {
    return this.g.audioTracks;
  }
  get textTracks() {
    return this.g.textTracks;
  }
  get textRenderers() {
    return this.g.textRenderers;
  }
  get paused() {
    return this.Ra?.paused ?? true;
  }
  set paused(paused) {
    this.ud(paused);
  }
  rc() {
    this.ud(this.$props.paused());
  }
  ud(paused) {
    if (paused) {
      this.canPlayQueue.lc("paused", () => this.nd.Jd());
    } else
      this.canPlayQueue.lc("paused", () => this.nd.Kd());
  }
  get muted() {
    return this.Ra?.muted ?? false;
  }
  set muted(muted) {
    this.vd(muted);
  }
  Dd() {
    this.vd(this.$props.muted());
  }
  vd(muted) {
    this.canPlayQueue.lc("muted", () => this.Ra.muted = muted);
  }
  get currentTime() {
    return this.Ra?.currentTime ?? 0;
  }
  set currentTime(time) {
    this.wd(time);
  }
  Fd() {
    this.wd(this.$props.currentTime());
  }
  wd(time) {
    this.canPlayQueue.lc("currentTime", () => {
      const adapter = this.Ra;
      if (time !== adapter.currentTime) {
        peek(() => {
          const boundTime = Math.min(
            Math.max(this.$state.seekableStart() + 0.1, time),
            this.$state.seekableEnd() - 0.1
          );
          if (Number.isFinite(boundTime))
            adapter.currentTime = boundTime;
        });
      }
    });
  }
  get volume() {
    return this.Ra?.volume ?? 1;
  }
  set volume(volume) {
    this.xd(volume);
  }
  Ed() {
    this.xd(this.$props.volume());
  }
  xd(volume) {
    const clampedVolume = clampNumber(0, volume, 1);
    this.canPlayQueue.lc("volume", () => this.Ra.volume = clampedVolume);
  }
  get playbackRate() {
    return this.Ra?.playbackRate ?? 1;
  }
  set playbackRate(rate) {
    this.yd(rate);
  }
  Hd() {
    this.yd(this.$props.playbackRate());
  }
  yd(rate) {
    this.canPlayQueue.lc("rate", () => this.Ra.playbackRate = rate);
  }
  Gd() {
    this.Ld(this.$props.playsinline());
  }
  Ld(inline) {
    this.canPlayQueue.lc("playsinline", () => this.Ra.playsinline = inline);
  }
  async play(trigger) {
    return this.nd.Kd(trigger);
  }
  async pause(trigger) {
    return this.nd.Jd(trigger);
  }
  async enterFullscreen(target, trigger) {
    return this.nd.Od(target, trigger);
  }
  async exitFullscreen(target, trigger) {
    return this.nd.Pd(target, trigger);
  }
  enterPictureInPicture(trigger) {
    return this.nd.Qd(trigger);
  }
  exitPictureInPicture(trigger) {
    return this.nd.Rd(trigger);
  }
  seekToLiveEdge(trigger) {
    this.nd.Sd(trigger);
  }
  startLoading(trigger) {
    this.g.delegate.f("can-load", { trigger });
  }
  matchQuery(query) {
    return scoped(() => PlayerQueryList.create(query), this.scope);
  }
  destroy() {
    this.g.remote.setPlayer(null);
    this.dispatch("destroy");
  }
};
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "canPlayQueue", 2);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "provider", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "controls", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "orientation", 2);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "qualities", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "audioTracks", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "textTracks", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "textRenderers", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "paused", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "muted", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "currentTime", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "volume", 1);
__decorateClass$f([
  prop
], _MediaPlayer.prototype, "playbackRate", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "play", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "pause", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "enterFullscreen", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "exitFullscreen", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "enterPictureInPicture", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "exitPictureInPicture", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "seekToLiveEdge", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "startLoading", 1);
__decorateClass$f([
  method
], _MediaPlayer.prototype, "matchQuery", 1);
let MediaPlayer = _MediaPlayer;

function resolveStreamTypeFromHLSManifest(manifestSrc, requestInit) {
  return fetch(manifestSrc, requestInit).then((res) => res.text()).then((manifest) => {
    const renditionURI = resolveHLSRenditionURI(manifest);
    if (renditionURI) {
      return resolveStreamTypeFromHLSManifest(
        /^https?:/.test(renditionURI) ? renditionURI : new URL(renditionURI, manifestSrc).href,
        requestInit
      );
    }
    const streamType = /EXT-X-PLAYLIST-TYPE:\s*VOD/.test(manifest) ? "on-demand" : "live";
    if (streamType === "live" && resolveTargetDuration(manifest) >= 10 && (/#EXT-X-DVR-ENABLED:\s*true/.test(manifest) || manifest.includes("#EXT-X-DISCONTINUITY"))) {
      return "live:dvr";
    }
    return streamType;
  });
}
function resolveHLSRenditionURI(manifest) {
  const matches = manifest.match(/#EXT-X-STREAM-INF:[^\n]+(\n[^\n]+)*/g);
  return matches ? matches[0].split("\n")[1].trim() : null;
}
function resolveTargetDuration(manifest) {
  const lines = manifest.split("\n");
  for (const line of lines) {
    if (line.startsWith("#EXT-X-TARGETDURATION")) {
      const duration = parseFloat(line.split(":")[1]);
      if (!isNaN(duration)) {
        return duration;
      }
    }
  }
  return -1;
}

const SETUP = Symbol(0);
class SourceSelection {
  constructor(_domSources, _media, _loader) {
    this.Ui = false;
    this.Wd = _domSources;
    this.g = _media;
    this.Td = _loader;
    const HLS_LOADER = new HLSProviderLoader(), VIDEO_LOADER = new VideoProviderLoader(), AUDIO_LOADER = new AudioProviderLoader();
    this.Vi = computed(() => {
      return _media.$props.preferNativeHLS() ? [VIDEO_LOADER, AUDIO_LOADER, HLS_LOADER] : [HLS_LOADER, VIDEO_LOADER, AUDIO_LOADER];
    });
    const { $state } = _media;
    $state.sources.set(normalizeSrc(_media.$props.src()));
    for (const src of $state.sources()) {
      const loader = this.Vi().find((loader2) => loader2.canPlay(src));
      if (!loader)
        continue;
      const mediaType = loader.mediaType(src);
      this.g.$state.source.set(src);
      this.g.$state.mediaType.set(mediaType);
      this.g.$state.inferredViewType.set(mediaType);
      this.Td.set(loader);
      this.Ui = true;
    }
  }
  connect() {
    const loader = this.Td();
    if (this.Ui) {
      this.Wi(this.g.$state.source(), loader);
      this.Xi(loader);
      this.Ui = false;
    }
    effect(this.Zi.bind(this));
    effect(this._i.bind(this));
    effect(this.$i.bind(this));
    effect(this.aj.bind(this));
  }
  Zi() {
    this.g.delegate.f("sources-change", {
      detail: [...normalizeSrc(this.g.$props.src()), ...this.Wd()]
    });
  }
  _i() {
    const { $state } = this.g;
    const sources = $state.sources(), currentSource = peek($state.source), newSource = this.Yi(currentSource, sources), noMatch = sources[0]?.src && !newSource.src && !newSource.type;
    if (noMatch) {
      const { crossorigin } = $state, credentials = getRequestCredentials(crossorigin()), abort = new AbortController();
      Promise.all(
        sources.map(
          (source) => isString(source.src) && source.type === "?" ? fetch(source.src, {
            method: "HEAD",
            credentials,
            signal: abort.signal
          }).then((res) => {
            source.type = res.headers.get("content-type") || "??";
            return source;
          }).catch(() => source) : source
        )
      ).then((sources2) => {
        if (abort.signal.aborted)
          return;
        this.Yi(peek($state.source), sources2);
        tick();
      });
      return () => abort.abort();
    }
    tick();
  }
  Yi(currentSource, sources) {
    let newSource = { src: "", type: "" }, newLoader = null;
    for (const src of sources) {
      const loader = peek(this.Vi).find((loader2) => loader2.canPlay(src));
      if (loader) {
        newSource = src;
        newLoader = loader;
      }
    }
    if (!isSameSrc(currentSource, newSource)) {
      this.Wi(newSource, newLoader);
    }
    if (newLoader !== peek(this.Td)) {
      this.Xi(newLoader);
    }
    return newSource;
  }
  Wi(src, loader) {
    this.g.delegate.f("source-change", { detail: src });
    this.g.delegate.f("media-type-change", {
      detail: loader?.mediaType(src) || "unknown"
    });
  }
  Xi(loader) {
    this.g.delegate.f("provider-change", { detail: null });
    loader && peek(() => loader.preconnect?.(this.g));
    this.Td.set(loader);
    this.g.delegate.f("provider-loader-change", { detail: loader });
  }
  $i() {
    const provider = this.g.$provider();
    if (!provider || provider[SETUP])
      return;
    if (this.g.$state.canLoad()) {
      scoped(() => provider.setup(this.g), provider.scope);
      provider[SETUP] = true;
      return;
    }
    peek(() => provider.preconnect?.(this.g));
  }
  aj() {
    const provider = this.g.$provider(), source = this.g.$state.source(), crossorigin = peek(this.g.$state.crossorigin);
    if (isSameSrc(provider?.currentSrc, source)) {
      return;
    }
    if (this.g.$state.canLoad()) {
      const abort = new AbortController();
      if (isHLSSrc(source)) {
        if (!isHLSSupported()) {
          resolveStreamTypeFromHLSManifest(source.src, {
            credentials: getRequestCredentials(crossorigin),
            signal: abort.signal
          }).then((streamType) => {
            this.g.delegate.f("stream-type-change", {
              detail: streamType
            });
          }).catch(noop);
        }
      } else {
        this.g.delegate.f("stream-type-change", {
          detail: "on-demand"
        });
      }
      peek(() => provider?.loadSource(source, peek(this.g.$state.preload)));
      return () => abort.abort();
    }
    try {
      isString(source.src) && preconnect(new URL(source.src).origin, "preconnect");
    } catch (error) {
    }
  }
}
function normalizeSrc(src) {
  return (isArray(src) ? src : [!isString(src) && "src" in src ? src : { src }]).map(
    ({ src: src2, type }) => ({
      src: src2,
      type: type ?? (!isString(src2) || src2.startsWith("blob:") ? "video/object" : "?")
    })
  );
}
function isSameSrc(a, b) {
  return a?.src === b?.src && a?.type === b?.type;
}

class Tracks {
  constructor(_domTracks, _media) {
    this.bj = [];
    this.Xd = _domTracks;
    this.g = _media;
    effect(this.cj.bind(this));
  }
  cj() {
    const newTracks = this.Xd();
    for (const oldTrack of this.bj) {
      if (!newTracks.some((t) => t.id === oldTrack.id)) {
        const track = oldTrack.id && this.g.textTracks.getById(oldTrack.id);
        if (track)
          this.g.textTracks.remove(track);
      }
    }
    for (const newTrack of newTracks) {
      const id = newTrack.id || TextTrack.createId(newTrack);
      if (!this.g.textTracks.getById(id)) {
        newTrack.id = id;
        this.g.textTracks.add(newTrack);
      }
    }
    this.bj = newTracks;
  }
}

var __defProp$e = Object.defineProperty;
var __getOwnPropDesc$e = Object.getOwnPropertyDescriptor;
var __decorateClass$e = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$e(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$e(target, key, result);
  return result;
};
class MediaProvider extends Component {
  constructor() {
    super(...arguments);
    this.Wd = signal([]);
    this.Xd = signal([]);
    this.Td = null;
    this.Ud = -1;
  }
  static {
    this.state = new State({
      loader: null
    });
  }
  onSetup() {
    this.g = useMediaContext();
    this.Vd = new SourceSelection(this.Wd, this.g, this.$state.loader);
  }
  onAttach(el) {
    el.setAttribute("data-media-provider", "");
  }
  onConnect(el) {
    this.Vd.connect();
    new Tracks(this.Xd, this.g);
    const resize = new ResizeObserver(animationFrameThrottle(this.pd.bind(this)));
    resize.observe(el);
    const mutation = new MutationObserver(this.Jb.bind(this));
    mutation.observe(el, { attributes: true, childList: true });
    this.pd();
    this.Jb();
    onDispose(() => {
      resize.disconnect();
      mutation.disconnect();
    });
  }
  load(target) {
    window.cancelAnimationFrame(this.Ud);
    this.Ud = requestAnimationFrame(() => this.Zd(target));
    onDispose(() => {
      window.cancelAnimationFrame(this.Ud);
    });
  }
  Zd(target) {
    if (!this.scope)
      return;
    const loader = this.$state.loader(), { $provider } = this.g;
    if (this.Td === loader && loader?.target === target && peek($provider))
      return;
    this.Yd();
    this.Td = loader;
    if (loader)
      loader.target = target || null;
    if (!loader || !target)
      return;
    loader.load(this.g).then((provider) => {
      if (!this.scope)
        return;
      if (peek(this.$state.loader) !== loader)
        return;
      if (provider) {
        peek(() => {
          const { muted, volume, playsinline } = this.g.$state;
          provider.muted = muted();
          provider.volume = volume();
          provider.playsinline = playsinline();
        });
      }
      this.g.delegate.f("provider-change", {
        detail: provider
      });
    });
  }
  onDestroy() {
    this.Td = null;
    this.Yd();
  }
  Yd() {
    this.g.delegate.f("provider-change", { detail: null });
  }
  pd() {
    if (!this.el)
      return;
    const player = this.g.player, width = this.el.offsetWidth, height = this.el.offsetHeight;
    if (!player)
      return;
    player.$state.mediaWidth.set(width);
    player.$state.mediaHeight.set(height);
    if (player.el) {
      setStyle(player.el, "--media-width", width + "px");
      setStyle(player.el, "--media-height", height + "px");
    }
  }
  Jb() {
    const sources = [], tracks = [], children = this.el.children;
    for (const el of children) {
      if (el instanceof HTMLSourceElement) {
        sources.push({
          src: el.src,
          type: el.type
        });
      } else if (el instanceof HTMLTrackElement) {
        tracks.push({
          id: el.id,
          src: el.src,
          kind: el.track.kind,
          language: el.srclang,
          label: el.label,
          default: el.default,
          type: el.getAttribute("data-type")
        });
      }
    }
    this.Wd.set(sources);
    this.Xd.set(tracks);
    tick();
  }
}
__decorateClass$e([
  method
], MediaProvider.prototype, "load", 1);

class Controls extends Component {
  static {
    this.props = {
      hideDelay: 2e3
    };
  }
  onSetup() {
    this.g = useMediaContext();
    effect(this.$d.bind(this));
  }
  onAttach(el) {
    const { pictureInPicture, fullscreen } = this.g.$state;
    setStyle(el, "pointer-events", "none");
    setAttributeIfEmpty(el, "role", "group");
    this.setAttributes({
      "data-visible": this._d.bind(this),
      "data-fullscreen": fullscreen,
      "data-pip": pictureInPicture
    });
    effect(() => {
      this.dispatch("change", { detail: this._d() });
    });
    effect(this.ae.bind(this));
    effect(() => {
      const isFullscreen = fullscreen();
      for (const side of ["top", "right", "bottom", "left"]) {
        setStyle(el, `padding-${side}`, isFullscreen && `env(safe-area-inset-${side})`);
      }
    });
  }
  ae() {
    if (!this.el)
      return;
    const { $iosControls } = this.g, { controls } = this.g.$state, isHidden = controls() || $iosControls();
    setAttribute(this.el, "aria-hidden", isHidden ? "true" : null);
    setStyle(this.el, "display", isHidden ? "none" : null);
  }
  $d() {
    const { controls } = this.g.player, { hideDelay } = this.$props;
    controls.defaultDelay = hideDelay() === 2e3 ? this.g.$props.controlsDelay() : hideDelay();
  }
  _d() {
    const { controlsVisible } = this.g.$state;
    return controlsVisible();
  }
}

class Popper extends ViewController {
  constructor(_delegate) {
    super();
    this.ej = -1;
    this.fj = -1;
    this.dj = null;
    this.Ka = _delegate;
    effect(this.gj.bind(this));
  }
  onDestroy() {
    this.dj?.();
    this.dj = null;
  }
  gj() {
    const trigger = this.Ka.be();
    if (!trigger) {
      this.hide();
      return;
    }
    const show = this.show.bind(this), hide = this.hide.bind(this);
    this.Ka.ke(trigger, show, hide);
  }
  show(trigger) {
    window.cancelAnimationFrame(this.fj);
    this.fj = -1;
    this.dj?.();
    this.dj = null;
    this.ej = window.setTimeout(
      () => {
        this.ej = -1;
        const content = this.Ka.ce();
        if (content)
          content.style.removeProperty("display");
        peek(() => this.Ka.Da(true, trigger));
      },
      this.Ka.je?.() ?? 0
    );
  }
  hide(trigger) {
    window.clearTimeout(this.ej);
    this.ej = -1;
    peek(() => this.Ka.Da(false, trigger));
    this.fj = requestAnimationFrame(() => {
      this.fj = -1;
      const content = this.Ka.ce();
      if (content) {
        const isAnimated = hasAnimation(content);
        const onHide = () => {
          content.style.display = "none";
          this.dj = null;
        };
        if (isAnimated) {
          this.dj?.();
          const stop = listenEvent(content, "animationend", onHide, { once: true });
          this.dj = stop;
        } else {
          onHide();
        }
      }
    });
  }
}

const tooltipContext = createContext();

let id$1 = 0;
class Tooltip extends Component {
  constructor() {
    super();
    this.de = `media-tooltip-${++id$1}`;
    this.be = signal(null);
    this.ce = signal(null);
    new FocusVisibleController();
    const { showDelay } = this.$props;
    new Popper({
      be: this.be,
      ce: this.ce,
      je: showDelay,
      ke(trigger, show, hide) {
        listenEvent(trigger, "touchstart", (e) => e.preventDefault(), {
          passive: false
        });
        listenEvent(trigger, "focus", show);
        listenEvent(trigger, "blur", hide);
        listenEvent(trigger, "mouseenter", show);
        listenEvent(trigger, "mouseleave", hide);
      },
      Da: this.ie.bind(this)
    });
  }
  static {
    this.props = {
      showDelay: 500
    };
  }
  onAttach(el) {
    el.style.setProperty("display", "contents");
  }
  onSetup() {
    provideContext(tooltipContext, {
      be: this.be,
      ce: this.ce,
      ee: this.ee.bind(this),
      fe: this.fe.bind(this),
      ge: this.ge.bind(this),
      he: this.he.bind(this)
    });
  }
  ee(el) {
    this.be.set(el);
    let tooltipName = el.getAttribute("data-media-tooltip");
    if (tooltipName) {
      this.el?.setAttribute(`data-media-${tooltipName}-tooltip`, "");
    }
    setAttribute(el, "data-describedby", this.de);
  }
  fe(el) {
    el.removeAttribute("data-describedby");
    el.removeAttribute("aria-describedby");
    this.be.set(null);
  }
  ge(el) {
    el.setAttribute("id", this.de);
    el.style.display = "none";
    setAttributeIfEmpty(el, "role", "tooltip");
    this.ce.set(el);
  }
  he(el) {
    el.removeAttribute("id");
    el.removeAttribute("role");
    this.ce.set(null);
  }
  ie(isShowing) {
    const trigger = this.be(), content = this.ce();
    if (trigger) {
      setAttribute(trigger, "aria-describedby", isShowing ? this.de : null);
    }
    for (const el of [this.el, trigger, content]) {
      el && setAttribute(el, "data-visible", isShowing);
    }
  }
}

class TooltipContent extends Component {
  static {
    this.props = {
      placement: "top center",
      offset: 0,
      alignOffset: 0
    };
  }
  constructor() {
    super();
    new FocusVisibleController();
    const { placement } = this.$props;
    this.setAttributes({
      "data-placement": placement
    });
  }
  onAttach(el) {
    this.me(el);
    Object.assign(el.style, {
      position: "absolute",
      top: 0,
      left: 0,
      width: "max-content"
    });
  }
  onConnect(el) {
    this.me(el);
    const tooltip = useContext(tooltipContext);
    onDispose(() => tooltip.he(el));
    onDispose(
      requestScopedAnimationFrame(() => {
        if (!this.connectScope)
          return;
        effect(this.ne.bind(this));
      })
    );
  }
  me(el) {
    const tooltip = useContext(tooltipContext);
    tooltip.ge(el);
  }
  ne() {
    const { placement, offset: mainOffset, alignOffset } = this.$props;
    return autoPlacement(this.el, this.oe(), placement(), {
      offsetVarName: "media-tooltip",
      xOffset: alignOffset(),
      yOffset: mainOffset()
    });
  }
  oe() {
    return useContext(tooltipContext).be();
  }
}

class ToggleButtonController extends ViewController {
  constructor(_delegate) {
    super();
    this.Ka = _delegate;
    new FocusVisibleController();
    if (_delegate.te) {
      new ARIAKeyShortcuts(_delegate.te);
    }
  }
  static {
    this.props = {
      disabled: false
    };
  }
  onSetup() {
    const { disabled } = this.$props;
    this.setAttributes({
      "data-pressed": this.Ka.qe,
      "aria-pressed": this.hj.bind(this),
      "aria-disabled": () => disabled() ? "true" : null
    });
  }
  onAttach(el) {
    setAttributeIfEmpty(el, "tabindex", "0");
    setAttributeIfEmpty(el, "role", "button");
    setAttributeIfEmpty(el, "type", "button");
  }
  onConnect(el) {
    onPress(el, this.ij.bind(this));
  }
  hj() {
    return ariaBool$1(this.Ka.qe());
  }
  jj(event) {
    if (isWriteSignal(this.Ka.qe)) {
      this.Ka.qe.set((p) => !p);
    }
  }
  ij(event) {
    const disabled = this.$props.disabled() || this.el.hasAttribute("data-disabled");
    if (disabled) {
      event.stopImmediatePropagation();
      return;
    }
    event.preventDefault();
    (this.Ka.re ?? this.jj).call(this, event);
  }
}

var __defProp$d = Object.defineProperty;
var __getOwnPropDesc$d = Object.getOwnPropertyDescriptor;
var __decorateClass$d = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$d(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$d(target, key, result);
  return result;
};
class ToggleButton extends Component {
  constructor() {
    super();
    this.pe = signal(false);
    new ToggleButtonController({
      qe: this.pe
    });
  }
  static {
    this.props = {
      disabled: false,
      defaultPressed: false
    };
  }
  get pressed() {
    return this.pe();
  }
}
__decorateClass$d([
  prop
], ToggleButton.prototype, "pressed", 1);

class PlayButton extends Component {
  constructor() {
    super();
    new ToggleButtonController({
      qe: this.qe.bind(this),
      te: "togglePaused",
      re: this.re.bind(this)
    });
  }
  static {
    this.props = ToggleButtonController.props;
  }
  onSetup() {
    this.g = useMediaContext();
    const { paused, ended } = this.g.$state;
    this.setAttributes({
      "data-paused": paused,
      "data-ended": ended
    });
  }
  onAttach(el) {
    el.setAttribute("data-media-tooltip", "play");
    setARIALabel(el, this.se.bind(this));
  }
  re(event) {
    const remote = this.g.remote;
    this.qe() ? remote.pause(event) : remote.play(event);
  }
  qe() {
    const { paused } = this.g.$state;
    return !paused();
  }
  se() {
    const { paused } = this.g.$state;
    return paused() ? "Play" : "Pause";
  }
}

function ariaBool(value) {
  return value ? "true" : "false";
}
function $ariaBool(signal) {
  return () => ariaBool(signal());
}

class CaptionButton extends Component {
  constructor() {
    super();
    new ToggleButtonController({
      qe: this.qe.bind(this),
      te: "toggleCaptions",
      re: this.re.bind(this)
    });
  }
  static {
    this.props = ToggleButtonController.props;
  }
  onSetup() {
    this.g = useMediaContext();
    this.setAttributes({
      "data-active": this.qe.bind(this),
      "data-supported": () => !this.ue(),
      "aria-hidden": $ariaBool(this.ue.bind(this))
    });
  }
  onAttach(el) {
    el.setAttribute("data-media-tooltip", "caption");
    setARIALabel(el, this.se.bind(this));
  }
  re(event) {
    this.g.remote.toggleCaptions(event);
  }
  qe() {
    const { textTrack } = this.g.$state, track = textTrack();
    return !!track && isTrackCaptionKind(track);
  }
  ue() {
    const { textTracks } = this.g.$state;
    return textTracks().filter(isTrackCaptionKind).length == 0;
  }
  se() {
    const { textTrack } = this.g.$state;
    return textTrack() ? "Closed-Captions Off" : "Closed-Captions On";
  }
}

class FullscreenButton extends Component {
  constructor() {
    super();
    new ToggleButtonController({
      qe: this.qe.bind(this),
      te: "toggleFullscreen",
      re: this.re.bind(this)
    });
  }
  static {
    this.props = {
      ...ToggleButtonController.props,
      target: "prefer-media"
    };
  }
  onSetup() {
    this.g = useMediaContext();
    const { fullscreen } = this.g.$state, isSupported = this.ve.bind(this);
    this.setAttributes({
      "data-active": fullscreen,
      "data-supported": isSupported,
      "aria-hidden": $ariaBool(() => !isSupported())
    });
  }
  onAttach(el) {
    el.setAttribute("data-media-tooltip", "fullscreen");
    setARIALabel(el, this.se.bind(this));
  }
  re(event) {
    const remote = this.g.remote, target = this.$props.target();
    this.qe() ? remote.exitFullscreen(target, event) : remote.enterFullscreen(target, event);
  }
  qe() {
    const { fullscreen } = this.g.$state;
    return fullscreen();
  }
  ve() {
    const { canFullscreen } = this.g.$state;
    return canFullscreen();
  }
  se() {
    const { fullscreen } = this.g.$state;
    return fullscreen() ? "Exit Fullscreen" : "Enter Fullscreen";
  }
}

class MuteButton extends Component {
  constructor() {
    super();
    new ToggleButtonController({
      qe: this.qe.bind(this),
      te: "toggleMuted",
      re: this.re.bind(this)
    });
  }
  static {
    this.props = ToggleButtonController.props;
  }
  onSetup() {
    this.g = useMediaContext();
    this.setAttributes({
      "data-muted": this.qe.bind(this),
      "data-state": this.we.bind(this)
    });
  }
  onAttach(el) {
    el.setAttribute("data-media-mute-button", "");
    el.setAttribute("data-media-tooltip", "mute");
    setARIALabel(el, this.se.bind(this));
  }
  re(event) {
    const remote = this.g.remote;
    this.qe() ? remote.unmute(event) : remote.mute(event);
  }
  qe() {
    const { muted, volume } = this.g.$state;
    return muted() || volume() === 0;
  }
  se() {
    return this.qe() ? "Unmute" : "Mute";
  }
  we() {
    const { muted, volume } = this.g.$state, $volume = volume();
    if (muted() || $volume === 0)
      return "muted";
    else if ($volume >= 0.5)
      return "high";
    else if ($volume < 0.5)
      return "low";
  }
}

class PIPButton extends Component {
  constructor() {
    super();
    new ToggleButtonController({
      qe: this.qe.bind(this),
      te: "togglePictureInPicture",
      re: this.re.bind(this)
    });
  }
  static {
    this.props = ToggleButtonController.props;
  }
  onSetup() {
    this.g = useMediaContext();
    const { pictureInPicture } = this.g.$state, isSupported = this.ve.bind(this);
    this.setAttributes({
      "data-active": pictureInPicture,
      "data-supported": isSupported,
      "aria-hidden": $ariaBool(() => !isSupported())
    });
  }
  onAttach(el) {
    el.setAttribute("data-media-tooltip", "pip");
    setARIALabel(el, this.se.bind(this));
  }
  re(event) {
    const remote = this.g.remote;
    this.qe() ? remote.exitPictureInPicture(event) : remote.enterPictureInPicture(event);
  }
  qe() {
    const { pictureInPicture } = this.g.$state;
    return pictureInPicture();
  }
  ve() {
    const { canPictureInPicture } = this.g.$state;
    return canPictureInPicture();
  }
  se() {
    const { pictureInPicture } = this.g.$state;
    return pictureInPicture() ? "Exit Picture In Picture" : "Enter Picture In Picture";
  }
}

class SeekButton extends Component {
  constructor() {
    super();
    new FocusVisibleController();
  }
  static {
    this.props = {
      disabled: false,
      seconds: 30
    };
  }
  onSetup() {
    this.g = useMediaContext();
    const { seeking } = this.g.$state, { seconds } = this.$props, isSupported = this.ve.bind(this);
    this.setAttributes({
      seconds,
      "data-seeking": seeking,
      "data-supported": isSupported,
      "aria-hidden": $ariaBool(() => !isSupported())
    });
  }
  onAttach(el) {
    setAttributeIfEmpty(el, "tabindex", "0");
    setAttributeIfEmpty(el, "role", "button");
    setAttributeIfEmpty(el, "type", "button");
    el.setAttribute("data-media-tooltip", "seek");
    setARIALabel(el, this.se.bind(this));
  }
  onConnect(el) {
    onPress(el, this.re.bind(this));
  }
  ve() {
    const { canSeek } = this.g.$state;
    return canSeek();
  }
  se() {
    const { seconds } = this.$props;
    return `Seek ${seconds() > 0 ? "forward" : "backward"} ${seconds()} seconds`;
  }
  re(event) {
    const { seconds, disabled } = this.$props;
    if (disabled())
      return;
    const { currentTime } = this.g.$state, seekTo = currentTime() + seconds();
    this.g.remote.seek(seekTo, event);
  }
}

class LiveButton extends Component {
  constructor() {
    super();
    new FocusVisibleController();
  }
  static {
    this.props = {
      disabled: false
    };
  }
  onSetup() {
    this.g = useMediaContext();
    const { disabled } = this.$props, { live, liveEdge } = this.g.$state, isHidden = () => !live();
    this.setAttributes({
      "data-edge": liveEdge,
      "data-hidden": isHidden,
      "aria-disabled": $ariaBool(disabled),
      "aria-hidden": $ariaBool(isHidden)
    });
  }
  onAttach(el) {
    setAttributeIfEmpty(el, "tabindex", "0");
    setAttributeIfEmpty(el, "role", "button");
    setAttributeIfEmpty(el, "type", "button");
    el.setAttribute("data-media-tooltip", "live");
  }
  onConnect(el) {
    onPress(el, this.re.bind(this));
  }
  re(event) {
    const { disabled } = this.$props, { liveEdge } = this.g.$state;
    if (disabled() || liveEdge())
      return;
    this.g.remote.seekToLiveEdge(event);
  }
}

const sliderState = new State({
  min: 0,
  max: 100,
  value: 0,
  pointerValue: 0,
  focused: false,
  dragging: false,
  pointing: false,
  get active() {
    return this.dragging || this.focused || this.pointing;
  },
  get fillRate() {
    return calcRate(this.min, this.max, this.value);
  },
  get fillPercent() {
    return this.fillRate * 100;
  },
  get pointerRate() {
    return calcRate(this.min, this.max, this.pointerValue);
  },
  get pointerPercent() {
    return this.pointerRate * 100;
  }
});
function calcRate(min, max, value) {
  const range = max - min, offset = value - min;
  return range > 0 ? offset / range : 0;
}

function getClampedValue(min, max, value, step) {
  return clampNumber(min, round(value, getNumberOfDecimalPlaces(step)), max);
}
function getValueFromRate(min, max, rate, step) {
  const boundRate = clampNumber(0, rate, 1), range = max - min, fill = range * boundRate, stepRatio = fill / step, steps = step * stepRatio;
  return min + steps;
}

const SliderKeyDirection = {
  Left: -1,
  ArrowLeft: -1,
  Up: 1,
  ArrowUp: 1,
  Right: 1,
  ArrowRight: 1,
  Down: -1,
  ArrowDown: -1
};
class SliderEventsController extends ViewController {
  constructor(_delegate, _media) {
    super();
    this.Ra = null;
    this.kj = null;
    this.mj = null;
    this.Aj = functionThrottle(
      (event) => {
        this.lj(this.nj(event), event);
      },
      20,
      { leading: true }
    );
    this.Ka = _delegate;
    this.g = _media;
  }
  onConnect() {
    effect(this.tj.bind(this));
    effect(this.uj.bind(this));
    if (this.Ka.nf) {
      const provider = this.g.player.el?.querySelector(
        "media-provider,[data-media-provider]"
      );
      if (provider) {
        this.Ra = provider;
        listenEvent(provider, "touchstart", this.vj.bind(this), {
          passive: true
        });
        listenEvent(provider, "touchmove", this.wj.bind(this), {
          passive: false
        });
      }
    }
  }
  vj(event) {
    this.kj = event.touches[0];
  }
  wj(event) {
    if (isNull(this.kj) || isTouchPinchEvent(event))
      return;
    const touch = event.touches[0], xDiff = touch.clientX - this.kj.clientX, yDiff = touch.clientY - this.kj.clientY, isDragging = this.$state.dragging();
    if (!isDragging && Math.abs(yDiff) > 20) {
      return;
    }
    if (isDragging)
      return;
    if (Math.abs(xDiff) > 20) {
      this.kj = touch;
      this.mj = this.$state.value();
      this.oj(this.mj, event);
    }
  }
  tj() {
    if (this.Ka.De())
      return;
    this.listen("focus", this.Li.bind(this));
    this.listen("pointerenter", this.Ji.bind(this));
    this.listen("pointermove", this.xj.bind(this));
    this.listen("pointerleave", this.Ki.bind(this));
    this.listen("pointerdown", this.yj.bind(this));
    this.listen("keydown", this.id.bind(this));
    this.listen("keyup", this.hd.bind(this));
  }
  uj() {
    if (this.Ka.De() || !this.$state.dragging())
      return;
    listenEvent(document, "pointerup", this.zj.bind(this));
    listenEvent(document, "pointermove", this.Aj.bind(this));
    if (IS_SAFARI) {
      listenEvent(document, "touchmove", this.Bj.bind(this), {
        passive: false
      });
    }
  }
  Li() {
    this.lj(this.$state.value());
  }
  pj(newValue, trigger) {
    const { value, min, max, dragging } = this.$state;
    const clampedValue = Math.max(min(), Math.min(newValue, max()));
    value.set(clampedValue);
    const event = this.createEvent("value-change", { detail: clampedValue, trigger });
    this.dispatch(event);
    this.Ka.Gb?.(event);
    if (dragging()) {
      const event2 = this.createEvent("drag-value-change", { detail: clampedValue, trigger });
      this.dispatch(event2);
      this.Ka.Ye?.(event2);
    }
  }
  lj(value, trigger) {
    const { pointerValue, dragging } = this.$state;
    pointerValue.set(value);
    this.dispatch("pointer-value-change", { detail: value, trigger });
    if (dragging()) {
      this.pj(value, trigger);
    }
  }
  nj(event) {
    let thumbPositionRate, rect = this.el.getBoundingClientRect(), { min, max } = this.$state;
    if (this.$props.orientation() === "vertical") {
      const { bottom: trackBottom, height: trackHeight } = rect;
      thumbPositionRate = (trackBottom - event.clientY) / trackHeight;
    } else {
      if (this.kj && isNumber(this.mj)) {
        const { width } = this.Ra.getBoundingClientRect(), rate = (event.clientX - this.kj.clientX) / width, range = max() - min(), diff = range * Math.abs(rate);
        thumbPositionRate = (rate < 0 ? this.mj - diff : this.mj + diff) / range;
      } else {
        const { left: trackLeft, width: trackWidth } = rect;
        thumbPositionRate = (event.clientX - trackLeft) / trackWidth;
      }
    }
    return Math.max(
      min(),
      Math.min(
        max(),
        this.Ka.Ce(
          getValueFromRate(min(), max(), thumbPositionRate, this.Ka.Ae())
        )
      )
    );
  }
  Ji(event) {
    this.$state.pointing.set(true);
  }
  xj(event) {
    const { dragging } = this.$state;
    if (dragging())
      return;
    this.lj(this.nj(event), event);
  }
  Ki(event) {
    this.$state.pointing.set(false);
  }
  yj(event) {
    if (event.button !== 0)
      return;
    const value = this.nj(event);
    this.oj(value, event);
    this.lj(value, event);
  }
  oj(value, trigger) {
    const { dragging } = this.$state;
    if (dragging())
      return;
    dragging.set(true);
    this.g.remote.pauseControls(trigger);
    const event = this.createEvent("drag-start", { detail: value, trigger });
    this.dispatch(event);
    this.Ka.df?.(event);
  }
  rj(value, trigger) {
    const { dragging } = this.$state;
    if (!dragging())
      return;
    dragging.set(false);
    this.g.remote.resumeControls(trigger);
    const event = this.createEvent("drag-end", { detail: value, trigger });
    this.dispatch(event);
    this.Ka.af?.(event);
    this.kj = null;
    this.mj = null;
  }
  id(event) {
    const { key } = event, { min, max } = this.$state;
    let newValue;
    if (key === "Home" || key === "PageUp") {
      newValue = min();
    } else if (key === "End" || key === "PageDown") {
      newValue = max();
    } else if (!event.metaKey && /[0-9]/.test(key)) {
      newValue = (max() - min()) / 10 * Number(key);
    }
    if (!isUndefined(newValue)) {
      this.lj(newValue, event);
      this.pj(newValue, event);
      return;
    }
    const value = this.sj(event);
    if (isUndefined(value))
      return;
    const repeat = key === this.qj;
    if (!this.$state.dragging() && repeat)
      this.oj(value, event);
    this.lj(value, event);
    if (!repeat)
      this.pj(value, event);
    this.qj = key;
  }
  hd(event) {
    this.qj = "";
    const { dragging, value } = this.$state;
    if (!dragging())
      return;
    const newValue = this.sj(event) ?? value();
    this.lj(newValue);
    this.rj(newValue, event);
  }
  sj(event) {
    const { key, shiftKey } = event, isValidKey = Object.keys(SliderKeyDirection).includes(key);
    if (!isValidKey)
      return;
    event.preventDefault();
    event.stopPropagation();
    const { shiftKeyMultiplier } = this.$props;
    const { value, min, max } = this.$state, step = this.Ka.Ae(), keyStep = this.Ka.Be();
    const modifiedStep = !shiftKey ? keyStep : keyStep * shiftKeyMultiplier(), direction = Number(SliderKeyDirection[key]), diff = modifiedStep * direction, steps = (value() + diff) / step;
    return Math.max(min(), Math.min(max(), Number((step * steps).toFixed(3))));
  }
  // -------------------------------------------------------------------------------------------
  // Document (Pointer Events)
  // -------------------------------------------------------------------------------------------
  zj(event) {
    if (event.button !== 0)
      return;
    const value = this.nj(event);
    this.lj(value, event);
    this.rj(value, event);
  }
  Bj(event) {
    event.preventDefault();
  }
}

const sliderValueFormatContext = createContext(() => ({}));

const sliderContext = createContext();

class SliderController extends ViewController {
  constructor(_delegate) {
    super();
    this.Je = animationFrameThrottle(
      (fillPercent, pointerPercent) => {
        this.el?.style.setProperty("--slider-fill", fillPercent + "%");
        this.el?.style.setProperty("--slider-pointer", pointerPercent + "%");
      }
    );
    this.Ka = _delegate;
  }
  static {
    this.props = {
      disabled: false,
      step: 1,
      keyStep: 1,
      orientation: "horizontal",
      shiftKeyMultiplier: 5
    };
  }
  onSetup() {
    this.g = useMediaContext();
    const focus = new FocusVisibleController();
    focus.attach(this);
    this.$state.focused = focus.focused.bind(focus);
    if (!hasProvidedContext(sliderValueFormatContext)) {
      provideContext(sliderValueFormatContext, {
        default: "value"
      });
    }
    provideContext(sliderContext, {
      Ke: this.$props.orientation,
      Le: this.Ka.De,
      Me: signal(null)
    });
    effect(this.Fe.bind(this));
    effect(this.Ge.bind(this));
    this.He();
    new SliderEventsController(this.Ka, this.g).attach(this);
  }
  onAttach(el) {
    setAttributeIfEmpty(el, "role", "slider");
    setAttributeIfEmpty(el, "tabindex", "0");
    setAttributeIfEmpty(el, "autocomplete", "off");
    effect(this.Ee.bind(this));
  }
  // -------------------------------------------------------------------------------------------
  // Watch
  // -------------------------------------------------------------------------------------------
  Fe() {
    const { dragging, value, min, max } = this.$state;
    if (peek(dragging))
      return;
    value.set(getClampedValue(min(), max(), value(), this.Ka.Ae()));
  }
  Ge() {
    if (!this.Ka.De())
      return;
    const { dragging, pointing } = this.$state;
    dragging.set(false);
    pointing.set(false);
  }
  // -------------------------------------------------------------------------------------------
  // ARIA
  // -------------------------------------------------------------------------------------------
  Ie() {
    return ariaBool$1(this.Ka.De());
  }
  // -------------------------------------------------------------------------------------------
  // Attributes
  // -------------------------------------------------------------------------------------------
  He() {
    const { orientation } = this.$props, { dragging, active, pointing } = this.$state;
    this.setAttributes({
      "data-dragging": dragging,
      "data-pointing": pointing,
      "data-active": active,
      "aria-disabled": this.Ie.bind(this),
      "aria-valuemin": this.$state.min,
      "aria-valuemax": this.$state.max,
      "aria-valuenow": this.Ka.xe,
      "aria-valuetext": this.Ka.ye,
      "aria-orientation": orientation
    });
  }
  Ee() {
    const { fillPercent, pointerPercent } = this.$state;
    this.Je(round(fillPercent(), 3), round(pointerPercent(), 3));
  }
}

class Slider extends Component {
  static {
    this.props = {
      ...SliderController.props,
      min: 0,
      max: 100,
      value: 0
    };
  }
  static {
    this.state = sliderState;
  }
  constructor() {
    super();
    new SliderController({
      Ae: this.$props.step,
      Be: this.$props.keyStep,
      Ce: Math.round,
      De: this.$props.disabled,
      xe: this.xe.bind(this),
      ye: this.ye.bind(this)
    });
  }
  onSetup() {
    effect(this.ze.bind(this));
  }
  // -------------------------------------------------------------------------------------------
  // Props
  // -------------------------------------------------------------------------------------------
  xe() {
    const { value } = this.$state;
    return Math.round(value());
  }
  ye() {
    const { value, max } = this.$state;
    return round(value() / max() * 100, 2) + "%";
  }
  // -------------------------------------------------------------------------------------------
  // Watch
  // -------------------------------------------------------------------------------------------
  ze() {
    const { min, max } = this.$props;
    this.$state.min.set(min());
    this.$state.max.set(max());
  }
}

const cache = /* @__PURE__ */ new Map(), pending = /* @__PURE__ */ new Set(), registry = /* @__PURE__ */ new Set();
class ThumbnailsLoader {
  constructor($src, _media) {
    this.$cues = signal([]);
    this.$src = $src;
    this.g = _media;
    effect(this.xh.bind(this));
    registry.add(this);
    onDispose(() => registry.delete(this));
  }
  static create($src) {
    const media = useMediaContext();
    return new ThumbnailsLoader($src, media);
  }
  xh() {
    const { canLoad } = this.g.$state;
    if (!canLoad())
      return;
    const controller = new AbortController(), { crossorigin } = this.g.$state;
    const src = this.$src();
    if (!src)
      return;
    if (cache.has(src)) {
      const cues = cache.get(src);
      cache.delete(src);
      cache.set(src, cues);
      if (cache.size > 30) {
        const firstKey = cache.keys().next().value;
        cache.delete(firstKey);
      }
      this.$cues.set(cache.get(src));
    } else if (!pending.has(src)) {
      pending.add(src);
      Promise.resolve().then(function () { return prod; }).then(async ({ parseResponse }) => {
        try {
          const response = await fetch(src, {
            signal: controller.signal,
            credentials: getRequestCredentials(crossorigin())
          }), isJSON = response.headers.get("content-type") === "application/json";
          if (isJSON) {
            try {
              const { cues: cues2 } = parseJSONCaptionsFile(await response.text(), window.VTTCue);
              this.wh(src, cues2);
            } catch (e) {
            }
            return;
          }
          const { cues } = await parseResponse(response);
          this.wh(src, cues);
        } catch (e) {
        }
      });
    }
    return () => {
      controller.abort();
      this.$cues.set([]);
    };
  }
  wh(currentSrc, cues) {
    this.$cues.set(cues);
    for (const t of registry) {
      if (peek(t.$src) === currentSrc)
        t.$cues.set(cues);
    }
    cache.set(currentSrc, cues);
    pending.delete(currentSrc);
  }
}

class Thumbnail extends Component {
  constructor() {
    super(...arguments);
    this.oh = [];
    this.ph = animationFrameThrottle(this.vh.bind(this));
  }
  static {
    this.props = {
      src: "",
      time: 0
    };
  }
  static {
    this.state = new State({
      src: "",
      img: null,
      coords: null,
      activeCue: null,
      loading: false,
      error: null,
      hidden: false
    });
  }
  onSetup() {
    this.g = useMediaContext();
    this.nh = ThumbnailsLoader.create(this.$props.src);
    this.setAttributes({
      "data-loading": this.Pe.bind(this),
      "data-error": this.Oe.bind(this),
      "data-hidden": this.$state.hidden,
      "aria-hidden": $ariaBool(this.$state.hidden)
    });
  }
  onConnect(el) {
    effect(this.jh.bind(this));
    effect(this.Se.bind(this));
    effect(this.pa.bind(this));
    effect(this.qh.bind(this));
    effect(this.rh.bind(this));
  }
  jh() {
    const img = this.$state.img();
    if (!img)
      return;
    listenEvent(img, "load", this.qa.bind(this));
    listenEvent(img, "error", this.X.bind(this));
  }
  pa() {
    const { src, loading, error } = this.$state;
    src();
    loading.set(true);
    error.set(null);
  }
  qa() {
    const { loading, error } = this.$state;
    loading.set(false);
    error.set(null);
    this.ph();
  }
  X(event) {
    const { loading, error } = this.$state;
    loading.set(false);
    error.set(event);
  }
  Pe() {
    const { loading, hidden } = this.$state;
    return !hidden() && loading();
  }
  Oe() {
    const { error } = this.$state;
    return !isNull(error());
  }
  Se() {
    const { hidden } = this.$state, { duration } = this.g.$state, cues = this.nh.$cues();
    hidden.set(this.Oe() || !Number.isFinite(duration()) || cues.length === 0);
  }
  Ne() {
    return this.$props.time();
  }
  qh() {
    const time = this.Ne(), { activeCue } = this.$state, { duration } = this.g.$state, cues = this.nh.$cues();
    if (!cues || !Number.isFinite(duration())) {
      activeCue.set(null);
      return;
    }
    activeCue.set(findActiveCue(cues, time));
  }
  rh() {
    let { activeCue } = this.$state, cue = activeCue(), baseURL = peek(this.$props.src);
    if (!/^https?:/.test(baseURL)) {
      baseURL = location.href;
    }
    if (!baseURL || !cue) {
      this.$state.src.set("");
      this.sh();
      return;
    }
    const [src, coords = ""] = (cue.text || "").split("#");
    this.$state.coords.set(this.th(coords));
    this.$state.src.set(this.uh(src, baseURL));
    this.ph();
  }
  uh(src, baseURL) {
    return /^https?:/.test(src) ? src : new URL(src, baseURL).href;
  }
  th(coords) {
    const [props, values] = coords.split("="), resolvedCoords = {}, coordValues = values?.split(",");
    if (!props || !values)
      return null;
    for (let i = 0; i < props.length; i++)
      resolvedCoords[props[i]] = +coordValues[i];
    return resolvedCoords;
  }
  vh() {
    if (!this.scope)
      return;
    const img = this.$state.img(), coords = this.$state.coords();
    if (!img || !this.el)
      return;
    const w = coords?.w ?? img.naturalWidth, h = coords?.h ?? img.naturalHeight, { maxWidth, maxHeight, minWidth, minHeight } = getComputedStyle(this.el), minRatio = Math.max(parseInt(minWidth) / w, parseInt(minHeight) / h), maxRatio = Math.min(parseInt(maxWidth) / w, parseInt(maxHeight) / h), scale = maxRatio < 1 ? maxRatio : minRatio > 1 ? minRatio : 1;
    this.mh(this.el, "--thumbnail-width", `${w * scale}px`);
    this.mh(this.el, "--thumbnail-height", `${h * scale}px`);
    this.mh(img, "width", `${img.naturalWidth * scale}px`);
    this.mh(img, "height", `${img.naturalHeight * scale}px`);
    this.mh(
      img,
      "transform",
      coords ? `translate(-${coords.x * scale}px, -${coords.y * scale}px)` : ""
    );
    this.mh(img, "max-width", "none");
  }
  mh(el, name, value) {
    el.style.setProperty(name, value);
    this.oh.push(() => el.style.removeProperty(name));
  }
  sh() {
    for (const reset of this.oh)
      reset();
    this.oh = [];
  }
}

var __defProp$c = Object.defineProperty;
var __getOwnPropDesc$c = Object.getOwnPropertyDescriptor;
var __decorateClass$c = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$c(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$c(target, key, result);
  return result;
};
class SliderVideo extends Component {
  static {
    this.props = {
      src: null
    };
  }
  static {
    this.state = new State({
      video: null,
      src: null,
      canPlay: false,
      error: null,
      hidden: false
    });
  }
  get video() {
    return this.$state.video();
  }
  onSetup() {
    this.g = useMediaContext();
    this.t = useState(Slider.state);
    this.setAttributes({
      "data-loading": this.Pe.bind(this),
      "data-hidden": this.$state.hidden,
      "data-error": this.Oe.bind(this),
      "aria-hidden": $ariaBool(this.$state.hidden)
    });
  }
  onAttach(el) {
    effect(this.Qe.bind(this));
    effect(this.Re.bind(this));
    effect(this.Se.bind(this));
    effect(this.Te.bind(this));
    effect(this.Ue.bind(this));
  }
  Qe() {
    const video = this.$state.video();
    if (!video)
      return;
    if (video.readyState >= 2)
      this.ab();
    listenEvent(video, "canplay", this.ab.bind(this));
    listenEvent(video, "error", this.X.bind(this));
  }
  Re() {
    const { src } = this.$state, { canLoad } = this.g.$state;
    src.set(canLoad() ? this.$props.src() : null);
  }
  Pe() {
    const { canPlay, hidden } = this.$state;
    return !canPlay() && !hidden();
  }
  Oe() {
    const { error } = this.$state;
    return !isNull(error);
  }
  Se() {
    const { src, hidden } = this.$state, { canLoad, duration } = this.g.$state;
    hidden.set(canLoad() && (!src() || this.Oe() || !Number.isFinite(duration())));
  }
  Te() {
    const { src, canPlay, error } = this.$state;
    src();
    canPlay.set(false);
    error.set(null);
  }
  ab(event) {
    const { canPlay, error } = this.$state;
    canPlay.set(true);
    error.set(null);
    this.dispatch("can-play", { trigger: event });
  }
  X(event) {
    const { canPlay, error } = this.$state;
    canPlay.set(false);
    error.set(event);
    this.dispatch("error", { trigger: event });
  }
  Ue() {
    const { video, canPlay } = this.$state, { duration } = this.g.$state, { pointerRate } = this.t, media = video(), canUpdate = canPlay() && media && Number.isFinite(duration()) && Number.isFinite(pointerRate());
    if (canUpdate) {
      media.currentTime = pointerRate() * duration();
    }
  }
}
__decorateClass$c([
  prop
], SliderVideo.prototype, "video", 1);

function padNumberWithZeroes(num, expectedLength) {
  const str = String(num);
  const actualLength = str.length;
  const shouldPad = actualLength < expectedLength;
  if (shouldPad) {
    const padLength = expectedLength - actualLength;
    const padding = `0`.repeat(padLength);
    return `${padding}${num}`;
  }
  return str;
}
function parseTime(duration) {
  const hours = Math.trunc(duration / 3600);
  const minutes = Math.trunc(duration % 3600 / 60);
  const seconds = Math.trunc(duration % 60);
  const fraction = Number((duration - Math.trunc(duration)).toPrecision(3));
  return {
    hours,
    minutes,
    seconds,
    fraction
  };
}
function formatTime(duration, shouldPadHours = null, shouldPadMinutes = null, shouldAlwaysShowHours = false) {
  const { hours, minutes, seconds } = parseTime(duration), paddedHours = shouldPadHours ? padNumberWithZeroes(hours, 2) : hours, paddedMinutes = shouldPadMinutes || isNull(shouldPadMinutes) && duration >= 3600 ? padNumberWithZeroes(minutes, 2) : minutes, paddedSeconds = padNumberWithZeroes(seconds, 2);
  if (hours > 0 || shouldAlwaysShowHours) {
    return `${paddedHours}:${paddedMinutes}:${paddedSeconds}`;
  }
  return `${paddedMinutes}:${paddedSeconds}`;
}
function formatSpokenTime(duration) {
  const spokenParts = [];
  const { hours, minutes, seconds } = parseTime(duration);
  if (hours > 0) {
    spokenParts.push(`${hours} hour`);
  }
  if (minutes > 0) {
    spokenParts.push(`${minutes} min`);
  }
  if (seconds > 0 || spokenParts.length === 0) {
    spokenParts.push(`${seconds} sec`);
  }
  return spokenParts.join(" ");
}

var __defProp$b = Object.defineProperty;
var __getOwnPropDesc$b = Object.getOwnPropertyDescriptor;
var __decorateClass$b = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$b(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$b(target, key, result);
  return result;
};
class SliderValue extends Component {
  static {
    this.props = {
      type: "pointer",
      format: null,
      showHours: false,
      padHours: null,
      padMinutes: null,
      decimalPlaces: 2
    };
  }
  onSetup() {
    this.t = useState(Slider.state);
    this.Ve = useContext(sliderValueFormatContext);
    this.We = computed(this.getValueText.bind(this));
  }
  getValueText() {
    const { type, format, decimalPlaces, padHours, padMinutes, showHours } = this.$props, { value: sliderValue, pointerValue, min, max } = this.t, _format = format() ?? this.Ve.default;
    const value = type() === "current" ? sliderValue() : pointerValue();
    if (_format === "percent") {
      const range = max() - min();
      const percent = value / range * 100;
      return (this.Ve.percent ?? round)(percent, decimalPlaces()) + "\uFE6A";
    } else if (_format === "time") {
      return (this.Ve.time ?? formatTime)(value, padHours(), padMinutes(), showHours());
    } else {
      return this.Ve.value?.(value) ?? value.toFixed(2);
    }
  }
}
__decorateClass$b([
  method
], SliderValue.prototype, "getValueText", 1);

class SliderPreview extends Component {
  static {
    this.props = {
      offset: 0,
      noClamp: false
    };
  }
  onSetup() {
    this.t = useContext(sliderContext);
    const { active } = useState(Slider.state);
    this.setAttributes({
      "data-visible": active
    });
  }
  onAttach(el) {
    Object.assign(el.style, {
      position: "absolute",
      top: 0,
      left: 0,
      width: "max-content"
    });
  }
  onConnect(el) {
    const { Me: _preview } = this.t;
    _preview.set(el);
    onDispose(() => _preview.set(null));
    effect(this.Xe.bind(this));
    const resize = new ResizeObserver(this.Xe.bind(this));
    resize.observe(el);
    onDispose(() => resize.disconnect());
  }
  Xe() {
    const { Le: _disabled, Ke: _orientation } = this.t;
    if (_disabled())
      return;
    const el = this.el, { offset, noClamp } = this.$props;
    updateSliderPreviewPlacement(el, {
      clamp: !noClamp(),
      offset: offset(),
      orientation: _orientation()
    });
  }
}
function updateSliderPreviewPlacement(el, {
  clamp,
  offset,
  orientation
}) {
  const { width, height } = el.getBoundingClientRect(), styles = {
    top: null,
    right: null,
    bottom: null,
    left: null
  };
  styles[orientation === "horizontal" ? "bottom" : "left"] = `calc(100% + var(--media-slider-preview-offset, ${offset}px))`;
  if (orientation === "horizontal") {
    const widthHalf = width / 2;
    if (!clamp) {
      styles.left = `calc(var(--slider-pointer) - ${widthHalf}px)`;
    } else {
      const leftClamp = `max(0px, calc(var(--slider-pointer) - ${widthHalf}px))`, rightClamp = `calc(100% - ${width}px)`;
      styles.left = `min(${leftClamp}, ${rightClamp})`;
    }
  } else {
    const heightHalf = height / 2;
    if (!clamp) {
      styles.bottom = `calc(var(--slider-pointer) - ${heightHalf}px)`;
    } else {
      const topClamp = `max(${heightHalf}px, calc(var(--slider-pointer) - ${heightHalf}px))`, bottomClamp = `calc(100% - ${height}px)`;
      styles.bottom = `min(${topClamp}, ${bottomClamp})`;
    }
  }
  Object.assign(el.style, styles);
}

class VolumeSlider extends Component {
  constructor() {
    super(...arguments);
    this.Ze = functionThrottle(this.ob.bind(this), 25);
  }
  static {
    this.props = {
      ...SliderController.props,
      keyStep: 5,
      shiftKeyMultiplier: 2
    };
  }
  static {
    this.state = sliderState;
  }
  onSetup() {
    this.g = useMediaContext();
    provideContext(sliderValueFormatContext, {
      default: "percent"
    });
    new SliderController({
      Ae: this.$props.step,
      Be: this.$props.keyStep,
      De: this.$props.disabled,
      Ce: Math.round,
      xe: this.xe.bind(this),
      ye: this.ye.bind(this),
      Ye: this.Ye.bind(this),
      Gb: this.Gb.bind(this)
    }).attach(this);
    effect(this.Ed.bind(this));
  }
  onAttach(el) {
    el.setAttribute("data-media-volume-slider", "");
    setAttributeIfEmpty(el, "aria-label", "Volume");
    const { canSetVolume } = this.g.$state;
    this.setAttributes({
      "data-supported": canSetVolume,
      "aria-hidden": $ariaBool(() => !canSetVolume())
    });
  }
  xe() {
    const { value } = this.$state;
    return Math.round(value());
  }
  ye() {
    const { value, max } = this.$state;
    return round(value() / max() * 100, 2) + "%";
  }
  Ed() {
    const { muted, volume } = this.g.$state;
    const newValue = muted() ? 0 : volume() * 100;
    this.$state.value.set(newValue);
    this.dispatch("value-change", { detail: newValue });
  }
  ob(event) {
    if (!event.trigger)
      return;
    const mediaVolume = round(event.detail / 100, 3);
    this.g.remote.changeVolume(mediaVolume, event);
  }
  Gb(event) {
    this.Ze(event);
  }
  Ye(event) {
    this.Ze(event);
  }
}

class TimeSlider extends Component {
  constructor() {
    super();
    this.cf = signal(null);
    this.bf = false;
    new SliderController({
      nf: true,
      Ae: this.Ae.bind(this),
      Be: this.Be.bind(this),
      De: this.De.bind(this),
      Ce: this.Ce,
      xe: this.xe.bind(this),
      ye: this.ye.bind(this),
      df: this.df.bind(this),
      Ye: this.Ye.bind(this),
      af: this.af.bind(this),
      Gb: this.Gb.bind(this)
    });
  }
  static {
    this.props = {
      ...SliderController.props,
      step: 0.1,
      keyStep: 5,
      shiftKeyMultiplier: 2,
      pauseWhileDragging: false,
      seekingRequestThrottle: 100
    };
  }
  static {
    this.state = sliderState;
  }
  onSetup() {
    this.g = useMediaContext();
    provideContext(sliderValueFormatContext, {
      default: "time",
      value: this.ef.bind(this),
      time: this.ff.bind(this)
    });
    this.setAttributes({
      "data-chapters": this.gf.bind(this)
    });
    this.setStyles({
      "--slider-progress": this.hf.bind(this)
    });
    effect(this.Fd.bind(this));
    effect(this.jf.bind(this));
  }
  onAttach(el) {
    el.setAttribute("data-media-time-slider", "");
    setAttributeIfEmpty(el, "aria-label", "Seek");
  }
  onConnect(el) {
    effect(this.kf.bind(this));
    observeActiveTextTrack(this.g.textTracks, "chapters", this.cf.set);
  }
  hf() {
    const { bufferedEnd, duration } = this.g.$state;
    return round(Math.min(bufferedEnd() / Math.max(duration(), 1), 1) * 100, 3) + "%";
  }
  gf() {
    const { duration } = this.g.$state;
    return this.cf()?.cues.length && Number.isFinite(duration()) && duration() > 0;
  }
  jf() {
    this.$e = functionThrottle(
      this.kd.bind(this),
      this.$props.seekingRequestThrottle()
    );
  }
  Fd() {
    const { currentTime } = this.g.$state, { value, dragging } = this.$state, newValue = this.lf(currentTime());
    if (!peek(dragging)) {
      value.set(newValue);
      this.dispatch("value-change", { detail: newValue });
    }
  }
  kf() {
    const player = this.g.player.el, { Me: _preview } = useContext(sliderContext);
    player && _preview() && setAttribute(player, "data-preview", this.$state.active());
  }
  kd(time, event) {
    this.g.remote.seeking(time, event);
  }
  mf(time, percent, event) {
    this.$e.cancel();
    const { live } = this.g.$state;
    if (live() && percent >= 99) {
      this.g.remote.seekToLiveEdge(event);
      return;
    }
    this.g.remote.seek(time, event);
  }
  df(event) {
    const { pauseWhileDragging } = this.$props;
    if (pauseWhileDragging()) {
      const { paused } = this.g.$state;
      this.bf = !paused();
      this.g.remote.pause(event);
    }
  }
  Ye(event) {
    this.$e(this._e(event.detail), event);
  }
  af(event) {
    const percent = event.detail;
    this.mf(this._e(percent), percent, event);
    const { pauseWhileDragging } = this.$props;
    if (pauseWhileDragging() && this.bf) {
      this.g.remote.play(event);
      this.bf = false;
    }
  }
  Gb(event) {
    const { dragging } = this.$state;
    if (dragging() || !event.trigger)
      return;
    this.af(event);
  }
  // -------------------------------------------------------------------------------------------
  // Props
  // -------------------------------------------------------------------------------------------
  Ae() {
    const value = this.$props.step() / this.g.$state.duration() * 100;
    return Number.isFinite(value) ? value : 1;
  }
  Be() {
    const value = this.$props.keyStep() / this.g.$state.duration() * 100;
    return Number.isFinite(value) ? value : 1;
  }
  Ce(value) {
    return round(value, 3);
  }
  De() {
    const { canSeek } = this.g.$state;
    return this.$props.disabled() || !canSeek();
  }
  // -------------------------------------------------------------------------------------------
  // ARIA
  // -------------------------------------------------------------------------------------------
  xe() {
    const { value } = this.$state;
    return Math.round(value());
  }
  ye() {
    const time = this._e(this.$state.value()), { duration } = this.g.$state;
    return Number.isFinite(time) ? `${formatSpokenTime(time)} out of ${formatSpokenTime(duration())}` : "live";
  }
  // -------------------------------------------------------------------------------------------
  // Format
  // -------------------------------------------------------------------------------------------
  _e(percent) {
    const { duration } = this.g.$state;
    return Math.round(percent / 100 * duration());
  }
  lf(time) {
    const { liveEdge, duration } = this.g.$state, rate = Math.max(0, Math.min(1, liveEdge() ? 1 : Math.min(time, duration()) / duration()));
    return Number.isNaN(rate) ? 0 : Number.isFinite(rate) ? rate * 100 : 100;
  }
  ef(percent) {
    const time = this._e(percent), { live, duration } = this.g.$state;
    return Number.isFinite(time) ? (live() ? time - duration() : time).toFixed(0) : "LIVE";
  }
  ff(percent, padHours, padMinutes, showHours) {
    const time = this._e(percent), { live, duration } = this.g.$state, value = live() ? time - duration() : time;
    return Number.isFinite(time) ? `${value < 0 ? "-" : ""}${formatTime(Math.abs(value), padHours, padMinutes, showHours)}` : "LIVE";
  }
}

var __defProp$a = Object.defineProperty;
var __getOwnPropDesc$a = Object.getOwnPropertyDescriptor;
var __decorateClass$a = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$a(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$a(target, key, result);
  return result;
};
class SliderChapters extends Component {
  constructor() {
    super(...arguments);
    this.pf = null;
    this.cf = null;
    this.uf = signal(null);
    this.of = [];
    this.Hc = [];
    this.vf = signal(this.Hc);
    this.qf = signal(-1);
    this.rf = signal(-1);
    this.wf = 0;
    this.Lf = animationFrameThrottle((bufferedPercent) => {
      let percent;
      for (let i = this.wf; i < this.of.length; i++) {
        percent = this.yf(this.Hc[i], bufferedPercent);
        this.of[i]?.style.setProperty("--chapter-progress", percent + "%");
        if (percent < 100) {
          this.wf = i;
          break;
        }
      }
    });
    this.Mf = computed(this.Nf.bind(this));
  }
  static {
    this.props = {
      disabled: false
    };
  }
  get cues() {
    return this.vf();
  }
  get activeCue() {
    return this.Hc[this.qf()] || null;
  }
  get activePointerCue() {
    return this.Hc[this.rf()] || null;
  }
  onSetup() {
    this.g = useMediaContext();
    this.sf = useState(TimeSlider.state);
  }
  onAttach(el) {
    const onChapterChange = this.Df.bind(this);
    observeActiveTextTrack(this.g.textTracks, "chapters", onChapterChange);
    effect(this.zf.bind(this));
  }
  onConnect() {
    onDispose(this.H.bind(this));
  }
  setRefs(refs) {
    this.of = refs;
    this.tf?.dispose();
    if (this.of.length === 1) {
      const el = this.of[0];
      el.style.width = "100%";
      el.style.setProperty("--chapter-fill", "var(--slider-fill)");
      el.style.setProperty("--chapter-progress", "var(--slider-progress)");
    } else if (this.of.length > 0) {
      scoped(() => this.Hb(), this.tf = createScope());
    }
  }
  Af(track) {
    if (peek(this.uf) === track)
      return;
    this.uf.set(track);
    this.H();
    this.Ef();
  }
  Ef() {
    const track = this.uf();
    if (!track?.cues.length || this.Hc.length)
      return;
    const chapters = this.Ff(track.cues);
    this.Hc = chapters;
    this.vf.set(chapters);
    if (chapters[0].startTime === 0) {
      this.qf.set(0);
    }
  }
  H() {
    if (!this.Hc.length)
      return;
    this.of = [];
    this.Hc = [];
    this.vf.set(this.Hc);
    this.qf.set(-1);
    this.rf.set(-1);
    this.wf = 0;
    this.tf?.dispose();
  }
  Hb() {
    this.Gf();
    effect(this.Hf.bind(this));
    effect(this.If.bind(this));
    effect(this.Jf.bind(this));
  }
  Kf() {
    return this.Hc[this.Hc.length - 1].endTime;
  }
  Gf() {
    let cue, endTime = this.Kf();
    for (let i = 0; i < this.Hc.length; i++) {
      cue = this.Hc[i];
      this.of[i].style.width = round((cue.endTime - cue.startTime) / endTime * 100, 3) + "%";
    }
  }
  Hf() {
    const { liveEdge, ended } = this.g.$state;
    let { fillPercent, value } = this.sf, isLiveEdge = liveEdge(), prevActiveIndex = peek(this.qf), currentChapter = this.Hc[prevActiveIndex], currentActiveIndex = isLiveEdge ? this.Hc.length - 1 : this.Bf(
      currentChapter.startTime <= peek(value) ? prevActiveIndex : 0,
      fillPercent()
    );
    if (isLiveEdge || ended()) {
      this.xf(0, this.Hc.length, "100%");
    } else if (currentActiveIndex > prevActiveIndex) {
      this.xf(prevActiveIndex, currentActiveIndex, "100%");
    } else if (currentActiveIndex < prevActiveIndex) {
      this.xf(currentActiveIndex + 1, prevActiveIndex + 1, "0%");
    }
    const percent = isLiveEdge ? "100%" : this.yf(this.Hc[currentActiveIndex], fillPercent()) + "%";
    this.Cf(this.of[currentActiveIndex], percent);
    this.qf.set(currentActiveIndex);
  }
  If() {
    let { pointing, pointerPercent } = this.sf;
    if (!pointing()) {
      this.rf.set(-1);
      return;
    }
    const activeIndex = this.Bf(0, pointerPercent());
    this.rf.set(activeIndex);
  }
  xf(start, end, percent) {
    for (let i = start; i < end; i++)
      this.Cf(this.of[i], percent);
  }
  Cf(ref, percent) {
    ref && ref.style.setProperty("--chapter-fill", percent);
  }
  Bf(startIndex, percent) {
    let chapterPercent = 0;
    for (let i = startIndex; i < this.Hc.length; i++) {
      chapterPercent = this.yf(this.Hc[i], percent);
      if (chapterPercent >= 0 && chapterPercent < 100)
        return i;
    }
    return 0;
  }
  Jf() {
    this.Lf(this.Mf());
  }
  Nf() {
    const { bufferedEnd, duration } = this.g.$state;
    return round(Math.min(bufferedEnd() / Math.max(duration(), 1), 1), 3) * 100;
  }
  yf(cue, percent) {
    const lastChapter = this.Hc[this.Hc.length - 1], startPercent = cue.startTime / lastChapter.endTime * 100, endPercent = cue.endTime / lastChapter.endTime * 100;
    return Math.max(
      0,
      round(
        percent >= endPercent ? 100 : (percent - startPercent) / (endPercent - startPercent) * 100,
        3
      )
    );
  }
  Ff(cues) {
    const chapters = [];
    if (cues[0].startTime !== 0) {
      chapters.push(new window.VTTCue(0, cues[0].startTime, ""));
    }
    for (let i = 0; i < cues.length - 1; i++) {
      const currentCue = cues[i], nextCue = cues[i + 1];
      chapters.push(currentCue);
      if (nextCue) {
        const timeDiff = nextCue.startTime - currentCue.endTime;
        if (timeDiff > 0) {
          chapters.push(new window.VTTCue(currentCue.endTime, currentCue.endTime + timeDiff, ""));
        }
      }
    }
    chapters.push(cues[cues.length - 1]);
    return chapters;
  }
  Df(track) {
    this.cf = track;
    this.zf();
  }
  zf() {
    if (!this.scope)
      return;
    const { disabled } = this.$props;
    if (disabled())
      return;
    this.Af(this.cf);
    this.pf = this.Of()?.querySelector('[data-part="chapter-title"]') || null;
    if (this.pf)
      effect(this.Pf.bind(this));
    return () => {
      this.Af(null);
      if (this.pf) {
        this.pf.textContent = "";
        this.pf = null;
      }
    };
  }
  Pf() {
    const cue = this.activePointerCue || this.activeCue;
    if (this.pf)
      this.pf.textContent = cue?.text || "";
  }
  Of() {
    let node = this.el;
    while (node && node.getAttribute("role") !== "slider") {
      node = node.parentElement;
    }
    return node;
  }
}
__decorateClass$a([
  prop
], SliderChapters.prototype, "cues", 1);
__decorateClass$a([
  prop
], SliderChapters.prototype, "activeCue", 1);
__decorateClass$a([
  prop
], SliderChapters.prototype, "activePointerCue", 1);
__decorateClass$a([
  method
], SliderChapters.prototype, "setRefs", 1);

const menuContext = createContext();

const FOCUSABLE_ELEMENTS_SELECTOR = /* @__PURE__ */ [
  "a[href]",
  "[tabindex]",
  "input",
  "select",
  "button"
].map((selector) => `${selector}:not([aria-hidden])`).join(",");
const VALID_KEYS = /* @__PURE__ */ new Set([
  "Escape",
  "Tab",
  "ArrowUp",
  "ArrowDown",
  "Home",
  "PageUp",
  "End",
  "PageDown",
  "Enter",
  " "
]);
class MenuFocusController {
  constructor(_delegate) {
    this.Mg = 0;
    this.Dj = null;
    this.Cj = [];
    this.Ka = _delegate;
  }
  get B() {
    return this.Cj;
  }
  ig(el) {
    listenEvent(el, "focus", this.Li.bind(this));
    this.Dj = el;
    onDispose(() => {
      this.Dj = null;
    });
    return this;
  }
  ke() {
    if (!this.Dj)
      return;
    this.Hb();
    listenEvent(this.Dj, "keyup", this.hd.bind(this));
    listenEvent(this.Dj, "keydown", this.id.bind(this));
    onDispose(() => {
      this.Mg = 0;
      this.Cj = [];
    });
  }
  Hb() {
    this.Mg = 0;
    this.Cj = this.Hj();
  }
  Ag(index = this.Gj()) {
    const element = this.Cj[index], container = this.Ka.ug();
    if (element && container) {
      requestAnimationFrame(() => {
        container.scrollTop = element.offsetTop - container.offsetHeight / 2 + element.offsetHeight / 2;
      });
    }
  }
  Ej(index) {
    this.Mg = index;
    this.Cj[index]?.focus();
    this.Ag(index);
  }
  Gj() {
    return this.Cj.findIndex((el) => el.getAttribute("aria-checked") === "true");
  }
  Li() {
    this.Hb();
    setTimeout(() => {
      const index = this.Gj();
      this.Ej(index >= 0 ? index : 0);
    }, 100);
  }
  hd(event) {
    if (!VALID_KEYS.has(event.key))
      return;
    event.stopPropagation();
    event.preventDefault();
  }
  id(event) {
    if (!VALID_KEYS.has(event.key))
      return;
    event.stopPropagation();
    event.preventDefault();
    switch (event.key) {
      case "Escape":
        this.Ka.vg(event);
        break;
      case "Tab":
        this.Ej(this.Fj(event.shiftKey ? -1 : 1));
        break;
      case "ArrowUp":
        this.Ej(this.Fj(-1));
        break;
      case "ArrowDown":
        this.Ej(this.Fj(1));
        break;
      case "Home":
      case "PageUp":
        this.Ej(0);
        break;
      case "End":
      case "PageDown":
        this.Ej(this.Cj.length - 1);
        break;
    }
  }
  Fj(delta) {
    let index = this.Mg;
    do {
      index = (index + delta + this.Cj.length) % this.Cj.length;
    } while (this.Cj[index]?.offsetParent === null);
    return index;
  }
  Hj() {
    if (!this.Dj)
      return [];
    const focusableElements = this.Dj.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR), elements = [];
    const is = (node) => {
      return node.getAttribute("role") === "menu";
    };
    for (const el of focusableElements) {
      if (el instanceof HTMLElement && el.offsetParent !== null && // does not have display: none
      isElementParent(this.Dj, el, is)) {
        elements.push(el);
      }
    }
    return elements;
  }
}

var __defProp$9 = Object.defineProperty;
var __getOwnPropDesc$9 = Object.getOwnPropertyDescriptor;
var __decorateClass$9 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$9(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$9(target, key, result);
  return result;
};
let idCount = 0;
class Menu extends Component {
  constructor() {
    super();
    this.Qf = signal(false);
    this.Le = signal(false);
    this.be = signal(null);
    this.ce = signal(null);
    this.Zf = signal(false);
    this.Sf = /* @__PURE__ */ new Set();
    this.Tf = null;
    this.qg = this.rg.bind(this);
    this.og = this.sg.bind(this);
    this.pg = this.tg.bind(this);
    const { showDelay } = this.$props;
    this.Uf = new Popper({
      be: this.be,
      ce: this.ce,
      je: showDelay,
      ke: (trigger, show, hide) => {
        onPress(trigger, (event) => {
          if (this.Qf())
            hide(event);
          else
            show(event);
        });
        const closeTarget = this.fg();
        if (closeTarget) {
          onPress(closeTarget, (event) => {
            event.stopPropagation();
            hide(event);
          });
        }
      },
      Da: this.gg.bind(this)
    });
  }
  static {
    this.props = {
      showDelay: 0
    };
  }
  get triggerElement() {
    return this.be();
  }
  get contentElement() {
    return this.ce();
  }
  get isSubmenu() {
    return !!this.Xf;
  }
  onSetup() {
    this.g = useMediaContext();
    const currentIdCount = ++idCount;
    this.Vf = `media-menu-${currentIdCount}`;
    this.Wf = `media-menu-button-${currentIdCount}`;
    this.Rf = new MenuFocusController({
      ug: this.hg.bind(this),
      vg: this.close.bind(this)
    });
    if (hasProvidedContext(menuContext)) {
      this.Xf = useContext(menuContext);
    }
    this.setAttributes({
      "data-open": this.Qf,
      "data-submenu": this.isSubmenu,
      "data-disabled": this.De.bind(this)
    });
    provideContext(menuContext, {
      wg: this.be,
      Qf: this.Qf,
      xg: signal(""),
      _f: this._f.bind(this),
      $f: this.$f.bind(this),
      ag: this.ag.bind(this),
      bg: this.bg.bind(this),
      cg: this.cg.bind(this),
      Yf: this.Yf.bind(this)
    });
  }
  onAttach(el) {
    el.style.setProperty("display", "contents");
    this.Rf.ig(el);
  }
  onConnect(el) {
    effect(this.jg.bind(this));
    if (this.isSubmenu)
      this.Xf?.Yf(this);
    requestAnimationFrame(() => {
      this.pd();
    });
  }
  onDestroy() {
    this.be.set(null);
    this.ce.set(null);
    this.Tf = null;
  }
  jg() {
    const expanded = this.kg();
    this.pd();
    this.dg(expanded);
    if (!expanded)
      return;
    effect(() => {
      const { height } = this.g.$state, content = this.ce();
      content && setStyle(content, "--player-height", height() + "px");
    });
    this.Rf.ke();
    this.listen("pointerup", this.lg.bind(this));
    listenEvent(window, "pointerup", this.mg.bind(this));
  }
  $f(button) {
    const el = button.el, isMenuItem = this.isSubmenu, isARIADisabled = $ariaBool(this.De.bind(this));
    setAttributeIfEmpty(el, "tabindex", isMenuItem ? "-1" : "0");
    setAttributeIfEmpty(el, "role", isMenuItem ? "menuitem" : "button");
    setAttribute(el, "id", this.Wf);
    setAttribute(el, "aria-haspopup", "menu");
    setAttribute(el, "aria-expanded", "false");
    setAttribute(el, "data-submenu", this.isSubmenu);
    if (!this.isSubmenu) {
      this.eg(el);
    }
    const watchAttrs = () => {
      setAttribute(el, "data-open", this.Qf());
      setAttribute(el, "aria-disabled", isARIADisabled());
    };
    effect(watchAttrs);
    this.be.set(el);
    onDispose(() => {
      this.be.set(null);
    });
  }
  ag(items) {
    const el = items.el;
    el.style.setProperty("display", "none");
    setAttribute(el, "id", this.Vf);
    setAttributeIfEmpty(el, "role", "menu");
    setAttributeIfEmpty(el, "tabindex", "-1");
    setAttribute(el, "data-submenu", this.isSubmenu);
    this.ce.set(el);
    onDispose(() => this.ce.set(null));
    if (!this.isSubmenu) {
      this.eg(el);
    }
    const watchAttrs = () => {
      setAttribute(el, "data-open", this.Qf());
    };
    effect(watchAttrs);
    this.Rf.ig(el);
    this.dg(false);
    {
      requestAnimationFrame(this.pd.bind(this));
    }
  }
  bg(observer) {
    this.Tf = observer;
  }
  eg(el) {
    listenEvent(el, "click", (e) => e.stopPropagation());
    listenEvent(el, "pointerup", (e) => e.stopPropagation());
  }
  dg(expanded) {
    const content = peek(this.ce);
    if (content)
      setAttribute(content, "aria-hidden", ariaBool$1(!expanded));
  }
  cg(disabled) {
    this.Zf.set(disabled);
  }
  gg(isExpanded, event) {
    event?.stopPropagation();
    if (this.Qf() === isExpanded)
      return;
    if (this.De()) {
      if (isExpanded)
        this.Uf.hide(event);
      return;
    }
    const trigger = this.be(), content = this.ce();
    if (trigger) {
      setAttribute(trigger, "aria-controls", isExpanded && this.Vf);
      setAttribute(trigger, "aria-expanded", ariaBool$1(isExpanded));
    }
    if (content)
      setAttribute(content, "aria-labelledby", isExpanded && this.Wf);
    this.Qf.set(isExpanded);
    this.ng(event);
    tick();
    if (isKeyboardEvent(event)) {
      if (isExpanded) {
        content?.focus();
      } else {
        trigger?.focus();
      }
      for (const el of [this.el, content]) {
        el && el.setAttribute("data-keyboard", "");
      }
    } else {
      for (const el of [this.el, content]) {
        el && el.removeAttribute("data-keyboard");
      }
    }
    this.dispatch(isExpanded ? "open" : "close", { trigger: event });
    if (isExpanded) {
      if (!this.isSubmenu && this.g.activeMenu !== this) {
        this.g.activeMenu?.close(event);
        this.g.activeMenu = this;
      }
      this.Tf?.yg?.(event);
    } else {
      if (this.isSubmenu) {
        setTimeout(() => {
          for (const el of this.Sf)
            el.close(event);
        }, 300);
      } else {
        this.g.activeMenu = null;
      }
      this.Tf?.zg?.(event);
    }
    if (isExpanded && !isKeyboardEvent(event)) {
      requestAnimationFrame(() => {
        this.Rf.Hb();
        setTimeout(() => {
          this.Rf.Ag();
        }, 100);
      });
    }
  }
  kg() {
    return !this.De() && this.Qf();
  }
  De() {
    return this.Le() || this.Zf();
  }
  _f(disabled) {
    this.Le.set(disabled);
  }
  lg(event) {
    event.stopPropagation();
  }
  mg(event) {
    if (this.isSubmenu)
      return setTimeout(this.close.bind(this, event), 800);
    else
      this.close(event);
  }
  fg() {
    const target = this.el.querySelector('[data-part="close-target"]');
    return isElementParent(this.el, target, (node) => node.getAttribute("role") === "menu") ? target : null;
  }
  hg() {
    if (!this.isSubmenu) {
      const content = peek(this.ce);
      return content || null;
    } else {
      let el = this.el;
      while (el && el.tagName !== "media-menu" && el.hasAttribute("data-submenu")) {
        el = el.parentNode;
      }
      return el;
    }
  }
  ng(trigger) {
    if (this.isSubmenu)
      return;
    if (this.Qf())
      this.g.remote.pauseControls(trigger);
    else
      this.g.remote.resumeControls(trigger);
  }
  Yf(menu) {
    this.Sf.add(menu);
    listenEvent(menu, "open", this.og);
    listenEvent(menu, "close", this.pg);
    onDispose(this.qg);
  }
  rg(menu) {
    this.Sf.delete(menu);
  }
  sg(event) {
    for (const target of this.Sf) {
      if (target !== event.target) {
        for (const el of [target.el, target.triggerElement]) {
          el?.setAttribute("aria-hidden", "true");
        }
      }
    }
    requestAnimationFrame(() => {
      this.pd();
    });
  }
  tg() {
    for (const target of this.Sf) {
      for (const el of [target.el, target.triggerElement]) {
        el?.setAttribute("aria-hidden", "false");
      }
    }
    requestAnimationFrame(() => {
      this.pd();
    });
  }
  pd() {
    const content = peek(this.ce);
    if (!content || false)
      return;
    let { paddingTop, paddingBottom, borderTopWidth, borderBottomWidth } = getComputedStyle(content), height = parseFloat(paddingTop) + parseFloat(paddingBottom) + parseFloat(borderTopWidth) + parseFloat(borderBottomWidth), children = [...content.children];
    for (const child of children) {
      if (child instanceof HTMLElement && child.style.display === "contents") {
        children.push(...child.children);
      } else {
        height += child.offsetHeight || 0;
      }
    }
    requestAnimationFrame(() => {
      if (!content)
        return;
      setAttribute(content, "data-resizing", "");
      setTimeout(() => {
        if (content)
          setAttribute(content, "data-resizing", false);
      }, 400);
      setStyle(content, "--menu-height", height + "px");
    });
  }
  open(trigger) {
    if (peek(this.Qf))
      return;
    this.Uf.show(trigger);
    tick();
  }
  close(trigger) {
    if (!peek(this.Qf))
      return;
    this.Uf.hide(trigger);
    tick();
  }
}
__decorateClass$9([
  prop
], Menu.prototype, "triggerElement", 1);
__decorateClass$9([
  prop
], Menu.prototype, "contentElement", 1);
__decorateClass$9([
  prop
], Menu.prototype, "isSubmenu", 1);
__decorateClass$9([
  method
], Menu.prototype, "open", 1);
__decorateClass$9([
  method
], Menu.prototype, "close", 1);

var __defProp$8 = Object.defineProperty;
var __getOwnPropDesc$8 = Object.getOwnPropertyDescriptor;
var __decorateClass$8 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$8(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$8(target, key, result);
  return result;
};
class MenuButton extends Component {
  constructor() {
    super();
    new FocusVisibleController();
  }
  static {
    this.props = {
      disabled: false
    };
  }
  get expanded() {
    return this.Bg?.Qf() ?? false;
  }
  onSetup() {
    this.Bg = useContext(menuContext);
  }
  onAttach(el) {
    this.Bg.$f(this);
    effect(this.Ge.bind(this));
    setAttributeIfEmpty(el, "type", "button");
  }
  onConnect(el) {
    const hint = Array.from(el.querySelectorAll('[data-part="hint"]')).pop();
    if (hint) {
      effect(() => {
        const text = this.Bg.xg();
        if (text)
          hint.textContent = text;
      });
    }
    onPress(el, (trigger) => {
      this.dispatch("select", { trigger });
    });
  }
  Ge() {
    this.Bg.cg(this.$props.disabled());
  }
}
__decorateClass$8([
  prop
], MenuButton.prototype, "expanded", 1);

let MenuPortal$1 = class MenuPortal extends Component {
  constructor() {
    super(...arguments);
    this.z = null;
  }
  static {
    this.props = {
      container: null,
      disabled: false
    };
  }
  onSetup() {
    this.g = useMediaContext();
    provideContext(menuPortalContext, {
      me: this.Dg.bind(this)
    });
  }
  onAttach(el) {
    el.style.setProperty("display", "contents");
  }
  // Need this so connect scope is defined.
  onConnect(el) {
  }
  onDestroy() {
    this.z?.remove();
    this.z = null;
  }
  Dg(el) {
    this.Cg(false);
    this.z = el;
    requestScopedAnimationFrame(() => {
      requestScopedAnimationFrame(() => {
        if (!this.connectScope)
          return;
        effect(this.Ge.bind(this));
      });
    });
  }
  Ge() {
    const { fullscreen } = this.g.$state, { disabled } = this.$props, _disabled = disabled();
    this.Cg(_disabled === "fullscreen" ? !fullscreen() : !_disabled);
  }
  Cg(shouldPortal) {
    if (!this.z)
      return;
    let container = this.Eg(this.$props.container());
    if (!container)
      return;
    const isPortalled = this.z.parentElement === container;
    setAttribute(this.z, "data-portal", shouldPortal);
    if (shouldPortal) {
      if (!isPortalled) {
        this.z.remove();
        container.append(this.z);
      }
    } else if (isPortalled && this.z.parentElement === container) {
      this.z.remove();
      this.el?.append(this.z);
    }
  }
  Eg(selector) {
    if (selector instanceof HTMLElement)
      return selector;
    return selector ? document.querySelector(selector) : document.body;
  }
};
const menuPortalContext = createContext();

class MenuItems extends Component {
  constructor() {
    super();
    new FocusVisibleController();
    const { placement } = this.$props;
    this.setAttributes({
      "data-placement": placement
    });
  }
  static {
    this.props = {
      placement: null,
      offset: 0,
      alignOffset: 0
    };
  }
  onAttach(el) {
    this.Bg = useContext(menuContext);
    this.Bg.ag(this);
    if (hasProvidedContext(menuPortalContext)) {
      const portal = useContext(menuPortalContext);
      if (portal) {
        provideContext(menuPortalContext, null);
        portal.me(el);
        onDispose(() => portal.me(null));
      }
    }
  }
  onConnect(el) {
    effect(this.ne.bind(this));
  }
  ne() {
    if (!this.el)
      return;
    const placement = this.$props.placement();
    if (placement) {
      Object.assign(this.el.style, {
        position: "absolute",
        top: 0,
        left: 0,
        width: "max-content"
      });
      const { offset: mainOffset, alignOffset } = this.$props;
      return autoPlacement(this.el, this.le(), placement, {
        offsetVarName: "media-menu",
        xOffset: alignOffset(),
        yOffset: mainOffset()
      });
    } else {
      this.el.removeAttribute("style");
      this.el.style.display = "none";
    }
  }
  le() {
    return this.Bg.wg();
  }
}

const radioControllerContext = createContext();

class RadioGroupController extends ViewController {
  constructor() {
    super(...arguments);
    this.Ij = /* @__PURE__ */ new Set();
    this.Lg = signal("");
    this.a = null;
    this.Mj = this.Da.bind(this);
  }
  get Fg() {
    return Array.from(this.Ij).map((radio) => radio.Lg());
  }
  get value() {
    return this.Lg();
  }
  set value(value) {
    this.Da(value);
  }
  onSetup() {
    provideContext(radioControllerContext, {
      add: this.Kj.bind(this),
      remove: this.Lj.bind(this)
    });
  }
  onAttach(el) {
    const isMenuItem = hasProvidedContext(menuContext);
    if (!isMenuItem)
      setAttributeIfEmpty(el, "role", "radiogroup");
    this.setAttributes({ value: this.Lg });
  }
  onDestroy() {
    this.Ij.clear();
  }
  Kj(radio) {
    if (this.Ij.has(radio))
      return;
    this.Ij.add(radio);
    radio.Ig = this.Mj;
    radio.Hg(radio.Lg() === this.Lg());
  }
  Lj(radio) {
    radio.Ig = null;
    this.Ij.delete(radio);
  }
  Da(newValue, trigger) {
    const currentValue = peek(this.Lg);
    if (!newValue || newValue === currentValue)
      return;
    const currentRadio = this.Jj(currentValue), newRadio = this.Jj(newValue);
    currentRadio?.Hg(false, trigger);
    newRadio?.Hg(true, trigger);
    this.Lg.set(newValue);
    this.Gb?.(newValue, trigger);
  }
  Jj(newValue) {
    for (const radio of this.Ij) {
      if (newValue === peek(radio.Lg))
        return radio;
    }
    return null;
  }
}

var __defProp$7 = Object.defineProperty;
var __getOwnPropDesc$7 = Object.getOwnPropertyDescriptor;
var __decorateClass$7 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$7(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$7(target, key, result);
  return result;
};
class RadioGroup extends Component {
  constructor() {
    super();
    this.a = new RadioGroupController();
    this.a.Gb = this.Gb.bind(this);
  }
  static {
    this.props = {
      value: ""
    };
  }
  get values() {
    return this.a.Fg;
  }
  get value() {
    return this.a.value;
  }
  set value(newValue) {
    this.a.value = newValue;
  }
  onSetup() {
    effect(this.Fe.bind(this));
  }
  Fe() {
    this.a.value = this.$props.value();
  }
  Gb(value, trigger) {
    const event = this.createEvent("change", { detail: value, trigger });
    this.dispatch(event);
  }
}
__decorateClass$7([
  prop
], RadioGroup.prototype, "values", 1);
__decorateClass$7([
  prop
], RadioGroup.prototype, "value", 1);

var __defProp$6 = Object.defineProperty;
var __getOwnPropDesc$6 = Object.getOwnPropertyDescriptor;
var __decorateClass$6 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$6(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$6(target, key, result);
  return result;
};
class Radio extends Component {
  constructor() {
    super();
    this.Gg = signal(false);
    this.a = {
      Lg: this.$props.value,
      Hg: this.Hg.bind(this),
      Ig: null
    };
    new FocusVisibleController();
  }
  static {
    this.props = {
      value: ""
    };
  }
  get checked() {
    return this.Gg();
  }
  onSetup() {
    this.setAttributes({
      value: this.$props.value,
      "data-checked": this.Gg,
      "aria-checked": $ariaBool(this.Gg)
    });
  }
  onAttach(el) {
    const isMenuItem = hasProvidedContext(menuContext);
    setAttributeIfEmpty(el, "tabindex", isMenuItem ? "-1" : "0");
    setAttributeIfEmpty(el, "role", isMenuItem ? "menuitemradio" : "radio");
    effect(this.Fe.bind(this));
  }
  onConnect(el) {
    this.Jg();
    onPress(el, this.re.bind(this));
    onDispose(this.A.bind(this));
  }
  A() {
    scoped(() => {
      const group = useContext(radioControllerContext);
      group.remove(this.a);
    }, this.connectScope);
  }
  Jg() {
    const group = useContext(radioControllerContext);
    group.add(this.a);
  }
  Fe() {
    const { value } = this.$props, newValue = value();
    if (peek(this.Gg)) {
      this.a.Ig?.(newValue);
    }
  }
  re(event) {
    if (peek(this.Gg))
      return;
    this.Da(true, event);
    this.Kg(event);
    this.a.Ig?.(peek(this.$props.value), event);
  }
  Hg(value, trigger) {
    if (peek(this.Gg) === value)
      return;
    this.Da(value, trigger);
  }
  Da(value, trigger) {
    this.Gg.set(value);
    this.dispatch("change", { detail: value, trigger });
  }
  Kg(trigger) {
    this.dispatch("select", { trigger });
  }
}
__decorateClass$6([
  prop
], Radio.prototype, "checked", 1);

var __defProp$5 = Object.defineProperty;
var __getOwnPropDesc$5 = Object.getOwnPropertyDescriptor;
var __decorateClass$5 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$5(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$5(target, key, result);
  return result;
};
class ChaptersRadioGroup extends Component {
  constructor() {
    super();
    this.Mg = signal(0);
    this.Dc = signal(null);
    this.a = new RadioGroupController();
    this.a.Gb = this.Gb.bind(this);
  }
  static {
    this.props = {
      thumbnails: ""
    };
  }
  get value() {
    return this.a.value;
  }
  get disabled() {
    const track = this.Dc();
    return !track || !track.cues.length;
  }
  onSetup() {
    this.g = useMediaContext();
    if (hasProvidedContext(menuContext)) {
      this.Bg = useContext(menuContext);
    }
    const { thumbnails } = this.$props;
    this.setAttributes({
      "data-thumbnails": () => !!thumbnails()
    });
  }
  onAttach(el) {
    this.Bg?.bg({
      yg: this.yg.bind(this)
    });
  }
  getOptions() {
    const track = this.Dc();
    if (!track)
      return [];
    return track.cues.map((cue, i) => ({
      cue,
      value: i + "",
      label: cue.text,
      startTime: formatTime(cue.startTime, false),
      duration: formatSpokenTime(cue.endTime - cue.startTime)
    }));
  }
  yg() {
    peek(() => this.Fd());
  }
  onConnect(el) {
    effect(this.Fe.bind(this));
    effect(this.Fd.bind(this));
    effect(this.Ng.bind(this));
    observeActiveTextTrack(this.g.textTracks, "chapters", this.Dc.set);
  }
  Fe() {
    this.a.value = this.Og();
  }
  Fd() {
    if (!this.Bg?.Qf())
      return;
    const track = this.Dc();
    if (!track) {
      this.Mg.set(-1);
      return;
    }
    const { currentTime } = this.g.$state, time = currentTime(), activeCueIndex = track.cues.findIndex((cue) => isCueActive(cue, time));
    this.Mg.set(activeCueIndex);
    if (activeCueIndex >= 0) {
      const cue = track.cues[activeCueIndex], radio = this.el.querySelector(`[aria-checked='true']`), playedPercent = (time - cue.startTime) / (cue.endTime - cue.startTime) * 100;
      radio && setStyle(radio, "--progress", round(playedPercent, 3) + "%");
    }
  }
  Ng() {
    this.Bg?._f(this.disabled);
  }
  Og() {
    return this.Mg() + "";
  }
  Gb(value, trigger) {
    if (this.disabled || !trigger)
      return;
    const index = +value, cues = this.Dc()?.cues;
    if (isNumber(index) && cues?.[index]) {
      this.Mg.set(index);
      this.g.remote.seek(cues[index].startTime, trigger);
      this.dispatch("change", { detail: cues[index], trigger });
    }
  }
}
__decorateClass$5([
  prop
], ChaptersRadioGroup.prototype, "value", 1);
__decorateClass$5([
  prop
], ChaptersRadioGroup.prototype, "disabled", 1);
__decorateClass$5([
  method
], ChaptersRadioGroup.prototype, "getOptions", 1);

var __defProp$4 = Object.defineProperty;
var __getOwnPropDesc$4 = Object.getOwnPropertyDescriptor;
var __decorateClass$4 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$4(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$4(target, key, result);
  return result;
};
class AudioRadioGroup extends Component {
  constructor() {
    super();
    this.a = new RadioGroupController();
    this.a.Gb = this.Gb.bind(this);
  }
  static {
    this.props = {
      emptyLabel: "Default"
    };
  }
  get value() {
    return this.a.value;
  }
  get disabled() {
    const { audioTracks } = this.g.$state;
    return audioTracks().length === 0;
  }
  onSetup() {
    this.g = useMediaContext();
    if (hasProvidedContext(menuContext)) {
      this.Bg = useContext(menuContext);
    }
  }
  onConnect(el) {
    effect(this.Fe.bind(this));
    effect(this.Ng.bind(this));
    effect(this.Pg.bind(this));
  }
  getOptions() {
    const { audioTracks } = this.g.$state;
    return audioTracks().map((track) => ({
      track,
      label: track.label,
      value: track.label.toLowerCase()
    }));
  }
  Fe() {
    this.a.value = this.Og();
  }
  Pg() {
    const { emptyLabel } = this.$props, { audioTrack } = this.g.$state, track = audioTrack();
    this.Bg?.xg.set(track?.label ?? emptyLabel());
  }
  Ng() {
    this.Bg?._f(this.disabled);
  }
  Og() {
    const { audioTrack } = this.g.$state;
    const track = audioTrack();
    return track ? track.label.toLowerCase() : "";
  }
  Gb(value, trigger) {
    if (this.disabled)
      return;
    const index = this.g.audioTracks.toArray().findIndex((track) => track.label.toLowerCase() === value);
    if (index >= 0) {
      const track = this.g.audioTracks[index];
      this.g.remote.changeAudioTrack(index, trigger);
      this.dispatch("change", { detail: track, trigger });
    }
  }
}
__decorateClass$4([
  prop
], AudioRadioGroup.prototype, "value", 1);
__decorateClass$4([
  prop
], AudioRadioGroup.prototype, "disabled", 1);
__decorateClass$4([
  method
], AudioRadioGroup.prototype, "getOptions", 1);

var __defProp$3 = Object.defineProperty;
var __getOwnPropDesc$3 = Object.getOwnPropertyDescriptor;
var __decorateClass$3 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$3(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$3(target, key, result);
  return result;
};
class CaptionsRadioGroup extends Component {
  constructor() {
    super();
    this.a = new RadioGroupController();
    this.a.Gb = this.Gb.bind(this);
  }
  static {
    this.props = {
      offLabel: "Off"
    };
  }
  get value() {
    return this.a.value;
  }
  get disabled() {
    const { textTracks } = this.g.$state;
    return textTracks().filter(isTrackCaptionKind).length === 0;
  }
  onSetup() {
    this.g = useMediaContext();
    if (hasProvidedContext(menuContext)) {
      this.Bg = useContext(menuContext);
    }
  }
  onConnect(el) {
    super.onConnect?.(el);
    effect(this.Fe.bind(this));
    effect(this.Ng.bind(this));
    effect(this.Pg.bind(this));
  }
  getOptions() {
    const { offLabel } = this.$props, { textTracks } = this.g.$state;
    return [
      { value: "off", label: offLabel },
      ...textTracks().filter(isTrackCaptionKind).map((track) => ({
        track,
        label: track.label,
        value: track.label.toLowerCase()
      }))
    ];
  }
  Fe() {
    this.a.value = this.Og();
  }
  Pg() {
    const { offLabel } = this.$props, { textTrack } = this.g.$state, track = textTrack();
    this.Bg?.xg.set(
      track && isTrackCaptionKind(track) && track.mode === "showing" ? track.label : offLabel()
    );
  }
  Ng() {
    this.Bg?._f(this.disabled);
  }
  Og() {
    const { textTrack } = this.g.$state, track = textTrack();
    return track && isTrackCaptionKind(track) && track.mode === "showing" ? track.label.toLowerCase() : "off";
  }
  Gb(value, trigger) {
    if (this.disabled)
      return;
    if (value === "off") {
      const track = this.g.textTracks.selected;
      if (track) {
        const index2 = this.g.textTracks.toArray().indexOf(track);
        this.g.remote.changeTextTrackMode(index2, "disabled", trigger);
        this.dispatch("change", { detail: null, trigger });
      }
      return;
    }
    const index = this.g.textTracks.toArray().findIndex((track) => track.label.toLowerCase() === value);
    if (index >= 0) {
      const track = this.g.textTracks[index];
      this.g.remote.changeTextTrackMode(index, "showing", trigger);
      this.dispatch("change", { detail: track, trigger });
    }
  }
}
__decorateClass$3([
  prop
], CaptionsRadioGroup.prototype, "value", 1);
__decorateClass$3([
  prop
], CaptionsRadioGroup.prototype, "disabled", 1);
__decorateClass$3([
  method
], CaptionsRadioGroup.prototype, "getOptions", 1);

var __defProp$2 = Object.defineProperty;
var __getOwnPropDesc$2 = Object.getOwnPropertyDescriptor;
var __decorateClass$2 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$2(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$2(target, key, result);
  return result;
};
class SpeedRadioGroup extends Component {
  constructor() {
    super();
    this.a = new RadioGroupController();
    this.a.Gb = this.Gb.bind(this);
  }
  static {
    this.props = {
      normalLabel: "Normal",
      rates: [0.25, 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]
    };
  }
  get value() {
    return this.a.value;
  }
  onSetup() {
    this.g = useMediaContext();
    if (hasProvidedContext(menuContext)) {
      this.Bg = useContext(menuContext);
    }
  }
  onConnect(el) {
    effect(this.Fe.bind(this));
    effect(this.Pg.bind(this));
  }
  getOptions() {
    const { rates, normalLabel } = this.$props;
    return rates().map((rate) => ({
      label: rate === 1 ? normalLabel : rate + "\xD7",
      value: rate + ""
    }));
  }
  Fe() {
    this.a.value = this.Og();
  }
  Pg() {
    const { normalLabel } = this.$props, { playbackRate } = this.g.$state, rate = playbackRate();
    this.Bg?.xg.set(rate === 1 ? normalLabel() : rate + "\xD7");
  }
  Og() {
    const { playbackRate } = this.g.$state;
    return playbackRate() + "";
  }
  Gb(value, trigger) {
    const rate = +value;
    this.g.remote.changePlaybackRate(rate, trigger);
    this.dispatch("change", { detail: rate, trigger });
  }
}
__decorateClass$2([
  prop
], SpeedRadioGroup.prototype, "value", 1);
__decorateClass$2([
  method
], SpeedRadioGroup.prototype, "getOptions", 1);

var __defProp$1 = Object.defineProperty;
var __getOwnPropDesc$1 = Object.getOwnPropertyDescriptor;
var __decorateClass$1 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$1(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp$1(target, key, result);
  return result;
};
class QualityRadioGroup extends Component {
  constructor() {
    super();
    this.Rg = computed(() => {
      const { qualities } = this.g.$state;
      return [...qualities()].sort(
        (a, b) => b.height === a.height ? b.bitrate - a.bitrate : b.height - a.height
      );
    });
    this.a = new RadioGroupController();
    this.a.Gb = this.Gb.bind(this);
  }
  static {
    this.props = {
      autoLabel: "Auto",
      hideBitrate: false
    };
  }
  get value() {
    return this.a.value;
  }
  get disabled() {
    const { canSetQuality, qualities } = this.g.$state;
    return !canSetQuality() || qualities().length === 0;
  }
  onSetup() {
    this.g = useMediaContext();
    if (hasProvidedContext(menuContext)) {
      this.Bg = useContext(menuContext);
    }
  }
  onConnect(el) {
    effect(this.Fe.bind(this));
    effect(this.Ng.bind(this));
    effect(this.Pg.bind(this));
  }
  getOptions() {
    const { autoLabel, hideBitrate } = this.$props;
    return [
      { value: "auto", label: autoLabel },
      ...this.Rg().map((quality) => {
        const rate = `${round(quality.bitrate / 1e6, 2)} Mbps`;
        return {
          quality,
          label: quality.height + "p",
          value: this.Qg(quality),
          bitrate: () => !hideBitrate() ? rate : null
        };
      })
    ];
  }
  Fe() {
    this.a.value = this.Og();
  }
  Pg() {
    const { autoLabel } = this.$props, { autoQuality, quality } = this.g.$state, qualityText = quality() ? quality().height + "p" : "";
    this.Bg?.xg.set(!autoQuality() ? qualityText : autoLabel() + ` (${qualityText})`);
  }
  Ng() {
    const { qualities } = this.g.$state;
    this.Bg?._f(qualities().length === 0);
  }
  Gb(value, trigger) {
    if (this.disabled)
      return;
    if (value === "auto") {
      this.g.remote.changeQuality(-1, trigger);
      this.dispatch("change", { detail: "auto", trigger });
      return;
    }
    const { qualities } = this.g.$state, index = peek(qualities).findIndex((quality) => this.Qg(quality) === value);
    if (index >= 0) {
      const quality = peek(qualities)[index];
      this.g.remote.changeQuality(index, trigger);
      this.dispatch("change", { detail: quality, trigger });
    }
  }
  Og() {
    const { quality, autoQuality } = this.g.$state;
    if (autoQuality())
      return "auto";
    const currentQuality = quality();
    return currentQuality ? this.Qg(currentQuality) : "auto";
  }
  Qg(quality) {
    return quality.height + "_" + quality.bitrate;
  }
}
__decorateClass$1([
  prop
], QualityRadioGroup.prototype, "value", 1);
__decorateClass$1([
  prop
], QualityRadioGroup.prototype, "disabled", 1);
__decorateClass$1([
  method
], QualityRadioGroup.prototype, "getOptions", 1);

class Gesture extends Component {
  constructor() {
    super(...arguments);
    this.Ra = null;
    this.Sg = 0;
    this.Tg = -1;
  }
  static {
    this.props = {
      event: void 0,
      action: void 0
    };
  }
  onSetup() {
    this.g = useMediaContext();
    const { event, action } = this.$props;
    this.setAttributes({
      event,
      action
    });
  }
  onAttach(el) {
    el.setAttribute("data-media-gesture", "");
    el.style.setProperty("pointer-events", "none");
  }
  onConnect(el) {
    this.Ra = this.g.player.el?.querySelector(
      "[data-media-provider]"
    );
    effect(this.Vg.bind(this));
  }
  Vg() {
    let eventType = this.$props.event();
    if (!this.Ra || !eventType)
      return;
    if (/^dbl/.test(eventType)) {
      eventType = eventType.split(/^dbl/)[1];
    }
    if (eventType === "pointerup" || eventType === "pointerdown") {
      const pointer = this.g.$state.pointer();
      if (pointer === "coarse") {
        eventType = eventType === "pointerup" ? "touchend" : "touchstart";
      }
    }
    listenEvent(
      this.Ra,
      eventType,
      this.Wg.bind(this),
      { passive: false }
    );
  }
  Wg(event) {
    if (isPointerEvent(event) && (event.button !== 0 || this.g.activeMenu) || isTouchEvent(event) && this.g.activeMenu || isTouchPinchEvent(event) || !this.Xg(event)) {
      return;
    }
    event.MEDIA_GESTURE = true;
    event.preventDefault();
    const eventType = peek(this.$props.event), isDblEvent = eventType?.startsWith("dbl");
    if (!isDblEvent) {
      if (this.Sg === 0) {
        setTimeout(() => {
          if (this.Sg === 1)
            this.Ug(event);
        }, 250);
      }
    } else if (this.Sg === 1) {
      queueMicrotask(() => this.Ug(event));
      clearTimeout(this.Tg);
      this.Sg = 0;
      return;
    }
    if (this.Sg === 0) {
      this.Tg = window.setTimeout(() => {
        this.Sg = 0;
      }, 275);
    }
    this.Sg++;
  }
  Ug(event) {
    this.el.setAttribute("data-triggered", "");
    requestAnimationFrame(() => {
      if (this.Yg()) {
        this.Zg(peek(this.$props.action), event);
      }
      requestAnimationFrame(() => {
        this.el.removeAttribute("data-triggered");
      });
    });
  }
  /** Validate event occurred in gesture bounds. */
  Xg(event) {
    if (!this.el)
      return false;
    if (isPointerEvent(event) || isMouseEvent(event) || isTouchEvent(event)) {
      const touch = isTouchEvent(event) ? event.changedTouches[0] ?? event.touches[0] : void 0;
      const clientX = touch?.clientX ?? event.clientX;
      const clientY = touch?.clientY ?? event.clientY;
      const rect = this.el.getBoundingClientRect();
      const inBounds = clientY >= rect.top && clientY <= rect.bottom && clientX >= rect.left && clientX <= rect.right;
      return event.type.includes("leave") ? !inBounds : inBounds;
    }
    return true;
  }
  /** Validate gesture has the highest z-index in this triggered group. */
  Yg() {
    const gestures = this.g.player.el.querySelectorAll(
      "[data-media-gesture][data-triggered]"
    );
    return Array.from(gestures).sort(
      (a, b) => +getComputedStyle(b).zIndex - +getComputedStyle(a).zIndex
    )[0] === this.el;
  }
  Zg(action, trigger) {
    if (!action)
      return;
    const willTriggerEvent = new DOMEvent("will-trigger", {
      detail: action,
      cancelable: true,
      trigger
    });
    this.dispatchEvent(willTriggerEvent);
    if (willTriggerEvent.defaultPrevented)
      return;
    const [method, value] = action.replace(/:([a-z])/, "-$1").split(":");
    if (action.includes(":fullscreen")) {
      this.g.remote.toggleFullscreen("prefer-media", trigger);
    } else if (action.includes("seek:")) {
      this.g.remote.seek(peek(this.g.$state.currentTime) + (+value || 0), trigger);
    } else {
      this.g.remote[kebabToCamelCase(method)](trigger);
    }
    this.dispatch("trigger", {
      detail: action,
      trigger
    });
  }
}

class CaptionsTextRenderer {
  constructor(_renderer) {
    this.priority = 10;
    this.Dc = null;
    this.va = createDisposalBin();
    this.$g = _renderer;
  }
  attach() {
  }
  canRender() {
    return true;
  }
  detach() {
    this.va.empty();
    this.$g.reset();
    this.Dc = null;
  }
  changeTrack(track) {
    if (!track || this.Dc === track)
      return;
    this.va.empty();
    if (track.readyState < 2) {
      this.$g.reset();
      this.va.add(
        listenEvent(track, "load", () => this.Nj(track), { once: true })
      );
    } else {
      this.Nj(track);
    }
    this.va.add(
      listenEvent(track, "add-cue", (event) => {
        this.$g.addCue(event.detail);
      }),
      listenEvent(track, "remove-cue", (event) => {
        this.$g.removeCue(event.detail);
      })
    );
    this.Dc = track;
  }
  Nj(track) {
    this.$g.changeTrack({
      cues: [...track.cues],
      regions: [...track.regions]
    });
  }
}

class Captions extends Component {
  static {
    this.props = {
      textDir: "ltr"
    };
  }
  onSetup() {
    this.g = useMediaContext();
    this.setAttributes({
      "aria-hidden": $ariaBool(this.ue.bind(this))
    });
  }
  onAttach(el) {
    el.style.setProperty("pointer-events", "none");
  }
  onConnect(el) {
    if (this.$g) {
      effect(this.ah.bind(this));
      return;
    }
    Promise.resolve().then(function () { return prod; }).then((lib) => {
      if (!this.connectScope)
        return;
      scoped(() => {
        this.na = lib;
        const { CaptionsRenderer } = this.na;
        this.$g = new CaptionsRenderer(el);
        this._g = new CaptionsTextRenderer(this.$g);
        effect(this.ah.bind(this));
      }, this.connectScope);
    });
  }
  onDestroy() {
    if (this._g) {
      this._g.detach();
      this.g.textRenderers.remove(this._g);
    }
    this.$g?.destroy();
  }
  ue() {
    const { textTrack } = this.g.$state, track = textTrack();
    return this.g.$iosControls() || !track || !isTrackCaptionKind(track);
  }
  ah() {
    const { viewType } = this.g.$state;
    if (viewType() === "audio") {
      return this.ch();
    } else {
      return this.dh();
    }
  }
  ch() {
    effect(this.zf.bind(this));
    return () => {
      this.el.textContent = "";
    };
  }
  zf() {
    if (this.ue())
      return;
    const { textTrack } = this.g.$state;
    this.bh();
    listenEvent(textTrack(), "cue-change", this.bh.bind(this));
    effect(this.eh.bind(this));
  }
  bh() {
    this.el.textContent = "";
    const { currentTime, textTrack } = this.g.$state, time = peek(currentTime), activeCues = peek(textTrack).activeCues;
    const { renderVTTCueString } = this.na;
    for (const cue of activeCues) {
      const cueEl = document.createElement("div");
      cueEl.setAttribute("data-part", "cue");
      cueEl.innerHTML = renderVTTCueString(cue, time);
      this.el.append(cueEl);
    }
  }
  eh() {
    const { currentTime } = this.g.$state, { updateTimedVTTCueNodes } = this.na;
    updateTimedVTTCueNodes(this.el, currentTime());
  }
  dh() {
    effect(this.fh.bind(this));
    effect(this.gh.bind(this));
    this.g.textRenderers.add(this._g);
    return () => {
      this.el.textContent = "";
      this._g.detach();
      this.g.textRenderers.remove(this._g);
    };
  }
  fh() {
    this.$g.dir = this.$props.textDir();
  }
  gh() {
    if (this.ue())
      return;
    const { currentTime } = this.g.$state;
    this.$g.currentTime = currentTime();
  }
}

class Poster extends Component {
  static {
    this.props = {
      src: void 0,
      alt: void 0
    };
  }
  static {
    this.state = new State({
      img: null,
      src: null,
      alt: null,
      loading: true,
      error: null,
      hidden: false
    });
  }
  onSetup() {
    this.g = useMediaContext();
    this.hh();
    this.ih();
    this.Se();
  }
  onAttach(el) {
    el.style.setProperty("pointer-events", "none");
    effect(this.jh.bind(this));
    effect(this.hh.bind(this));
    effect(this.ih.bind(this));
    effect(this.Se.bind(this));
    const { started } = this.g.$state;
    this.setAttributes({
      "data-visible": () => !started(),
      "data-loading": this.Pe.bind(this),
      "data-error": this.Oe.bind(this),
      "data-hidden": this.$state.hidden
    });
  }
  onConnect(el) {
    const { canLoad, poster } = this.g.$state;
    window.requestAnimationFrame(() => {
      if (!canLoad())
        preconnect(poster());
    });
    effect(this.pa.bind(this));
  }
  Oe() {
    const { error } = this.$state;
    return !isNull(error());
  }
  Se() {
    const { src } = this.$props, { $iosControls } = this.g, { poster } = this.g.$state;
    this.el && setAttribute(this.el, "display", $iosControls() ? "none" : null);
    this.$state.hidden.set(this.Oe() || !(src() || poster()) || $iosControls());
  }
  Pe() {
    const { loading, hidden } = this.$state;
    return !hidden() && loading();
  }
  jh() {
    const img = this.$state.img();
    if (!img)
      return;
    listenEvent(img, "load", this.kh.bind(this));
    listenEvent(img, "error", this.X.bind(this));
  }
  hh() {
    const { src: _src } = this.$props, { src } = this.$state, { canLoad, poster } = this.g.$state;
    const _poster = _src() || poster();
    if (poster() !== _poster) {
      this.g.delegate.f("poster-change", {
        detail: _poster
      });
    }
    src.set(canLoad() && _poster.length ? _poster : null);
  }
  ih() {
    const { src, alt } = this.$state;
    alt.set(src() ? this.$props.alt() : null);
  }
  pa() {
    const { loading, error } = this.$state, { canLoad, poster } = this.g.$state;
    loading.set(canLoad() && !!poster());
    error.set(null);
  }
  kh() {
    const { loading, error } = this.$state;
    loading.set(false);
    error.set(null);
  }
  X(event) {
    const { loading, error } = this.$state;
    loading.set(false);
    error.set(event);
  }
}

class Time extends Component {
  static {
    this.props = {
      type: "current",
      showHours: false,
      padHours: null,
      padMinutes: null,
      remainder: false
    };
  }
  static {
    this.state = new State({
      timeText: ""
    });
  }
  onSetup() {
    this.g = useMediaContext();
    this.u();
    const { type, remainder } = this.$props;
    this.setAttributes({
      "data-type": type,
      "data-remainder": remainder
    });
  }
  onAttach(el) {
    effect(this.u.bind(this));
  }
  u() {
    const { type, remainder, padHours, padMinutes, showHours } = this.$props, seconds = this.lh(type()), duration = this.g.$state.duration();
    if (!Number.isFinite(seconds + duration)) {
      this.$state.timeText.set("LIVE");
      return;
    }
    const time = remainder() ? Math.max(0, duration - seconds) : seconds, formattedTime = formatTime(time, padHours(), padMinutes(), showHours());
    this.$state.timeText.set(formattedTime);
  }
  lh(type) {
    const { bufferedEnd, duration, currentTime } = this.g.$state;
    switch (type) {
      case "buffered":
        return bufferedEnd();
      case "duration":
        return duration();
      default:
        return currentTime();
    }
  }
}

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class DefaultLayout extends Component {
  constructor() {
    super(...arguments);
    this.menuContainer = null;
  }
  static {
    this.props = {
      when: "",
      smallWhen: "",
      thumbnails: "",
      customIcons: false,
      translations: null,
      menuGroup: "bottom",
      noModal: false
    };
  }
  get isMatch() {
    return this.Cb.matches;
  }
  get isSmallLayout() {
    return this.Bb.matches;
  }
  onSetup() {
    const { when, smallWhen, thumbnails, translations, menuGroup, noModal } = this.$props;
    this.Cb = PlayerQueryList.create(when);
    this.Bb = PlayerQueryList.create(smallWhen);
    this.setAttributes({
      "data-match": this.Cb.$matches,
      "data-size": () => this.Bb.matches ? "sm" : null
    });
    const self = this;
    provideContext(defaultLayoutContext, {
      smQueryList: this.Bb,
      thumbnails,
      translations,
      menuGroup,
      noModal,
      get menuContainer() {
        return self.menuContainer;
      }
    });
  }
}
__decorateClass([
  prop
], DefaultLayout.prototype, "menuContainer", 2);
__decorateClass([
  prop
], DefaultLayout.prototype, "isMatch", 1);
__decorateClass([
  prop
], DefaultLayout.prototype, "isSmallLayout", 1);
class DefaultAudioLayout extends DefaultLayout {
  static {
    this.props = {
      ...super.props,
      when: "(view-type: audio)",
      smallWhen: "(width < 576)"
    };
  }
}
class DefaultVideoLayout extends DefaultLayout {
  static {
    this.props = {
      ...super.props,
      when: "(view-type: video)",
      smallWhen: "(width < 576) or (height < 380)"
    };
  }
}
function getDefaultLayoutLang(translations, word) {
  return translations()?.[word] ?? word;
}
const defaultLayoutContext = createContext();
function useDefaultLayoutContext() {
  return useContext(defaultLayoutContext);
}

class MediaProviderElement extends Host(HTMLElement, MediaProvider) {
  constructor() {
    super(...arguments);
    this.k = null;
  }
  static {
    this.tagName = "media-provider";
  }
  onSetup() {
    this.g = useMediaContext();
    this.setAttribute("keep-alive", "");
  }
  onDestroy() {
    this.k?.remove();
    this.k = null;
  }
  onConnect() {
    effect(() => {
      const loader = this.$state.loader();
      const media = loader ? loader.mediaType() === "audio" ? this.l() : this.m() : null;
      if (this.k !== media) {
        const parent = this.k?.parentElement ?? this;
        this.k?.remove();
        this.k = media;
        if (media)
          parent.prepend(media);
      }
      this.load(media);
    });
  }
  l() {
    const audio = this.k instanceof HTMLAudioElement ? this.k : document.createElement("audio");
    setAttribute(audio, "preload", "none");
    setAttribute(audio, "aria-hidden", "true");
    const { controls, crossorigin } = this.g.$state;
    effect(() => {
      setAttribute(audio, "controls", controls());
      setAttribute(audio, "crossorigin", crossorigin());
    });
    return audio;
  }
  m() {
    const video = this.k instanceof HTMLVideoElement ? this.k : document.createElement("video");
    const { controls, crossorigin, poster } = this.g.$state, { $iosControls } = this.g, $nativeControls = computed(() => controls() || $iosControls() ? "" : null), $poster = computed(() => poster() && (controls() || $iosControls()) ? poster() : null);
    effect(() => {
      setAttribute(video, "controls", $nativeControls());
      setAttribute(video, "crossorigin", crossorigin());
      setAttribute(video, "poster", $poster());
    });
    return video;
  }
}

class MediaPlayerElement extends Host(HTMLElement, MediaPlayer) {
  static {
    this.tagName = "media-player";
  }
  static {
    this.attrs = {
      preferNativeHLS: "prefer-native-hls"
    };
  }
}

defineCustomElement(MediaPlayerElement);
defineCustomElement(MediaProviderElement);

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var t$2;
const i$1 = window, s$1 = i$1.trustedTypes, e$3 = s$1 ? s$1.createPolicy("lit-html", { createHTML: (t2) => t2 }) : void 0, o$2 = "$lit$", n$1 = `lit$${(Math.random() + "").slice(9)}$`, l$2 = "?" + n$1, h$1 = `<${l$2}>`, r$1 = document, u = () => r$1.createComment(""), d = (t2) => null === t2 || "object" != typeof t2 && "function" != typeof t2, c$1 = Array.isArray, v = (t2) => c$1(t2) || "function" == typeof (null == t2 ? void 0 : t2[Symbol.iterator]), a = "[ 	\n\f\r]", f = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g, _ = /-->/g, m = />/g, p = RegExp(`>|${a}(?:([^\\s"'>=/]+)(${a}*=${a}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g"), g = /'/g, $ = /"/g, y = /^(?:script|style|textarea|title)$/i, w = (t2) => (i2, ...s2) => ({ Sb: t2, strings: i2, values: s2 }), x = w(1), T = Symbol.for("lit-noChange"), A = Symbol.for("lit-nothing"), E = /* @__PURE__ */ new WeakMap(), C = r$1.createTreeWalker(r$1, 129, null, false);
function P(t2, i2) {
  if (!Array.isArray(t2) || !t2.hasOwnProperty("raw"))
    throw Error("invalid template strings array");
  return void 0 !== e$3 ? e$3.createHTML(i2) : i2;
}
const V = (t2, i2) => {
  const s2 = t2.length - 1, e2 = [];
  let l2, r2 = 2 === i2 ? "<svg>" : "", u2 = f;
  for (let i3 = 0; i3 < s2; i3++) {
    const s3 = t2[i3];
    let d2, c2, v2 = -1, a2 = 0;
    for (; a2 < s3.length && (u2.lastIndex = a2, c2 = u2.exec(s3), null !== c2); )
      a2 = u2.lastIndex, u2 === f ? "!--" === c2[1] ? u2 = _ : void 0 !== c2[1] ? u2 = m : void 0 !== c2[2] ? (y.test(c2[2]) && (l2 = RegExp("</" + c2[2], "g")), u2 = p) : void 0 !== c2[3] && (u2 = p) : u2 === p ? ">" === c2[0] ? (u2 = null != l2 ? l2 : f, v2 = -1) : void 0 === c2[1] ? v2 = -2 : (v2 = u2.lastIndex - c2[2].length, d2 = c2[1], u2 = void 0 === c2[3] ? p : '"' === c2[3] ? $ : g) : u2 === $ || u2 === g ? u2 = p : u2 === _ || u2 === m ? u2 = f : (u2 = p, l2 = void 0);
    const w2 = u2 === p && t2[i3 + 1].startsWith("/>") ? " " : "";
    r2 += u2 === f ? s3 + h$1 : v2 >= 0 ? (e2.push(d2), s3.slice(0, v2) + o$2 + s3.slice(v2) + n$1 + w2) : s3 + n$1 + (-2 === v2 ? (e2.push(void 0), i3) : w2);
  }
  return [P(t2, r2 + (t2[s2] || "<?>") + (2 === i2 ? "</svg>" : "")), e2];
};
class N {
  constructor({ strings: t2, Sb: i2 }, e2) {
    let h2;
    this.parts = [];
    let r2 = 0, d2 = 0;
    const c2 = t2.length - 1, v2 = this.parts, [a2, f2] = V(t2, i2);
    if (this.el = N.createElement(a2, e2), C.currentNode = this.el.content, 2 === i2) {
      const t3 = this.el.content, i3 = t3.firstChild;
      i3.remove(), t3.append(...i3.childNodes);
    }
    for (; null !== (h2 = C.nextNode()) && v2.length < c2; ) {
      if (1 === h2.nodeType) {
        if (h2.hasAttributes()) {
          const t3 = [];
          for (const i3 of h2.getAttributeNames())
            if (i3.endsWith(o$2) || i3.startsWith(n$1)) {
              const s2 = f2[d2++];
              if (t3.push(i3), void 0 !== s2) {
                const t4 = h2.getAttribute(s2.toLowerCase() + o$2).split(n$1), i4 = /([.?@])?(.*)/.exec(s2);
                v2.push({ type: 1, index: r2, name: i4[2], strings: t4, ctor: "." === i4[1] ? H : "?" === i4[1] ? L : "@" === i4[1] ? z : k });
              } else
                v2.push({ type: 6, index: r2 });
            }
          for (const i3 of t3)
            h2.removeAttribute(i3);
        }
        if (y.test(h2.tagName)) {
          const t3 = h2.textContent.split(n$1), i3 = t3.length - 1;
          if (i3 > 0) {
            h2.textContent = s$1 ? s$1.emptyScript : "";
            for (let s2 = 0; s2 < i3; s2++)
              h2.append(t3[s2], u()), C.nextNode(), v2.push({ type: 2, index: ++r2 });
            h2.append(t3[i3], u());
          }
        }
      } else if (8 === h2.nodeType)
        if (h2.data === l$2)
          v2.push({ type: 2, index: r2 });
        else {
          let t3 = -1;
          for (; -1 !== (t3 = h2.data.indexOf(n$1, t3 + 1)); )
            v2.push({ type: 7, index: r2 }), t3 += n$1.length - 1;
        }
      r2++;
    }
  }
  static createElement(t2, i2) {
    const s2 = r$1.createElement("template");
    return s2.innerHTML = t2, s2;
  }
}
function S(t2, i2, s2 = t2, e2) {
  var o2, n2, l2, h2;
  if (i2 === T)
    return i2;
  let r2 = void 0 !== e2 ? null === (o2 = s2.Ub) || void 0 === o2 ? void 0 : o2[e2] : s2.Zb;
  const u2 = d(i2) ? void 0 : i2.bc;
  return (null == r2 ? void 0 : r2.constructor) !== u2 && (null === (n2 = null == r2 ? void 0 : r2.cc) || void 0 === n2 || n2.call(r2, false), void 0 === u2 ? r2 = void 0 : (r2 = new u2(t2), r2.dc(t2, s2, e2)), void 0 !== e2 ? (null !== (l2 = (h2 = s2).Ub) && void 0 !== l2 ? l2 : h2.Ub = [])[e2] = r2 : s2.Zb = r2), void 0 !== r2 && (i2 = S(t2, r2.ec(t2, i2.values), r2, e2)), i2;
}
class M {
  constructor(t2, i2) {
    this.Vb = [], this.Tb = void 0, this.Wb = t2, this.Mb = i2;
  }
  get parentNode() {
    return this.Mb.parentNode;
  }
  get Nb() {
    return this.Mb.Nb;
  }
  u(t2) {
    var i2;
    const { el: { content: s2 }, parts: e2 } = this.Wb, o2 = (null !== (i2 = null == t2 ? void 0 : t2.creationScope) && void 0 !== i2 ? i2 : r$1).importNode(s2, true);
    C.currentNode = o2;
    let n2 = C.nextNode(), l2 = 0, h2 = 0, u2 = e2[0];
    for (; void 0 !== u2; ) {
      if (l2 === u2.index) {
        let i3;
        2 === u2.type ? i3 = new R(n2, n2.nextSibling, this, t2) : 1 === u2.type ? i3 = new u2.ctor(n2, u2.name, u2.strings, this, t2) : 6 === u2.type && (i3 = new Z(n2, this, t2)), this.Vb.push(i3), u2 = e2[++h2];
      }
      l2 !== (null == u2 ? void 0 : u2.index) && (n2 = C.nextNode(), l2++);
    }
    return C.currentNode = r$1, o2;
  }
  v(t2) {
    let i2 = 0;
    for (const s2 of this.Vb)
      void 0 !== s2 && (void 0 !== s2.strings ? (s2.Ob(t2, s2, i2), i2 += s2.strings.length - 2) : s2.Ob(t2[i2])), i2++;
  }
}
class R {
  constructor(t2, i2, s2, e2) {
    var o2;
    this.type = 2, this.Lb = A, this.Tb = void 0, this.Pb = t2, this.Qb = i2, this.Mb = s2, this.options = e2, this.Xb = null === (o2 = null == e2 ? void 0 : e2.isConnected) || void 0 === o2 || o2;
  }
  get Nb() {
    var t2, i2;
    return null !== (i2 = null === (t2 = this.Mb) || void 0 === t2 ? void 0 : t2.Nb) && void 0 !== i2 ? i2 : this.Xb;
  }
  get parentNode() {
    let t2 = this.Pb.parentNode;
    const i2 = this.Mb;
    return void 0 !== i2 && 11 === (null == t2 ? void 0 : t2.nodeType) && (t2 = i2.parentNode), t2;
  }
  get startNode() {
    return this.Pb;
  }
  get endNode() {
    return this.Qb;
  }
  Ob(t2, i2 = this) {
    t2 = S(this, t2, i2), d(t2) ? t2 === A || null == t2 || "" === t2 ? (this.Lb !== A && this.Rb(), this.Lb = A) : t2 !== this.Lb && t2 !== T && this.Yb(t2) : void 0 !== t2.Sb ? this.g(t2) : void 0 !== t2.nodeType ? this.$(t2) : v(t2) ? this.T(t2) : this.Yb(t2);
  }
  k(t2) {
    return this.Pb.parentNode.insertBefore(t2, this.Qb);
  }
  $(t2) {
    this.Lb !== t2 && (this.Rb(), this.Lb = this.k(t2));
  }
  Yb(t2) {
    this.Lb !== A && d(this.Lb) ? this.Pb.nextSibling.data = t2 : this.$(r$1.createTextNode(t2)), this.Lb = t2;
  }
  g(t2) {
    var i2;
    const { values: s2, Sb: e2 } = t2, o2 = "number" == typeof e2 ? this._b(t2) : (void 0 === e2.el && (e2.el = N.createElement(P(e2.h, e2.h[0]), this.options)), e2);
    if ((null === (i2 = this.Lb) || void 0 === i2 ? void 0 : i2.Wb) === o2)
      this.Lb.v(s2);
    else {
      const t3 = new M(o2, this), i3 = t3.u(this.options);
      t3.v(s2), this.$(i3), this.Lb = t3;
    }
  }
  _b(t2) {
    let i2 = E.get(t2.strings);
    return void 0 === i2 && E.set(t2.strings, i2 = new N(t2)), i2;
  }
  T(t2) {
    c$1(this.Lb) || (this.Lb = [], this.Rb());
    const i2 = this.Lb;
    let s2, e2 = 0;
    for (const o2 of t2)
      e2 === i2.length ? i2.push(s2 = new R(this.k(u()), this.k(u()), this, this.options)) : s2 = i2[e2], s2.Ob(o2), e2++;
    e2 < i2.length && (this.Rb(s2 && s2.Qb.nextSibling, e2), i2.length = e2);
  }
  Rb(t2 = this.Pb.nextSibling, i2) {
    var s2;
    for (null === (s2 = this.$b) || void 0 === s2 || s2.call(this, false, true, i2); t2 && t2 !== this.Qb; ) {
      const i3 = t2.nextSibling;
      t2.remove(), t2 = i3;
    }
  }
  setConnected(t2) {
    var i2;
    void 0 === this.Mb && (this.Xb = t2, null === (i2 = this.$b) || void 0 === i2 || i2.call(this, t2));
  }
}
class k {
  constructor(t2, i2, s2, e2, o2) {
    this.type = 1, this.Lb = A, this.Tb = void 0, this.element = t2, this.name = i2, this.Mb = e2, this.options = o2, s2.length > 2 || "" !== s2[0] || "" !== s2[1] ? (this.Lb = Array(s2.length - 1).fill(new String()), this.strings = s2) : this.Lb = A;
  }
  get tagName() {
    return this.element.tagName;
  }
  get Nb() {
    return this.Mb.Nb;
  }
  Ob(t2, i2 = this, s2, e2) {
    const o2 = this.strings;
    let n2 = false;
    if (void 0 === o2)
      t2 = S(this, t2, i2, 0), n2 = !d(t2) || t2 !== this.Lb && t2 !== T, n2 && (this.Lb = t2);
    else {
      const e3 = t2;
      let l2, h2;
      for (t2 = o2[0], l2 = 0; l2 < o2.length - 1; l2++)
        h2 = S(this, e3[s2 + l2], i2, l2), h2 === T && (h2 = this.Lb[l2]), n2 || (n2 = !d(h2) || h2 !== this.Lb[l2]), h2 === A ? t2 = A : t2 !== A && (t2 += (null != h2 ? h2 : "") + o2[l2 + 1]), this.Lb[l2] = h2;
    }
    n2 && !e2 && this.j(t2);
  }
  j(t2) {
    t2 === A ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, null != t2 ? t2 : "");
  }
}
class H extends k {
  constructor() {
    super(...arguments), this.type = 3;
  }
  j(t2) {
    this.element[this.name] = t2 === A ? void 0 : t2;
  }
}
const I = s$1 ? s$1.emptyScript : "";
class L extends k {
  constructor() {
    super(...arguments), this.type = 4;
  }
  j(t2) {
    t2 && t2 !== A ? this.element.setAttribute(this.name, I) : this.element.removeAttribute(this.name);
  }
}
class z extends k {
  constructor(t2, i2, s2, e2, o2) {
    super(t2, i2, s2, e2, o2), this.type = 5;
  }
  Ob(t2, i2 = this) {
    var s2;
    if ((t2 = null !== (s2 = S(this, t2, i2, 0)) && void 0 !== s2 ? s2 : A) === T)
      return;
    const e2 = this.Lb, o2 = t2 === A && e2 !== A || t2.capture !== e2.capture || t2.once !== e2.once || t2.passive !== e2.passive, n2 = t2 !== A && (e2 === A || o2);
    o2 && this.element.removeEventListener(this.name, this, e2), n2 && this.element.addEventListener(this.name, this, t2), this.Lb = t2;
  }
  handleEvent(t2) {
    var i2, s2;
    "function" == typeof this.Lb ? this.Lb.call(null !== (s2 = null === (i2 = this.options) || void 0 === i2 ? void 0 : i2.host) && void 0 !== s2 ? s2 : this.element, t2) : this.Lb.handleEvent(t2);
  }
}
class Z {
  constructor(t2, i2, s2) {
    this.element = t2, this.type = 6, this.Tb = void 0, this.Mb = i2, this.options = s2;
  }
  get Nb() {
    return this.Mb.Nb;
  }
  Ob(t2) {
    S(this, t2);
  }
}
const B = i$1.litHtmlPolyfillSupport;
null == B || B(N, R), (null !== (t$2 = i$1.litHtmlVersions) && void 0 !== t$2 ? t$2 : i$1.litHtmlVersions = []).push("2.8.0");
const D = (t2, i2, s2) => {
  var e2, o2;
  const n2 = null !== (e2 = null == s2 ? void 0 : s2.renderBefore) && void 0 !== e2 ? e2 : i2;
  let l2 = n2.ac;
  if (void 0 === l2) {
    const t3 = null !== (o2 = null == s2 ? void 0 : s2.renderBefore) && void 0 !== o2 ? o2 : null;
    n2.ac = l2 = new R(i2.insertBefore(u(), t3), t3, void 0, null != s2 ? s2 : {});
  }
  return l2.Ob(t2), l2;
};

/**
 * @license
 * Copyright 2020 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const e$2 = (o2) => void 0 === o2.strings;

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const t$1 = { ATTRIBUTE: 1, CHILD: 2, PROPERTY: 3, BOOLEAN_ATTRIBUTE: 4, EVENT: 5, ELEMENT: 6 }, e$1 = (t2) => (...e2) => ({ bc: t2, values: e2 });
class i {
  constructor(t2) {
  }
  get Nb() {
    return this.Mb.Nb;
  }
  dc(t2, e2, i2) {
    this.Ah = t2, this.Mb = e2, this.Ch = i2;
  }
  ec(t2, e2) {
    return this.update(t2, e2);
  }
  update(t2, e2) {
    return this.render(...e2);
  }
}

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const s = (i2, t2) => {
  var e2, o2;
  const r2 = i2.Tb;
  if (void 0 === r2)
    return false;
  for (const i3 of r2)
    null === (o2 = (e2 = i3).cc) || void 0 === o2 || o2.call(e2, t2, false), s(i3, t2);
  return true;
}, o$1 = (i2) => {
  let t2, e2;
  do {
    if (void 0 === (t2 = i2.Mb))
      break;
    e2 = t2.Tb, e2.delete(i2), i2 = t2;
  } while (0 === (null == e2 ? void 0 : e2.size));
}, r = (i2) => {
  for (let t2; t2 = i2.Mb; i2 = t2) {
    let e2 = t2.Tb;
    if (void 0 === e2)
      t2.Tb = e2 = /* @__PURE__ */ new Set();
    else if (e2.has(i2))
      break;
    e2.add(i2), l$1(t2);
  }
};
function n(i2) {
  void 0 !== this.Tb ? (o$1(this), this.Mb = i2, r(this)) : this.Mb = i2;
}
function h(i2, t2 = false, e2 = 0) {
  const r2 = this.Lb, n2 = this.Tb;
  if (void 0 !== n2 && 0 !== n2.size)
    if (t2)
      if (Array.isArray(r2))
        for (let i3 = e2; i3 < r2.length; i3++)
          s(r2[i3], false), o$1(r2[i3]);
      else
        null != r2 && (s(r2, false), o$1(r2));
    else
      s(this, i2);
}
const l$1 = (i2) => {
  var t2, s2, o2, r2;
  i2.type == t$1.CHILD && (null !== (t2 = (o2 = i2).$b) && void 0 !== t2 || (o2.$b = h), null !== (s2 = (r2 = i2).Bh) && void 0 !== s2 || (r2.Bh = n));
};
class c extends i {
  constructor() {
    super(...arguments), this.Tb = void 0;
  }
  dc(i2, t2, e2) {
    super.dc(i2, t2, e2), r(this), this.isConnected = i2.Nb;
  }
  cc(i2, t2 = true) {
    var e2, r2;
    i2 !== this.isConnected && (this.isConnected = i2, i2 ? null === (e2 = this.reconnected) || void 0 === e2 || e2.call(this) : null === (r2 = this.disconnected) || void 0 === r2 || r2.call(this)), t2 && (s(this, i2), o$1(this));
  }
  setValue(t2) {
    if (e$2(this.Ah))
      this.Ah.Ob(t2, this);
    else {
      const i2 = [...this.Ah.Lb];
      i2[this.Ch] = t2, this.Ah.Ob(i2, this, 0);
    }
  }
  disconnected() {
  }
  reconnected() {
  }
}

/**
 * @license
 * Copyright 2018 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const l = (l2) => null != l2 ? l2 : A;

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
class e extends i {
  constructor(i2) {
    if (super(i2), this.et = A, i2.type !== t$1.CHILD)
      throw Error(this.constructor.directiveName + "() can only be used in child bindings");
  }
  render(r2) {
    if (r2 === A || null == r2)
      return this.ft = void 0, this.et = r2;
    if (r2 === T)
      return r2;
    if ("string" != typeof r2)
      throw Error(this.constructor.directiveName + "() called with a non-string value");
    if (r2 === this.et)
      return this.ft;
    this.et = r2;
    const s2 = [r2];
    return s2.raw = s2, this.ft = { Sb: this.constructor.resultType, strings: s2, values: [] };
  }
}
e.directiveName = "unsafeHTML", e.resultType = 1;

/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
class t extends e {
}
t.directiveName = "unsafeSVG", t.resultType = 2;
const o = e$1(t);

class SignalDirective extends c {
  constructor(part) {
    super(part);
    this.Db = null;
    this.ja = null;
    this.Eb = false;
    this.Eb = part.type === t$1.ATTRIBUTE;
  }
  render(signal) {
    if (this.Db !== signal) {
      this.Db = signal;
      this.disconnected();
      if (this.isConnected)
        this.Fb();
    }
    const value = this.Db();
    return this.Eb ? l(value) : value;
  }
  reconnected() {
    this.Fb();
  }
  disconnected() {
    if (!this.Eb)
      this.setValue(null);
    this.ja?.();
    this.ja = null;
  }
  Fb() {
    if (!this.Db)
      return;
    this.ja = effect(this.Gb.bind(this));
  }
  Gb() {
    {
      this.setValue(this.Db?.());
    }
  }
}
const $signal = e$1(SignalDirective);
function $computed(compute) {
  return $signal(computed(compute));
}

class LitElement extends HTMLElement {
  constructor() {
    super(...arguments);
    this.rootPart = null;
  }
  connectedCallback() {
    this.rootPart = D(this.render(), this, {
      renderBefore: this.firstChild
    });
    this.rootPart.setConnected(true);
  }
  disconnectedCallback() {
    this.rootPart?.setConnected(false);
    this.rootPart = null;
  }
}

class SlotObserver {
  constructor(_root, _callback) {
    this.elements = /* @__PURE__ */ new Set();
    this.Jb = animationFrameThrottle(this.Hb.bind(this));
    this.Ib = _root;
    this.sa = _callback;
  }
  connect() {
    this.Hb();
    const observer = new MutationObserver(this.Jb);
    observer.observe(this.Ib, { childList: true });
    onDispose(() => observer.disconnect());
    onDispose(this.disconnect.bind(this));
  }
  disconnect() {
    this.elements.clear();
  }
  assign(template, slot) {
    if (template instanceof Node) {
      slot.textContent = "";
      slot.append(template);
    } else {
      D(template, slot);
    }
    if (!slot.style.display) {
      slot.style.display = "contents";
    }
    const el = slot.firstElementChild;
    if (!el)
      return;
    const classList = slot.getAttribute("data-class");
    if (classList)
      el.classList.add(...classList.split(" "));
  }
  Hb() {
    for (const slot of this.Ib.querySelectorAll("slot")) {
      if (slot.hasAttribute("name"))
        this.elements.add(slot);
    }
    this.sa(this.elements);
  }
}

let id = 0, slotIdAttr = "data-slot-id";
class SlotManager {
  constructor(_root) {
    this.Jb = animationFrameThrottle(this.Hb.bind(this));
    this.Ib = _root;
    this.slots = new SlotObserver(_root, this.Hb.bind(this));
  }
  connect() {
    this.slots.connect();
    this.Hb();
    const mutations = new MutationObserver(this.Jb);
    mutations.observe(this.Ib, { childList: true });
    onDispose(() => mutations.disconnect());
  }
  Hb() {
    for (const node of this.Ib.children) {
      if (node.nodeType !== 1)
        continue;
      const name = node.getAttribute("slot");
      if (!name)
        continue;
      node.style.display = "none";
      let slotId = node.getAttribute(slotIdAttr);
      if (!slotId) {
        node.setAttribute(slotIdAttr, slotId = ++id + "");
      }
      for (const slot of this.slots.elements) {
        if (slot.getAttribute("name") !== name || slot.getAttribute(slotIdAttr) === slotId) {
          continue;
        }
        const clone = document.importNode(node, true);
        if (name.includes("-icon"))
          clone.classList.add("vds-icon");
        clone.style.display = "";
        clone.removeAttribute("slot");
        this.slots.assign(clone, slot);
        slot.setAttribute(slotIdAttr, slotId);
      }
    }
  }
}

function renderMenuButton({ label, icon }) {
  return x`
    <media-menu-button class="vds-menu-button">
      <slot name="menu-arrow-left-icon" data-class="vds-menu-button-close-icon"></slot>
      <slot name="${icon}-icon" data-class="vds-menu-button-icon"></slot>
      <span class="vds-menu-button-label">${$signal(label)}</span>
      <span class="vds-menu-button-hint" data-part="hint"></span>
      <slot name="menu-arrow-right-icon" data-class="vds-menu-button-open-icon"></slot>
    </media-menu-button>
  `;
}

function $i18n(translations, key) {
  return $computed(() => getDefaultLayoutLang(translations, key));
}
function DefaultPlayButton({ tooltip }) {
  const { translations } = useDefaultLayoutContext(), { paused } = useMediaContext().$state, $label = $computed(() => getDefaultLayoutLang(translations, paused() ? "Play" : "Pause"));
  return x`
    <media-tooltip class="vds-play-tooltip vds-tooltip">
      <media-tooltip-trigger>
        <media-play-button class="vds-play-button vds-button" aria-label=${$label}>
          <slot name="play-icon" data-class="vds-play-icon"></slot>
          <slot name="pause-icon" data-class="vds-pause-icon"></slot>
          <slot name="replay-icon" data-class="vds-replay-icon"></slot>
        </media-play-button>
      </media-tooltip-trigger>
      <media-tooltip-content class="vds-tooltip-content" placement=${tooltip}>
        <span class="vds-play-tooltip-text">${$i18n(translations, "Play")}</span>
        <span class="vds-pause-tooltip-text">${$i18n(translations, "Pause")}</span>
      </media-tooltip-content>
    </media-tooltip>
  `;
}
function DefaultMuteButton({ tooltip }) {
  const { translations } = useDefaultLayoutContext(), { muted } = useMediaContext().$state, $label = $computed(() => getDefaultLayoutLang(translations, muted() ? "Unmute" : "Unmute"));
  return x`
    <media-tooltip class="vds-mute-tooltip vds-tooltip">
      <media-tooltip-trigger>
        <media-mute-button class="vds-mute-button vds-button" aria-label=${$label}>
          <slot name="mute-icon" data-class="vds-mute-icon"></slot>
          <slot name="volume-low-icon" data-class="vds-volume-low-icon"></slot>
          <slot name="volume-high-icon" data-class="vds-volume-high-icon"></slot>
        </media-mute-button>
      </media-tooltip-trigger>
      <media-tooltip-content class="vds-tooltip-content" placement=${tooltip}>
        <span class="vds-mute-tooltip-text">${$i18n(translations, "Unmute")}</span>
        <span class="vds-unmute-tooltip-text">${$i18n(translations, "Mute")}</span>
      </media-tooltip-content>
    </media-tooltip>
  `;
}
function DefaultCaptionButton({ tooltip }) {
  const { translations } = useDefaultLayoutContext(), { textTrack } = useMediaContext().$state, $label = $computed(
    () => getDefaultLayoutLang(
      translations,
      textTrack() ? "Closed-Captions Off" : "Closed-Captions On"
    )
  );
  return x`
    <media-tooltip class="vds-caption-tooltip vds-tooltip">
      <media-tooltip-trigger>
        <media-caption-button class="vds-caption-button vds-button" aria-label=${$label}>
          <slot name="cc-on-icon" data-class="vds-cc-on-icon"></slot>
          <slot name="cc-off-icon" data-class="vds-cc-off-icon"></slot>
        </media-caption-button>
      </media-tooltip-trigger>
      <media-tooltip-content class="vds-tooltip-content" placement=${tooltip}>
        <span class="vds-cc-on-tooltip-text">${$i18n(translations, "Closed-Captions Off")}</span>
        <span class="vds-cc-off-tooltip-text">${$i18n(translations, "Closed-Captions On")}</span>
      </media-tooltip-content>
    </media-tooltip>
  `;
}
function DefaultPIPButton() {
  const { translations } = useDefaultLayoutContext(), { pictureInPicture } = useMediaContext().$state, $label = $computed(
    () => getDefaultLayoutLang(translations, pictureInPicture() ? "Exit PiP" : "Enter PiP")
  );
  return x`
    <media-tooltip class="vds-pip-tooltip vds-tooltip">
      <media-tooltip-trigger>
        <media-pip-button class="vds-pip-button vds-button" aria-label=${$label}>
          <slot name="pip-enter-icon" data-class="vds-pip-enter-icon"></slot>
          <slot name="pip-exit-icon" data-class="vds-pip-exit-icon"></slot>
        </media-pip-button>
      </media-tooltip-trigger>
      <media-tooltip-content class="vds-tooltip-content">
        <span class="vds-pip-enter-tooltip-text">${$i18n(translations, "Enter PiP")}</span>
        <span class="vds-pip-exit-tooltip-text">${$i18n(translations, "Exit PiP")}</span>
      </media-tooltip-content>
    </media-tooltip>
  `;
}
function DefaultFullscreenButton({ tooltip }) {
  const { translations } = useDefaultLayoutContext(), { fullscreen } = useMediaContext().$state, $label = $computed(
    () => getDefaultLayoutLang(translations, fullscreen() ? "Exit Fullscreen" : "Enter Fullscreen")
  );
  return x`
    <media-tooltip class="vds-fullscreen-tooltip vds-tooltip">
      <media-tooltip-trigger>
        <media-fullscreen-button class="vds-fullscreen-button vds-button" aria-label=${$label}>
          <slot name="fs-enter-icon" data-class="vds-fs-enter-icon"></slot>
          <slot name="fs-exit-icon" data-class="vds-fs-exit-icon"></slot>
        </media-fullscreen-button>
      </media-tooltip-trigger>
      <media-tooltip-content class="vds-tooltip-content" placement=${tooltip}>
        <span class="vds-fs-enter-tooltip-text">${$i18n(translations, "Enter Fullscreen")}</span>
        <span class="vds-fs-exit-tooltip-text">${$i18n(translations, "Exit Fullscreen")}</span>
      </media-tooltip-content>
    </media-tooltip>
  `;
}
function DefaultSeekButton({
  seconds,
  tooltip
}) {
  const { translations } = useDefaultLayoutContext(), seekText = seconds >= 0 ? "Seek Forward" : "Seek Backward", $label = $i18n(translations, seekText);
  return x`
    <media-tooltip class="vds-seek-tooltip vds-tooltip">
      <media-tooltip-trigger>
        <media-seek-button
          class="vds-seek-button vds-button"
          seconds=${seconds}
          aria-label=${$label}
        >
          ${seconds >= 0 ? x`<slot name="seek-forward-icon"></slot>` : x`<slot name="seek-backward-icon"></slot>`}
        </media-seek-button>
      </media-tooltip-trigger>
      <media-tooltip-content class="vds-tooltip-content" placement=${tooltip}>
        ${$i18n(translations, seekText)}
      </media-tooltip-content>
    </media-tooltip>
  `;
}
function DefaultVolumeSlider() {
  const { translations } = useDefaultLayoutContext(), $label = $i18n(translations, "Volume");
  return x`
    <media-volume-slider class="vds-volume-slider vds-slider" aria-label=${$label}>
      <div class="vds-slider-track"></div>
      <div class="vds-slider-track-fill vds-slider-track"></div>
      <media-slider-preview class="vds-slider-preview" no-clamp>
        <media-slider-value class="vds-slider-value"></media-slider-value>
      </media-slider-preview>
      <div class="vds-slider-thumb"></div>
    </media-volume-slider>
  `;
}
function DefaultTimeSlider() {
  const { width } = useMediaContext().$state, { thumbnails, translations } = useDefaultLayoutContext(), $label = $i18n(translations, "Seek");
  return x`
    <media-time-slider class="vds-time-slider vds-slider" aria-label=${$label}>
      <media-slider-chapters class="vds-slider-chapters" ?disabled=${$signal(() => width() < 768)}>
        <template>
          <div class="vds-slider-chapter">
            <div class="vds-slider-track"></div>
            <div class="vds-slider-track-fill vds-slider-track"></div>
            <div class="vds-slider-progress vds-slider-track"></div>
          </div>
        </template>
      </media-slider-chapters>
      <div class="vds-slider-thumb"></div>
      <media-slider-preview class="vds-slider-preview">
        <media-slider-thumbnail
          class="vds-slider-thumbnail vds-thumbnail"
          src=${$signal(thumbnails)}
        ></media-slider-thumbnail>
        <div class="vds-slider-chapter-title" data-part="chapter-title"></div>
        <media-slider-value class="vds-slider-value"></media-slider-value>
      </media-slider-preview>
    </media-time-slider>
  `;
}
function DefaultLiveButton() {
  const { translations } = useDefaultLayoutContext(), { live } = useMediaContext().$state, $label = $i18n(translations, "Skip To Live"), $liveText = $i18n(translations, "LIVE");
  return live() ? x`
    <media-live-button class="vds-live-button" aria-label=${$label}>
      <span class="vds-live-button-text">${$liveText}</span>
    </media-live-button
  ` : null;
}
function DefaultTimeGroup() {
  return x`
    <div class="vds-time-group">
      <media-time class="vds-time" type="current"></media-time>
      <div class="vds-time-divider">/</div>
      <media-time class="vds-time" type="duration"></media-time>
    </div>
  `;
}
function DefaultTimeInfo() {
  const { live } = useMediaContext().$state;
  return live() ? DefaultLiveButton() : DefaultTimeGroup();
}
function MenuPortal(container, template) {
  return x`
    <media-menu-portal .container=${container} disabled="fullscreen">
      ${template}
    </media-menu-portal>
  `;
}
function DefaultChaptersMenu({
  placement,
  tooltip,
  portal
}) {
  const { viewType } = useMediaContext().$state, { translations, smQueryList, thumbnails, menuContainer, noModal, menuGroup } = useDefaultLayoutContext(), $placement = computed(
    () => noModal() ? unwrap(placement) : !smQueryList.matches ? unwrap(placement) : null
  ), $offset = computed(
    () => !smQueryList.matches && menuGroup() === "bottom" && viewType() === "video" ? 26 : 0
  );
  const items = x`
    <media-menu-items
      class="vds-chapters-menu-items vds-menu-items"
      placement=${$signal($placement)}
      offset=${$signal($offset)}
    >
      <media-chapters-radio-group
        class="vds-chapters-radio-group vds-radio-group"
        thumbnails=${$signal(thumbnails)}
      >
        <template>
          <media-radio class="vds-chapter-radio vds-radio">
            <media-thumbnail class="vds-thumbnail"></media-thumbnail>
            <div class="vds-chapter-radio-content">
              <span class="vds-chapter-radio-label" data-part="label"></span>
              <span class="vds-chapter-radio-start-time" data-part="start-time"></span>
              <span class="vds-chapter-radio-duration" data-part="duration"></span>
            </div>
          </media-radio>
        </template>
      </media-chapters-radio-group>
    </media-menu-items>
  `;
  return x`
    <!-- Chapters Menu -->
    <media-menu class="vds-chapters-menu vds-menu">
      <media-tooltip class="vds-tooltip">
        <media-tooltip-trigger>
          <media-menu-button
            class="vds-menu-button vds-button"
            aria-label=${$i18n(translations, "Chapters")}
          >
            <slot name="menu-chapters-icon"></slot>
          </media-menu-button>
        </media-tooltip-trigger>
        <media-tooltip-content
          class="vds-tooltip-content"
          placement=${isFunction(tooltip) ? $signal(tooltip) : tooltip}
        >
          ${$i18n(translations, "Chapters")}
        </media-tooltip-content>
      </media-tooltip>
      ${portal ? MenuPortal(menuContainer, items) : items}
    </media-menu>
  `;
}
function DefaultSettingsMenu({
  placement,
  portal,
  tooltip
}) {
  const { viewType } = useMediaContext().$state, { translations, smQueryList, menuContainer, noModal, menuGroup } = useDefaultLayoutContext(), $placement = computed(
    () => noModal() ? unwrap(placement) : !smQueryList.matches ? unwrap(placement) : null
  ), $offset = computed(
    () => !smQueryList.matches && menuGroup() === "bottom" && viewType() === "video" ? 26 : 0
  );
  const items = x`
    <media-menu-items
      class="vds-settings-menu-items vds-menu-items"
      placement=${$signal($placement)}
      offset=${$signal($offset)}
    >
      ${DefaultAudioSubmenu()}${DefaultSpeedSubmenu()}${DefaultQualitySubmenu()}${DefaultCaptionsSubmenu()}
    </media-menu-items>
  `;
  return x`
    <media-menu class="vds-settings-menu vds-menu">
      <media-tooltip class="vds-tooltip">
        <media-tooltip-trigger>
          <media-menu-button
            class="vds-menu-button vds-button"
            aria-label=${$i18n(translations, "Settings")}
          >
            <slot name="menu-settings-icon" data-class="vds-rotate-icon"></slot>
          </media-menu-button>
        </media-tooltip-trigger>
        <media-tooltip-content
          class="vds-tooltip-content"
          placement=${isFunction(tooltip) ? $signal(tooltip) : tooltip}
        >
          ${$i18n(translations, "Settings")}
        </media-tooltip-content>
      </media-tooltip>
      ${portal ? MenuPortal(menuContainer, items) : items}
    </media-menu>
  `;
}
function DefaultAudioSubmenu() {
  const { translations } = useDefaultLayoutContext();
  return x`
    <!-- Audio Menu -->
    <media-menu class="vds-audio-menu vds-menu">
      ${renderMenuButton({
    label: () => getDefaultLayoutLang(translations, "Audio"),
    icon: "menu-audio"
  })}
      <media-menu-items class="vds-menu-items">
        <media-audio-radio-group
          class="vds-audio-radio-group vds-radio-group"
          empty-label=${$i18n(translations, "Default")}
        >
          <template>
            <media-radio class="vds-audio-radio vds-radio">
              <div class="vds-radio-check"></div>
              <span class="vds-radio-label" data-part="label"></span>
            </media-radio>
          </template>
        </media-audio-radio-group>
      </media-menu-items>
    </media-menu>
  `;
}
function DefaultSpeedSubmenu() {
  const { translations } = useDefaultLayoutContext();
  return x`
    <!-- Speed Menu -->
    <media-menu class="vds-speed-menu vds-menu">
      ${renderMenuButton({
    label: () => getDefaultLayoutLang(translations, "Speed"),
    icon: "menu-speed"
  })}
      <media-menu-items class="vds-menu-items">
        <media-speed-radio-group
          class="vds-speed-radio-group vds-radio-group"
          normal-label=${$i18n(translations, "Normal")}
        >
          <template>
            <media-radio class="vds-speed-radio vds-radio">
              <div class="vds-radio-check"></div>
              <span class="vds-radio-label" data-part="label"></span>
            </media-radio>
          </template>
        </media-speed-radio-group>
      </media-menu-items>
    </media-menu>
  `;
}
function DefaultQualitySubmenu() {
  const { translations } = useDefaultLayoutContext();
  return x`
    <!-- Quality Menu -->
    <media-menu class="vds-quality-menu vds-menu">
      ${renderMenuButton({
    label: () => getDefaultLayoutLang(translations, "Quality"),
    icon: "menu-quality"
  })}
      <media-menu-items class="vds-menu-items">
        <media-quality-radio-group
          class="vds-quality-radio-group vds-radio-group"
          auto-label=${$i18n(translations, "Auto")}
        >
          <template>
            <media-radio class="vds-quality-radio vds-radio">
              <div class="vds-radio-check"></div>
              <span class="vds-radio-label" data-part="label"></span>
              <span class="vds-radio-hint" data-part="bitrate"></span>
            </media-radio>
          </template>
        </media-quality-radio-group>
      </media-menu-items>
    </media-menu>
  `;
}
function DefaultCaptionsSubmenu() {
  const { translations } = useDefaultLayoutContext();
  return x`
    <!-- Captions Menu -->
    <media-menu class="vds-captions-menu vds-menu">
      ${renderMenuButton({
    label: () => getDefaultLayoutLang(translations, "Captions"),
    icon: "menu-captions"
  })}
      <media-menu-items class="vds-menu-items">
        <media-captions-radio-group
          class="vds-captions-radio-group vds-radio-group"
          off-label=${$i18n(translations, "Off")}
        >
          <template>
            <media-radio class="vds-caption-radio vds-radio">
              <div class="vds-radio-check"></div>
              <span class="vds-radio-label" data-part="label"></span>
            </media-radio>
          </template>
        </media-captions-radio-group>
      </media-menu-items>
    </media-menu>
  `;
}
function createMenuContainer(className) {
  let container = document.querySelector(`body > .${className}`);
  if (!container) {
    container = document.createElement("div");
    container.style.display = "contents";
    container.classList.add(className);
    document.body.append(container);
  }
  return container;
}

function Icon({ name, class: _class, state, paths }) {
  return x`<svg
    class="${"vds-icon" + (_class ? ` ${_class}` : "")}"
    viewBox="0 0 32 32"
    fill="none"
    aria-hidden="true"
    focusable="false"
    xmlns="http://www.w3.org/2000/svg"
    data-icon=${l(name ?? state)}
  >
    ${!isString(paths) ? $signal(paths) : o(paths)}
  </svg>`;
}

class IconsLoader {
  constructor(_root) {
    this.Oj = {};
    this.Pj = false;
    this.Ib = _root;
    this.slots = new SlotObserver(_root, this.Qj.bind(this));
  }
  connect() {
    this.slots.connect();
    onDispose(this.disconnect.bind(this));
  }
  load() {
    this.Kb().then((icons) => {
      this.Oj = icons;
      this.Pj = true;
      this.Qj();
    });
  }
  disconnect() {
    for (const { slot } of this.Rj()) {
      slot.textContent = "";
    }
  }
  *Rj() {
    for (const iconName of Object.keys(this.Oj)) {
      const slotName = `${iconName}-icon`;
      for (const slot of this.slots.elements) {
        if (slot.name !== slotName)
          continue;
        yield { icon: this.Oj[iconName], slot };
      }
    }
  }
  Qj() {
    if (!this.Pj)
      return;
    for (const { icon, slot } of this.Rj()) {
      this.slots.assign(icon, slot);
    }
  }
}

class LayoutIconsLoader extends IconsLoader {
  connect() {
    const player = this.zh();
    if (!player)
      return;
    super.connect();
    if (player.$state.canLoad()) {
      this.load();
    } else {
      listenEvent(player, "can-load", () => this.load(), { once: true });
    }
  }
  zh() {
    let node = this.Ib.parentElement;
    while (node && node.localName !== "media-player") {
      node = node.parentElement;
    }
    return node;
  }
}

class DefaultLayoutIconsLoader extends LayoutIconsLoader {
  async Kb() {
    const paths = (await Promise.resolve().then(function () { return vidstack0d51c467; })).icons, icons = {};
    for (const iconName of Object.keys(paths)) {
      icons[iconName] = Icon({ name: iconName, paths: paths[iconName] });
    }
    return icons;
  }
}

function DefaultAudioLayoutLarge() {
  return x`
    <media-captions class="vds-captions"></media-captions>

    <media-controls class="vds-controls">
      <media-controls-group class="vds-controls-group">${DefaultTimeSlider()}</media-controls-group>

      <media-controls-group class="vds-controls-group">
        ${DefaultSeekButton({ seconds: -10, tooltip: "top start" })}
        ${DefaultPlayButton({ tooltip: "top" })}${DefaultSeekButton({
    tooltip: "top",
    seconds: 10
  })}
        ${$computed(DefaultTimeInfo)}
        <media-chapter-title class="vds-chapter-title"></media-chapter-title>
        ${DefaultMuteButton({ tooltip: "top" })}
        ${DefaultVolumeSlider()}${DefaultCaptionButton({ tooltip: "top" })} ${DefaultAudioMenus()}
      </media-controls-group>
    </media-controls>
  `;
}
function DefaultAudioLayoutSmall() {
  return x`
    <media-captions class="vds-captions"></media-captions>
    <media-controls class="vds-controls">
      <media-controls-group class="vds-controls-group">
        ${$computed(DefaultLivePlayButton)}
        ${DefaultMuteButton({ tooltip: "top start" })}${$computed(DefaultLiveButton)}
        <media-chapter-title class="vds-chapter-title"></media-chapter-title>
        ${DefaultCaptionButton({ tooltip: "top" })}${DefaultAudioMenus()}
      </media-controls-group>

      <media-controls-group class="vds-controls-group">${DefaultTimeSlider()}</media-controls-group>

      ${$computed(DefaultTimeControlsGroup)}${$computed(DefaultBottomControlsGroup)}
    </media-controls>
  `;
}
function DefaultLivePlayButton() {
  const { live, canSeek } = useMediaContext().$state;
  return live() && !canSeek() ? DefaultPlayButton({ tooltip: "top start" }) : null;
}
function DefaultTimeControlsGroup() {
  const { live } = useMediaContext().$state;
  return !live() ? x`
        <media-controls-group class="vds-controls-group">
          <media-time class="vds-time" type="current"></media-time>
          <div class="vds-controls-spacer"></div>
          <media-time class="vds-time" type="duration"></media-time>
        </media-controls-group>
      ` : null;
}
function DefaultBottomControlsGroup() {
  const { canSeek } = useMediaContext().$state;
  return canSeek() ? x`
        <media-controls-group class="vds-controls-group">
          <div class="vds-controls-spacer"></div>
          ${DefaultSeekButton({ seconds: -10, tooltip: "top" })}
          ${DefaultPlayButton({ tooltip: "top" })}
          ${DefaultSeekButton({ tooltip: "top", seconds: 10 })}
          <div class="vds-controls-spacer"></div>
        </media-controls-group>
      ` : null;
}
function DefaultAudioMenus() {
  const placement = "top end";
  return x`
    ${DefaultChaptersMenu({ tooltip: "top", placement, portal: true })}
    ${DefaultSettingsMenu({ tooltip: "top end", placement, portal: true })}
  `;
}

class MediaAudioLayoutElement extends Host(LitElement, DefaultAudioLayout) {
  static {
    this.tagName = "media-audio-layout";
  }
  onSetup() {
    this.forwardKeepAlive = false;
    this.g = useMediaContext();
    this.classList.add("vds-audio-layout");
    this.menuContainer = createMenuContainer("vds-audio-layout");
    effect(() => {
      if (!this.menuContainer)
        return;
      setAttribute(this.menuContainer, "data-size", this.isSmallLayout && "sm");
    });
    onDispose(() => this.menuContainer?.remove());
  }
  onConnect() {
    effect(() => {
      if (this.$props.customIcons()) {
        new SlotManager(this).connect();
      } else {
        new DefaultLayoutIconsLoader(this).connect();
      }
    });
  }
  s() {
    const { streamType } = this.g.$state;
    return this.isMatch && streamType() !== "unknown" ? this.isSmallLayout ? DefaultAudioLayoutSmall() : DefaultAudioLayoutLarge() : null;
  }
  render() {
    return x`${$computed(this.s.bind(this))}`;
  }
}

function DefaultVideoLayoutLarge() {
  return x`
    ${DefaultVideoGestures()}${DefaultBufferingIndicator()}
    <media-captions class="vds-captions"></media-captions>

    <div class="vds-scrim"></div>

    <media-controls class="vds-controls">
      ${$computed(DefaultControlsGroupTop)}

      <div class="vds-controls-spacer"></div>

      <media-controls-group class="vds-controls-group">${DefaultTimeSlider()}</media-controls-group>

      <media-controls-group class="vds-controls-group">
        ${DefaultPlayButton({ tooltip: "top start" })}
        ${DefaultMuteButton({ tooltip: "top" })}${DefaultVolumeSlider()}
        ${$computed(DefaultTimeInfo)}
        <media-chapter-title class="vds-chapter-title"></media-chapter-title>
        ${DefaultCaptionButton({ tooltip: "top" })}${$computed(DefaultBottomMenuGroup)}
        ${DefaultPIPButton()} ${DefaultFullscreenButton({ tooltip: "top end" })}
      </media-controls-group>
    </media-controls>
  `;
}
function DefaultBottomMenuGroup() {
  const { menuGroup } = useDefaultLayoutContext();
  return menuGroup() === "bottom" ? DefaultVideoMenus() : null;
}
function DefaultControlsGroupTop() {
  const { menuGroup } = useDefaultLayoutContext(), children = menuGroup() === "top" ? x`
            <div class="vds-controls-spacer"></div>
            ${DefaultVideoMenus()}
          ` : null;
  return x`
    <media-controls-group class="vds-controls-group">${children}</media-controls-group>
  `;
}
function DefaultVideoLayoutSmall() {
  return x`
    ${DefaultVideoGestures()}${DefaultBufferingIndicator()}
    <media-captions class="vds-captions"></media-captions>

    <div class="vds-scrim"></div>

    <media-controls class="vds-controls">
      <media-controls-group class="vds-controls-group">
        <div class="vds-controls-spacer"></div>
        ${DefaultCaptionButton({ tooltip: "bottom" })}
        ${DefaultVideoMenus()}${DefaultMuteButton({ tooltip: "bottom end" })}
      </media-controls-group>

      <div class="vds-controls-group">${DefaultPlayButton({ tooltip: "top" })}</div>

      <media-controls-group class="vds-controls-group">
        ${$computed(DefaultTimeInfo)}
        <media-chapter-title class="vds-chapter-title"></media-chapter-title>
        <div class="vds-controls-spacer"></div>
        ${DefaultFullscreenButton({ tooltip: "top end" })}
      </media-controls-group>

      <media-controls-group class="vds-controls-group">${DefaultTimeSlider()}</media-controls-group>
    </media-controls>

    ${$computed(StartDuration)}
  `;
}
function StartDuration() {
  const { duration } = useMediaContext().$state;
  if (duration() === 0)
    return null;
  return x`
    <div class="vds-start-duration">
      <media-time class="vds-time" type="duration"></media-time>
    </div>
  `;
}
function DefaultBufferingIndicator() {
  return x`
    <div class="vds-buffering-indicator">
      <svg class="vds-buffering-icon" fill="none" viewBox="0 0 120 120" aria-hidden="true">
        <circle class="vds-buffering-track" cx="60" cy="60" r="54" stroke="currentColor"></circle>
        <circle
          class="vds-buffering-track-fill"
          cx="60"
          cy="60"
          r="54"
          stroke="currentColor"
          pathLength="100"
        ></circle>
      </svg>
    </div>
  `;
}
function DefaultVideoMenus() {
  const { menuGroup, smQueryList } = useDefaultLayoutContext(), $side = () => menuGroup() === "top" || smQueryList.matches ? "bottom" : "top", $tooltip = computed(() => `${$side()} ${menuGroup() === "top" ? "end" : "center"}`), $placement = computed(() => `${$side()} end`);
  return x`
    ${DefaultChaptersMenu({ tooltip: $tooltip, placement: $placement, portal: true })}
    ${DefaultSettingsMenu({ tooltip: $tooltip, placement: $placement, portal: true })}
  `;
}
function DefaultVideoGestures() {
  return x`
    <div class="vds-gestures">
      <media-gesture class="vds-gesture" event="pointerup" action="toggle:paused"></media-gesture>
      <media-gesture class="vds-gesture" event="pointerup" action="toggle:controls"></media-gesture>
      <media-gesture
        class="vds-gesture"
        event="dblpointerup"
        action="toggle:fullscreen"
      ></media-gesture>
      <media-gesture class="vds-gesture" event="dblpointerup" action="seek:-10"></media-gesture>
      <media-gesture class="vds-gesture" event="dblpointerup" action="seek:10"></media-gesture>
    </div>
  `;
}

class MediaVideoLayoutElement extends Host(LitElement, DefaultVideoLayout) {
  static {
    this.tagName = "media-video-layout";
  }
  onSetup() {
    this.forwardKeepAlive = false;
    this.g = useMediaContext();
    this.classList.add("vds-video-layout");
    this.menuContainer = createMenuContainer("vds-video-layout");
    effect(() => {
      if (!this.menuContainer)
        return;
      setAttribute(this.menuContainer, "data-size", this.isSmallLayout && "sm");
    });
    onDispose(() => this.menuContainer?.remove());
  }
  onConnect() {
    effect(() => {
      if (this.$props.customIcons()) {
        new SlotManager(this).connect();
      } else {
        new DefaultLayoutIconsLoader(this).connect();
      }
    });
  }
  s() {
    const { streamType } = this.g.$state;
    return this.isMatch ? streamType() === "unknown" ? DefaultBufferingIndicator() : this.isSmallLayout ? DefaultVideoLayoutSmall() : DefaultVideoLayoutLarge() : null;
  }
  render() {
    return x`${$computed(this.s.bind(this))}`;
  }
}

defineCustomElement(MediaAudioLayoutElement);
defineCustomElement(MediaVideoLayoutElement);

class ControlsGroup extends Component {
  onAttach(el) {
    setStyle(el, "pointer-events", "auto");
  }
}

class TooltipTrigger extends Component {
  constructor() {
    super();
    new FocusVisibleController();
  }
  onConnect(el) {
    onDispose(
      requestScopedAnimationFrame(() => {
        if (!this.connectScope)
          return;
        this.me();
        const tooltip = useContext(tooltipContext);
        onDispose(() => {
          const button = this.le();
          button && tooltip.fe(button);
        });
      })
    );
  }
  me() {
    const button = this.le(), tooltip = useContext(tooltipContext);
    button && tooltip.ee(button);
  }
  le() {
    return this.el.firstElementChild?.getAttribute("role") === "button" ? this.el.firstElementChild : this.el;
  }
}

class MenuItem extends MenuButton {
}

class MediaCaptionsElement extends Host(HTMLElement, Captions) {
  static {
    this.tagName = "media-captions";
  }
}

class MediaGestureElement extends Host(HTMLElement, Gesture) {
  static {
    this.tagName = "media-gesture";
  }
}

class MediaPosterElement extends Host(HTMLElement, Poster) {
  constructor() {
    super(...arguments);
    this.n = document.createElement("img");
  }
  static {
    this.tagName = "media-poster";
  }
  onSetup() {
    this.g = useMediaContext();
    this.$state.img.set(this.n);
  }
  onConnect() {
    const { src, alt } = this.$state, { crossorigin } = this.g.$state;
    if (this.n.parentNode !== this) {
      this.prepend(this.n);
    }
    effect(() => {
      setAttribute(this.n, "src", src());
      setAttribute(this.n, "alt", alt());
      setAttribute(this.n, "crossorigin", crossorigin());
    });
  }
}

const imgTemplate = /* @__PURE__ */ createTemplate(
  '<img loading="eager" decoding="async" aria-hidden="true">'
);
class MediaThumbnailElement extends Host(HTMLElement, Thumbnail) {
  constructor() {
    super(...arguments);
    this.n = this.o();
  }
  static {
    this.tagName = "media-thumbnail";
  }
  onSetup() {
    this.g = useMediaContext();
    this.$state.img.set(this.n);
  }
  onConnect() {
    const { src } = this.$state, { crossorigin } = this.g.$props;
    if (this.n.parentNode !== this) {
      this.prepend(this.n);
    }
    effect(() => {
      setAttribute(this.n, "src", src());
      setAttribute(this.n, "crossorigin", crossorigin());
    });
  }
  o() {
    return cloneTemplateContent(imgTemplate);
  }
}

class MediaTimeElement extends Host(HTMLElement, Time) {
  static {
    this.tagName = "media-time";
  }
  onConnect() {
    effect(() => {
      this.textContent = this.$state.timeText();
    });
  }
}

class MediaControlsElement extends Host(HTMLElement, Controls) {
  static {
    this.tagName = "media-controls";
  }
}

class MediaControlsGroupElement extends Host(HTMLElement, ControlsGroup) {
  static {
    this.tagName = "media-controls-group";
  }
}

class ChapterTitle extends Component {
}
class MediaChapterTitleElement extends Host(HTMLElement, ChapterTitle) {
  constructor() {
    super(...arguments);
    this.p = signal("");
    this.q = computed(() => {
      const { title, started } = this.g.$state;
      return started() ? this.p() || title() : title();
    });
  }
  static {
    this.tagName = "media-chapter-title";
  }
  onSetup() {
    this.g = useMediaContext();
  }
  onConnect() {
    observeActiveTextTrack(this.g.textTracks, "chapters", (track) => {
      if (!track) {
        this.p.set("");
        return;
      }
      const onCueChange = () => {
        const activeCue = track?.activeCues[0];
        this.p.set(activeCue?.text || "");
      };
      onCueChange();
      listenEvent(track, "cue-change", onCueChange);
    });
    effect(() => {
      this.textContent = this.q();
    });
  }
}

class MediaLayout extends Component {
  static {
    this.props = {
      when: ""
    };
  }
}
class MediaLayoutElement extends Host(HTMLElement, MediaLayout) {
  static {
    this.tagName = "media-layout";
  }
  onSetup() {
    this.query = PlayerQueryList.create(this.$props.when);
  }
  onConnect() {
    effect(this.r.bind(this));
  }
  r() {
    const root = this.firstElementChild, isTemplate = root?.localName === "template", isHTMLElement = root instanceof HTMLElement;
    if (!this.query.matches) {
      if (isTemplate) {
        for (const el of this.children) {
          if (el.localName !== "template")
            el.remove();
        }
      } else if (isHTMLElement) {
        root.style.display = "none";
      }
      return;
    }
    if (isTemplate) {
      this.append(root.cloneNode(true));
    } else if (isHTMLElement) {
      root.style.display = "";
    }
  }
}

class MediaPlayButtonElement extends Host(HTMLElement, PlayButton) {
  static {
    this.tagName = "media-play-button";
  }
}

class MediaMuteButtonElement extends Host(HTMLElement, MuteButton) {
  static {
    this.tagName = "media-mute-button";
  }
}

class MediaCaptionButtonElement extends Host(HTMLElement, CaptionButton) {
  static {
    this.tagName = "media-caption-button";
  }
}

class MediaFullscreenButtonElement extends Host(HTMLElement, FullscreenButton) {
  static {
    this.tagName = "media-fullscreen-button";
  }
}

class MediaPIPButtonElement extends Host(HTMLElement, PIPButton) {
  static {
    this.tagName = "media-pip-button";
  }
}

class MediaSeekButtonElement extends Host(HTMLElement, SeekButton) {
  static {
    this.tagName = "media-seek-button";
  }
}

class MediaToggleButtonElement extends Host(HTMLElement, ToggleButton) {
  static {
    this.tagName = "media-toggle-button";
  }
}

class MediaLiveButtonElement extends Host(HTMLElement, LiveButton) {
  static {
    this.tagName = "media-live-button";
  }
}

class MediaTooltipElement extends Host(HTMLElement, Tooltip) {
  static {
    this.tagName = "media-tooltip";
  }
}

class MediaTooltipTriggerElement extends Host(HTMLElement, TooltipTrigger) {
  static {
    this.tagName = "media-tooltip-trigger";
  }
  onConnect() {
    this.style.display = "contents";
  }
}

class MediaTooltipContentElement extends Host(HTMLElement, TooltipContent) {
  static {
    this.tagName = "media-tooltip-content";
  }
}

function renderMenuItemsTemplate(el, onCreate) {
  requestScopedAnimationFrame(() => {
    if (!el.connectScope)
      return;
    const template = el.querySelector("template");
    if (!template)
      return;
    effect(() => {
      const options = el.getOptions();
      cloneTemplate(template, options.length, (radio, i) => {
        const { label, value } = options[i], labelEl = radio.querySelector(`[data-part="label"]`);
        radio.setAttribute("value", value);
        if (labelEl) {
          if (isString(label)) {
            labelEl.textContent = label;
          } else {
            effect(() => {
              labelEl.textContent = label();
            });
          }
        }
        onCreate?.(radio, options[i], i);
      });
    });
  });
}

class MediaAudioRadioGroupElement extends Host(HTMLElement, AudioRadioGroup) {
  static {
    this.tagName = "media-audio-radio-group";
  }
  onConnect() {
    renderMenuItemsTemplate(this);
  }
}

class MediaCaptionsRadioGroupElement extends Host(HTMLElement, CaptionsRadioGroup) {
  static {
    this.tagName = "media-captions-radio-group";
  }
  onConnect() {
    renderMenuItemsTemplate(this);
  }
}

class MediaMenuElement extends Host(HTMLElement, Menu) {
  static {
    this.tagName = "media-menu";
  }
}

class MediaMenuButtonElement extends Host(HTMLElement, MenuButton) {
  static {
    this.tagName = "media-menu-button";
  }
}

class MediaMenuPortalElement extends Host(HTMLElement, MenuPortal$1) {
  static {
    this.tagName = "media-menu-portal";
  }
  static {
    this.attrs = {
      disabled: {
        converter(value) {
          if (isString(value))
            return value;
          return value !== null;
        }
      }
    };
  }
}

class MediaMenuItemElement extends Host(HTMLElement, MenuItem) {
  static {
    this.tagName = "media-menu-item";
  }
}

class MediaMenuItemsElement extends Host(HTMLElement, MenuItems) {
  static {
    this.tagName = "media-menu-items";
  }
}

class MediaChaptersRadioGroupElement extends Host(HTMLElement, ChaptersRadioGroup) {
  static {
    this.tagName = "media-chapters-radio-group";
  }
  onConnect() {
    renderMenuItemsTemplate(this, (el, option) => {
      const { cue, startTime, duration } = option, thumbnailEl = el.querySelector(".vds-thumbnail,media-thumbnail"), startEl = el.querySelector('[data-part="start-time"]'), durationEl = el.querySelector('[data-part="duration"]');
      if (startEl)
        startEl.textContent = startTime;
      if (durationEl)
        durationEl.textContent = duration;
      if (thumbnailEl) {
        thumbnailEl.setAttribute("time", cue.startTime + "");
        effect(() => {
          const { thumbnails } = this.$props;
          thumbnailEl.setAttribute("src", thumbnails());
        });
      }
    });
  }
}

class MediaSpeedRadioGroupElement extends Host(HTMLElement, SpeedRadioGroup) {
  static {
    this.tagName = "media-speed-radio-group";
  }
  onConnect() {
    renderMenuItemsTemplate(this);
  }
}

class MediaQualityRadioGroupElement extends Host(HTMLElement, QualityRadioGroup) {
  static {
    this.tagName = "media-quality-radio-group";
  }
  onConnect() {
    renderMenuItemsTemplate(this, (el, option) => {
      const bitrate = option.bitrate, bitrateEl = el.querySelector('[data-part="bitrate"]');
      if (bitrate && bitrateEl) {
        effect(() => {
          bitrateEl.textContent = bitrate() || "";
        });
      }
    });
  }
}

class MediaRadioElement extends Host(HTMLElement, Radio) {
  static {
    this.tagName = "media-radio";
  }
}

class MediaRadioGroupElement extends Host(HTMLElement, RadioGroup) {
  static {
    this.tagName = "media-radio-group";
  }
}

class MediaSliderElement extends Host(HTMLElement, Slider) {
  static {
    this.tagName = "media-slider";
  }
}

class MediaSliderThumbnailElement extends MediaThumbnailElement {
  static {
    this.tagName = "media-slider-thumbnail";
  }
  onSetup() {
    super.onSetup();
    this.t = useState(Slider.state);
  }
  onConnect() {
    super.onConnect();
    effect(this.u.bind(this));
  }
  u() {
    const { duration } = this.g.$state;
    this.time = this.t.pointerRate() * duration();
  }
}

class MediaSliderValueElement extends Host(HTMLElement, SliderValue) {
  static {
    this.tagName = "media-slider-value";
  }
  static {
    this.attrs = {
      padMinutes: {
        converter: BOOLEAN
      }
    };
  }
  onConnect() {
    effect(() => {
      this.textContent = this.getValueText();
    });
  }
}

const videoTemplate = /* @__PURE__ */ createTemplate(
  `<video muted playsinline preload="none" style="max-width: unset;"></video>`
);
class MediaSliderVideoElement extends Host(HTMLElement, SliderVideo) {
  constructor() {
    super(...arguments);
    this.v = this.m();
  }
  static {
    this.tagName = "media-slider-video";
  }
  onSetup() {
    this.g = useMediaContext();
    this.$state.video.set(this.v);
  }
  onConnect() {
    const { crossorigin, canLoad } = this.g.$state, { src } = this.$state;
    if (this.v.parentNode !== this) {
      this.prepend(this.v);
    }
    effect(() => {
      setAttribute(this.v, "src", src());
      setAttribute(this.v, "crossorigin", crossorigin());
      setAttribute(this.v, "preload", canLoad() ? "auto" : "none");
    });
  }
  m() {
    return cloneTemplateContent(videoTemplate);
  }
}

class MediaTimeSliderElement extends Host(HTMLElement, TimeSlider) {
  static {
    this.tagName = "media-time-slider";
  }
}

class MediaSliderPreviewElement extends Host(HTMLElement, SliderPreview) {
  static {
    this.tagName = "media-slider-preview";
  }
}

class MediaVolumeSliderElement extends Host(HTMLElement, VolumeSlider) {
  static {
    this.tagName = "media-volume-slider";
  }
}

class MediaSliderChaptersElement extends Host(HTMLElement, SliderChapters) {
  constructor() {
    super(...arguments);
    this.w = null;
  }
  static {
    this.tagName = "media-slider-chapters";
  }
  onConnect() {
    requestScopedAnimationFrame(() => {
      if (!this.connectScope)
        return;
      const template = this.querySelector("template");
      if (template) {
        this.w = template;
        effect(this.x.bind(this));
      }
    });
  }
  x() {
    if (!this.w)
      return;
    const elements = cloneTemplate(this.w, this.cues.length || 1);
    this.setRefs(elements);
  }
}

defineCustomElement(MediaLayoutElement);
defineCustomElement(MediaControlsElement);
defineCustomElement(MediaControlsGroupElement);
defineCustomElement(MediaPosterElement);
defineCustomElement(MediaCaptionButtonElement);
defineCustomElement(MediaFullscreenButtonElement);
defineCustomElement(MediaMuteButtonElement);
defineCustomElement(MediaPIPButtonElement);
defineCustomElement(MediaPlayButtonElement);
defineCustomElement(MediaSeekButtonElement);
defineCustomElement(MediaToggleButtonElement);
defineCustomElement(MediaSliderElement);
defineCustomElement(MediaVolumeSliderElement);
defineCustomElement(MediaTimeSliderElement);
defineCustomElement(MediaSliderChaptersElement);
defineCustomElement(MediaSliderPreviewElement);
defineCustomElement(MediaSliderValueElement);
defineCustomElement(MediaSliderThumbnailElement);
defineCustomElement(MediaSliderVideoElement);
defineCustomElement(MediaMenuElement);
defineCustomElement(MediaMenuButtonElement);
defineCustomElement(MediaMenuPortalElement);
defineCustomElement(MediaMenuItemsElement);
defineCustomElement(MediaMenuItemElement);
defineCustomElement(MediaAudioRadioGroupElement);
defineCustomElement(MediaCaptionsRadioGroupElement);
defineCustomElement(MediaSpeedRadioGroupElement);
defineCustomElement(MediaQualityRadioGroupElement);
defineCustomElement(MediaChaptersRadioGroupElement);
defineCustomElement(MediaRadioGroupElement);
defineCustomElement(MediaRadioElement);
defineCustomElement(MediaTooltipElement);
defineCustomElement(MediaTooltipTriggerElement);
defineCustomElement(MediaTooltipContentElement);
defineCustomElement(MediaGestureElement);
defineCustomElement(MediaThumbnailElement);
defineCustomElement(MediaCaptionsElement);
defineCustomElement(MediaLiveButtonElement);
defineCustomElement(MediaTimeElement);
defineCustomElement(MediaChapterTitleElement);

/* src/components/video-player/video-player.view.svelte generated by Svelte v3.59.1 */

function create_default_slot$7(ctx) {
	let media_player;
	let media_provider;
	let media_provider_style_value;
	let t0;
	let media_audio_layout;
	let t1;
	let media_video_layout;
	let media_player_src_value;
	let mounted;
	let dispose;

	return {
		c() {
			media_player = element("media-player");
			media_provider = element("media-provider");
			t0 = space();
			media_audio_layout = element("media-audio-layout");
			t1 = space();
			media_video_layout = element("media-video-layout");
			set_custom_element_data(media_provider, "style", media_provider_style_value = /*$mirror*/ ctx[7] ? 'transform: scaleX(-1)' : '');
			set_custom_element_data(media_player, "class", "player svelte-uyp4ar");
			set_custom_element_data(media_player, "title", /*title*/ ctx[0]);
			if (!src_url_equal(media_player.src, media_player_src_value = /*$src*/ ctx[5] || '')) set_custom_element_data(media_player, "src", media_player_src_value);
			set_custom_element_data(media_player, "crossorigin", "");
			set_custom_element_data(media_player, "paused", /*$paused*/ ctx[6]);
		},
		m(target, anchor) {
			insert(target, media_player, anchor);
			append(media_player, media_provider);
			append(media_player, t0);
			append(media_player, media_audio_layout);
			append(media_player, t1);
			append(media_player, media_video_layout);
			/*media_player_binding*/ ctx[10](media_player);

			if (!mounted) {
				dispose = [
					listen(media_player, "provider-change", /*onProviderChange*/ ctx[8]),
					listen(media_player, "can-play", onCanPlay)
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*$mirror*/ 128 && media_provider_style_value !== (media_provider_style_value = /*$mirror*/ ctx[7] ? 'transform: scaleX(-1)' : '')) {
				set_custom_element_data(media_provider, "style", media_provider_style_value);
			}

			if (dirty & /*title*/ 1) {
				set_custom_element_data(media_player, "title", /*title*/ ctx[0]);
			}

			if (dirty & /*$src*/ 32 && !src_url_equal(media_player.src, media_player_src_value = /*$src*/ ctx[5] || '')) {
				set_custom_element_data(media_player, "src", media_player_src_value);
			}

			if (dirty & /*$paused*/ 64) {
				set_custom_element_data(media_player, "paused", /*$paused*/ ctx[6]);
			}
		},
		d(detaching) {
			if (detaching) detach(media_player);
			/*media_player_binding*/ ctx[10](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment$c(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$7] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, title, $src, $paused, player, $mirror*/ 4337) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function onCanPlay(event) {
	
} // ...

function instance$c($$self, $$props, $$invalidate) {
	let $src,
		$$unsubscribe_src = noop$2,
		$$subscribe_src = () => ($$unsubscribe_src(), $$unsubscribe_src = subscribe(src, $$value => $$invalidate(5, $src = $$value)), src);

	let $paused,
		$$unsubscribe_paused = noop$2,
		$$subscribe_paused = () => ($$unsubscribe_paused(), $$unsubscribe_paused = subscribe(paused, $$value => $$invalidate(6, $paused = $$value)), paused);

	let $mirror,
		$$unsubscribe_mirror = noop$2,
		$$subscribe_mirror = () => ($$unsubscribe_mirror(), $$unsubscribe_mirror = subscribe(mirror, $$value => $$invalidate(7, $mirror = $$value)), mirror);

	$$self.$$.on_destroy.push(() => $$unsubscribe_src());
	$$self.$$.on_destroy.push(() => $$unsubscribe_paused());
	$$self.$$.on_destroy.push(() => $$unsubscribe_mirror());
	let { title } = $$props;
	let { src } = $$props;
	$$subscribe_src();
	let { paused } = $$props;
	$$subscribe_paused();
	let { progress } = $$props;
	let { mirror } = $$props;
	$$subscribe_mirror();

	// import { textTracks } from './tracks';
	let player;

	let allowProgressControl = true;

	onMount(() => {
		/**
 * You can add these tracks using HTML as well.
 *
 * @example
 * ```html
 * <media-provider>
 *   <track label="..." src="..." kind="..." srclang="..." default />
 *   <track label="..." src="..." kind="..." srclang="..." />
 * </media-provider>
 * ```
 */
		// for (const track of textTracks) player.textTracks.add(track);
		progress.subscribe(p => {
			if (allowProgressControl && player) {
				$$invalidate(4, player.currentTime = p, player);
			}
		});

		// Subscribe to state updates.
		return player.subscribe(state => {
			if (state.paused !== paused.get()) {
				paused.set(state.paused);
			}

			allowProgressControl = false;
			progress.set(state.currentTime);
			allowProgressControl = true;
		});
	});

	function onProviderChange(event) {
		const provider = event.detail;

		// We can configure provider's here.
		if (isHLSProvider(provider)) {
			provider.config = {};
		}
	}

	function media_player_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			player = $$value;
			$$invalidate(4, player);
		});
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('src' in $$props) $$subscribe_src($$invalidate(1, src = $$props.src));
		if ('paused' in $$props) $$subscribe_paused($$invalidate(2, paused = $$props.paused));
		if ('progress' in $$props) $$invalidate(9, progress = $$props.progress);
		if ('mirror' in $$props) $$subscribe_mirror($$invalidate(3, mirror = $$props.mirror));
	};

	return [
		title,
		src,
		paused,
		mirror,
		player,
		$src,
		$paused,
		$mirror,
		onProviderChange,
		progress,
		media_player_binding
	];
}

class Video_player_view extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
			title: 0,
			src: 1,
			paused: 2,
			progress: 9,
			mirror: 3
		});
	}
}

class VideoPlayer extends Component$1 {
    constructor(src = '') {
        super();
        this.title = 'Video Player';
        // $ready = new Stream(false, true);
        this.$paused = new Stream(true, true);
        this.$progress = new Stream(0, true);
        this.$mirror = new Stream(false, true);
        this.$src = new Stream(src, true);
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Video_player_view({
            target: t,
            props: {
                title: this.title,
                src: this.$src,
                // ready: this.$ready,
                paused: this.$paused,
                progress: this.$progress,
                mirror: this.$mirror,
            },
        });
    }
}

function videoPlayer(...args) {
    return new VideoPlayer(...args);
}

/* src/components/webcam/webcam.view.svelte generated by Svelte v3.59.1 */

function create_if_block_1$7(ctx) {
	let spinner;
	let current;
	spinner = new Spinner({});

	return {
		c() {
			create_component(spinner.$$.fragment);
		},
		m(target, anchor) {
			mount_component(spinner, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(spinner.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(spinner.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(spinner, detaching);
		}
	};
}

// (73:6) {#if numWebcams > 1}
function create_if_block$9(ctx) {
	let div;
	let button;
	let current;

	button = new Button$1({
			props: {
				round: true,
				$$slots: { default: [create_default_slot_1$6] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*click_handler*/ ctx[15]);

	return {
		c() {
			div = element("div");
			create_component(button.$$.fragment);
			attr(div, "class", "absolute bottom-2 right-2 text-right");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(button, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 262144) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(button);
		}
	};
}

// (75:10) <Button             round             on:click={() => facingMode.set(facingMode.get() === 'user' ? 'environment' : 'user')}           >
function create_default_slot_1$6(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "stroke-linecap", "round");
			attr(path, "stroke-linejoin", "round");
			attr(path, "d", "M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "fill", "none");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke-width", "1.5");
			attr(svg, "stroke", "currentColor");
			attr(svg, "class", "w-6 h-6");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (43:0) <ViewContainer {title}>
function create_default_slot$6(ctx) {
	let div3;
	let div1;
	let div0;
	let switch_1;
	let updating_checked;
	let t0;
	let div2;
	let t1;
	let video;
	let t2;
	let div2_resize_listener;
	let current;

	function switch_1_checked_binding(value) {
		/*switch_1_checked_binding*/ ctx[13](value);
	}

	let switch_1_props = { text: "activate video" };

	if (/*$active*/ ctx[9] !== void 0) {
		switch_1_props.checked = /*$active*/ ctx[9];
	}

	switch_1 = new Switch({ props: switch_1_props });
	binding_callbacks.push(() => bind(switch_1, 'checked', switch_1_checked_binding));
	let if_block0 = /*$active*/ ctx[9] && !/*$ready*/ ctx[10] && create_if_block_1$7();
	let if_block1 = /*numWebcams*/ ctx[8] > 1 && create_if_block$9(ctx);

	return {
		c() {
			div3 = element("div");
			div1 = element("div");
			div0 = element("div");
			create_component(switch_1.$$.fragment);
			t0 = space();
			div2 = element("div");
			if (if_block0) if_block0.c();
			t1 = space();
			video = element("video");
			t2 = space();
			if (if_block1) if_block1.c();
			attr(video, "id", "webcam-video");
			attr(video, "class", "max-w-none svelte-xql639");

			set_style(video, "width", /*width*/ ctx[1] > /*height*/ ctx[2]
			? `${/*webcamContainerWidth*/ ctx[7]}px`
			: 'auto');

			set_style(video, "height", /*width*/ ctx[1] > /*height*/ ctx[2]
			? 'auto'
			: `${/*webcamContainerWidth*/ ctx[7] * /*height*/ ctx[2] / /*width*/ ctx[1]}px`);

			video.autoplay = true;
			video.muted = true;
			video.playsInline = true;
			toggle_class(video, "mirror", /*$facingMode*/ ctx[11] === 'user');
			attr(div2, "class", "webcam-container svelte-xql639");
			set_style(div2, "flex-direction", /*width*/ ctx[1] > /*height*/ ctx[2] ? 'column' : 'row');
			set_style(div2, "height", /*webcamContainerWidth*/ ctx[7] * /*height*/ ctx[2] / /*width*/ ctx[1] + "px");
			add_render_callback(() => /*div2_elementresize_handler*/ ctx[16].call(div2));
			attr(div3, "class", "webcam svelte-xql639");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div1);
			append(div1, div0);
			mount_component(switch_1, div0, null);
			append(div3, t0);
			append(div3, div2);
			if (if_block0) if_block0.m(div2, null);
			append(div2, t1);
			append(div2, video);
			/*video_binding*/ ctx[14](video);
			append(div2, t2);
			if (if_block1) if_block1.m(div2, null);
			div2_resize_listener = add_iframe_resize_listener(div2, /*div2_elementresize_handler*/ ctx[16].bind(div2));
			current = true;
		},
		p(ctx, dirty) {
			const switch_1_changes = {};

			if (!updating_checked && dirty & /*$active*/ 512) {
				updating_checked = true;
				switch_1_changes.checked = /*$active*/ ctx[9];
				add_flush_callback(() => updating_checked = false);
			}

			switch_1.$set(switch_1_changes);

			if (/*$active*/ ctx[9] && !/*$ready*/ ctx[10]) {
				if (if_block0) {
					if (dirty & /*$active, $ready*/ 1536) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$7();
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div2, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*width, height, webcamContainerWidth*/ 134) {
				set_style(video, "width", /*width*/ ctx[1] > /*height*/ ctx[2]
				? `${/*webcamContainerWidth*/ ctx[7]}px`
				: 'auto');
			}

			if (!current || dirty & /*width, height, webcamContainerWidth*/ 134) {
				set_style(video, "height", /*width*/ ctx[1] > /*height*/ ctx[2]
				? 'auto'
				: `${/*webcamContainerWidth*/ ctx[7] * /*height*/ ctx[2] / /*width*/ ctx[1]}px`);
			}

			if (!current || dirty & /*$facingMode*/ 2048) {
				toggle_class(video, "mirror", /*$facingMode*/ ctx[11] === 'user');
			}

			if (/*numWebcams*/ ctx[8] > 1) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*numWebcams*/ 256) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$9(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div2, null);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!current || dirty & /*width, height*/ 6) {
				set_style(div2, "flex-direction", /*width*/ ctx[1] > /*height*/ ctx[2] ? 'column' : 'row');
			}

			if (!current || dirty & /*webcamContainerWidth, height, width*/ 134) {
				set_style(div2, "height", /*webcamContainerWidth*/ ctx[7] * /*height*/ ctx[2] / /*width*/ ctx[1] + "px");
			}
		},
		i(local) {
			if (current) return;
			transition_in(switch_1.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(switch_1.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_component(switch_1);
			if (if_block0) if_block0.d();
			/*video_binding*/ ctx[14](null);
			if (if_block1) if_block1.d();
			div2_resize_listener();
		}
	};
}

function create_fragment$b(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: /*title*/ ctx[0],
				$$slots: { default: [create_default_slot$6] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*title*/ 1) viewcontainer_changes.title = /*title*/ ctx[0];

			if (dirty & /*$$scope, width, height, webcamContainerWidth, facingMode, numWebcams, videoElement, $facingMode, $active, $ready*/ 266190) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$b($$self, $$props, $$invalidate) {
	let $active,
		$$unsubscribe_active = noop$2,
		$$subscribe_active = () => ($$unsubscribe_active(), $$unsubscribe_active = subscribe(active, $$value => $$invalidate(9, $active = $$value)), active);

	let $ready,
		$$unsubscribe_ready = noop$2,
		$$subscribe_ready = () => ($$unsubscribe_ready(), $$unsubscribe_ready = subscribe(ready, $$value => $$invalidate(10, $ready = $$value)), ready);

	let $facingMode,
		$$unsubscribe_facingMode = noop$2,
		$$subscribe_facingMode = () => ($$unsubscribe_facingMode(), $$unsubscribe_facingMode = subscribe(facingMode, $$value => $$invalidate(11, $facingMode = $$value)), facingMode);

	$$self.$$.on_destroy.push(() => $$unsubscribe_active());
	$$self.$$.on_destroy.push(() => $$unsubscribe_ready());
	$$self.$$.on_destroy.push(() => $$unsubscribe_facingMode());
	let { title } = $$props;
	let { width } = $$props;
	let { height } = $$props;
	let { facingMode } = $$props;
	$$subscribe_facingMode();
	let { active } = $$props;
	$$subscribe_active();
	let { mediaStream } = $$props;
	let { ready } = $$props;
	$$subscribe_ready();
	let videoElement;
	let webcamContainerWidth;
	let numWebcams = 0;
	let unSub = noop$1;

	onMount(async () => {
		await tick$1();
		await tick$1();

		unSub = mediaStream.subscribe(s => {
			var _a;

			if (s) {
				$$invalidate(6, videoElement.srcObject = s, videoElement);
			}

			if ((_a = navigator.mediaDevices) === null || _a === void 0
			? void 0
			: _a.enumerateDevices) {
				navigator.mediaDevices.enumerateDevices().then(devices => devices.filter(device => device.kind === 'videoinput')).then(videoDevices => {
					$$invalidate(8, numWebcams = videoDevices.length);
				}).catch(err => {
					// eslint-disable-next-line no-console
					console.error(`${err.name}: ${err.message}`);
				});
			}
		});
	});

	onDestroy(() => {
		unSub();
	});

	function switch_1_checked_binding(value) {
		$active = value;
		active.set($active);
	}

	function video_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			videoElement = $$value;
			$$invalidate(6, videoElement);
		});
	}

	const click_handler = () => facingMode.set(facingMode.get() === 'user' ? 'environment' : 'user');

	function div2_elementresize_handler() {
		webcamContainerWidth = this.clientWidth;
		$$invalidate(7, webcamContainerWidth);
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('width' in $$props) $$invalidate(1, width = $$props.width);
		if ('height' in $$props) $$invalidate(2, height = $$props.height);
		if ('facingMode' in $$props) $$subscribe_facingMode($$invalidate(3, facingMode = $$props.facingMode));
		if ('active' in $$props) $$subscribe_active($$invalidate(4, active = $$props.active));
		if ('mediaStream' in $$props) $$invalidate(12, mediaStream = $$props.mediaStream);
		if ('ready' in $$props) $$subscribe_ready($$invalidate(5, ready = $$props.ready));
	};

	return [
		title,
		width,
		height,
		facingMode,
		active,
		ready,
		videoElement,
		webcamContainerWidth,
		numWebcams,
		$active,
		$ready,
		$facingMode,
		mediaStream,
		switch_1_checked_binding,
		video_binding,
		click_handler,
		div2_elementresize_handler
	];
}

class Webcam_view extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$b, create_fragment$b, safe_not_equal, {
			title: 0,
			width: 1,
			height: 2,
			facingMode: 3,
			active: 4,
			mediaStream: 12,
			ready: 5
		});
	}
}

var _Webcam_width, _Webcam_height, _Webcam_webcamWidth, _Webcam_webcamHeight, _Webcam_videoElement, _Webcam_thumbnailWidth, _Webcam_stopStreaming, _Webcam_thumbnailCanvas, _Webcam_thumbnailCtx, _Webcam_captureCanvas, _Webcam_captureCtx, _Webcam_audio;
function requestInterval(fn, delay) {
    let start = new Date().getTime();
    let stop = false;
    let animationFrame;
    function loop() {
        if (stop) {
            return;
        }
        const current = new Date().getTime();
        if (current - start >= delay) {
            fn();
            start = new Date().getTime();
        }
        animationFrame = window.requestAnimationFrame(loop);
    }
    animationFrame = window.requestAnimationFrame(loop);
    return function clear() {
        window.cancelAnimationFrame(animationFrame);
        stop = true;
    };
}
class Webcam extends Component$1 {
    constructor({ width = 224, height = 224, period = 50, facingMode = 'user', audio = false, } = {}) {
        super();
        this.title = 'webcam';
        this.$active = new Stream(false, true);
        this.$ready = new Stream(false, true);
        this.$mediastream = new Stream(undefined, true);
        this.$images = new Stream(never(), true);
        this.$thumbnails = new Stream(never(), true);
        // Webcam stuff
        _Webcam_width.set(this, void 0);
        _Webcam_height.set(this, void 0);
        _Webcam_webcamWidth.set(this, void 0);
        _Webcam_webcamHeight.set(this, void 0);
        _Webcam_videoElement.set(this, document.createElement('video'));
        _Webcam_thumbnailWidth.set(this, 60);
        _Webcam_stopStreaming.set(this, noop$1);
        _Webcam_thumbnailCanvas.set(this, void 0);
        _Webcam_thumbnailCtx.set(this, void 0);
        _Webcam_captureCanvas.set(this, void 0);
        _Webcam_captureCtx.set(this, void 0);
        _Webcam_audio.set(this, void 0);
        __classPrivateFieldSet(this, _Webcam_width, width, "f");
        __classPrivateFieldSet(this, _Webcam_height, height, "f");
        this.period = period;
        this.$facingMode = new Stream(facingMode, true);
        __classPrivateFieldSet(this, _Webcam_audio, audio, "f");
        this.setupCapture();
        __classPrivateFieldGet(this, _Webcam_videoElement, "f").autoplay = true;
        __classPrivateFieldGet(this, _Webcam_videoElement, "f").muted = true;
        __classPrivateFieldGet(this, _Webcam_videoElement, "f").playsInline = true;
        const reload = (v) => {
            __classPrivateFieldGet(this, _Webcam_stopStreaming, "f").call(this);
            if (v) {
                this.loadCameras();
                __classPrivateFieldSet(this, _Webcam_stopStreaming, requestInterval(this.process, this.period), "f");
            }
            else {
                this.stopCamera();
            }
        };
        this.$active.subscribe(reload);
        this.$facingMode.subscribe(() => this.$active.get() && reload(true));
        this.start();
    }
    getWidth() {
        return __classPrivateFieldGet(this, _Webcam_width, "f");
    }
    mount(target) {
        const t = target || document.querySelector(`#${this.id}`);
        if (!t)
            return;
        this.destroy();
        this.$$.app = new Webcam_view({
            target: t,
            props: {
                title: this.title,
                width: __classPrivateFieldGet(this, _Webcam_width, "f"),
                height: __classPrivateFieldGet(this, _Webcam_height, "f"),
                facingMode: this.$facingMode,
                active: this.$active,
                mediaStream: this.$mediastream,
                ready: this.$ready,
            },
        });
    }
    stop() {
        super.stop();
        __classPrivateFieldGet(this, _Webcam_stopStreaming, "f").call(this);
        if (this.$mediastream.get()) {
            for (const track of this.$mediastream.get().getTracks()) {
                track.stop();
            }
        }
    }
    setupCapture() {
        __classPrivateFieldSet(this, _Webcam_thumbnailCanvas, document.createElement('canvas'), "f");
        __classPrivateFieldGet(this, _Webcam_thumbnailCanvas, "f").width = __classPrivateFieldGet(this, _Webcam_thumbnailWidth, "f");
        __classPrivateFieldGet(this, _Webcam_thumbnailCanvas, "f").height = (__classPrivateFieldGet(this, _Webcam_thumbnailWidth, "f") * __classPrivateFieldGet(this, _Webcam_height, "f")) / __classPrivateFieldGet(this, _Webcam_width, "f");
        __classPrivateFieldSet(this, _Webcam_thumbnailCtx, __classPrivateFieldGet(this, _Webcam_thumbnailCanvas, "f").getContext('2d'), "f");
        __classPrivateFieldSet(this, _Webcam_captureCanvas, document.createElement('canvas'), "f");
        __classPrivateFieldGet(this, _Webcam_captureCanvas, "f").width = __classPrivateFieldGet(this, _Webcam_width, "f");
        __classPrivateFieldGet(this, _Webcam_captureCanvas, "f").height = __classPrivateFieldGet(this, _Webcam_height, "f");
        __classPrivateFieldSet(this, _Webcam_captureCtx, __classPrivateFieldGet(this, _Webcam_captureCanvas, "f").getContext('2d'), "f");
    }
    async loadCameras() {
        try {
            const mediaStream = await navigator.mediaDevices.getUserMedia({
                video: { facingMode: { ideal: this.$facingMode.get() } },
                audio: __classPrivateFieldGet(this, _Webcam_audio, "f"),
            });
            __classPrivateFieldSet(this, _Webcam_webcamWidth, mediaStream.getVideoTracks()[0].getSettings().width, "f");
            __classPrivateFieldSet(this, _Webcam_webcamHeight, mediaStream.getVideoTracks()[0].getSettings().height, "f");
            this.loadSrcStream(mediaStream);
        }
        catch (error) {
            throwError(new Error('Webcam not supported'));
        }
    }
    loadSrcStream(s) {
        this.$mediastream.set(s);
        __classPrivateFieldGet(this, _Webcam_videoElement, "f").srcObject = s;
        __classPrivateFieldGet(this, _Webcam_videoElement, "f").play();
        __classPrivateFieldGet(this, _Webcam_videoElement, "f").onloadedmetadata = () => {
            __classPrivateFieldSet(this, _Webcam_webcamWidth, __classPrivateFieldGet(this, _Webcam_videoElement, "f").videoWidth, "f");
            __classPrivateFieldSet(this, _Webcam_webcamHeight, __classPrivateFieldGet(this, _Webcam_videoElement, "f").videoHeight, "f");
            this.$ready.set(true);
        };
    }
    stopCamera() {
        if (this.$mediastream.get()) {
            const tracks = this.$mediastream.get().getTracks();
            for (const track of tracks) {
                track.stop();
                __classPrivateFieldGet(this, _Webcam_videoElement, "f").srcObject = null;
            }
            this.$ready.set(false);
        }
    }
    process() {
        if (!this.$ready.get())
            return;
        this.$thumbnails.set(this.captureThumbnail());
        this.$images.set(this.captureImage());
    }
    captureThumbnail() {
        if (!this.$ready.get())
            return null;
        const hRatio = __classPrivateFieldGet(this, _Webcam_height, "f") / __classPrivateFieldGet(this, _Webcam_webcamHeight, "f");
        const wRatio = __classPrivateFieldGet(this, _Webcam_width, "f") / __classPrivateFieldGet(this, _Webcam_webcamWidth, "f");
        if (hRatio > wRatio) {
            const w = (__classPrivateFieldGet(this, _Webcam_thumbnailCanvas, "f").height * __classPrivateFieldGet(this, _Webcam_webcamWidth, "f")) / __classPrivateFieldGet(this, _Webcam_webcamHeight, "f");
            __classPrivateFieldGet(this, _Webcam_thumbnailCtx, "f").drawImage(__classPrivateFieldGet(this, _Webcam_videoElement, "f"), __classPrivateFieldGet(this, _Webcam_thumbnailCanvas, "f").width / 2 - w / 2, 0, w, __classPrivateFieldGet(this, _Webcam_thumbnailCanvas, "f").height);
        }
        else {
            const h = (__classPrivateFieldGet(this, _Webcam_thumbnailCanvas, "f").width * __classPrivateFieldGet(this, _Webcam_webcamHeight, "f")) / __classPrivateFieldGet(this, _Webcam_webcamWidth, "f");
            __classPrivateFieldGet(this, _Webcam_thumbnailCtx, "f").drawImage(__classPrivateFieldGet(this, _Webcam_videoElement, "f"), 0, __classPrivateFieldGet(this, _Webcam_thumbnailCanvas, "f").height / 2 - h / 2, __classPrivateFieldGet(this, _Webcam_thumbnailCanvas, "f").width, h);
        }
        return __classPrivateFieldGet(this, _Webcam_thumbnailCanvas, "f").toDataURL('image/jpeg');
    }
    captureImage() {
        if (!this.$ready.get())
            return null;
        const hRatio = __classPrivateFieldGet(this, _Webcam_height, "f") / __classPrivateFieldGet(this, _Webcam_webcamHeight, "f");
        const wRatio = __classPrivateFieldGet(this, _Webcam_width, "f") / __classPrivateFieldGet(this, _Webcam_webcamWidth, "f");
        if (hRatio > wRatio) {
            const w = (__classPrivateFieldGet(this, _Webcam_height, "f") * __classPrivateFieldGet(this, _Webcam_webcamWidth, "f")) / __classPrivateFieldGet(this, _Webcam_webcamHeight, "f");
            __classPrivateFieldGet(this, _Webcam_captureCtx, "f").drawImage(__classPrivateFieldGet(this, _Webcam_videoElement, "f"), __classPrivateFieldGet(this, _Webcam_width, "f") / 2 - w / 2, 0, w, __classPrivateFieldGet(this, _Webcam_height, "f"));
        }
        else {
            const h = (__classPrivateFieldGet(this, _Webcam_width, "f") * __classPrivateFieldGet(this, _Webcam_webcamHeight, "f")) / __classPrivateFieldGet(this, _Webcam_webcamWidth, "f");
            __classPrivateFieldGet(this, _Webcam_captureCtx, "f").drawImage(__classPrivateFieldGet(this, _Webcam_videoElement, "f"), 0, __classPrivateFieldGet(this, _Webcam_height, "f") / 2 - h / 2, __classPrivateFieldGet(this, _Webcam_width, "f"), h);
        }
        return __classPrivateFieldGet(this, _Webcam_captureCtx, "f").getImageData(0, 0, __classPrivateFieldGet(this, _Webcam_width, "f"), __classPrivateFieldGet(this, _Webcam_height, "f"));
    }
}
_Webcam_width = new WeakMap(), _Webcam_height = new WeakMap(), _Webcam_webcamWidth = new WeakMap(), _Webcam_webcamHeight = new WeakMap(), _Webcam_videoElement = new WeakMap(), _Webcam_thumbnailWidth = new WeakMap(), _Webcam_stopStreaming = new WeakMap(), _Webcam_thumbnailCanvas = new WeakMap(), _Webcam_thumbnailCtx = new WeakMap(), _Webcam_captureCanvas = new WeakMap(), _Webcam_captureCtx = new WeakMap(), _Webcam_audio = new WeakMap();

function webcam(...args) {
    return new Webcam(...args);
}

function isTitle$1(x) {
    return typeof x === 'string';
}
function isComponentArray$1(x) {
    return Array.isArray(x);
}
let DashboardPage$1 = class DashboardPage {
    constructor(name, showSidebar = true) {
        this.name = name;
        this.showSidebar = showSidebar;
        this.components = [];
        this.componentsLeft = [];
    }
    use(...components) {
        this.components = this.components.concat(components);
        return this;
    }
    sidebar(...components) {
        this.componentsLeft = this.componentsLeft.concat(components);
        return this;
    }
    mount() {
        for (const m of this.components) {
            if (isComponentArray$1(m)) {
                for (const n of m) {
                    n.mount();
                }
            }
            else if (!isTitle$1(m)) {
                m.mount();
            }
        }
        for (const m of this.componentsLeft) {
            m.mount();
        }
    }
    destroy() {
        for (const m of this.components) {
            if (isComponentArray$1(m)) {
                for (const n of m) {
                    n.destroy();
                }
            }
            else if (!isTitle$1(m)) {
                m.destroy();
            }
        }
        for (const m of this.componentsLeft) {
            m.destroy();
        }
    }
};

function pathToRegexp(path, keys, sensitive, strict) {
    if (path instanceof RegExp)
        return path;
    if (path instanceof Array)
        path = `(${path.join('|')})`;
    path = path
        .concat(strict ? '' : '/?')
        .replace(/\/\(/g, '(?:/')
        .replace(/\+/g, '__plus__')
        .replace(/(\/)?(\.)?:(\w+)(?:(\(.*?\)))?(\?)?/g, (_, slash, format, key, capture, optional) => {
        keys.push({ name: key, optional: !!optional });
        slash = slash || '';
        return `${optional ? '' : slash}(?:${optional ? slash : ''}${format || ''}${capture || (format && '([^/.]+?)') || '([^/]+?)'})${optional || ''}`;
    })
        .replace(/([/.])/g, '\\$1')
        .replace(/__plus__/g, '(.+)')
        .replace(/\*/g, '(.*)');
    return new RegExp(`^${path}$`, sensitive ? '' : 'i');
}
class Route {
    constructor(path, name) {
        this.path = path;
        this.name = name;
        this.keys = [];
        this.fns = [];
        this.params = {};
        this.regex = pathToRegexp(this.path, this.keys, false, false);
    }
    addHandler(fn) {
        this.fns.push(fn);
    }
    removeHandler(fn) {
        this.fns = this.fns.filter((f) => fn === f);
    }
    run(params) {
        for (const fn of this.fns) {
            fn.apply(this, params);
        }
    }
    match(path, params) {
        const m = this.regex.exec(path);
        if (!m)
            return false;
        for (let i = 1, len = m.length; i < len; i++) {
            const key = this.keys[i - 1];
            const val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];
            if (key) {
                this.params[key.name] = val;
            }
            params.push(val);
        }
        return true;
    }
}
function checkRoute(hash, route) {
    const params = [];
    if (route.match(hash, params)) {
        route.run(params);
        return true;
    }
    return false;
}
class Router {
    constructor() {
        this.map = {};
        this.routes = [];
        this.addListener();
    }
    route(path, fn) {
        const s = path.split(' ');
        const name = s.length === 2 ? s[0] : null;
        path = s.length === 2 ? s[1] : s[0];
        if (!Object.keys(this.map).includes(path)) {
            this.map[path] = new Route(path, name);
            this.routes.push(this.map[path]);
        }
        this.map[path].addHandler(fn);
        this.reload();
    }
    addListener() {
        window.addEventListener('hashchange', this.reload.bind(this), false);
    }
    removeListener() {
        window.removeEventListener('hashchange', this.reload.bind(this));
    }
    reload() {
        const hash = window.location.hash.substring(1);
        for (let i = 0; i < this.routes.length; i++) {
            const route = this.routes[i];
            if (checkRoute(hash, route)) {
                return;
            }
        }
    }
    navigate(path, { silent = false } = {}) {
        if (silent) {
            this.removeListener();
        }
        setTimeout(() => {
            window.location.hash = path;
            if (silent) {
                setTimeout(() => {
                    this.addListener();
                }, 1);
            }
        }, 1);
    }
}

/* src/layouts/dashboard/DashboardPage.svelte generated by Svelte v3.59.1 */

function get_each_context$4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

function get_each_context_1$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i].id;
	return child_ctx;
}

function get_each_context_2$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i].id;
	return child_ctx;
}

// (8:0) {#if dashboard}
function create_if_block$8(ctx) {
	let t;
	let div;
	let if_block = /*dashboard*/ ctx[0].showSidebar && create_if_block_3(ctx);
	let each_value = /*dashboard*/ ctx[0].components;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
	}

	return {
		c() {
			if (if_block) if_block.c();
			t = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "right svelte-15dyumc");
			toggle_class(div, "fullw", !/*dashboard*/ ctx[0].showSidebar);
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, t, anchor);
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}
		},
		p(ctx, dirty) {
			if (/*dashboard*/ ctx[0].showSidebar) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*dashboard, Array*/ 1) {
				each_value = /*dashboard*/ ctx[0].components;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$4(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$4(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*dashboard*/ 1) {
				toggle_class(div, "fullw", !/*dashboard*/ ctx[0].showSidebar);
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t);
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (9:2) {#if dashboard.showSidebar}
function create_if_block_3(ctx) {
	let div;
	let each_value_2 = /*dashboard*/ ctx[0].componentsLeft;
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2$1(get_each_context_2$1(ctx, each_value_2, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "left svelte-15dyumc");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}
		},
		p(ctx, dirty) {
			if (dirty & /*dashboard*/ 1) {
				each_value_2 = /*dashboard*/ ctx[0].componentsLeft;
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2$1(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (11:6) {#each dashboard.componentsLeft as { id }}
function create_each_block_2$1(ctx) {
	let div;
	let div_id_value;

	return {
		c() {
			div = element("div");
			attr(div, "id", div_id_value = /*id*/ ctx[4]);
			attr(div, "class", "card");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*dashboard*/ 1 && div_id_value !== (div_id_value = /*id*/ ctx[4])) {
				attr(div, "id", div_id_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (26:6) {:else}
function create_else_block$5(ctx) {
	let div;
	let div_id_value;

	return {
		c() {
			div = element("div");
			attr(div, "id", div_id_value = /*m*/ ctx[1].id);
			attr(div, "class", "card");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*dashboard*/ 1 && div_id_value !== (div_id_value = /*m*/ ctx[1].id)) {
				attr(div, "id", div_id_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (24:38) 
function create_if_block_2$3(ctx) {
	let h2;
	let t_value = /*m*/ ctx[1] + "";
	let t;

	return {
		c() {
			h2 = element("h2");
			t = text$1(t_value);
			attr(h2, "class", "svelte-15dyumc");
		},
		m(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t);
		},
		p(ctx, dirty) {
			if (dirty & /*dashboard*/ 1 && t_value !== (t_value = /*m*/ ctx[1] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (18:6) {#if Array.isArray(m)}
function create_if_block_1$6(ctx) {
	let div;
	let t;
	let each_value_1 = /*m*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			attr(div, "class", "flex flex-row flex-wrap items-stretch");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*dashboard*/ 1) {
				each_value_1 = /*m*/ ctx[1];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (20:10) {#each m as { id }}
function create_each_block_1$2(ctx) {
	let div;
	let div_id_value;

	return {
		c() {
			div = element("div");
			attr(div, "id", div_id_value = /*id*/ ctx[4]);
			attr(div, "class", "card flex-none xl:flex-1 w-full xl:w-auto");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*dashboard*/ 1 && div_id_value !== (div_id_value = /*id*/ ctx[4])) {
				attr(div, "id", div_id_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (17:4) {#each dashboard.components as m}
function create_each_block$4(ctx) {
	let show_if;
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (dirty & /*dashboard*/ 1) show_if = null;
		if (show_if == null) show_if = !!Array.isArray(/*m*/ ctx[1]);
		if (show_if) return create_if_block_1$6;
		if (typeof /*m*/ ctx[1] === 'string') return create_if_block_2$3;
		return create_else_block$5;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$a(ctx) {
	let if_block_anchor;
	let if_block = /*dashboard*/ ctx[0] && create_if_block$8(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (/*dashboard*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$8(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$a($$self, $$props, $$invalidate) {
	let { dashboard } = $$props;

	afterUpdate(() => {
		dashboard.mount();
	});

	$$self.$$set = $$props => {
		if ('dashboard' in $$props) $$invalidate(0, dashboard = $$props.dashboard);
	};

	return [dashboard];
}

class DashboardPage extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$a, create_fragment$a, safe_not_equal, { dashboard: 0 });
	}
}

/* src/layouts/dashboard/DatasetSettings.svelte generated by Svelte v3.59.1 */

function create_else_block$4(ctx) {
	let t;

	return {
		c() {
			t = text$1("This dataset is empty");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (31:2) {#if $count}
function create_if_block_1$5(ctx) {
	let t0;
	let t1;
	let t2;
	let t3_value = (/*$count*/ ctx[3] ? 's' : '') + "";
	let t3;
	let t4;

	return {
		c() {
			t0 = text$1("This dataset contains ");
			t1 = text$1(/*$count*/ ctx[3]);
			t2 = text$1(" instance");
			t3 = text$1(t3_value);
			t4 = text$1(".");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			insert(target, t2, anchor);
			insert(target, t3, anchor);
			insert(target, t4, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$count*/ 8) set_data(t1, /*$count*/ ctx[3]);
			if (dirty & /*$count*/ 8 && t3_value !== (t3_value = (/*$count*/ ctx[3] ? 's' : '') + "")) set_data(t3, t3_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (detaching) detach(t2);
			if (detaching) detach(t3);
			if (detaching) detach(t4);
		}
	};
}

// (38:2) {#if $count}
function create_if_block$7(ctx) {
	let button;
	let t;
	let span;
	let current;

	button = new Button$1({
			props: {
				$$slots: { default: [create_default_slot_2$2] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*downloadDataset*/ ctx[4]);

	return {
		c() {
			create_component(button.$$.fragment);
			t = space();
			span = element("span");
			attr(span, "class", "w-1");
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			insert(target, t, anchor);
			insert(target, span, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 256) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
			if (detaching) detach(t);
			if (detaching) detach(span);
		}
	};
}

// (39:4) <Button on:click={downloadDataset}>
function create_default_slot_2$2(ctx) {
	let t;

	return {
		c() {
			t = text$1("Download Dataset");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (42:2) <Button on:click={uploadDataset}>
function create_default_slot_1$5(ctx) {
	let t;

	return {
		c() {
			t = text$1("Upload Dataset");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (45:2) <Button type="danger" on:click={clearDataset}>
function create_default_slot$5(ctx) {
	let t;

	return {
		c() {
			t = text$1("Clear Dataset");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$9(ctx) {
	let span0;
	let t0_value = /*dataset*/ ctx[0].title + "";
	let t0;
	let t1;
	let p;
	let t2;
	let div;
	let t3;
	let button0;
	let t4;
	let span1;
	let t5;
	let input;
	let t6;
	let button1;
	let current;

	function select_block_type(ctx, dirty) {
		if (/*$count*/ ctx[3]) return create_if_block_1$5;
		return create_else_block$4;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*$count*/ ctx[3] && create_if_block$7(ctx);

	button0 = new Button$1({
			props: {
				$$slots: { default: [create_default_slot_1$5] },
				$$scope: { ctx }
			}
		});

	button0.$on("click", /*uploadDataset*/ ctx[5]);

	button1 = new Button$1({
			props: {
				type: "danger",
				$$slots: { default: [create_default_slot$5] },
				$$scope: { ctx }
			}
		});

	button1.$on("click", /*clearDataset*/ ctx[6]);

	return {
		c() {
			span0 = element("span");
			t0 = text$1(t0_value);
			t1 = space();
			p = element("p");
			if_block0.c();
			t2 = space();
			div = element("div");
			if (if_block1) if_block1.c();
			t3 = space();
			create_component(button0.$$.fragment);
			t4 = space();
			span1 = element("span");
			t5 = space();
			input = element("input");
			t6 = space();
			create_component(button1.$$.fragment);
			attr(span0, "class", "card-title");
			attr(p, "class", "pb-2");
			attr(span1, "class", "w-1");
			attr(input, "type", "file");
			input.multiple = true;
			attr(input, "class", "hidden");
			attr(div, "class", "flex");
		},
		m(target, anchor) {
			insert(target, span0, anchor);
			append(span0, t0);
			insert(target, t1, anchor);
			insert(target, p, anchor);
			if_block0.m(p, null);
			insert(target, t2, anchor);
			insert(target, div, anchor);
			if (if_block1) if_block1.m(div, null);
			append(div, t3);
			mount_component(button0, div, null);
			append(div, t4);
			append(div, span1);
			append(div, t5);
			append(div, input);
			/*input_binding*/ ctx[7](input);
			append(div, t6);
			mount_component(button1, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*dataset*/ 1) && t0_value !== (t0_value = /*dataset*/ ctx[0].title + "")) set_data(t0, t0_value);

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(p, null);
				}
			}

			if (/*$count*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*$count*/ 8) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$7(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t3);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			const button0_changes = {};

			if (dirty & /*$$scope*/ 256) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 256) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block1);
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span0);
			if (detaching) detach(t1);
			if (detaching) detach(p);
			if_block0.d();
			if (detaching) detach(t2);
			if (detaching) detach(div);
			if (if_block1) if_block1.d();
			destroy_component(button0);
			/*input_binding*/ ctx[7](null);
			destroy_component(button1);
		}
	};
}

function instance$9($$self, $$props, $$invalidate) {
	let count;

	let $count,
		$$unsubscribe_count = noop$2,
		$$subscribe_count = () => ($$unsubscribe_count(), $$unsubscribe_count = subscribe(count, $$value => $$invalidate(3, $count = $$value)), count);

	$$self.$$.on_destroy.push(() => $$unsubscribe_count());
	let { dataset } = $$props;
	let uploadInput;

	function downloadDataset() {
		dataset.download();
	}

	function uploadDataset() {
		uploadInput === null || uploadInput === void 0
		? void 0
		: uploadInput.click();
	}

	function clearDataset() {
		dataset.clear();
	}

	onMount(async () => {
		await tick$1();
		await tick$1();

		uploadInput.addEventListener('change', e => {
			const fl = e.target.files;
			const files = [];

			for (let i = 0; i < fl.length; i++) {
				files.push(fl[i]);
			}

			dataset.upload(files);
		});
	});

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			uploadInput = $$value;
			$$invalidate(1, uploadInput);
		});
	}

	$$self.$$set = $$props => {
		if ('dataset' in $$props) $$invalidate(0, dataset = $$props.dataset);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*dataset*/ 1) {
			$$subscribe_count($$invalidate(2, count = dataset.$count));
		}
	};

	return [
		dataset,
		uploadInput,
		count,
		$count,
		downloadDataset,
		uploadDataset,
		clearDataset,
		input_binding
	];
}

class DatasetSettings extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$9, create_fragment$9, safe_not_equal, { dataset: 0 });
	}
}

/* src/layouts/dashboard/DataStoreSettings.svelte generated by Svelte v3.59.1 */

function create_if_block_1$4(ctx) {
	let await_block_anchor;
	let promise;
	let current;

	let info = {
		ctx,
		current: null,
		token: null,
		hasCatch: false,
		pending: create_pending_block,
		then: create_then_block,
		catch: create_catch_block,
		value: 4,
		blocks: [,,,]
	};

	handle_promise(promise = /*dataStore*/ ctx[0].connect(), info);

	return {
		c() {
			await_block_anchor = empty();
			info.block.c();
		},
		m(target, anchor) {
			insert(target, await_block_anchor, anchor);
			info.block.m(target, info.anchor = anchor);
			info.mount = () => await_block_anchor.parentNode;
			info.anchor = await_block_anchor;
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			info.ctx = ctx;

			if (dirty & /*dataStore*/ 1 && promise !== (promise = /*dataStore*/ ctx[0].connect()) && handle_promise(promise, info)) ; else {
				update_await_block_branch(info, ctx, dirty);
			}
		},
		i(local) {
			if (current) return;
			transition_in(info.block);
			current = true;
		},
		o(local) {
			for (let i = 0; i < 3; i += 1) {
				const block = info.blocks[i];
				transition_out(block);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(await_block_anchor);
			info.block.d(detaching);
			info.token = null;
			info = null;
		}
	};
}

// (1:0) <script lang="ts">import { ViewContainer }
function create_catch_block(ctx) {
	return {
		c: noop$2,
		m: noop$2,
		p: noop$2,
		i: noop$2,
		o: noop$2,
		d: noop$2
	};
}

// (14:4) {:then user}
function create_then_block(ctx) {
	let p;
	let t0;
	let t1_value = /*user*/ ctx[4].email + "";
	let t1;
	let t2;
	let div;
	let button;
	let current;

	button = new Button$1({
			props: {
				$$slots: { default: [create_default_slot_1$4] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*logout*/ ctx[3]);

	return {
		c() {
			p = element("p");
			t0 = text$1("Hello, ");
			t1 = text$1(t1_value);
			t2 = space();
			div = element("div");
			create_component(button.$$.fragment);
			attr(p, "class", "pb-2");
			attr(div, "class", "flex");
		},
		m(target, anchor) {
			insert(target, p, anchor);
			append(p, t0);
			append(p, t1);
			insert(target, t2, anchor);
			insert(target, div, anchor);
			mount_component(button, div, null);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*dataStore*/ 1) && t1_value !== (t1_value = /*user*/ ctx[4].email + "")) set_data(t1, t1_value);
			const button_changes = {};

			if (dirty & /*$$scope*/ 32) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(p);
			if (detaching) detach(t2);
			if (detaching) detach(div);
			destroy_component(button);
		}
	};
}

// (16:24) <Button on:click={logout}>
function create_default_slot_1$4(ctx) {
	let t;

	return {
		c() {
			t = text$1("Log out");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (12:32)        <Spinner />     {:then user}
function create_pending_block(ctx) {
	let spinner;
	let current;
	spinner = new Spinner({});

	return {
		c() {
			create_component(spinner.$$.fragment);
		},
		m(target, anchor) {
			mount_component(spinner, target, anchor);
			current = true;
		},
		p: noop$2,
		i(local) {
			if (current) return;
			transition_in(spinner.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(spinner.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(spinner, detaching);
		}
	};
}

// (21:2) {#if $services}
function create_if_block$6(ctx) {
	let div;
	let t0;
	let t1_value = /*$services*/ ctx[2].join(', ') + "";
	let t1;

	return {
		c() {
			div = element("div");
			t0 = text$1("This data store contains the following services: ");
			t1 = text$1(t1_value);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*$services*/ 4 && t1_value !== (t1_value = /*$services*/ ctx[2].join(', ') + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (10:0) <ViewContainer title="data store ({dataStore.location})">
function create_default_slot$4(ctx) {
	let t;
	let if_block1_anchor;
	let current;
	let if_block0 = /*dataStore*/ ctx[0].requiresAuth && create_if_block_1$4(ctx);
	let if_block1 = /*$services*/ ctx[2] && create_if_block$6(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*dataStore*/ ctx[0].requiresAuth) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*dataStore*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1$4(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t.parentNode, t);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*$services*/ ctx[2]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block$6(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
		}
	};
}

function create_fragment$8(ctx) {
	let viewcontainer;
	let current;

	viewcontainer = new ViewContainer({
			props: {
				title: "data store (" + /*dataStore*/ ctx[0].location + ")",
				$$slots: { default: [create_default_slot$4] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(viewcontainer.$$.fragment);
		},
		m(target, anchor) {
			mount_component(viewcontainer, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const viewcontainer_changes = {};
			if (dirty & /*dataStore*/ 1) viewcontainer_changes.title = "data store (" + /*dataStore*/ ctx[0].location + ")";

			if (dirty & /*$$scope, $services, dataStore*/ 37) {
				viewcontainer_changes.$$scope = { dirty, ctx };
			}

			viewcontainer.$set(viewcontainer_changes);
		},
		i(local) {
			if (current) return;
			transition_in(viewcontainer.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(viewcontainer.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(viewcontainer, detaching);
		}
	};
}

function instance$8($$self, $$props, $$invalidate) {
	let services;

	let $services,
		$$unsubscribe_services = noop$2,
		$$subscribe_services = () => ($$unsubscribe_services(), $$unsubscribe_services = subscribe(services, $$value => $$invalidate(2, $services = $$value)), services);

	$$self.$$.on_destroy.push(() => $$unsubscribe_services());
	let { dataStore } = $$props;

	function logout() {
		dataStore.logout();
	}

	$$self.$$set = $$props => {
		if ('dataStore' in $$props) $$invalidate(0, dataStore = $$props.dataStore);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*dataStore*/ 1) {
			$$subscribe_services($$invalidate(1, services = dataStore.$services));
		}
	};

	return [dataStore, services, $services, logout];
}

class DataStoreSettings extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$8, create_fragment$8, safe_not_equal, { dataStore: 0 });
	}
}

/* src/layouts/dashboard/ModelSettings.svelte generated by Svelte v3.59.1 */

function create_default_slot_1$3(ctx) {
	let t;

	return {
		c() {
			t = text$1("Download Model");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (47:2) <Button on:click={uploadModel}>
function create_default_slot$3(ctx) {
	let t;

	return {
		c() {
			t = text$1("Upload Model");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$7(ctx) {
	let span0;
	let t0_value = /*model*/ ctx[0].title + "";
	let t0;
	let t1;
	let div;
	let button0;
	let t2;
	let span1;
	let t3;
	let input;
	let t4;
	let button1;
	let current;

	button0 = new Button$1({
			props: {
				$$slots: { default: [create_default_slot_1$3] },
				$$scope: { ctx }
			}
		});

	button0.$on("click", /*downloadModel*/ ctx[2]);

	button1 = new Button$1({
			props: {
				$$slots: { default: [create_default_slot$3] },
				$$scope: { ctx }
			}
		});

	button1.$on("click", /*uploadModel*/ ctx[3]);

	return {
		c() {
			span0 = element("span");
			t0 = text$1(t0_value);
			t1 = space();
			div = element("div");
			create_component(button0.$$.fragment);
			t2 = space();
			span1 = element("span");
			t3 = space();
			input = element("input");
			t4 = space();
			create_component(button1.$$.fragment);
			attr(span0, "class", "card-title");
			attr(span1, "class", "w-1");
			attr(input, "type", "file");
			input.multiple = true;
			attr(input, "class", "hidden");
			attr(div, "class", "flex");
		},
		m(target, anchor) {
			insert(target, span0, anchor);
			append(span0, t0);
			insert(target, t1, anchor);
			insert(target, div, anchor);
			mount_component(button0, div, null);
			append(div, t2);
			append(div, span1);
			append(div, t3);
			append(div, input);
			/*input_binding*/ ctx[4](input);
			append(div, t4);
			mount_component(button1, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*model*/ 1) && t0_value !== (t0_value = /*model*/ ctx[0].title + "")) set_data(t0, t0_value);
			const button0_changes = {};

			if (dirty & /*$$scope*/ 32) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 32) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span0);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			destroy_component(button0);
			/*input_binding*/ ctx[4](null);
			destroy_component(button1);
		}
	};
}

function isSaveable(m) {
	return 'download' in m;
}

function instance$7($$self, $$props, $$invalidate) {
	let { model } = $$props;
	let uploadInput;

	function downloadModel() {
		if (isSaveable(model)) {
			model.download();
		} else {
			throwError(new Error('This model cannot be saved'));
		}
	}

	function uploadModel() {
		if (isSaveable(model)) {
			uploadInput === null || uploadInput === void 0
			? void 0
			: uploadInput.click();
		} else {
			throwError(new Error('This model cannot be uploaded'));
		}
	}

	onMount(async () => {
		await tick$1();
		await tick$1();

		uploadInput.addEventListener('change', e => {
			const fl = e.target.files;
			const files = [];

			for (let i = 0; i < fl.length; i++) {
				files.push(fl[i]);
			}

			if (isSaveable(model)) {
				model.upload(...files);
			}
		});
	});

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			uploadInput = $$value;
			$$invalidate(1, uploadInput);
		});
	}

	$$self.$$set = $$props => {
		if ('model' in $$props) $$invalidate(0, model = $$props.model);
	};

	return [model, uploadInput, downloadModel, uploadModel, input_binding];
}

class ModelSettings extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$7, create_fragment$7, safe_not_equal, { model: 0 });
	}
}

/* src/layouts/dashboard/PredictionsSettings.svelte generated by Svelte v3.59.1 */

function create_else_block$3(ctx) {
	let t;

	return {
		c() {
			t = text$1("This batch prediction component is empty");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (31:2) {#if $count}
function create_if_block_1$3(ctx) {
	let t0;
	let t1;
	let t2;
	let t3_value = (/*$count*/ ctx[3] ? 's' : '') + "";
	let t3;

	return {
		c() {
			t0 = text$1("This batch prediction component contains\n    ");
			t1 = text$1(/*$count*/ ctx[3]);
			t2 = text$1("\n    prediction");
			t3 = text$1(t3_value);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
			insert(target, t2, anchor);
			insert(target, t3, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$count*/ 8) set_data(t1, /*$count*/ ctx[3]);
			if (dirty & /*$count*/ 8 && t3_value !== (t3_value = (/*$count*/ ctx[3] ? 's' : '') + "")) set_data(t3, t3_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
			if (detaching) detach(t2);
			if (detaching) detach(t3);
		}
	};
}

// (38:2) {#if $count}
function create_if_block$5(ctx) {
	let button;
	let t;
	let span;
	let current;

	button = new Button$1({
			props: {
				$$slots: { default: [create_default_slot_2$1] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*downloadPredictions*/ ctx[4]);

	return {
		c() {
			create_component(button.$$.fragment);
			t = space();
			span = element("span");
			attr(span, "class", "w-1");
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			insert(target, t, anchor);
			insert(target, span, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 256) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
			if (detaching) detach(t);
			if (detaching) detach(span);
		}
	};
}

// (39:4) <Button on:click={downloadPredictions}>
function create_default_slot_2$1(ctx) {
	let t;

	return {
		c() {
			t = text$1("Download Predictions");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (42:2) <Button on:click={uploadPredictions}>
function create_default_slot_1$2(ctx) {
	let t;

	return {
		c() {
			t = text$1("Upload Predictions");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (45:2) <Button type="danger" on:click={clearPredictions}>
function create_default_slot$2(ctx) {
	let t;

	return {
		c() {
			t = text$1("Clear Predictions");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment$6(ctx) {
	let span0;
	let t0_value = /*prediction*/ ctx[0].title + "";
	let t0;
	let t1;
	let p;
	let t2;
	let div;
	let t3;
	let button0;
	let t4;
	let span1;
	let t5;
	let input;
	let t6;
	let button1;
	let current;

	function select_block_type(ctx, dirty) {
		if (/*$count*/ ctx[3]) return create_if_block_1$3;
		return create_else_block$3;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*$count*/ ctx[3] && create_if_block$5(ctx);

	button0 = new Button$1({
			props: {
				$$slots: { default: [create_default_slot_1$2] },
				$$scope: { ctx }
			}
		});

	button0.$on("click", /*uploadPredictions*/ ctx[5]);

	button1 = new Button$1({
			props: {
				type: "danger",
				$$slots: { default: [create_default_slot$2] },
				$$scope: { ctx }
			}
		});

	button1.$on("click", /*clearPredictions*/ ctx[6]);

	return {
		c() {
			span0 = element("span");
			t0 = text$1(t0_value);
			t1 = space();
			p = element("p");
			if_block0.c();
			t2 = space();
			div = element("div");
			if (if_block1) if_block1.c();
			t3 = space();
			create_component(button0.$$.fragment);
			t4 = space();
			span1 = element("span");
			t5 = space();
			input = element("input");
			t6 = space();
			create_component(button1.$$.fragment);
			attr(span0, "class", "card-title");
			attr(p, "class", "pb-2");
			attr(span1, "class", "w-1");
			attr(input, "type", "file");
			input.multiple = true;
			attr(input, "class", "hidden");
			attr(div, "class", "flex");
		},
		m(target, anchor) {
			insert(target, span0, anchor);
			append(span0, t0);
			insert(target, t1, anchor);
			insert(target, p, anchor);
			if_block0.m(p, null);
			insert(target, t2, anchor);
			insert(target, div, anchor);
			if (if_block1) if_block1.m(div, null);
			append(div, t3);
			mount_component(button0, div, null);
			append(div, t4);
			append(div, span1);
			append(div, t5);
			append(div, input);
			/*input_binding*/ ctx[7](input);
			append(div, t6);
			mount_component(button1, div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*prediction*/ 1) && t0_value !== (t0_value = /*prediction*/ ctx[0].title + "")) set_data(t0, t0_value);

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(p, null);
				}
			}

			if (/*$count*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*$count*/ 8) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block$5(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div, t3);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			const button0_changes = {};

			if (dirty & /*$$scope*/ 256) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*$$scope*/ 256) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(if_block1);
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span0);
			if (detaching) detach(t1);
			if (detaching) detach(p);
			if_block0.d();
			if (detaching) detach(t2);
			if (detaching) detach(div);
			if (if_block1) if_block1.d();
			destroy_component(button0);
			/*input_binding*/ ctx[7](null);
			destroy_component(button1);
		}
	};
}

function instance$6($$self, $$props, $$invalidate) {
	let count;

	let $count,
		$$unsubscribe_count = noop$2,
		$$subscribe_count = () => ($$unsubscribe_count(), $$unsubscribe_count = subscribe(count, $$value => $$invalidate(3, $count = $$value)), count);

	$$self.$$.on_destroy.push(() => $$unsubscribe_count());
	let { prediction } = $$props;
	let uploadInput;

	function downloadPredictions() {
		prediction.download();
	}

	function uploadPredictions() {
		uploadInput === null || uploadInput === void 0
		? void 0
		: uploadInput.click();
	}

	function clearPredictions() {
		prediction.clear();
	}

	onMount(async () => {
		await tick$1();
		await tick$1();

		uploadInput.addEventListener('change', e => {
			const fl = e.target.files;
			const files = [];

			for (let i = 0; i < fl.length; i++) {
				files.push(fl[i]);
			}

			prediction.upload(files);
		});
	});

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			uploadInput = $$value;
			$$invalidate(1, uploadInput);
		});
	}

	$$self.$$set = $$props => {
		if ('prediction' in $$props) $$invalidate(0, prediction = $$props.prediction);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*prediction*/ 1) {
			$$subscribe_count($$invalidate(2, count = prediction.$count));
		}
	};

	return [
		prediction,
		uploadInput,
		count,
		$count,
		downloadPredictions,
		uploadPredictions,
		clearPredictions,
		input_binding
	];
}

class PredictionsSettings extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$6, create_fragment$6, safe_not_equal, { prediction: 0 });
	}
}

/* src/layouts/dashboard/DashboardSettings.svelte generated by Svelte v3.59.1 */

function get_each_context$3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i].id;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	return child_ctx;
}

function get_each_context_5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[16] = list[i];
	return child_ctx;
}

// (12:0) {#if settings}
function create_if_block$4(ctx) {
	let div0;
	let h20;
	let t1;
	let t2;
	let h21;
	let t4;
	let t5;
	let h22;
	let t7;
	let t8;
	let h23;
	let t10;
	let t11;
	let div1;
	let current;
	let each_value_5 = /*settings*/ ctx[0].xDataStores;
	let each_blocks_4 = [];

	for (let i = 0; i < each_value_5.length; i += 1) {
		each_blocks_4[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
	}

	const out = i => transition_out(each_blocks_4[i], 1, 1, () => {
		each_blocks_4[i] = null;
	});

	let each_value_4 = /*settings*/ ctx[0].xModels;
	let each_blocks_3 = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks_3[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	const out_1 = i => transition_out(each_blocks_3[i], 1, 1, () => {
		each_blocks_3[i] = null;
	});

	let each_value_3 = /*settings*/ ctx[0].xDatasets;
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks_2[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const out_2 = i => transition_out(each_blocks_2[i], 1, 1, () => {
		each_blocks_2[i] = null;
	});

	let each_value_2 = /*settings*/ ctx[0].xPredictions;
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_1[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const out_3 = i => transition_out(each_blocks_1[i], 1, 1, () => {
		each_blocks_1[i] = null;
	});

	let each_value = /*settings*/ ctx[0].components;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
	}

	return {
		c() {
			div0 = element("div");
			h20 = element("h2");
			h20.textContent = "Data Stores";
			t1 = space();

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				each_blocks_4[i].c();
			}

			t2 = space();
			h21 = element("h2");
			h21.textContent = "Models";
			t4 = space();

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].c();
			}

			t5 = space();
			h22 = element("h2");
			h22.textContent = "Datasets";
			t7 = space();

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t8 = space();
			h23 = element("h2");
			h23.textContent = "Predictions";
			t10 = space();

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t11 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div0, "class", "left svelte-inuorr");
			attr(div1, "class", "right svelte-inuorr");
		},
		m(target, anchor) {
			insert(target, div0, anchor);
			append(div0, h20);
			append(div0, t1);

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				if (each_blocks_4[i]) {
					each_blocks_4[i].m(div0, null);
				}
			}

			append(div0, t2);
			append(div0, h21);
			append(div0, t4);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				if (each_blocks_3[i]) {
					each_blocks_3[i].m(div0, null);
				}
			}

			append(div0, t5);
			append(div0, h22);
			append(div0, t7);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				if (each_blocks_2[i]) {
					each_blocks_2[i].m(div0, null);
				}
			}

			append(div0, t8);
			append(div0, h23);
			append(div0, t10);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				if (each_blocks_1[i]) {
					each_blocks_1[i].m(div0, null);
				}
			}

			insert(target, t11, anchor);
			insert(target, div1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div1, null);
				}
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*settings*/ 1) {
				each_value_5 = /*settings*/ ctx[0].xDataStores;
				let i;

				for (i = 0; i < each_value_5.length; i += 1) {
					const child_ctx = get_each_context_5(ctx, each_value_5, i);

					if (each_blocks_4[i]) {
						each_blocks_4[i].p(child_ctx, dirty);
						transition_in(each_blocks_4[i], 1);
					} else {
						each_blocks_4[i] = create_each_block_5(child_ctx);
						each_blocks_4[i].c();
						transition_in(each_blocks_4[i], 1);
						each_blocks_4[i].m(div0, t2);
					}
				}

				group_outros();

				for (i = each_value_5.length; i < each_blocks_4.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (dirty & /*settings*/ 1) {
				each_value_4 = /*settings*/ ctx[0].xModels;
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks_3[i]) {
						each_blocks_3[i].p(child_ctx, dirty);
						transition_in(each_blocks_3[i], 1);
					} else {
						each_blocks_3[i] = create_each_block_4(child_ctx);
						each_blocks_3[i].c();
						transition_in(each_blocks_3[i], 1);
						each_blocks_3[i].m(div0, t5);
					}
				}

				group_outros();

				for (i = each_value_4.length; i < each_blocks_3.length; i += 1) {
					out_1(i);
				}

				check_outros();
			}

			if (dirty & /*settings*/ 1) {
				each_value_3 = /*settings*/ ctx[0].xDatasets;
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
						transition_in(each_blocks_2[i], 1);
					} else {
						each_blocks_2[i] = create_each_block_3(child_ctx);
						each_blocks_2[i].c();
						transition_in(each_blocks_2[i], 1);
						each_blocks_2[i].m(div0, t8);
					}
				}

				group_outros();

				for (i = each_value_3.length; i < each_blocks_2.length; i += 1) {
					out_2(i);
				}

				check_outros();
			}

			if (dirty & /*settings*/ 1) {
				each_value_2 = /*settings*/ ctx[0].xPredictions;
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
						transition_in(each_blocks_1[i], 1);
					} else {
						each_blocks_1[i] = create_each_block_2(child_ctx);
						each_blocks_1[i].c();
						transition_in(each_blocks_1[i], 1);
						each_blocks_1[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value_2.length; i < each_blocks_1.length; i += 1) {
					out_3(i);
				}

				check_outros();
			}

			if (dirty & /*settings, Array*/ 1) {
				each_value = /*settings*/ ctx[0].components;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$3(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_5.length; i += 1) {
				transition_in(each_blocks_4[i]);
			}

			for (let i = 0; i < each_value_4.length; i += 1) {
				transition_in(each_blocks_3[i]);
			}

			for (let i = 0; i < each_value_3.length; i += 1) {
				transition_in(each_blocks_2[i]);
			}

			for (let i = 0; i < each_value_2.length; i += 1) {
				transition_in(each_blocks_1[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks_4 = each_blocks_4.filter(Boolean);

			for (let i = 0; i < each_blocks_4.length; i += 1) {
				transition_out(each_blocks_4[i]);
			}

			each_blocks_3 = each_blocks_3.filter(Boolean);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				transition_out(each_blocks_3[i]);
			}

			each_blocks_2 = each_blocks_2.filter(Boolean);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				transition_out(each_blocks_2[i]);
			}

			each_blocks_1 = each_blocks_1.filter(Boolean);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				transition_out(each_blocks_1[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div0);
			destroy_each(each_blocks_4, detaching);
			destroy_each(each_blocks_3, detaching);
			destroy_each(each_blocks_2, detaching);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach(t11);
			if (detaching) detach(div1);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (15:4) {#each settings.xDataStores as dataStore}
function create_each_block_5(ctx) {
	let div;
	let datastoresettings;
	let current;

	datastoresettings = new DataStoreSettings({
			props: { dataStore: /*dataStore*/ ctx[16] }
		});

	return {
		c() {
			div = element("div");
			create_component(datastoresettings.$$.fragment);
			attr(div, "class", "card");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(datastoresettings, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const datastoresettings_changes = {};
			if (dirty & /*settings*/ 1) datastoresettings_changes.dataStore = /*dataStore*/ ctx[16];
			datastoresettings.$set(datastoresettings_changes);
		},
		i(local) {
			if (current) return;
			transition_in(datastoresettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(datastoresettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(datastoresettings);
		}
	};
}

// (21:4) {#each settings.xModels as model}
function create_each_block_4(ctx) {
	let div;
	let modelsettings;
	let current;
	modelsettings = new ModelSettings({ props: { model: /*model*/ ctx[13] } });

	return {
		c() {
			div = element("div");
			create_component(modelsettings.$$.fragment);
			attr(div, "class", "card");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(modelsettings, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const modelsettings_changes = {};
			if (dirty & /*settings*/ 1) modelsettings_changes.model = /*model*/ ctx[13];
			modelsettings.$set(modelsettings_changes);
		},
		i(local) {
			if (current) return;
			transition_in(modelsettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(modelsettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(modelsettings);
		}
	};
}

// (27:4) {#each settings.xDatasets as dataset}
function create_each_block_3(ctx) {
	let div;
	let datasetsettings;
	let current;
	datasetsettings = new DatasetSettings({ props: { dataset: /*dataset*/ ctx[10] } });

	return {
		c() {
			div = element("div");
			create_component(datasetsettings.$$.fragment);
			attr(div, "class", "card");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(datasetsettings, div, null);
			current = true;
		},
		p(ctx, dirty) {
			const datasetsettings_changes = {};
			if (dirty & /*settings*/ 1) datasetsettings_changes.dataset = /*dataset*/ ctx[10];
			datasetsettings.$set(datasetsettings_changes);
		},
		i(local) {
			if (current) return;
			transition_in(datasetsettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(datasetsettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(datasetsettings);
		}
	};
}

// (33:4) {#each settings.xPredictions as prediction}
function create_each_block_2(ctx) {
	let div;
	let predictionssettings;
	let t;
	let current;

	predictionssettings = new PredictionsSettings({
			props: { prediction: /*prediction*/ ctx[7] }
		});

	return {
		c() {
			div = element("div");
			create_component(predictionssettings.$$.fragment);
			t = space();
			attr(div, "class", "card");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(predictionssettings, div, null);
			append(div, t);
			current = true;
		},
		p(ctx, dirty) {
			const predictionssettings_changes = {};
			if (dirty & /*settings*/ 1) predictionssettings_changes.prediction = /*prediction*/ ctx[7];
			predictionssettings.$set(predictionssettings_changes);
		},
		i(local) {
			if (current) return;
			transition_in(predictionssettings.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(predictionssettings.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(predictionssettings);
		}
	};
}

// (49:6) {:else}
function create_else_block$2(ctx) {
	let div;
	let div_id_value;

	return {
		c() {
			div = element("div");
			attr(div, "id", div_id_value = /*m*/ ctx[1].id);
			attr(div, "class", "card");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*settings*/ 1 && div_id_value !== (div_id_value = /*m*/ ctx[1].id)) {
				attr(div, "id", div_id_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (47:38) 
function create_if_block_2$2(ctx) {
	let h2;
	let t_value = /*m*/ ctx[1] + "";
	let t;

	return {
		c() {
			h2 = element("h2");
			t = text$1(t_value);
		},
		m(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t);
		},
		p(ctx, dirty) {
			if (dirty & /*settings*/ 1 && t_value !== (t_value = /*m*/ ctx[1] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(h2);
		}
	};
}

// (41:6) {#if Array.isArray(m)}
function create_if_block_1$2(ctx) {
	let div;
	let t;
	let each_value_1 = /*m*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			attr(div, "class", "flex flex-row flex-wrap items-stretch");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*settings*/ 1) {
				each_value_1 = /*m*/ ctx[1];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (43:10) {#each m as { id }}
function create_each_block_1$1(ctx) {
	let div;
	let div_id_value;

	return {
		c() {
			div = element("div");
			attr(div, "id", div_id_value = /*id*/ ctx[4]);
			attr(div, "class", "card flex-none xl:flex-1 w-full xl:w-auto");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*settings*/ 1 && div_id_value !== (div_id_value = /*id*/ ctx[4])) {
				attr(div, "id", div_id_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (40:4) {#each settings.components as m}
function create_each_block$3(ctx) {
	let show_if;
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (dirty & /*settings*/ 1) show_if = null;
		if (show_if == null) show_if = !!Array.isArray(/*m*/ ctx[1]);
		if (show_if) return create_if_block_1$2;
		if (typeof /*m*/ ctx[1] === 'string') return create_if_block_2$2;
		return create_else_block$2;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$5(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*settings*/ ctx[0] && create_if_block$4(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*settings*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*settings*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$4(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$5($$self, $$props, $$invalidate) {
	let { settings } = $$props;

	afterUpdate(() => {
		settings.mount();
	});

	$$self.$$set = $$props => {
		if ('settings' in $$props) $$invalidate(0, settings = $$props.settings);
	};

	return [settings];
}

let DashboardSettings$1 = class DashboardSettings extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$5, create_fragment$5, safe_not_equal, { settings: 0 });
	}
};

/* src/layouts/dashboard/DashboardHeader.svelte generated by Svelte v3.59.1 */

function get_each_context$2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i][0];
	child_ctx[9] = list[i][1];
	child_ctx[11] = i;
	return child_ctx;
}

// (36:6) {#each Object.entries(items) as [slug, name], index}
function create_each_block$2(ctx) {
	let a;
	let t0_value = /*name*/ ctx[9] + "";
	let t0;
	let t1;
	let a_href_value;

	return {
		c() {
			a = element("a");
			t0 = text$1(t0_value);
			t1 = space();
			attr(a, "href", a_href_value = `#${/*slug*/ ctx[8]}`);
			attr(a, "class", "ml-2 mr-5 flex items-center hover:text-black border-solid border-0 border-b-2 border-transparent svelte-1ut593v");
			toggle_class(a, "active", !/*showSettings*/ ctx[4] && /*current*/ ctx[2] === /*name*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t0);
			append(a, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*items*/ 2 && t0_value !== (t0_value = /*name*/ ctx[9] + "")) set_data(t0, t0_value);

			if (dirty & /*items*/ 2 && a_href_value !== (a_href_value = `#${/*slug*/ ctx[8]}`)) {
				attr(a, "href", a_href_value);
			}

			if (dirty & /*showSettings, current, Object, items*/ 22) {
				toggle_class(a, "active", !/*showSettings*/ ctx[4] && /*current*/ ctx[2] === /*name*/ ctx[9]);
			}
		},
		d(detaching) {
			if (detaching) detach(a);
		}
	};
}

// (47:6) <Button round on:click={toggleSettings}>
function create_default_slot_1$1(ctx) {
	let svg;
	let circle;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			circle = svg_element("circle");
			path = svg_element("path");
			attr(circle, "cx", "12");
			attr(circle, "cy", "12");
			attr(circle, "r", "3");
			attr(path, "d", "M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1-1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", "24");
			attr(svg, "height", "24");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "fill", "none");
			attr(svg, "stroke", "currentColor");
			attr(svg, "stroke-width", "2");
			attr(svg, "stroke-linecap", "round");
			attr(svg, "stroke-linejoin", "round");
			attr(svg, "class", "feather feather-settings");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, circle);
			append(svg, path);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (65:6) {#if closable}
function create_if_block$3(ctx) {
	let button;
	let t;
	let span;
	let current;

	button = new Button$1({
			props: {
				round: true,
				type: "danger",
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*quit*/ ctx[5]);

	return {
		c() {
			create_component(button.$$.fragment);
			t = space();
			span = element("span");
			attr(span, "class", "w-1");
		},
		m(target, anchor) {
			mount_component(button, target, anchor);
			insert(target, t, anchor);
			insert(target, span, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button, detaching);
			if (detaching) detach(t);
			if (detaching) detach(span);
		}
	};
}

// (66:8) <Button round type="danger" on:click={quit}>
function create_default_slot$1(ctx) {
	let svg;
	let path;
	let line;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			line = svg_element("line");
			attr(path, "d", "M18.36 6.64a9 9 0 1 1-12.73 0");
			attr(line, "x1", "12");
			attr(line, "y1", "2");
			attr(line, "x2", "12");
			attr(line, "y2", "12");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "width", "24");
			attr(svg, "height", "24");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "fill", "none");
			attr(svg, "stroke", "currentColor");
			attr(svg, "stroke-width", "2");
			attr(svg, "stroke-linecap", "round");
			attr(svg, "stroke-linejoin", "round");
			attr(svg, "class", "feather feather-power");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
			append(svg, line);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

function create_fragment$4(ctx) {
	let header;
	let div1;
	let a;
	let span0;
	let t0;
	let t1;
	let nav;
	let t2;
	let div0;
	let button;
	let t3;
	let span1;
	let t4;
	let current;
	let each_value = Object.entries(/*items*/ ctx[1]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
	}

	button = new Button$1({
			props: {
				round: true,
				$$slots: { default: [create_default_slot_1$1] },
				$$scope: { ctx }
			}
		});

	button.$on("click", /*toggleSettings*/ ctx[6]);
	let if_block = /*closable*/ ctx[3] && create_if_block$3(ctx);

	return {
		c() {
			header = element("header");
			div1 = element("div");
			a = element("a");
			span0 = element("span");
			t0 = text$1(/*title*/ ctx[0]);
			t1 = space();
			nav = element("nav");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			div0 = element("div");
			create_component(button.$$.fragment);
			t3 = space();
			span1 = element("span");
			t4 = space();
			if (if_block) if_block.c();
			attr(span0, "class", "mx-3 text-lg");
			attr(a, "href", "#/");
			attr(a, "class", "flex p-3 title-font font-medium items-center text-gray-900 mb-4 md:mb-0 border-solid border-0 border-r border-gray-200 svelte-1ut593v");
			attr(nav, "class", "flex items-stretch justify-start flex-wrap text-base grow mx-4");
			attr(span1, "class", "w-1");
			attr(div0, "class", "flex items-center");
			attr(div1, "class", "mx-auto flex flex-wrap flex-col md:flex-row items-stretch w-full");
			attr(header, "class", "bg-white text-gray-700 body-font");
		},
		m(target, anchor) {
			insert(target, header, anchor);
			append(header, div1);
			append(div1, a);
			append(a, span0);
			append(span0, t0);
			append(div1, t1);
			append(div1, nav);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(nav, null);
				}
			}

			append(div1, t2);
			append(div1, div0);
			mount_component(button, div0, null);
			append(div0, t3);
			append(div0, span1);
			append(div0, t4);
			if (if_block) if_block.m(div0, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);

			if (dirty & /*Object, items, showSettings, current*/ 22) {
				each_value = Object.entries(/*items*/ ctx[1]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$2(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(nav, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			const button_changes = {};

			if (dirty & /*$$scope*/ 4096) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);

			if (/*closable*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*closable*/ 8) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$3(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div0, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(button.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(header);
			destroy_each(each_blocks, detaching);
			destroy_component(button);
			if (if_block) if_block.d();
		}
	};
}

function instance$4($$self, $$props, $$invalidate) {
	let { title } = $$props;
	let { items } = $$props;
	let { current } = $$props;
	let { closable } = $$props;
	let { showSettings = false } = $$props;
	const dispatch = createEventDispatcher();

	function toggleSettings() {
		if (showSettings) {
			window.location.href = window.location.href.split('#')[0] + '#' + Object.keys(items)[Object.values(items).indexOf(current)];
		} else {
			window.location.href = window.location.href.split('#')[0] + '#settings';
		}
	}

	function quit() {
		setTimeout(
			() => {
				dispatch('quit');
			},
			400
		);
	}

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('items' in $$props) $$invalidate(1, items = $$props.items);
		if ('current' in $$props) $$invalidate(2, current = $$props.current);
		if ('closable' in $$props) $$invalidate(3, closable = $$props.closable);
		if ('showSettings' in $$props) $$invalidate(4, showSettings = $$props.showSettings);
	};

	return [title, items, current, closable, showSettings, quit, toggleSettings];
}

class DashboardHeader extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
			title: 0,
			items: 1,
			current: 2,
			closable: 3,
			showSettings: 4,
			quit: 5
		});
	}

	get quit() {
		return this.$$.ctx[5];
	}
}

/* src/layouts/dashboard/DashboardFooter.svelte generated by Svelte v3.59.1 */

function create_else_block_1(ctx) {
	let t;

	return {
		c() {
			t = text$1(" ");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop$2,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (14:4) {#if $logStream}
function create_if_block$2(ctx) {
	let if_block_anchor;

	function select_block_type_1(ctx, dirty) {
		if (/*$logStream*/ ctx[1][0] === LogLevel.Warning) return create_if_block_1$1;
		if (/*$logStream*/ ctx[1][0] === LogLevel.Error) return create_if_block_2$1;
		return create_else_block$1;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (21:6) {:else}
function create_else_block$1(ctx) {
	let t_value = (/*$logStream*/ ctx[1][1] || '') + "";
	let t;

	return {
		c() {
			t = text$1(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$logStream*/ 2 && t_value !== (t_value = (/*$logStream*/ ctx[1][1] || '') + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (18:49) 
function create_if_block_2$1(ctx) {
	let t0;
	let t1_value = (/*$logStream*/ ctx[1][1] || '') + "";
	let t1;

	return {
		c() {
			t0 = text$1("Err:\n        ");
			t1 = text$1(t1_value);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$logStream*/ 2 && t1_value !== (t1_value = (/*$logStream*/ ctx[1][1] || '') + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

// (15:6) {#if $logStream[0] === LogLevel.Warning}
function create_if_block_1$1(ctx) {
	let t0;
	let t1_value = (/*$logStream*/ ctx[1][1] || '') + "";
	let t1;

	return {
		c() {
			t0 = text$1("Warn:\n        ");
			t1 = text$1(t1_value);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$logStream*/ 2 && t1_value !== (t1_value = (/*$logStream*/ ctx[1][1] || '') + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

function create_fragment$3(ctx) {
	let footer;
	let p0;
	let t0;
	let p1;
	let t1;
	let t2;

	function select_block_type(ctx, dirty) {
		if (/*$logStream*/ ctx[1]) return create_if_block$2;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			footer = element("footer");
			p0 = element("p");
			if_block.c();
			t0 = space();
			p1 = element("p");
			t1 = text$1("© 2021 ");
			t2 = text$1(/*author*/ ctx[0]);
			attr(p0, "class", "console svelte-i04gf3");
			toggle_class(p0, "error", /*$logStream*/ ctx[1] && /*$logStream*/ ctx[1][0] === LogLevel.Error);
			toggle_class(p0, "warning", /*$logStream*/ ctx[1] && /*$logStream*/ ctx[1][0] === LogLevel.Warning);
			attr(p1, "class", "text-sm text-gray-500 sm:ml-4 sm:pl-4 sm:border-gray-200");
			attr(footer, "class", "bg-white text-gray-600 border-t px-5 py-1 flex items-center justify-between flex-col sm:flex-row");
		},
		m(target, anchor) {
			insert(target, footer, anchor);
			append(footer, p0);
			if_block.m(p0, null);
			append(footer, t0);
			append(footer, p1);
			append(p1, t1);
			append(p1, t2);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(p0, null);
				}
			}

			if (dirty & /*$logStream, LogLevel*/ 2) {
				toggle_class(p0, "error", /*$logStream*/ ctx[1] && /*$logStream*/ ctx[1][0] === LogLevel.Error);
			}

			if (dirty & /*$logStream, LogLevel*/ 2) {
				toggle_class(p0, "warning", /*$logStream*/ ctx[1] && /*$logStream*/ ctx[1][0] === LogLevel.Warning);
			}

			if (dirty & /*author*/ 1) set_data(t2, /*author*/ ctx[0]);
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(footer);
			if_block.d();
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	let $logStream;
	let { author } = $$props;
	const logStream = getLogStream();
	component_subscribe($$self, logStream, value => $$invalidate(1, $logStream = value));

	$$self.$$set = $$props => {
		if ('author' in $$props) $$invalidate(0, author = $$props.author);
	};

	return [author, $logStream, logStream];
}

class DashboardFooter extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { author: 0 });
	}
}

/* src/layouts/dashboard/Dashboard.svelte generated by Svelte v3.59.1 */

function create_if_block$1(ctx) {
	let div1;
	let div0;
	let dashboardheader;
	let t0;
	let main;
	let current_block_type_index;
	let if_block;
	let t1;
	let dashboardfooter;
	let div0_transition;
	let current;

	dashboardheader = new DashboardHeader({
			props: {
				title: /*title*/ ctx[0],
				items: /*dashboardSlugs*/ ctx[10].reduce(/*func*/ ctx[12], {}),
				current: /*currentDashboard*/ ctx[9],
				showSettings: /*showSettings*/ ctx[8],
				closable: /*closable*/ ctx[4]
			}
		});

	dashboardheader.$on("quit", /*quit*/ ctx[5]);
	const if_block_creators = [create_if_block_1, create_if_block_2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*showSettings*/ ctx[8]) return 0;
		if (/*currentDashboard*/ ctx[9]) return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	dashboardfooter = new DashboardFooter({ props: { author: /*author*/ ctx[1] } });

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			create_component(dashboardheader.$$.fragment);
			t0 = space();
			main = element("main");
			if (if_block) if_block.c();
			t1 = space();
			create_component(dashboardfooter.$$.fragment);
			attr(main, "class", "main-container svelte-1da5cws");
			attr(div0, "class", "app-container svelte-1da5cws");
			attr(div1, "class", "marcelle fixed h-screen w-full max-w-full overflow-y-scroll overflow-x-hidden top-0 left-0 z-50");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			mount_component(dashboardheader, div0, null);
			append(div0, t0);
			append(div0, main);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(main, null);
			}

			append(div0, t1);
			mount_component(dashboardfooter, div0, null);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const dashboardheader_changes = {};
			if (dirty & /*title*/ 1) dashboardheader_changes.title = /*title*/ ctx[0];
			if (dirty & /*dashboardSlugs, dashboardNames*/ 1088) dashboardheader_changes.items = /*dashboardSlugs*/ ctx[10].reduce(/*func*/ ctx[12], {});
			if (dirty & /*currentDashboard*/ 512) dashboardheader_changes.current = /*currentDashboard*/ ctx[9];
			if (dirty & /*showSettings*/ 256) dashboardheader_changes.showSettings = /*showSettings*/ ctx[8];
			if (dirty & /*closable*/ 16) dashboardheader_changes.closable = /*closable*/ ctx[4];
			dashboardheader.$set(dashboardheader_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(main, null);
				} else {
					if_block = null;
				}
			}

			const dashboardfooter_changes = {};
			if (dirty & /*author*/ 2) dashboardfooter_changes.author = /*author*/ ctx[1];
			dashboardfooter.$set(dashboardfooter_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dashboardheader.$$.fragment, local);
			transition_in(if_block);
			transition_in(dashboardfooter.$$.fragment, local);

			add_render_callback(() => {
				if (!current) return;

				if (!div0_transition) div0_transition = create_bidirectional_transition(
					div0,
					blur,
					{
						amount: 10,
						duration: /*closable*/ ctx[4] ? 400 : 0
					},
					true
				);

				div0_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(dashboardheader.$$.fragment, local);
			transition_out(if_block);
			transition_out(dashboardfooter.$$.fragment, local);

			if (!div0_transition) div0_transition = create_bidirectional_transition(
				div0,
				blur,
				{
					amount: 10,
					duration: /*closable*/ ctx[4] ? 400 : 0
				},
				false
			);

			div0_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			destroy_component(dashboardheader);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			destroy_component(dashboardfooter);
			if (detaching && div0_transition) div0_transition.end();
		}
	};
}

// (94:35) 
function create_if_block_2(ctx) {
	let dashboardpagecomponent;
	let current;

	dashboardpagecomponent = new DashboardPage({
			props: {
				dashboard: /*dashboards*/ ctx[2][/*currentDashboard*/ ctx[9]]
			}
		});

	return {
		c() {
			create_component(dashboardpagecomponent.$$.fragment);
		},
		m(target, anchor) {
			mount_component(dashboardpagecomponent, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const dashboardpagecomponent_changes = {};
			if (dirty & /*dashboards, currentDashboard*/ 516) dashboardpagecomponent_changes.dashboard = /*dashboards*/ ctx[2][/*currentDashboard*/ ctx[9]];
			dashboardpagecomponent.$set(dashboardpagecomponent_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dashboardpagecomponent.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dashboardpagecomponent.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(dashboardpagecomponent, detaching);
		}
	};
}

// (92:8) {#if showSettings}
function create_if_block_1(ctx) {
	let dashboardsettingscomponent;
	let current;
	dashboardsettingscomponent = new DashboardSettings$1({ props: { settings: /*settings*/ ctx[3] } });

	return {
		c() {
			create_component(dashboardsettingscomponent.$$.fragment);
		},
		m(target, anchor) {
			mount_component(dashboardsettingscomponent, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const dashboardsettingscomponent_changes = {};
			if (dirty & /*settings*/ 8) dashboardsettingscomponent_changes.settings = /*settings*/ ctx[3];
			dashboardsettingscomponent.$set(dashboardsettingscomponent_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dashboardsettingscomponent.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dashboardsettingscomponent.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(dashboardsettingscomponent, detaching);
		}
	};
}

function create_fragment$2(ctx) {
	let title_value;
	let t;
	let if_block_anchor;
	let current;
	document.title = title_value = /*title*/ ctx[0];
	let if_block = /*showApp*/ ctx[7] && create_if_block$1(ctx);

	return {
		c() {
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if ((!current || dirty & /*title*/ 1) && title_value !== (title_value = /*title*/ ctx[0])) {
				document.title = title_value;
			}

			if (/*showApp*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*showApp*/ 128) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function string2slug(str) {
	let s = str.replace(/^\s+|\s+$/g, ''); // trim
	s = s.toLowerCase();

	// remove accents, swap ñ for n, etc
	const from = 'àáäâèéëêìíïîòóöôùúüûñç·/_,:;';

	const to = 'aaaaeeeeiiiioooouuuunc------';

	for (let i = 0, l = from.length; i < l; i++) {
		s = s.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));
	}

	s = s.replace(/[^a-z0-9 -]/g, '').replace(/\s+/g, '-').replace(/-+/g, '-'); // remove invalid chars
	// collapse whitespace and replace by -
	// collapse dashes

	return s;
}

function instance$2($$self, $$props, $$invalidate) {
	let dashboardNames;
	let dashboardSlugs;
	const dispatch = createEventDispatcher();
	let { title } = $$props;
	let { author } = $$props;
	let { dashboards = {} } = $$props;
	let { settings } = $$props;
	let { page } = $$props;
	let { closable } = $$props;
	let showApp = false;

	onMount(() => {
		$$invalidate(7, showApp = true);
	});

	function quit() {
		$$invalidate(7, showApp = false);

		setTimeout(
			() => {
				dispatch('quit');
			},
			400
		);
	}

	let showSettings = false;
	let currentDashboard = Object.keys(dashboards)[0] || undefined;

	// Routing
	onMount(() => {
		try {
			const router = new Router();

			router.route('settings', () => {
				$$invalidate(8, showSettings = true);
				if (currentDashboard) dashboards[currentDashboard].destroy();
				page.set('settings');
			});

			dashboardSlugs.forEach((slug, i) => {
				router.route(slug, () => {
					$$invalidate(8, showSettings = false);
					if (currentDashboard === dashboardNames[i]) return;
					if (currentDashboard) dashboards[currentDashboard].destroy();
					$$invalidate(9, currentDashboard = dashboardNames[i]);
					page.set(slug === '' ? string2slug(dashboardNames[0]) : slug);
				});
			});
		} catch(error) {
			// eslint-disable-next-line no-console
			console.log('Could not enable router', error);
		}
	});

	const func = (o, x, i) => ({ ...o, [x]: dashboardNames[i] });

	$$self.$$set = $$props => {
		if ('title' in $$props) $$invalidate(0, title = $$props.title);
		if ('author' in $$props) $$invalidate(1, author = $$props.author);
		if ('dashboards' in $$props) $$invalidate(2, dashboards = $$props.dashboards);
		if ('settings' in $$props) $$invalidate(3, settings = $$props.settings);
		if ('page' in $$props) $$invalidate(11, page = $$props.page);
		if ('closable' in $$props) $$invalidate(4, closable = $$props.closable);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*dashboards*/ 4) {
			$$invalidate(6, dashboardNames = Object.keys(dashboards));
		}

		if ($$self.$$.dirty & /*dashboardNames*/ 64) {
			$$invalidate(10, dashboardSlugs = [''].concat(dashboardNames.slice(1).map(string2slug)));
		}
	};

	return [
		title,
		author,
		dashboards,
		settings,
		closable,
		quit,
		dashboardNames,
		showApp,
		showSettings,
		currentDashboard,
		dashboardSlugs,
		page,
		func
	];
}

let Dashboard$1 = class Dashboard extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			title: 0,
			author: 1,
			dashboards: 2,
			settings: 3,
			page: 11,
			closable: 4,
			quit: 5
		});
	}

	get quit() {
		return this.$$.ctx[5];
	}
};

function isTitle(x) {
    return typeof x === 'string';
}
function isComponentArray(x) {
    return Array.isArray(x);
}
class DashboardSettings {
    constructor() {
        this.name = 'settings';
        this.components = [];
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.xModels = [];
        this.xDatasets = [];
        this.xPredictions = [];
        this.xDataStores = [];
    }
    use(...components) {
        this.components = this.components.concat(components);
        return this;
    }
    dataStores(...stores) {
        this.xDataStores = stores;
        return this;
    }
    models(...models) {
        this.xModels = models;
        return this;
    }
    datasets(...datasets) {
        this.xDatasets = datasets;
        return this;
    }
    predictions(...predictions) {
        this.xPredictions = predictions;
        return this;
    }
    mount() {
        for (const m of this.components) {
            if (isComponentArray(m)) {
                for (const n of m) {
                    n.mount();
                }
            }
            else if (!isTitle(m)) {
                m.mount();
            }
        }
    }
    destroy() {
        for (const m of this.components) {
            if (isComponentArray(m)) {
                for (const n of m) {
                    n.destroy();
                }
            }
            else if (!isTitle(m)) {
                m.destroy();
            }
        }
    }
}

class Dashboard {
    constructor({ title = 'Hello, Marcelle!', author = 'author', closable = false, }) {
        this.panels = {};
        this.settings = new DashboardSettings();
        this.$active = new Stream(false, true);
        this.$page = new Stream('', true);
        this.title = title;
        this.author = author;
        this.closable = closable;
    }
    page(name, showSidebar) {
        if (!Object.keys(this.panels).includes(name)) {
            this.panels[name] = new DashboardPage$1(name, showSidebar);
        }
        return this.panels[name];
    }
    show() {
        this.app = new Dashboard$1({
            target: document.body,
            props: {
                title: this.title,
                author: this.author,
                dashboards: this.panels,
                settings: this.settings,
                page: this.$page,
                closable: this.closable,
            },
        });
        this.$active.set(true);
        this.app.$on('quit', () => {
            var _a;
            this.$active.set(false);
            (_a = this.app) === null || _a === void 0 ? void 0 : _a.$destroy();
            for (const panel of Object.values(this.panels)) {
                panel.destroy();
            }
            this.app = undefined;
        });
    }
    hide() {
        var _a;
        (_a = this.app) === null || _a === void 0 ? void 0 : _a.quit();
    }
}
function dashboard(options) {
    return new Dashboard(options);
}

/* src/layouts/wizard/WizardPage.svelte generated by Svelte v3.59.1 */

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i].id;
	return child_ctx;
}

// (27:10) {:else}
function create_else_block(ctx) {
	let div;
	let div_id_value;

	return {
		c() {
			div = element("div");
			attr(div, "id", div_id_value = /*m*/ ctx[4].id);
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*components*/ 8 && div_id_value !== (div_id_value = /*m*/ ctx[4].id)) {
				attr(div, "id", div_id_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (21:10) {#if Array.isArray(m)}
function create_if_block(ctx) {
	let div;
	let t;
	let each_value_1 = /*m*/ ctx[4];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			attr(div, "class", "flex flex-row flex-wrap items-stretch");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			append(div, t);
		},
		p(ctx, dirty) {
			if (dirty & /*components*/ 8) {
				each_value_1 = /*m*/ ctx[4];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (23:14) {#each m as { id }}
function create_each_block_1(ctx) {
	let div;
	let div_id_value;

	return {
		c() {
			div = element("div");
			attr(div, "id", div_id_value = /*id*/ ctx[7]);
			attr(div, "class", "flex-none xl:flex-1 w-full xl:w-auto");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*components*/ 8 && div_id_value !== (div_id_value = /*id*/ ctx[7])) {
				attr(div, "id", div_id_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (20:8) {#each components as m}
function create_each_block$1(ctx) {
	let show_if;
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (dirty & /*components*/ 8) show_if = null;
		if (show_if == null) show_if = !!Array.isArray(/*m*/ ctx[4]);
		if (show_if) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$1(ctx) {
	let div5;
	let div4;
	let div1;
	let h3;
	let t0;
	let t1;
	let t2;
	let t3;
	let div0;
	let p;
	let t4;
	let t5;
	let div3;
	let div2;
	let each_value = /*components*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	return {
		c() {
			div5 = element("div");
			div4 = element("div");
			div1 = element("div");
			h3 = element("h3");
			t0 = text$1(/*index*/ ctx[0]);
			t1 = text$1(".\n        ");
			t2 = text$1(/*title*/ ctx[1]);
			t3 = space();
			div0 = element("div");
			p = element("p");
			t4 = text$1(/*description*/ ctx[2]);
			t5 = space();
			div3 = element("div");
			div2 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(h3, "class", "text-lg leading-6 font-medium text-gray-900");
			attr(h3, "id", "modal-headline");
			attr(p, "class", "text-sm leading-5 text-gray-500");
			attr(div0, "class", "mt-2");
			attr(div1, "class", "desc svelte-tq2nfn");
			attr(div2, "class", "text-center");
			attr(div3, "class", "components svelte-tq2nfn");
			attr(div4, "class", "flex flex-col w-full");
			attr(div5, "class", "bg-white px-4 pt-2 pb-4 sm:px-6 sm:pb-4 flex");
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div4);
			append(div4, div1);
			append(div1, h3);
			append(h3, t0);
			append(h3, t1);
			append(h3, t2);
			append(div1, t3);
			append(div1, div0);
			append(div0, p);
			append(p, t4);
			append(div4, t5);
			append(div4, div3);
			append(div3, div2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div2, null);
				}
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*index*/ 1) set_data(t0, /*index*/ ctx[0]);
			if (dirty & /*title*/ 2) set_data(t2, /*title*/ ctx[1]);
			if (dirty & /*description*/ 4) set_data(t4, /*description*/ ctx[2]);

			if (dirty & /*components, Array*/ 8) {
				each_value = /*components*/ ctx[3];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop$2,
		o: noop$2,
		d(detaching) {
			if (detaching) detach(div5);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { index } = $$props;
	let { title } = $$props;
	let { description } = $$props;
	let { components = [] } = $$props;

	$$self.$$set = $$props => {
		if ('index' in $$props) $$invalidate(0, index = $$props.index);
		if ('title' in $$props) $$invalidate(1, title = $$props.title);
		if ('description' in $$props) $$invalidate(2, description = $$props.description);
		if ('components' in $$props) $$invalidate(3, components = $$props.components);
	};

	return [index, title, description, components];
}

let WizardPage$1 = class WizardPage extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			index: 0,
			title: 1,
			description: 2,
			components: 3
		});
	}
};

/* src/layouts/wizard/Wizard.svelte generated by Svelte v3.59.1 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	child_ctx[12] = i;
	return child_ctx;
}

// (70:11) <Button type="danger" on:click={quit}>
function create_default_slot_2(ctx) {
	let t;

	return {
		c() {
			t = text$1("Close");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (72:8) {#each Array(pages.length) as _, i}
function create_each_block(ctx) {
	let button;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[6](/*i*/ ctx[12]);
	}

	return {
		c() {
			button = element("button");
			attr(button, "class", "page-button svelte-bhgsnx");
			toggle_class(button, "current", /*$current*/ ctx[3] === /*i*/ ctx[12]);
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", click_handler);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*$current*/ 8) {
				toggle_class(button, "current", /*$current*/ ctx[3] === /*i*/ ctx[12]);
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (77:8) <Button           disabled={$current <= 0}           on:click={() => {             goToPage($current - 1);           }}         >
function create_default_slot_1(ctx) {
	let t;

	return {
		c() {
			t = text$1("Previous");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (85:8) <Button           variant="filled"           type={$current >= pages.length - 1 ? 'success' : 'default'}           on:click={() => {             if (current.get() < pages.length - 1) {               goToPage($current + 1);             } else {               quit();             }           }}         >
function create_default_slot(ctx) {
	let t_value = (/*$current*/ ctx[3] >= /*pages*/ ctx[0].length - 1
	? 'Finish'
	: 'Next') + "";

	let t;

	return {
		c() {
			t = text$1(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*$current, pages*/ 9 && t_value !== (t_value = (/*$current*/ ctx[3] >= /*pages*/ ctx[0].length - 1
			? 'Finish'
			: 'Next') + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let div7;
	let div1;
	let div0;
	let t0;
	let div6;
	let wizardpagecomponent;
	let t1;
	let div5;
	let div2;
	let button0;
	let t2;
	let div3;
	let t3;
	let div4;
	let button1;
	let t4;
	let button2;
	let current;
	let mounted;
	let dispose;

	wizardpagecomponent = new WizardPage$1({
			props: {
				title: /*pages*/ ctx[0][/*$current*/ ctx[3]].attr.title,
				description: /*pages*/ ctx[0][/*$current*/ ctx[3]].attr.description,
				components: /*pages*/ ctx[0][/*$current*/ ctx[3]].components,
				index: /*$current*/ ctx[3] + 1
			}
		});

	button0 = new Button$1({
			props: {
				type: "danger",
				$$slots: { default: [create_default_slot_2] },
				$$scope: { ctx }
			}
		});

	button0.$on("click", /*quit*/ ctx[2]);
	let each_value = Array(/*pages*/ ctx[0].length);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	button1 = new Button$1({
			props: {
				disabled: /*$current*/ ctx[3] <= 0,
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			}
		});

	button1.$on("click", /*click_handler_1*/ ctx[7]);

	button2 = new Button$1({
			props: {
				variant: "filled",
				type: /*$current*/ ctx[3] >= /*pages*/ ctx[0].length - 1
				? 'success'
				: 'default',
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	button2.$on("click", /*click_handler_2*/ ctx[8]);

	return {
		c() {
			div7 = element("div");
			div1 = element("div");
			div0 = element("div");
			t0 = space();
			div6 = element("div");
			create_component(wizardpagecomponent.$$.fragment);
			t1 = space();
			div5 = element("div");
			div2 = element("div");
			create_component(button0.$$.fragment);
			t2 = space();
			div3 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			div4 = element("div");
			create_component(button1.$$.fragment);
			t4 = space();
			create_component(button2.$$.fragment);
			attr(div0, "class", "absolute inset-0 bg-gray-500 opacity-50");
			attr(div1, "class", "absolute min-h-screen inset-0 transition-opacity");
			attr(div3, "class", "text-center");
			attr(div4, "class", "text-right");
			attr(div5, "class", "bg-white border-t border-gray-300 px-4 py-2 grid grid-cols-3");
			attr(div6, "class", "bg-white rounded-lg overflow-hidden shadow-xl transform transition-all sm:max-w-3xl sm:w-full");
			attr(div7, "class", "marcelle wizard svelte-bhgsnx");
		},
		m(target, anchor) {
			insert(target, div7, anchor);
			append(div7, div1);
			append(div1, div0);
			append(div7, t0);
			append(div7, div6);
			mount_component(wizardpagecomponent, div6, null);
			append(div6, t1);
			append(div6, div5);
			append(div5, div2);
			mount_component(button0, div2, null);
			append(div5, t2);
			append(div5, div3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div3, null);
				}
			}

			append(div5, t3);
			append(div5, div4);
			mount_component(button1, div4, null);
			append(div4, t4);
			mount_component(button2, div4, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "click", /*quit*/ ctx[2]),
					listen(div0, "keypress", prevent_default(/*keypress_handler*/ ctx[5]))
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			const wizardpagecomponent_changes = {};
			if (dirty & /*pages, $current*/ 9) wizardpagecomponent_changes.title = /*pages*/ ctx[0][/*$current*/ ctx[3]].attr.title;
			if (dirty & /*pages, $current*/ 9) wizardpagecomponent_changes.description = /*pages*/ ctx[0][/*$current*/ ctx[3]].attr.description;
			if (dirty & /*pages, $current*/ 9) wizardpagecomponent_changes.components = /*pages*/ ctx[0][/*$current*/ ctx[3]].components;
			if (dirty & /*$current*/ 8) wizardpagecomponent_changes.index = /*$current*/ ctx[3] + 1;
			wizardpagecomponent.$set(wizardpagecomponent_changes);
			const button0_changes = {};

			if (dirty & /*$$scope*/ 8192) {
				button0_changes.$$scope = { dirty, ctx };
			}

			button0.$set(button0_changes);

			if (dirty & /*$current, goToPage, pages*/ 25) {
				each_value = Array(/*pages*/ ctx[0].length);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div3, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			const button1_changes = {};
			if (dirty & /*$current*/ 8) button1_changes.disabled = /*$current*/ ctx[3] <= 0;

			if (dirty & /*$$scope*/ 8192) {
				button1_changes.$$scope = { dirty, ctx };
			}

			button1.$set(button1_changes);
			const button2_changes = {};

			if (dirty & /*$current, pages*/ 9) button2_changes.type = /*$current*/ ctx[3] >= /*pages*/ ctx[0].length - 1
			? 'success'
			: 'default';

			if (dirty & /*$$scope, $current, pages*/ 8201) {
				button2_changes.$$scope = { dirty, ctx };
			}

			button2.$set(button2_changes);
		},
		i(local) {
			if (current) return;
			transition_in(wizardpagecomponent.$$.fragment, local);
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			transition_in(button2.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(wizardpagecomponent.$$.fragment, local);
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			transition_out(button2.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div7);
			destroy_component(wizardpagecomponent);
			destroy_component(button0);
			destroy_each(each_blocks, detaching);
			destroy_component(button1);
			destroy_component(button2);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $current,
		$$unsubscribe_current = noop$2,
		$$subscribe_current = () => ($$unsubscribe_current(), $$unsubscribe_current = subscribe(current, $$value => $$invalidate(3, $current = $$value)), current);

	$$self.$$.on_destroy.push(() => $$unsubscribe_current());
	let { pages } = $$props;
	let { current } = $$props;
	$$subscribe_current();

	function goToPage(index) {
		if (index >= 0 && index <= pages.length - 1) {
			for (const m of pages[current.get()].components) {
				if (Array.isArray(m)) {
					for (const n of m) {
						n.destroy();
					}
				} else {
					m.destroy();
				}
			}

			current.set(index);
		}
	}

	afterUpdate(() => {
		for (const m of pages[current.get()].components) {
			if (Array.isArray(m)) {
				for (const n of m) {
					n.mount();
				}
			} else {
				m.mount();
			}
		}
	});

	onDestroy(() => {
		for (const m of pages[current.get()].components) {
			if (Array.isArray(m)) {
				for (const n of m) {
					n.destroy();
				}
			} else {
				m.destroy();
			}
		}
	});

	const dispatch = createEventDispatcher();

	function quit() {
		dispatch('quit');
	}

	const keypress_handler = e => e.key === 'Escape' && quit();
	const click_handler = i => goToPage(i);

	const click_handler_1 = () => {
		goToPage($current - 1);
	};

	const click_handler_2 = () => {
		if (current.get() < pages.length - 1) {
			goToPage($current + 1);
		} else {
			quit();
		}
	};

	$$self.$$set = $$props => {
		if ('pages' in $$props) $$invalidate(0, pages = $$props.pages);
		if ('current' in $$props) $$subscribe_current($$invalidate(1, current = $$props.current));
	};

	return [
		pages,
		current,
		quit,
		$current,
		goToPage,
		keypress_handler,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

let Wizard$1 = class Wizard extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { pages: 0, current: 1, quit: 2 });
	}

	get quit() {
		return this.$$.ctx[2];
	}
};

class WizardPage {
    constructor(pageFn) {
        this.pageFn = pageFn;
        this.components = [];
        this.attr = { title: '', description: '' };
    }
    title(title) {
        this.attr.title = title;
        return this;
    }
    description(desc) {
        this.attr.description = desc;
        return this;
    }
    use(...components) {
        this.components = this.components.concat(components);
        return this;
    }
    page() {
        return this.pageFn();
    }
}

class Wizard {
    constructor() {
        this.pages = [];
        this.app = undefined;
        this.$current = new Stream(0, true);
        this.$current.start();
    }
    page() {
        const s = new WizardPage(this.page.bind(this));
        this.pages.push(s);
        return s;
    }
    show() {
        this.app = new Wizard$1({
            target: document.body,
            props: {
                pages: this.pages,
                current: this.$current,
            },
        });
        this.app.$on('quit', () => {
            var _a;
            (_a = this.app) === null || _a === void 0 ? void 0 : _a.$destroy();
            this.app = undefined;
        });
    }
    hide() {
        var _a;
        (_a = this.app) === null || _a === void 0 ? void 0 : _a.quit();
    }
}
function wizard() {
    return new Wizard();
}

const ParseErrorCode = {
  LoadFail: 0,
  BadSignature: 1,
  BadTimestamp: 2,
  BadSettingValue: 3,
  BadFormat: 4,
  UnknownSetting: 5
};
class ParseError extends Error {
  code;
  line;
  constructor(init) {
    super(init.reason);
    this.code = init.code;
    this.line = init.line;
  }
}

const LINE_TERMINATOR_RE = /\r?\n|\r/gm;
class TextLineTransformStream {
  writable;
  readable;
  constructor(encoding) {
    const transformer = new TextStreamLineIterator(encoding);
    this.writable = new WritableStream({
      write(chunk) {
        transformer.transform(chunk);
      },
      close() {
        transformer.close();
      }
    });
    this.readable = new ReadableStream({
      start(controller) {
        transformer.onLine = (line) => controller.enqueue(line);
        transformer.onClose = () => controller.close();
      }
    });
  }
}
class TextStreamLineIterator {
  x = "";
  y;
  onLine;
  onClose;
  constructor(encoding) {
    this.y = new TextDecoder(encoding);
  }
  transform(chunk) {
    this.x += this.y.decode(chunk, { stream: true });
    const lines = this.x.split(LINE_TERMINATOR_RE);
    this.x = lines.pop() || "";
    for (let i = 0; i < lines.length; i++)
      this.onLine(lines[i].trim());
  }
  close() {
    if (this.x)
      this.onLine(this.x.trim());
    this.x = "";
    this.onClose();
  }
}

async function parseText(text, options) {
  const stream = new ReadableStream({
    start(controller) {
      const lines = text.split(LINE_TERMINATOR_RE);
      for (const line of lines)
        controller.enqueue(line);
      controller.close();
    }
  });
  return parseTextStream(stream, options);
}
async function parseTextStream(stream, options) {
  const type = options?.type ?? "vtt";
  let factory;
  if (typeof type === "string") {
    switch (type) {
      case "srt":
        factory = (await Promise.resolve().then(function () { return srtParser; })).default;
        break;
      case "ssa":
      case "ass":
        factory = (await Promise.resolve().then(function () { return ssaParser; })).default;
        break;
      default:
        factory = (await Promise.resolve().then(function () { return vttParser; })).default;
    }
  } else {
    factory = type;
  }
  let result;
  const reader = stream.getReader(), parser = factory(), errors = !!options?.strict || !!options?.errors;
  await parser.init({
    strict: false,
    ...options,
    errors,
    type,
    cancel() {
      reader.cancel();
      result = parser.done(true);
    }
  });
  let i = 1;
  while (true) {
    const { value, done } = await reader.read();
    if (done) {
      parser.parse("", i);
      result = parser.done(false);
      break;
    }
    parser.parse(value, i);
    i++;
  }
  return result;
}

async function parseResponse(response, options) {
  const res = await response;
  if (!res.ok || !res.body) {
    let error;
    return {
      metadata: {},
      cues: [],
      regions: [],
      errors: [error]
    };
  }
  const contentType = res.headers.get("content-type") || "", type = contentType.match(/text\/(.*?)(?:;|$)/)?.[1], encoding = contentType.match(/charset=(.*?)(?:;|$)/)?.[1];
  return parseByteStream(res.body, { type, encoding, ...options });
}
async function parseByteStream(stream, { encoding = "utf-8", ...options } = {}) {
  const textStream = stream.pipeThrough(new TextLineTransformStream(encoding));
  return parseTextStream(textStream, options);
}

class TextCue extends EventTarget {
  /**
   * A string that identifies the cue.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/id}
   */
  id = "";
  /**
   * A `double` that represents the video time that the cue will start being displayed, in seconds.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/startTime}
   */
  startTime;
  /**
   * A `double` that represents the video time that the cue will stop being displayed, in seconds.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/endTime}
   */
  endTime;
  /**
   * Returns a string with the contents of the cue.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/text}
   */
  text;
  /**
   * A `boolean` for whether the video will pause when this cue stops being displayed.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/pauseOnExit}
   */
  pauseOnExit = false;
  constructor(startTime, endTime, text) {
    super();
    this.startTime = startTime;
    this.endTime = endTime;
    this.text = text;
  }
  addEventListener(type, listener, options) {
    super.addEventListener(type, listener, options);
  }
  removeEventListener(type, listener, options) {
    super.removeEventListener(type, listener, options);
  }
}

const IS_SERVER = typeof document === "undefined";

const CueBase = IS_SERVER ? TextCue : window.VTTCue;
class VTTCue extends CueBase {
  /**
   * A `VTTRegion` object describing the video's sub-region that the cue will be drawn onto,
   * or `null` if none is assigned.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/region}
   */
  region = null;
  /**
   * The cue writing direction.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/vertical}
   */
  vertical = "";
  /**
   * Returns `true` if the `VTTCue.line` attribute is an integer number of lines or a percentage
   * of the video size.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/snapToLines}
   */
  snapToLines = true;
  /**
   * Returns the line positioning of the cue. This can be the string `'auto'` or a number whose
   * interpretation depends on the value of `VTTCue.snapToLines`.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/line}
   */
  line = "auto";
  /**
   * Returns an enum representing the alignment of the `VTTCue.line`.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/lineAlign}
   */
  lineAlign = "start";
  /**
   * Returns the indentation of the cue within the line. This can be the string `'auto'` or a
   * number representing the percentage of the `VTTCue.region`, or the video size if `VTTCue`.region`
   * is `null`.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/position}
   */
  position = "auto";
  /**
   * Returns an enum representing the alignment of the cue. This is used to determine what
   * the `VTTCue.position` is anchored to. The default is `'auto'`.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/positionAlign}
   */
  positionAlign = "auto";
  /**
   * Returns a double representing the size of the cue, as a percentage of the video size.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/size}
   */
  size = 100;
  /**
   * Returns an enum representing the alignment of all the lines of text within the cue box.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/VTTCue/align}
   */
  align = "center";
  /**
   * Additional styles associated with the cue.
   */
  style;
}

class VTTRegion {
  /**
   * A string that identifies the region.
   */
  id = "";
  /**
   * A `double` representing the width of the region, as a percentage of the video.
   */
  width = 100;
  /**
   * A `double` representing the height of the region, in number of lines.
   */
  lines = 3;
  /**
   * A `double` representing the region anchor X offset, as a percentage of the region.
   */
  regionAnchorX = 0;
  /**
   * A `double` representing the region anchor Y offset, as a percentage of the region.
   */
  regionAnchorY = 100;
  /**
   * A `double` representing the viewport anchor X offset, as a percentage of the video.
   */
  viewportAnchorX = 0;
  /**
   * A `double` representing the viewport anchor Y offset, as a percentage of the video.
   */
  viewportAnchorY = 100;
  /**
   * An enum representing how adding new cues will move existing cues.
   */
  scroll = "";
}

const COMMA$1 = ",", PERCENT_SIGN$1 = "%";
function toNumber(text) {
  const num = parseInt(text, 10);
  return !Number.isNaN(num) ? num : null;
}
function toPercentage(text) {
  const num = parseInt(text.replace(PERCENT_SIGN$1, ""), 10);
  return !Number.isNaN(num) && num >= 0 && num <= 100 ? num : null;
}
function toCoords(text) {
  if (!text.includes(COMMA$1))
    return null;
  const [x, y] = text.split(COMMA$1).map(toPercentage);
  return x !== null && y !== null ? [x, y] : null;
}
function toFloat(text) {
  const num = parseFloat(text);
  return !Number.isNaN(num) ? num : null;
}

const HEADER_MAGIC = "WEBVTT", COMMA = ",", PERCENT_SIGN = "%", SETTING_SEP_RE = /[:=]/, SETTING_LINE_RE = /^[\s\t]*(region|vertical|line|position|size|align)[:=]/, NOTE_BLOCK_START = "NOTE", REGION_BLOCK_START = "REGION", REGION_BLOCK_START_RE = /^REGION:?[\s\t]+/, SPACE_RE = /[\s\t]+/, TIMESTAMP_SEP$1 = "-->", TIMESTAMP_SEP_RE = /[\s\t]*-->[\s\t]+/, ALIGN_RE = /start|center|end|left|right/, LINE_ALIGN_RE = /start|center|end/, POS_ALIGN_RE = /line-(?:left|right)|center|auto/, TIMESTAMP_RE = /^(?:(\d{1,2}):)?(\d{2}):(\d{2})(?:\.(\d{1,3}))?$/;
var VTTBlock = /* @__PURE__ */ ((VTTBlock2) => {
  VTTBlock2[VTTBlock2["None"] = 0] = "None";
  VTTBlock2[VTTBlock2["Header"] = 1] = "Header";
  VTTBlock2[VTTBlock2["Cue"] = 2] = "Cue";
  VTTBlock2[VTTBlock2["Region"] = 3] = "Region";
  VTTBlock2[VTTBlock2["Note"] = 4] = "Note";
  return VTTBlock2;
})(VTTBlock || {});
class VTTParser {
  f;
  c = 0;
  g = {};
  h = {};
  j = [];
  a = null;
  b = null;
  k = [];
  d;
  l = "";
  async init(init) {
    this.f = init;
    if (init.strict)
      this.c = 1;
    if (init.errors)
      this.d = (await Promise.resolve().then(function () { return errors; })).ParseErrorBuilder;
  }
  parse(line, lineCount) {
    if (line === "") {
      if (this.a) {
        this.j.push(this.a);
        this.f.onCue?.(this.a);
        this.a = null;
      } else if (this.b) {
        this.h[this.b.id] = this.b;
        this.f.onRegion?.(this.b);
        this.b = null;
      } else if (this.c === 1) {
        this.i(line, lineCount);
        this.f.onHeaderMetadata?.(this.g);
      }
      this.c = 0;
    } else if (this.c) {
      switch (this.c) {
        case 1:
          this.i(line, lineCount);
          break;
        case 2:
          if (this.a) {
            const hasText = this.a.text.length > 0;
            if (!hasText && SETTING_LINE_RE.test(line)) {
              this.m(line.split(SPACE_RE), lineCount);
            } else {
              this.a.text += (hasText ? "\n" : "") + line;
            }
          }
          break;
        case 3:
          this.n(line.split(SPACE_RE), lineCount);
          break;
      }
    } else if (line.startsWith(NOTE_BLOCK_START)) {
      this.c = 4;
    } else if (line.startsWith(REGION_BLOCK_START)) {
      this.c = 3;
      this.b = new VTTRegion();
      this.n(line.replace(REGION_BLOCK_START_RE, "").split(SPACE_RE), lineCount);
    } else if (line.includes(TIMESTAMP_SEP$1)) {
      const result = this.o(line, lineCount);
      if (result) {
        this.a = new VTTCue(result[0], result[1], "");
        this.a.id = this.l;
        this.m(result[2], lineCount);
      }
      this.c = 2;
    } else if (lineCount === 1) {
      this.i(line, lineCount);
    }
    this.l = line;
  }
  done() {
    return {
      metadata: this.g,
      cues: this.j,
      regions: Object.values(this.h),
      errors: this.k
    };
  }
  i(line, lineCount) {
    if (lineCount > 1) {
      if (SETTING_SEP_RE.test(line)) {
        const [key, value] = line.split(SETTING_SEP_RE);
        if (key)
          this.g[key] = (value || "").replace(SPACE_RE, "");
      }
    } else if (line.startsWith(HEADER_MAGIC)) {
      this.c = 1;
    } else {
      this.e(this.d?.p());
    }
  }
  o(line, lineCount) {
    const [startTimeText, trailingText = ""] = line.split(TIMESTAMP_SEP_RE), [endTimeText, ...settingsText] = trailingText.split(SPACE_RE), startTime = parseVTTTimestamp(startTimeText), endTime = parseVTTTimestamp(endTimeText);
    if (startTime !== null && endTime !== null && endTime > startTime) {
      return [startTime, endTime, settingsText];
    } else {
      if (startTime === null) {
        this.e(this.d?.q(startTimeText, lineCount));
      }
      if (endTime === null) {
        this.e(this.d?.r(endTimeText, lineCount));
      }
      if (startTime != null && endTime !== null && endTime > startTime) {
        this.e(this.d?.s(startTime, endTime, lineCount));
      }
    }
  }
  /**
   * @see {@link https://www.w3.org/TR/webvtt1/#region-settings-parsing}
   */
  n(settings, line) {
    let badValue;
    for (let i = 0; i < settings.length; i++) {
      if (SETTING_SEP_RE.test(settings[i])) {
        badValue = false;
        const [name, value] = settings[i].split(SETTING_SEP_RE);
        switch (name) {
          case "id":
            this.b.id = value;
            break;
          case "width":
            const width = toPercentage(value);
            if (width !== null)
              this.b.width = width;
            else
              badValue = true;
            break;
          case "lines":
            const lines = toNumber(value);
            if (lines !== null)
              this.b.lines = lines;
            else
              badValue = true;
            break;
          case "regionanchor":
            const region = toCoords(value);
            if (region !== null) {
              this.b.regionAnchorX = region[0];
              this.b.regionAnchorY = region[1];
            } else
              badValue = true;
            break;
          case "viewportanchor":
            const viewport = toCoords(value);
            if (viewport !== null) {
              this.b.viewportAnchorX = viewport[0];
              this.b.viewportAnchorY = viewport[1];
            } else
              badValue = true;
            break;
          case "scroll":
            if (value === "up")
              this.b.scroll = "up";
            else
              badValue = true;
            break;
          default:
            this.e(this.d?.t(name, value, line));
        }
        if (badValue) {
          this.e(this.d?.u(name, value, line));
        }
      }
    }
  }
  /**
   * @see {@link https://www.w3.org/TR/webvtt1/#cue-timings-and-settings-parsing}
   */
  m(settings, line) {
    let badValue;
    for (let i = 0; i < settings.length; i++) {
      badValue = false;
      if (SETTING_SEP_RE.test(settings[i])) {
        const [name, value] = settings[i].split(SETTING_SEP_RE);
        switch (name) {
          case "region":
            const region = this.h[value];
            if (region)
              this.a.region = region;
            break;
          case "vertical":
            if (value === "lr" || value === "rl") {
              this.a.vertical = value;
              this.a.region = null;
            } else
              badValue = true;
            break;
          case "line":
            const [linePos, lineAlign] = value.split(COMMA);
            if (linePos.includes(PERCENT_SIGN)) {
              const percentage = toPercentage(linePos);
              if (percentage !== null) {
                this.a.line = percentage;
                this.a.snapToLines = false;
              } else
                badValue = true;
            } else {
              const number = toFloat(linePos);
              if (number !== null)
                this.a.line = number;
              else
                badValue = true;
            }
            if (LINE_ALIGN_RE.test(lineAlign)) {
              this.a.lineAlign = lineAlign;
            } else if (lineAlign) {
              badValue = true;
            }
            if (this.a.line !== "auto")
              this.a.region = null;
            break;
          case "position":
            const [colPos, colAlign] = value.split(COMMA), position = toPercentage(colPos);
            if (position !== null)
              this.a.position = position;
            else
              badValue = true;
            if (colAlign && POS_ALIGN_RE.test(colAlign)) {
              this.a.positionAlign = colAlign;
            } else if (colAlign) {
              badValue = true;
            }
            break;
          case "size":
            const size = toPercentage(value);
            if (size !== null) {
              this.a.size = size;
              if (size < 100)
                this.a.region = null;
            } else {
              badValue = true;
            }
            break;
          case "align":
            if (ALIGN_RE.test(value)) {
              this.a.align = value;
            } else {
              badValue = true;
            }
            break;
          default:
            this.e(this.d?.v(name, value, line));
        }
        if (badValue) {
          this.e(this.d?.w(name, value, line));
        }
      }
    }
  }
  e(error) {
    if (!error)
      return;
    this.k.push(error);
    if (this.f.strict) {
      this.f.cancel();
      throw error;
    } else {
      this.f.onError?.(error);
    }
  }
}
function parseVTTTimestamp(timestamp) {
  const match = timestamp.match(TIMESTAMP_RE);
  if (!match)
    return null;
  const hours = match[1] ? parseInt(match[1], 10) : 0, minutes = parseInt(match[2], 10), seconds = parseInt(match[3], 10), milliseconds = match[4] ? parseInt(match[4].padEnd(3, "0"), 10) : 0, total = hours * 3600 + minutes * 60 + seconds + milliseconds / 1e3;
  if (hours < 0 || minutes < 0 || seconds < 0 || milliseconds < 0 || minutes > 59 || seconds > 59) {
    return null;
  }
  return total;
}
function createVTTParser() {
  return new VTTParser();
}

var vttParser = /*#__PURE__*/Object.freeze({
  __proto__: null,
  VTTBlock: VTTBlock,
  VTTParser: VTTParser,
  default: createVTTParser,
  parseVTTTimestamp: parseVTTTimestamp
});

const DIGIT_RE = /[0-9]/, MULTI_SPACE_RE = /[\s\t]+/, TAG_NAME = {
  c: "span",
  i: "i",
  b: "b",
  u: "u",
  ruby: "ruby",
  rt: "rt",
  v: "span",
  lang: "span",
  timestamp: "span"
}, HTML_ENTITIES = {
  "&amp;": "&",
  "&lt;": "<",
  "&gt;": ">",
  "&quot;": '"',
  "&#39;": "'",
  "&nbsp;": "\xA0",
  "&lrm;": "\u200E",
  "&rlm;": "\u200F"
}, HTML_ENTITY_RE = /&(?:amp|lt|gt|quot|#(0+)?39|nbsp|lrm|rlm);/g, COLORS = /* @__PURE__ */ new Set([
  "white",
  "lime",
  "cyan",
  "red",
  "yellow",
  "magenta",
  "blue",
  "black"
]), BLOCK_TYPES = /* @__PURE__ */ new Set(Object.keys(TAG_NAME));
function tokenizeVTTCue(cue) {
  let buffer = "", mode = 1, result = [], stack = [], node;
  for (let i = 0; i < cue.text.length; i++) {
    const char = cue.text[i];
    switch (mode) {
      case 1:
        if (char === "<") {
          addText();
          mode = 2;
        } else {
          buffer += char;
        }
        break;
      case 2:
        switch (char) {
          case "\n":
          case "	":
          case " ":
            addNode();
            mode = 4;
            break;
          case ".":
            addNode();
            mode = 3;
            break;
          case "/":
            mode = 5;
            break;
          case ">":
            addNode();
            mode = 1;
            break;
          default:
            if (!buffer && DIGIT_RE.test(char))
              mode = 6;
            buffer += char;
            break;
        }
        break;
      case 3:
        switch (char) {
          case "	":
          case " ":
          case "\n":
            addClass();
            if (node)
              node.class?.trim();
            mode = 4;
            break;
          case ".":
            addClass();
            break;
          case ">":
            addClass();
            if (node)
              node.class?.trim();
            mode = 1;
            break;
          default:
            buffer += char;
        }
        break;
      case 4:
        if (char === ">") {
          buffer = buffer.replace(MULTI_SPACE_RE, " ");
          if (node?.type === "v")
            node.voice = replaceHTMLEntities(buffer);
          else if (node?.type === "lang")
            node.lang = replaceHTMLEntities(buffer);
          buffer = "";
          mode = 1;
        } else {
          buffer += char;
        }
        break;
      case 5:
        if (char === ">") {
          buffer = "";
          node = stack.pop();
          mode = 1;
        }
        break;
      case 6:
        if (char === ">") {
          const time = parseVTTTimestamp(buffer);
          if (time !== null && time >= cue.startTime && time <= cue.endTime) {
            buffer = "timestamp";
            addNode();
            node.time = time;
          }
          buffer = "";
          mode = 1;
        } else {
          buffer += char;
        }
        break;
    }
  }
  function addNode() {
    if (BLOCK_TYPES.has(buffer)) {
      const parent = node;
      node = createBlockNode(buffer);
      if (parent) {
        if (stack[stack.length - 1] !== parent)
          stack.push(parent);
        parent.children.push(node);
      } else
        result.push(node);
    }
    buffer = "";
    mode = 1;
  }
  function addClass() {
    if (node && buffer) {
      const color = buffer.replace("bg_", "");
      if (COLORS.has(color)) {
        node[buffer.startsWith("bg_") ? "bgColor" : "color"] = color;
      } else {
        node.class = !node.class ? buffer : node.class + " " + buffer;
      }
    }
    buffer = "";
  }
  function addText() {
    if (!buffer)
      return;
    const text = { type: "text", data: replaceHTMLEntities(buffer) };
    node ? node.children.push(text) : result.push(text);
    buffer = "";
  }
  if (mode === 1)
    addText();
  return result;
}
function createBlockNode(type) {
  return {
    tagName: TAG_NAME[type],
    type,
    children: []
  };
}
function replaceHTMLEntities(text) {
  return text.replace(HTML_ENTITY_RE, (entity) => HTML_ENTITIES[entity] || "'");
}

function setCSSVar(el, name, value) {
  el.style.setProperty(`--${name}`, value + "");
}
function setDataAttr(el, name, value = true) {
  el.setAttribute(`data-${name}`, value === true ? "" : value + "");
}
function setPartAttr(el, name) {
  el.setAttribute("data-part", name);
}
function getLineHeight(el) {
  return parseFloat(getComputedStyle(el).lineHeight) || 0;
}

function createVTTCueTemplate(cue) {
  if (IS_SERVER) {
    throw Error(
      "[media-captions] called `createVTTCueTemplate` on the server - use `renderVTTCueString`"
    );
  }
  const template = document.createElement("template");
  template.innerHTML = renderVTTCueString(cue);
  return { cue, content: template.content };
}
function renderVTTCueString(cue, currentTime = 0) {
  return renderVTTTokensString(tokenizeVTTCue(cue), currentTime);
}
function renderVTTTokensString(tokens, currentTime = 0) {
  let attrs, result = "";
  for (const token of tokens) {
    if (token.type === "text") {
      result += token.data;
    } else {
      const isTimestamp = token.type === "timestamp";
      attrs = {};
      attrs.class = token.class;
      attrs.title = token.type === "v" && token.voice;
      attrs.lang = token.type === "lang" && token.lang;
      attrs["data-part"] = token.type === "v" && "voice";
      if (isTimestamp) {
        attrs["data-part"] = "timed";
        attrs["data-time"] = token.time;
        attrs["data-future"] = token.time > currentTime;
        attrs["data-past"] = token.time < currentTime;
      }
      attrs.style = `${token.color ? `color: ${token.color};` : ""}${token.bgColor ? `background-color: ${token.bgColor};` : ""}`;
      const attributes = Object.entries(attrs).filter((v) => v[1]).map((v) => `${v[0]}="${v[1] === true ? "" : v[1]}"`).join(" ");
      result += `<${token.tagName}${attributes ? " " + attributes : ""}>${renderVTTTokensString(
        token.children
      )}</${token.tagName}>`;
    }
  }
  return result;
}
function updateTimedVTTCueNodes(root, currentTime) {
  if (IS_SERVER)
    return;
  for (const el of root.querySelectorAll('[data-part="timed"]')) {
    const time = Number(el.getAttribute("data-time"));
    if (Number.isNaN(time))
      continue;
    if (time > currentTime)
      setDataAttr(el, "future");
    else
      el.removeAttribute("data-future");
    if (time < currentTime)
      setDataAttr(el, "past");
    else
      el.removeAttribute("data-past");
  }
}

function debounce(fn, delay) {
  let timeout = null, args;
  function run() {
    clear();
    fn(...args);
    args = void 0;
  }
  function clear() {
    clearTimeout(timeout);
    timeout = null;
  }
  function debounce2() {
    args = [].slice.call(arguments);
    clear();
    timeout = setTimeout(run, delay);
  }
  return debounce2;
}

const STARTING_BOX = Symbol(0);
function createBox(box) {
  if (box instanceof HTMLElement) {
    return {
      top: box.offsetTop,
      width: box.clientWidth,
      height: box.clientHeight,
      left: box.offsetLeft,
      right: box.offsetLeft + box.clientWidth,
      bottom: box.offsetTop + box.clientHeight
    };
  }
  return { ...box };
}
function moveBox(box, axis, delta) {
  switch (axis) {
    case "+x":
      box.left += delta;
      box.right += delta;
      break;
    case "-x":
      box.left -= delta;
      box.right -= delta;
      break;
    case "+y":
      box.top += delta;
      box.bottom += delta;
      break;
    case "-y":
      box.top -= delta;
      box.bottom -= delta;
      break;
  }
}
function isBoxCollision(a, b) {
  return a.left <= b.right && a.right >= b.left && a.top <= b.bottom && a.bottom >= b.top;
}
function isAnyBoxCollision(box, boxes) {
  for (let i = 0; i < boxes.length; i++)
    if (isBoxCollision(box, boxes[i]))
      return boxes[i];
  return null;
}
function isWithinBox(container, box) {
  return box.top >= 0 && box.bottom <= container.height && box.left >= 0 && box.right <= container.width;
}
function isBoxOutOfBounds(container, box, axis) {
  switch (axis) {
    case "+x":
      return box.left < 0;
    case "-x":
      return box.right > container.width;
    case "+y":
      return box.top < 0;
    case "-y":
      return box.bottom > container.height;
  }
}
function calcBoxIntersectPercentage(container, box) {
  const x = Math.max(0, Math.min(container.width, box.right) - Math.max(0, box.left)), y = Math.max(0, Math.min(container.height, box.bottom) - Math.max(0, box.top)), intersectArea = x * y;
  return intersectArea / (container.height * container.width);
}
function createCSSBox(container, box) {
  return {
    top: box.top / container.height,
    left: box.left / container.width,
    right: (container.width - box.right) / container.width,
    bottom: (container.height - box.bottom) / container.height
  };
}
function resolveRelativeBox(container, box) {
  box.top = box.top * container.height;
  box.left = box.left * container.width;
  box.right = container.width - box.right * container.width;
  box.bottom = container.height - box.bottom * container.height;
  return box;
}
const BOX_SIDES = ["top", "left", "right", "bottom"];
function setBoxCSSVars(el, container, box, prefix) {
  const cssBox = createCSSBox(container, box);
  for (const side of BOX_SIDES) {
    setCSSVar(el, `${prefix}-${side}`, cssBox[side] * 100 + "%");
  }
}
function avoidBoxCollisions(container, box, boxes, axis) {
  let percentage = 1, positionedBox, startBox = { ...box };
  for (let i = 0; i < axis.length; i++) {
    while (isBoxOutOfBounds(container, box, axis[i]) || isWithinBox(container, box) && isAnyBoxCollision(box, boxes)) {
      moveBox(box, axis[i], 1);
    }
    if (isWithinBox(container, box))
      return box;
    const intersection = calcBoxIntersectPercentage(container, box);
    if (percentage > intersection) {
      positionedBox = { ...box };
      percentage = intersection;
    }
    box = { ...startBox };
  }
  return positionedBox || startBox;
}

const POSITION_OVERRIDE = Symbol(0);
function positionCue(container, cue, displayEl, boxes) {
  let cueEl = displayEl.firstElementChild, line = computeCueLine(cue), displayBox, axis = [];
  if (!displayEl[STARTING_BOX]) {
    displayEl[STARTING_BOX] = createStartingBox(container, displayEl);
  }
  displayBox = resolveRelativeBox(container, { ...displayEl[STARTING_BOX] });
  if (displayEl[POSITION_OVERRIDE]) {
    axis = [displayEl[POSITION_OVERRIDE] === "top" ? "+y" : "-y", "+x", "-x"];
  } else if (cue.snapToLines) {
    let size;
    switch (cue.vertical) {
      case "":
        axis = ["+y", "-y"];
        size = "height";
        break;
      case "rl":
        axis = ["+x", "-x"];
        size = "width";
        break;
      case "lr":
        axis = ["-x", "+x"];
        size = "width";
        break;
    }
    let step = getLineHeight(cueEl), position = step * Math.round(line), maxPosition = container[size] + step, initialAxis = axis[0];
    if (Math.abs(position) > maxPosition) {
      position = position < 0 ? -1 : 1;
      position *= Math.ceil(maxPosition / step) * step;
    }
    if (line < 0) {
      position += cue.vertical === "" ? container.height : container.width;
      axis = axis.reverse();
    }
    moveBox(displayBox, initialAxis, position);
  } else {
    const isHorizontal = cue.vertical === "", posAxis = isHorizontal ? "+y" : "+x", size = isHorizontal ? displayBox.height : displayBox.width;
    moveBox(
      displayBox,
      posAxis,
      (isHorizontal ? container.height : container.width) * line / 100
    );
    moveBox(
      displayBox,
      posAxis,
      cue.lineAlign === "center" ? size / 2 : cue.lineAlign === "end" ? size : 0
    );
    axis = isHorizontal ? ["-y", "+y", "-x", "+x"] : ["-x", "+x", "-y", "+y"];
  }
  displayBox = avoidBoxCollisions(container, displayBox, boxes, axis);
  setBoxCSSVars(displayEl, container, displayBox, "cue");
  return displayBox;
}
function createStartingBox(container, cueEl) {
  const box = createBox(cueEl), pos = getStyledPositions(cueEl);
  cueEl[POSITION_OVERRIDE] = false;
  if (pos.top) {
    box.top = pos.top;
    box.bottom = pos.top + box.height;
    cueEl[POSITION_OVERRIDE] = "top";
  }
  if (pos.bottom) {
    const bottom = container.height - pos.bottom;
    box.top = bottom - box.height;
    box.bottom = bottom;
    cueEl[POSITION_OVERRIDE] = "bottom";
  }
  if (pos.left)
    box.left = pos.left;
  if (pos.right)
    box.right = container.width - pos.right;
  return createCSSBox(container, box);
}
function getStyledPositions(el) {
  const positions = {};
  for (const side of BOX_SIDES) {
    positions[side] = parseFloat(el.style.getPropertyValue(`--cue-${side}`));
  }
  return positions;
}
function computeCueLine(cue) {
  if (cue.line === "auto") {
    if (!cue.snapToLines) {
      return 100;
    } else {
      return -1;
    }
  }
  return cue.line;
}
function computeCuePosition(cue) {
  if (cue.position === "auto") {
    switch (cue.align) {
      case "start":
      case "left":
        return 0;
      case "right":
      case "end":
        return 100;
      default:
        return 50;
    }
  }
  return cue.position;
}
function computeCuePositionAlignment(cue, dir) {
  if (cue.positionAlign === "auto") {
    switch (cue.align) {
      case "start":
        return dir === "ltr" ? "line-left" : "line-right";
      case "end":
        return dir === "ltr" ? "line-right" : "line-left";
      case "center":
        return "center";
      default:
        return `line-${cue.align}`;
    }
  }
  return cue.positionAlign;
}

const REGION_AXIS = ["-y", "+y", "-x", "+x"];
function positionRegion(container, region, regionEl, boxes) {
  let cues = Array.from(regionEl.querySelectorAll('[data-part="cue-display"]')), height = 0, limit = Math.max(0, cues.length - region.lines);
  for (let i = cues.length - 1; i >= limit; i--) {
    height += cues[i].offsetHeight;
  }
  setCSSVar(regionEl, "region-height", height + "px");
  if (!regionEl[STARTING_BOX]) {
    regionEl[STARTING_BOX] = createCSSBox(container, createBox(regionEl));
  }
  let box = { ...regionEl[STARTING_BOX] };
  box = resolveRelativeBox(container, box);
  box.width = regionEl.clientWidth;
  box.height = height;
  box.right = box.left + box.width;
  box.bottom = box.top + height;
  box = avoidBoxCollisions(container, box, boxes, REGION_AXIS);
  setBoxCSSVars(regionEl, container, box, "region");
  return box;
}

class CaptionsRenderer {
  overlay;
  z;
  A = 0;
  C = "ltr";
  B = [];
  D = false;
  E;
  h = /* @__PURE__ */ new Map();
  j = /* @__PURE__ */ new Map();
  /* Text direction. */
  get dir() {
    return this.C;
  }
  set dir(dir) {
    this.C = dir;
    setDataAttr(this.overlay, "dir", dir);
  }
  get currentTime() {
    return this.A;
  }
  set currentTime(time) {
    this.A = time;
    this.update();
  }
  constructor(overlay, init) {
    this.overlay = overlay;
    this.dir = init?.dir ?? "ltr";
    overlay.setAttribute("translate", "yes");
    overlay.setAttribute("aria-live", "off");
    overlay.setAttribute("aria-atomic", "true");
    setPartAttr(overlay, "captions");
    this.G();
    this.E = new ResizeObserver(this.I.bind(this));
    this.E.observe(overlay);
  }
  changeTrack({ regions, cues }) {
    this.reset();
    this.J(regions);
    for (const cue of cues)
      this.j.set(cue, null);
    this.update();
  }
  addCue(cue) {
    this.j.set(cue, null);
    this.update();
  }
  removeCue(cue) {
    this.j.delete(cue);
    this.update();
  }
  update(forceUpdate = false) {
    this.H(forceUpdate);
  }
  reset() {
    this.j.clear();
    this.h.clear();
    this.B = [];
    this.overlay.textContent = "";
  }
  destroy() {
    this.reset();
    this.E.disconnect();
  }
  I() {
    this.D = true;
    this.K();
  }
  K = debounce(() => {
    this.D = false;
    this.G();
    for (const el of this.h.values()) {
      el[STARTING_BOX] = null;
    }
    for (const el of this.j.values()) {
      if (el)
        el[STARTING_BOX] = null;
    }
    this.H(true);
  }, 50);
  G() {
    this.z = createBox(this.overlay);
    setCSSVar(this.overlay, "overlay-width", this.z.width + "px");
    setCSSVar(this.overlay, "overlay-height", this.z.height + "px");
  }
  H(forceUpdate = false) {
    if (!this.j.size || this.D)
      return;
    let cue, activeCues = [...this.j.keys()].filter((cue2) => this.A >= cue2.startTime && this.A <= cue2.endTime).sort(
      (cueA, cueB) => cueA.startTime !== cueB.startTime ? cueA.startTime - cueB.startTime : cueA.endTime - cueB.endTime
    ), activeRegions = activeCues.map((cue2) => cue2.region);
    for (let i = 0; i < this.B.length; i++) {
      cue = this.B[i];
      if (activeCues[i] === cue)
        continue;
      if (cue.region && !activeRegions.includes(cue.region)) {
        const regionEl = this.h.get(cue.region.id);
        if (regionEl) {
          regionEl.removeAttribute("data-active");
          forceUpdate = true;
        }
      }
      const cueEl = this.j.get(cue);
      if (cueEl) {
        cueEl.remove();
        forceUpdate = true;
      }
    }
    for (let i = 0; i < activeCues.length; i++) {
      cue = activeCues[i];
      let cueEl = this.j.get(cue);
      if (!cueEl)
        this.j.set(cue, cueEl = this.L(cue));
      const regionEl = this.F(cue) && this.h.get(cue.region.id);
      if (regionEl && !regionEl.hasAttribute("data-active")) {
        requestAnimationFrame(() => setDataAttr(regionEl, "active"));
        forceUpdate = true;
      }
      if (!cueEl.isConnected) {
        (regionEl || this.overlay).append(cueEl);
        forceUpdate = true;
      }
    }
    if (forceUpdate) {
      const boxes = [], seen = /* @__PURE__ */ new Set();
      for (let i = activeCues.length - 1; i >= 0; i--) {
        cue = activeCues[i];
        if (seen.has(cue.region || cue))
          continue;
        const isRegion = this.F(cue), el = isRegion ? this.h.get(cue.region.id) : this.j.get(cue);
        if (isRegion) {
          boxes.push(positionRegion(this.z, cue.region, el, boxes));
        } else {
          boxes.push(positionCue(this.z, cue, el, boxes));
        }
        seen.add(isRegion ? cue.region : cue);
      }
    }
    updateTimedVTTCueNodes(this.overlay, this.A);
    this.B = activeCues;
  }
  J(regions) {
    if (!regions)
      return;
    for (const region of regions) {
      const el = this.M(region);
      this.h.set(region.id, el);
      this.overlay.append(el);
    }
  }
  M(region) {
    const el = document.createElement("div");
    setPartAttr(el, "region");
    setDataAttr(el, "id", region.id);
    setDataAttr(el, "scroll", region.scroll);
    setCSSVar(el, "region-width", region.width + "%");
    setCSSVar(el, "region-anchor-x", region.regionAnchorX);
    setCSSVar(el, "region-anchor-y", region.regionAnchorY);
    setCSSVar(el, "region-viewport-anchor-x", region.viewportAnchorX);
    setCSSVar(el, "region-viewport-anchor-y", region.viewportAnchorY);
    setCSSVar(el, "region-lines", region.lines);
    return el;
  }
  L(cue) {
    const display = document.createElement("div"), position = computeCuePosition(cue), positionAlignment = computeCuePositionAlignment(cue, this.C);
    setPartAttr(display, "cue-display");
    if (cue.vertical !== "")
      setDataAttr(display, "vertical");
    setCSSVar(display, "cue-text-align", cue.align);
    if (cue.style) {
      for (const prop of Object.keys(cue.style)) {
        display.style.setProperty(prop, cue.style[prop]);
      }
    }
    if (!this.F(cue)) {
      setCSSVar(
        display,
        "cue-writing-mode",
        cue.vertical === "" ? "horizontal-tb" : cue.vertical === "lr" ? "vertical-lr" : "vertical-rl"
      );
      if (!cue.style?.["--cue-width"]) {
        let maxSize = position;
        if (positionAlignment === "line-left") {
          maxSize = 100 - position;
        } else if (positionAlignment === "center" && position <= 50) {
          maxSize = position * 2;
        } else if (positionAlignment === "center" && position > 50) {
          maxSize = (100 - position) * 2;
        }
        const size = cue.size < maxSize ? cue.size : maxSize;
        if (cue.vertical === "")
          setCSSVar(display, "cue-width", size + "%");
        else
          setCSSVar(display, "cue-height", size + "%");
      }
    } else {
      setCSSVar(
        display,
        "cue-offset",
        `${position - (positionAlignment === "line-right" ? 100 : positionAlignment === "center" ? 50 : 0)}%`
      );
    }
    const el = document.createElement("div");
    setPartAttr(el, "cue");
    if (cue.id)
      setDataAttr(el, "id", cue.id);
    el.innerHTML = renderVTTCueString(cue);
    display.append(el);
    return display;
  }
  F(cue) {
    return cue.region && cue.size === 100 && cue.vertical === "" && cue.line === "auto";
  }
}

var prod = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CaptionsRenderer: CaptionsRenderer,
    ParseError: ParseError,
    ParseErrorCode: ParseErrorCode,
    TextCue: TextCue,
    VTTCue: VTTCue,
    VTTRegion: VTTRegion,
    createVTTCueTemplate: createVTTCueTemplate,
    parseByteStream: parseByteStream,
    parseResponse: parseResponse,
    parseText: parseText,
    parseTextStream: parseTextStream,
    parseVTTTimestamp: parseVTTTimestamp,
    renderVTTCueString: renderVTTCueString,
    renderVTTTokensString: renderVTTTokensString,
    tokenizeVTTCue: tokenizeVTTCue,
    updateTimedVTTCueNodes: updateTimedVTTCueNodes
});

class RAFLoop {
  constructor(_callback) {
    this.sa = _callback;
  }
  ia() {
    if (!isUndefined(this.de))
      return;
    this.yh();
  }
  ja() {
    if (isNumber(this.de))
      window.cancelAnimationFrame(this.de);
    this.de = void 0;
  }
  yh() {
    this.de = window.requestAnimationFrame(() => {
      if (isUndefined(this.de))
        return;
      this.sa();
      this.yh();
    });
  }
}

class HTMLMediaEvents {
  constructor(_provider, _ctx) {
    this.va = useDisposalBin();
    this.Na = false;
    this.Pa = false;
    this.Qa = false;
    this.Oa = new RAFLoop(this.Va.bind(this));
    this.Ua = void 0;
    this.qb = void 0;
    this.Ra = _provider;
    this.U = _ctx;
    this.Wa();
    effect(this.Xa.bind(this));
    onDispose(this.Aa.bind(this));
  }
  get g() {
    return this.Ra.media;
  }
  get Ka() {
    return this.U.delegate;
  }
  Aa() {
    this.Pa = false;
    this.Qa = false;
    this.Oa.ja();
    this.va.empty();
  }
  /**
   * The `timeupdate` event fires surprisingly infrequently during playback, meaning your progress
   * bar (or whatever else is synced to the currentTime) moves in a choppy fashion. This helps
   * resolve that by retrieving time updates in a request animation frame loop.
   */
  Va() {
    const newTime = this.Ra.currentTime;
    if (this.U.$state.currentTime() !== newTime)
      this.Ma(newTime);
  }
  Wa() {
    this.La("loadstart", this.pa);
    this.La("abort", this.Ta);
    this.La("emptied", this.Ya);
    this.La("error", this.X);
  }
  Za() {
    if (this.Pa)
      return;
    this.va.add(
      this.La("loadeddata", this._a),
      this.La("loadedmetadata", this.$a),
      this.La("canplay", this.ab),
      this.La("canplaythrough", this.bb),
      this.La("durationchange", this.cb),
      this.La("play", this.db),
      this.La("progress", this.eb),
      this.La("stalled", this.fb),
      this.La("suspend", this.gb)
    );
    this.Pa = true;
  }
  hb() {
    if (this.Qa)
      return;
    this.va.add(
      this.La("pause", this.ib),
      this.La("playing", this.jb),
      this.La("ratechange", this.kb),
      this.La("seeked", this.lb),
      this.La("seeking", this.mb),
      this.La("ended", this.nb),
      this.La("volumechange", this.ob),
      this.La("waiting", this.pb)
    );
    this.Qa = true;
  }
  La(eventType, handler) {
    return listenEvent(
      this.g,
      eventType,
      handler.bind(this)
    );
  }
  rb(event2) {
    return;
  }
  Ma(time, trigger) {
    this.Ka.f("time-update", {
      // Avoid errors where `currentTime` can have higher precision.
      detail: {
        currentTime: Math.min(time, this.U.$state.seekableEnd()),
        played: this.g.played
      },
      trigger
    });
  }
  pa(event2) {
    if (this.g.networkState === 3) {
      this.Ta(event2);
      return;
    }
    this.Za();
    this.Ka.f("load-start", { trigger: event2 });
  }
  Ta(event2) {
    this.Ka.f("abort", { trigger: event2 });
  }
  Ya() {
    this.Ka.f("emptied", { trigger: event });
  }
  _a(event2) {
    this.Ka.f("loaded-data", { trigger: event2 });
  }
  $a(event2) {
    this.hb();
    this.Ka.f("volume-change", {
      detail: {
        volume: this.g.volume,
        muted: this.g.muted
      }
    });
    this.Ka.f("loaded-metadata", { trigger: event2 });
    if (IS_SAFARI && isHLSSrc(this.U.$state.source())) {
      this.Ka.sb(this.Sa(), event2);
    }
  }
  Sa() {
    return {
      duration: this.g.duration,
      buffered: this.g.buffered,
      seekable: this.g.seekable
    };
  }
  db(event2) {
    if (!this.U.$state.canPlay)
      return;
    this.Ka.f("play", { trigger: event2 });
  }
  ib(event2) {
    if (this.g.readyState === 1 && !this.Na)
      return;
    this.Na = false;
    this.Oa.ja();
    this.Ka.f("pause", { trigger: event2 });
  }
  ab(event2) {
    this.Ka.sb(this.Sa(), event2);
  }
  bb(event2) {
    if (this.U.$state.started())
      return;
    this.Ka.f("can-play-through", {
      trigger: event2,
      detail: this.Sa()
    });
  }
  jb(event2) {
    this.Na = false;
    this.Ka.f("playing", { trigger: event2 });
    this.Oa.ia();
  }
  fb(event2) {
    this.Ka.f("stalled", { trigger: event2 });
    if (this.g.readyState < 3) {
      this.Na = true;
      this.Ka.f("waiting", { trigger: event2 });
    }
  }
  pb(event2) {
    if (this.g.readyState < 3) {
      this.Na = true;
      this.Ka.f("waiting", { trigger: event2 });
    }
  }
  nb(event2) {
    this.Oa.ja();
    this.Ma(this.g.duration, event2);
    this.Ka.f("end", { trigger: event2 });
    if (this.U.$state.loop()) {
      this.tb();
    } else {
      this.Ka.f("ended", { trigger: event2 });
    }
  }
  Xa() {
    if (this.U.$state.paused()) {
      listenEvent(this.g, "timeupdate", this.ub.bind(this));
    }
  }
  ub(event2) {
    this.Ma(this.g.currentTime, event2);
  }
  cb(event2) {
    if (this.U.$state.ended()) {
      this.Ma(this.g.duration, event2);
    }
    this.Ka.f("duration-change", {
      detail: this.g.duration,
      trigger: event2
    });
  }
  ob(event2) {
    this.Ka.f("volume-change", {
      detail: {
        volume: this.g.volume,
        muted: this.g.muted
      },
      trigger: event2
    });
  }
  lb(event2) {
    this.Ma(this.g.currentTime, event2);
    this.Ka.f("seeked", {
      detail: this.g.currentTime,
      trigger: event2
    });
    if (Math.trunc(this.g.currentTime) === Math.trunc(this.g.duration) && getNumberOfDecimalPlaces(this.g.duration) > getNumberOfDecimalPlaces(this.g.currentTime)) {
      this.Ma(this.g.duration, event2);
      if (!this.g.ended) {
        this.U.player.dispatch(
          new DOMEvent("media-play-request", {
            trigger: event2
          })
        );
      }
    }
  }
  mb(event2) {
    this.Ka.f("seeking", {
      detail: this.g.currentTime,
      trigger: event2
    });
  }
  eb(event2) {
    this.Ka.f("progress", {
      detail: {
        buffered: this.g.buffered,
        seekable: this.g.seekable
      },
      trigger: event2
    });
  }
  tb() {
    const hasCustomControls = isNil(this.g.controls);
    if (hasCustomControls)
      this.g.controls = false;
    this.U.player.dispatch(new DOMEvent("media-loop-request"));
  }
  gb(event2) {
    this.Ka.f("suspend", { trigger: event2 });
  }
  kb(event2) {
    this.Ka.f("rate-change", {
      detail: this.g.playbackRate,
      trigger: event2
    });
  }
  X(event2) {
    const error = this.g.error;
    if (!error)
      return;
    this.Ka.f("error", {
      detail: {
        message: error.message,
        code: error.code,
        mediaError: error
      },
      trigger: event2
    });
  }
}

class NativeAudioTracks {
  constructor(_provider, _context) {
    this.Ra = _provider;
    this.ya = _context;
    this.vb.onaddtrack = this.xb.bind(this);
    this.vb.onremovetrack = this.yb.bind(this);
    this.vb.onchange = this.zb.bind(this);
    listenEvent(this.ya.audioTracks, "change", this.Ab.bind(this));
  }
  get vb() {
    return this.Ra.media.audioTracks;
  }
  xb(event) {
    const _track = event.track;
    if (_track.label === "")
      return;
    const audioTrack = {
      id: _track.id + "",
      label: _track.label,
      language: _track.language,
      kind: _track.kind,
      selected: false
    };
    this.ya.audioTracks[ListSymbol.F](audioTrack, event);
    if (_track.enabled)
      audioTrack.selected = true;
  }
  yb(event) {
    const track = this.ya.audioTracks.getById(event.track.id);
    if (track)
      this.ya.audioTracks[ListSymbol.D](track, event);
  }
  zb(event) {
    let enabledTrack = this.wb();
    if (!enabledTrack)
      return;
    const track = this.ya.audioTracks.getById(enabledTrack.id);
    if (track)
      this.ya.audioTracks[ListSymbol.ha](track, true, event);
  }
  wb() {
    return Array.from(this.vb).find((track) => track.enabled);
  }
  Ab(event) {
    const { current } = event.detail;
    if (!current)
      return;
    const track = this.vb.getTrackById(current.id);
    if (track) {
      const prev = this.wb();
      if (prev)
        prev.enabled = false;
      track.enabled = true;
    }
  }
}

class HTMLMediaProvider {
  constructor(_media) {
    this.scope = createScope();
    this.h = null;
    this.g = _media;
  }
  setup(context) {
    new HTMLMediaEvents(this, context);
    if ("audioTracks" in this.media)
      new NativeAudioTracks(this, context);
    onDispose(() => {
      this.g.setAttribute("src", "");
      this.g.load();
    });
  }
  get type() {
    return "";
  }
  get media() {
    return this.g;
  }
  get currentSrc() {
    return this.h;
  }
  get paused() {
    return this.g.paused;
  }
  get muted() {
    return this.g.muted;
  }
  set muted(muted) {
    this.g.muted = muted;
  }
  get volume() {
    return this.g.volume;
  }
  set volume(volume) {
    this.g.volume = volume;
  }
  get currentTime() {
    return this.g.currentTime;
  }
  set currentTime(time) {
    this.g.currentTime = time;
  }
  get playsinline() {
    return this.g.hasAttribute("playsinline");
  }
  set playsinline(playsinline) {
    setAttribute(this.g, "playsinline", playsinline);
  }
  get playbackRate() {
    return this.g.playbackRate;
  }
  set playbackRate(rate) {
    this.g.playbackRate = rate;
  }
  async play() {
    return this.g.play();
  }
  async pause() {
    return this.g.pause();
  }
  async loadSource({ src, type }, preload) {
    this.g.preload = preload || "";
    if (isMediaStream(src)) {
      this.g.srcObject = src;
    } else {
      this.g.srcObject = null;
      this.g.src = isString(src) ? src : window.URL.createObjectURL(src);
    }
    this.g.load();
    this.h = { src, type };
  }
}

class AudioProvider extends HTMLMediaProvider {
  constructor() {
    super(...arguments);
    this.$$PROVIDER_TYPE = "AUDIO";
  }
  get type() {
    return "audio";
  }
  setup(context) {
    super.setup(context);
    if (this.type === "audio")
      context.delegate.f("provider-setup", { detail: this });
  }
  /**
   * The native HTML `<audio>` element.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement}
   */
  get audio() {
    return this.g;
  }
}

var vidstackAudio = /*#__PURE__*/Object.freeze({
    __proto__: null,
    AudioProvider: AudioProvider
});

class NativeHLSTextTracks {
  constructor(_video, _context) {
    this.v = _video;
    this.ya = _context;
    _video.textTracks.onaddtrack = this.za.bind(this);
    onDispose(this.Aa.bind(this));
  }
  za(event) {
    const nativeTrack = event.track;
    if (!nativeTrack || findTextTrackElement(this.v, nativeTrack))
      return;
    const track = new TextTrack({
      id: nativeTrack.id,
      kind: nativeTrack.kind,
      label: nativeTrack.label,
      language: nativeTrack.language,
      type: "vtt"
    });
    track[TextTrackSymbol.Ba] = { track: nativeTrack };
    track[TextTrackSymbol.ka] = 2;
    track[TextTrackSymbol.Ca] = true;
    let lastIndex = 0;
    const onCueChange = (event2) => {
      if (!nativeTrack.cues)
        return;
      for (let i = lastIndex; i < nativeTrack.cues.length; i++) {
        track.addCue(nativeTrack.cues[i], event2);
        lastIndex++;
      }
    };
    onCueChange(event);
    nativeTrack.oncuechange = onCueChange;
    this.ya.textTracks.add(track, event);
    track.setMode(nativeTrack.mode, event);
  }
  Aa() {
    this.v.textTracks.onaddtrack = null;
    for (const track of this.ya.textTracks) {
      const nativeTrack = track[TextTrackSymbol.Ba]?.track;
      if (nativeTrack?.oncuechange)
        nativeTrack.oncuechange = null;
    }
  }
}
function findTextTrackElement(video, track) {
  return Array.from(video.children).find((el) => el.track === track);
}

class VideoPictureInPicture {
  constructor(_video, _media) {
    this.Da = (active, event) => {
      this.g.delegate.f("picture-in-picture-change", {
        detail: active,
        trigger: event
      });
    };
    this.v = _video;
    this.g = _media;
    listenEvent(this.v, "enterpictureinpicture", this.Ea.bind(this));
    listenEvent(this.v, "leavepictureinpicture", this.Fa.bind(this));
  }
  get active() {
    return document.pictureInPictureElement === this.v;
  }
  get supported() {
    return canUsePictureInPicture(this.v);
  }
  async enter() {
    return this.v.requestPictureInPicture();
  }
  exit() {
    return document.exitPictureInPicture();
  }
  Ea(event) {
    this.Da(true, event);
  }
  Fa(event) {
    this.Da(false, event);
  }
}

class VideoPresentation {
  constructor(_video, _media) {
    this.Ga = "inline";
    this.v = _video;
    this.g = _media;
    listenEvent(this.v, "webkitpresentationmodechanged", this.la.bind(this));
  }
  get Ja() {
    return canUseVideoPresentation(this.v);
  }
  async Ia(mode) {
    if (this.Ga === mode)
      return;
    this.v.webkitSetPresentationMode(mode);
  }
  la() {
    const prevMode = this.Ga;
    this.Ga = this.v.webkitPresentationMode;
    this.g.player?.dispatch(
      new DOMEvent("video-presentation-change", {
        detail: this.Ga,
        trigger: event
      })
    );
    ["fullscreen", "picture-in-picture"].forEach((type) => {
      if (this.Ga === type || prevMode === type) {
        this.g.delegate.f(`${type}-change`, {
          detail: this.Ga === type,
          trigger: event
        });
      }
    });
  }
}
class FullscreenPresentationAdapter {
  constructor(_presentation) {
    this.Ha = _presentation;
  }
  get active() {
    return this.Ha.Ga === "fullscreen";
  }
  get supported() {
    return this.Ha.Ja;
  }
  async enter() {
    this.Ha.Ia("fullscreen");
  }
  async exit() {
    this.Ha.Ia("inline");
  }
}
class PIPPresentationAdapter {
  constructor(_presentation) {
    this.Ha = _presentation;
  }
  get active() {
    return this.Ha.Ga === "picture-in-picture";
  }
  get supported() {
    return this.Ha.Ja;
  }
  async enter() {
    this.Ha.Ia("picture-in-picture");
  }
  async exit() {
    this.Ha.Ia("inline");
  }
}

class VideoProvider extends HTMLMediaProvider {
  constructor(video, context) {
    super(video);
    this.$$PROVIDER_TYPE = "VIDEO";
    scoped(() => {
      if (canUseVideoPresentation(video)) {
        const presentation = new VideoPresentation(video, context);
        this.fullscreen = new FullscreenPresentationAdapter(presentation);
        this.pictureInPicture = new PIPPresentationAdapter(presentation);
      } else if (canUsePictureInPicture(video)) {
        this.pictureInPicture = new VideoPictureInPicture(video, context);
      }
    }, this.scope);
  }
  get type() {
    return "video";
  }
  setup(context) {
    super.setup(context);
    if (canPlayHLSNatively(this.video)) {
      new NativeHLSTextTracks(this.video, context);
    }
    context.textRenderers.j(this.video);
    onDispose(() => {
      context.textRenderers.j(null);
    });
    if (this.type === "video")
      context.delegate.f("provider-setup", { detail: this });
  }
  /**
   * The native HTML `<video>` element.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement}
   */
  get video() {
    return this.g;
  }
}

var vidstackVideo = /*#__PURE__*/Object.freeze({
    __proto__: null,
    VideoProvider: VideoProvider
});

const toDOMEventType = (type) => camelToKebabCase(type);
class HLSController {
  constructor(_video) {
    this.T = null;
    this.V = null;
    this.d = {};
    this.e = /* @__PURE__ */ new Set();
    this.v = _video;
  }
  get instance() {
    return this.T;
  }
  setup(ctor, context) {
    this.U = context;
    const isLive = peek(context.$state.streamType).includes("live"), isLiveLowLatency = peek(context.$state.streamType).includes("ll-");
    this.T = new ctor({
      lowLatencyMode: isLiveLowLatency,
      backBufferLength: isLiveLowLatency ? 4 : isLive ? 8 : void 0,
      renderTextTracksNatively: false,
      ...this.d
    });
    const dispatcher = this.W.bind(this);
    for (const event of Object.values(ctor.Events))
      this.T.on(event, dispatcher);
    this.T.on(ctor.Events.ERROR, this.X.bind(this));
    for (const callback of this.e)
      callback(this.T);
    context.player.dispatch(new DOMEvent("hls-instance", { detail: this.T }));
    this.T.attachMedia(this.v);
    this.T.on(ctor.Events.AUDIO_TRACK_SWITCHED, this.Y.bind(this));
    this.T.on(ctor.Events.LEVEL_SWITCHED, this.Z.bind(this));
    this.T.on(ctor.Events.LEVEL_LOADED, this._.bind(this));
    this.T.on(ctor.Events.NON_NATIVE_TEXT_TRACKS_FOUND, this.$.bind(this));
    this.T.on(ctor.Events.CUES_PARSED, this.aa.bind(this));
    context.qualities[QualitySymbol.ba] = this.ca.bind(this);
    listenEvent(context.qualities, "change", this.da.bind(this));
    listenEvent(context.audioTracks, "change", this.ea.bind(this));
    this.V = effect(this.fa.bind(this));
  }
  fa() {
    if (!this.U.$state.live())
      return;
    const raf = new RAFLoop(this.ga.bind(this));
    raf.ia();
    return raf.ja.bind(raf);
  }
  ga() {
    this.U.$state.liveSyncPosition.set(this.T?.liveSyncPosition ?? Infinity);
  }
  W(eventType, detail) {
    this.U.player?.dispatch(new DOMEvent(toDOMEventType(eventType), { detail }));
  }
  $(eventType, data) {
    const event = new DOMEvent(eventType, { detail: data });
    let currentTrack = -1;
    for (let i = 0; i < data.tracks.length; i++) {
      const nonNativeTrack = data.tracks[i], init = nonNativeTrack.subtitleTrack ?? nonNativeTrack.closedCaptions, track = new TextTrack({
        id: `hls-${nonNativeTrack.kind}${i}`,
        src: init?.url,
        label: nonNativeTrack.label,
        language: init?.lang,
        kind: nonNativeTrack.kind
      });
      track[TextTrackSymbol.ka] = 2;
      track[TextTrackSymbol.la] = () => {
        if (track.mode === "showing") {
          this.T.subtitleTrack = i;
          currentTrack = i;
        } else if (currentTrack === i) {
          this.T.subtitleTrack = -1;
          currentTrack = -1;
        }
      };
      if (nonNativeTrack.default)
        track.setMode("showing", event);
      this.U.textTracks.add(track, event);
    }
  }
  aa(eventType, data) {
    const track = this.U.textTracks.getById(`hls-${data.track}`);
    if (!track)
      return;
    const event = new DOMEvent(eventType, { detail: data });
    for (const cue of data.cues) {
      cue.positionAlign = "auto";
      track.addCue(cue, event);
    }
  }
  Y(eventType, data) {
    const track = this.U.audioTracks[data.id];
    if (track) {
      this.U.audioTracks[ListSymbol.ha](
        track,
        true,
        new DOMEvent(eventType, { detail: data })
      );
    }
  }
  Z(eventType, data) {
    const quality = this.U.qualities[data.level];
    if (quality) {
      this.U.qualities[ListSymbol.ha](
        quality,
        true,
        new DOMEvent(eventType, { detail: data })
      );
    }
  }
  _(eventType, data) {
    if (this.U.$state.canPlay())
      return;
    const { type, live, totalduration: duration, targetduration } = data.details;
    const event = new DOMEvent(eventType, { detail: data });
    this.U.delegate.f("stream-type-change", {
      detail: live ? type === "EVENT" && Number.isFinite(duration) && targetduration >= 10 ? "live:dvr" : "live" : "on-demand",
      trigger: event
    });
    this.U.delegate.f("duration-change", { detail: duration, trigger: event });
    const media = this.T.media;
    if (this.T.currentLevel === -1) {
      this.U.qualities[QualitySymbol.ma](true, event);
    }
    for (const track of this.T.audioTracks) {
      this.U.audioTracks[ListSymbol.F](
        {
          id: track.id + "",
          label: track.name,
          language: track.lang || "",
          kind: "main"
        },
        event
      );
    }
    for (const level of this.T.levels) {
      this.U.qualities[ListSymbol.F](
        {
          width: level.width,
          height: level.height,
          codec: level.codecSet,
          bitrate: level.bitrate
        },
        event
      );
    }
    media.dispatchEvent(new DOMEvent("canplay", { trigger: event }));
  }
  X(eventType, data) {
    if (data.fatal) {
      switch (data.type) {
        case "networkError":
          this.T?.startLoad();
          break;
        case "mediaError":
          this.T?.recoverMediaError();
          break;
        default:
          this.T?.destroy();
          this.T = null;
          break;
      }
    }
  }
  ca() {
    if (this.T)
      this.T.currentLevel = -1;
  }
  da() {
    const { qualities } = this.U;
    if (!this.T || qualities.auto)
      return;
    this.T[qualities.switch + "Level"] = qualities.selectedIndex;
    if (IS_CHROME)
      this.v.currentTime = this.v.currentTime;
  }
  ea() {
    const { audioTracks } = this.U;
    if (this.T && this.T.audioTrack !== audioTracks.selectedIndex) {
      this.T.audioTrack = audioTracks.selectedIndex;
    }
  }
  i() {
    if (this.U)
      this.U.qualities[QualitySymbol.ba] = void 0;
    this.T?.destroy();
    this.T = null;
    this.V?.();
    this.V = null;
  }
}

class HLSLibLoader {
  constructor(_lib, _ctx, _callback) {
    this.na = _lib;
    this.U = _ctx;
    this.sa = _callback;
    this.oa();
  }
  async oa() {
    const callbacks = {
      onLoadStart: this.pa.bind(this),
      onLoaded: this.qa.bind(this),
      onLoadError: this.ra.bind(this)
    };
    let ctor = await loadHLSScript(this.na, callbacks);
    if (isUndefined(ctor) && !isString(this.na))
      ctor = await importHLS(this.na, callbacks);
    if (!ctor)
      return null;
    if (!ctor.isSupported()) {
      const message = "[vidstack]: `hls.js` is not supported in this environment";
      this.U.player.dispatch(new DOMEvent("hls-unsupported"));
      this.U.delegate.f("error", { detail: { message, code: 4 } });
      return null;
    }
    return ctor;
  }
  pa() {
    this.U.player.dispatch(new DOMEvent("hls-lib-load-start"));
  }
  qa(ctor) {
    this.U.player.dispatch(
      new DOMEvent("hls-lib-loaded", {
        detail: ctor
      })
    );
    this.sa(ctor);
  }
  ra(e) {
    const error = coerceToError(e);
    this.U.player.dispatch(
      new DOMEvent("hls-lib-load-error", {
        detail: error
      })
    );
    this.U.delegate.f("error", {
      detail: { message: error.message, code: 4 }
    });
  }
}
async function importHLS(loader, callbacks = {}) {
  if (isUndefined(loader))
    return void 0;
  callbacks.onLoadStart?.();
  if (loader.prototype && loader.prototype !== Function) {
    callbacks.onLoaded?.(loader);
    return loader;
  }
  try {
    const ctor = (await loader())?.default;
    if (ctor && !!ctor.isSupported) {
      callbacks.onLoaded?.(ctor);
    } else {
      throw Error(
        false ? "[vidstack] failed importing `hls.js`. Dynamic import returned invalid constructor." : ""
      );
    }
    return ctor;
  } catch (err) {
    callbacks.onLoadError?.(err);
  }
  return void 0;
}
async function loadHLSScript(src, callbacks = {}) {
  if (!isString(src))
    return void 0;
  callbacks.onLoadStart?.();
  try {
    await loadScript(src);
    if (!isFunction(window.Hls)) {
      throw Error(
        false ? "[vidstack] failed loading `hls.js`. Could not find a valid `Hls` constructor on window" : ""
      );
    }
    const ctor = window.Hls;
    callbacks.onLoaded?.(ctor);
    return ctor;
  } catch (err) {
    callbacks.onLoadError?.(err);
  }
  return void 0;
}

const JS_DELIVR_CDN = "https://cdn.jsdelivr.net";
class HLSProvider extends VideoProvider {
  constructor() {
    super(...arguments);
    this.$$PROVIDER_TYPE = "HLS";
    this.c = null;
    this.a = new HLSController(this.video);
    this.b = `${JS_DELIVR_CDN}/npm/hls.js@^1.0.0/dist/hls${".min.js"}`;
  }
  /**
   * The `hls.js` constructor.
   */
  get ctor() {
    return this.c;
  }
  /**
   * The current `hls.js` instance.
   */
  get instance() {
    return this.a.instance;
  }
  static {
    /**
     * Whether `hls.js` is supported in this environment.
     */
    this.supported = isHLSSupported();
  }
  get type() {
    return "hls";
  }
  get canLiveSync() {
    return true;
  }
  /**
   * The `hls.js` configuration object.
   *
   * @see {@link https://github.com/video-dev/hls.js/blob/master/docs/API.md#fine-tuning}
   */
  get config() {
    return this.a.d;
  }
  set config(config) {
    this.a.d = config;
  }
  /**
   * The `hls.js` constructor (supports dynamic imports) or a URL of where it can be found.
   *
   * @defaultValue `https://cdn.jsdelivr.net/npm/hls.js@^1.0.0/dist/hls.min.js`
   */
  get library() {
    return this.b;
  }
  set library(library) {
    this.b = library;
  }
  preconnect() {
    if (!isString(this.b))
      return;
    preconnect(this.b);
  }
  setup(context) {
    super.setup(context);
    new HLSLibLoader(this.b, context, (ctor) => {
      this.c = ctor;
      this.a.setup(ctor, context);
      context.delegate.f("provider-setup", { detail: this });
      const src = peek(context.$state.source);
      if (src)
        this.loadSource(src);
    });
  }
  async loadSource(src, preload) {
    if (!isString(src.src))
      return;
    this.g.preload = preload || "";
    this.a.instance?.loadSource(src.src);
    this.h = src;
  }
  /**
   * The given callback is invoked when a new `hls.js` instance is created and right before it's
   * attached to media.
   */
  onInstance(callback) {
    const instance = this.a.instance;
    if (instance)
      callback(instance);
    this.a.e.add(callback);
    return () => this.a.e.delete(callback);
  }
  destroy() {
    this.a.i();
  }
}

var vidstackHls = /*#__PURE__*/Object.freeze({
    __proto__: null,
    HLSProvider: HLSProvider
});

var Icon$10 = `<path d="M13.0908 14.3334C12.972 14.3334 12.9125 14.1898 12.9965 14.1058L17.7021 9.40022C17.9625 9.13987 17.9625 8.71776 17.7021 8.45741L16.2879 7.04319C16.0275 6.78284 15.6054 6.78284 15.3451 7.04319L6.8598 15.5285C6.59945 15.7888 6.59945 16.2109 6.8598 16.4713L8.27401 17.8855L8.27536 17.8868L15.3453 24.9568C15.6057 25.2172 16.0278 25.2172 16.2881 24.9568L17.7024 23.5426C17.9627 23.2822 17.9627 22.8601 17.7024 22.5998L12.9969 17.8944C12.9129 17.8104 12.9724 17.6668 13.0912 17.6668L26 17.6668C26.3682 17.6668 26.6667 17.3683 26.6667 17.0001V15.0001C26.6667 14.6319 26.3682 14.3334 26 14.3334L13.0908 14.3334Z" fill="currentColor"/>`;

var Icon$15 = `<path d="M16.6927 25.3346C16.3245 25.3346 16.026 25.0361 16.026 24.6679L16.026 7.3346C16.026 6.96641 16.3245 6.66794 16.6927 6.66794L18.6927 6.66794C19.0609 6.66794 19.3594 6.96642 19.3594 7.3346L19.3594 24.6679C19.3594 25.0361 19.0609 25.3346 18.6927 25.3346H16.6927Z" fill="currentColor"/> <path d="M24.026 25.3346C23.6578 25.3346 23.3594 25.0361 23.3594 24.6679L23.3594 7.3346C23.3594 6.96641 23.6578 6.66794 24.026 6.66794L26.026 6.66794C26.3942 6.66794 26.6927 6.96642 26.6927 7.3346V24.6679C26.6927 25.0361 26.3942 25.3346 26.026 25.3346H24.026Z" fill="currentColor"/> <path d="M5.48113 23.9407C5.38584 24.2963 5.59689 24.6619 5.95254 24.7572L7.88439 25.2748C8.24003 25.3701 8.60559 25.159 8.70089 24.8034L13.1871 8.06067C13.2824 7.70503 13.0713 7.33947 12.7157 7.24417L10.7838 6.72654C10.4282 6.63124 10.0626 6.8423 9.96733 7.19794L5.48113 23.9407Z" fill="currentColor"/>`;

var Icon$20 = `<path d="M17.947 16.095C17.999 16.043 17.999 15.9585 17.947 15.9065L11.6295 9.58899C11.3691 9.32864 11.3691 8.90653 11.6295 8.64618L13.2323 7.04341C13.4926 6.78306 13.9147 6.78306 14.1751 7.04341L21.0289 13.8973C21.0392 13.9064 21.0493 13.9158 21.0591 13.9257L22.6619 15.5285C22.9223 15.7888 22.9223 16.2109 22.6619 16.4713L14.1766 24.9565C13.9163 25.2169 13.4942 25.2169 13.2338 24.9565L11.631 23.3538C11.3707 23.0934 11.3707 22.6713 11.631 22.411L17.947 16.095Z" fill="currentColor"/>`;

var Icon$24 = `<path d="M8 28.0003C8 27.6321 8.29848 27.3336 8.66667 27.3336H23.3333C23.7015 27.3336 24 27.6321 24 28.0003V29.3336C24 29.7018 23.7015 30.0003 23.3333 30.0003H8.66667C8.29848 30.0003 8 29.7018 8 29.3336V28.0003Z" fill="currentColor"/> <path fill-rule="evenodd" clip-rule="evenodd" d="M4.66602 6.66699C4.29783 6.66699 3.99935 6.96547 3.99935 7.33366V24.667C3.99935 25.0352 4.29783 25.3337 4.66602 25.3337H27.3327C27.7009 25.3337 27.9994 25.0352 27.9994 24.667V7.33366C27.9994 6.96547 27.7009 6.66699 27.3327 6.66699H4.66602ZM8.66659 21.3333C8.2984 21.3333 7.99992 21.0349 7.99992 20.6667V11.3333C7.99992 10.9651 8.2984 10.6667 8.66659 10.6667H13.9999C14.3681 10.6667 14.6666 10.9651 14.6666 11.3333V12.6667C14.6666 13.0349 14.3681 13.3333 13.9999 13.3333H10.7999C10.7263 13.3333 10.6666 13.393 10.6666 13.4667V18.5333C10.6666 18.607 10.7263 18.6667 10.7999 18.6667H13.9999C14.3681 18.6667 14.6666 18.9651 14.6666 19.3333V20.6667C14.6666 21.0349 14.3681 21.3333 13.9999 21.3333H8.66659ZM17.9999 21.3333C17.6317 21.3333 17.3333 21.0349 17.3333 20.6667V11.3333C17.3333 10.9651 17.6317 10.6667 17.9999 10.6667H23.3333C23.7014 10.6667 23.9999 10.9651 23.9999 11.3333V12.6667C23.9999 13.0349 23.7014 13.3333 23.3333 13.3333H20.1333C20.0596 13.3333 19.9999 13.393 19.9999 13.4667V18.5333C19.9999 18.607 20.0596 18.6667 20.1333 18.6667H23.3333C23.7014 18.6667 23.9999 18.9651 23.9999 19.3333V20.6667C23.9999 21.0349 23.7014 21.3333 23.3333 21.3333H17.9999Z" fill="currentColor"/>`;

var Icon$25 = `<path fill-rule="evenodd" clip-rule="evenodd" d="M4.6661 6.66699C4.29791 6.66699 3.99943 6.96547 3.99943 7.33366V24.667C3.99943 25.0352 4.29791 25.3337 4.6661 25.3337H27.3328C27.701 25.3337 27.9994 25.0352 27.9994 24.667V7.33366C27.9994 6.96547 27.701 6.66699 27.3328 6.66699H4.6661ZM8.66667 21.3333C8.29848 21.3333 8 21.0349 8 20.6667V11.3333C8 10.9651 8.29848 10.6667 8.66667 10.6667H14C14.3682 10.6667 14.6667 10.9651 14.6667 11.3333V12.6667C14.6667 13.0349 14.3682 13.3333 14 13.3333H10.8C10.7264 13.3333 10.6667 13.393 10.6667 13.4667V18.5333C10.6667 18.607 10.7264 18.6667 10.8 18.6667H14C14.3682 18.6667 14.6667 18.9651 14.6667 19.3333V20.6667C14.6667 21.0349 14.3682 21.3333 14 21.3333H8.66667ZM18 21.3333C17.6318 21.3333 17.3333 21.0349 17.3333 20.6667V11.3333C17.3333 10.9651 17.6318 10.6667 18 10.6667H23.3333C23.7015 10.6667 24 10.9651 24 11.3333V12.6667C24 13.0349 23.7015 13.3333 23.3333 13.3333H20.1333C20.0597 13.3333 20 13.393 20 13.4667V18.5333C20 18.607 20.0597 18.6667 20.1333 18.6667H23.3333C23.7015 18.6667 24 18.9651 24 19.3333V20.6667C24 21.0349 23.7015 21.3333 23.3333 21.3333H18Z" fill="currentColor"/>`;

var Icon$37 = `<path d="M19.3334 13.3333C18.9652 13.3333 18.6667 13.0349 18.6667 12.6667L18.6667 7.33333C18.6667 6.96514 18.9652 6.66666 19.3334 6.66666H21.3334C21.7015 6.66666 22 6.96514 22 7.33333V9.86666C22 9.9403 22.0597 10 22.1334 10L24.6667 10C25.0349 10 25.3334 10.2985 25.3334 10.6667V12.6667C25.3334 13.0349 25.0349 13.3333 24.6667 13.3333L19.3334 13.3333Z" fill="currentColor"/> <path d="M13.3334 19.3333C13.3334 18.9651 13.0349 18.6667 12.6667 18.6667H7.33335C6.96516 18.6667 6.66669 18.9651 6.66669 19.3333V21.3333C6.66669 21.7015 6.96516 22 7.33335 22H9.86669C9.94032 22 10 22.0597 10 22.1333L10 24.6667C10 25.0349 10.2985 25.3333 10.6667 25.3333H12.6667C13.0349 25.3333 13.3334 25.0349 13.3334 24.6667L13.3334 19.3333Z" fill="currentColor"/> <path d="M18.6667 24.6667C18.6667 25.0349 18.9652 25.3333 19.3334 25.3333H21.3334C21.7015 25.3333 22 25.0349 22 24.6667V22.1333C22 22.0597 22.0597 22 22.1334 22H24.6667C25.0349 22 25.3334 21.7015 25.3334 21.3333V19.3333C25.3334 18.9651 25.0349 18.6667 24.6667 18.6667L19.3334 18.6667C18.9652 18.6667 18.6667 18.9651 18.6667 19.3333L18.6667 24.6667Z" fill="currentColor"/> <path d="M10.6667 13.3333H12.6667C13.0349 13.3333 13.3334 13.0349 13.3334 12.6667L13.3334 10.6667V7.33333C13.3334 6.96514 13.0349 6.66666 12.6667 6.66666H10.6667C10.2985 6.66666 10 6.96514 10 7.33333L10 9.86666C10 9.9403 9.94033 10 9.86669 10L7.33335 10C6.96516 10 6.66669 10.2985 6.66669 10.6667V12.6667C6.66669 13.0349 6.96516 13.3333 7.33335 13.3333L10.6667 13.3333Z" fill="currentColor"/>`;

var Icon$38 = `<path d="M25.3299 7.26517C25.2958 6.929 25.0119 6.66666 24.6667 6.66666H19.3334C18.9652 6.66666 18.6667 6.96514 18.6667 7.33333V9.33333C18.6667 9.70152 18.9652 10 19.3334 10L21.8667 10C21.9403 10 22 10.0597 22 10.1333V12.6667C22 13.0349 22.2985 13.3333 22.6667 13.3333H24.6667C25.0349 13.3333 25.3334 13.0349 25.3334 12.6667V7.33333C25.3334 7.31032 25.3322 7.28758 25.3299 7.26517Z" fill="currentColor"/> <path d="M22 21.8667C22 21.9403 21.9403 22 21.8667 22L19.3334 22C18.9652 22 18.6667 22.2985 18.6667 22.6667V24.6667C18.6667 25.0349 18.9652 25.3333 19.3334 25.3333L24.6667 25.3333C25.0349 25.3333 25.3334 25.0349 25.3334 24.6667V19.3333C25.3334 18.9651 25.0349 18.6667 24.6667 18.6667H22.6667C22.2985 18.6667 22 18.9651 22 19.3333V21.8667Z" fill="currentColor"/> <path d="M12.6667 22H10.1334C10.0597 22 10 21.9403 10 21.8667V19.3333C10 18.9651 9.70154 18.6667 9.33335 18.6667H7.33335C6.96516 18.6667 6.66669 18.9651 6.66669 19.3333V24.6667C6.66669 25.0349 6.96516 25.3333 7.33335 25.3333H12.6667C13.0349 25.3333 13.3334 25.0349 13.3334 24.6667V22.6667C13.3334 22.2985 13.0349 22 12.6667 22Z" fill="currentColor"/> <path d="M10 12.6667V10.1333C10 10.0597 10.0597 10 10.1334 10L12.6667 10C13.0349 10 13.3334 9.70152 13.3334 9.33333V7.33333C13.3334 6.96514 13.0349 6.66666 12.6667 6.66666H7.33335C6.96516 6.66666 6.66669 6.96514 6.66669 7.33333V12.6667C6.66669 13.0349 6.96516 13.3333 7.33335 13.3333H9.33335C9.70154 13.3333 10 13.0349 10 12.6667Z" fill="currentColor"/>`;

var Icon$51 = `<path fill-rule="evenodd" clip-rule="evenodd" d="M26.6667 5.99998C26.6667 5.63179 26.3682 5.33331 26 5.33331H11.3333C10.9651 5.33331 10.6667 5.63179 10.6667 5.99998V17.5714C10.6667 17.6694 10.5644 17.7342 10.4741 17.6962C9.91823 17.4625 9.30754 17.3333 8.66667 17.3333C6.08934 17.3333 4 19.4226 4 22C4 24.5773 6.08934 26.6666 8.66667 26.6666C11.244 26.6666 13.3333 24.5773 13.3333 22V8.66665C13.3333 8.29846 13.6318 7.99998 14 7.99998L23.3333 7.99998C23.7015 7.99998 24 8.29846 24 8.66665V14.9048C24 15.0027 23.8978 15.0675 23.8075 15.0296C23.2516 14.7958 22.6409 14.6666 22 14.6666C19.4227 14.6666 17.3333 16.756 17.3333 19.3333C17.3333 21.9106 19.4227 24 22 24C24.5773 24 26.6667 21.9106 26.6667 19.3333V5.99998ZM22 21.3333C23.1046 21.3333 24 20.4379 24 19.3333C24 18.2287 23.1046 17.3333 22 17.3333C20.8954 17.3333 20 18.2287 20 19.3333C20 20.4379 20.8954 21.3333 22 21.3333ZM8.66667 24C9.77124 24 10.6667 23.1045 10.6667 22C10.6667 20.8954 9.77124 20 8.66667 20C7.5621 20 6.66667 20.8954 6.66667 22C6.66667 23.1045 7.5621 24 8.66667 24Z" fill="currentColor"/>`;

var Icon$52 = `<path d="M17.5091 24.6594C17.5091 25.2066 16.8864 25.5208 16.4463 25.1956L9.44847 20.0252C9.42553 20.0083 9.39776 19.9991 9.36923 19.9991H4.66667C4.29848 19.9991 4 19.7006 4 19.3325V12.6658C4 12.2976 4.29848 11.9991 4.66667 11.9991H9.37115C9.39967 11.9991 9.42745 11.99 9.45039 11.973L16.4463 6.8036C16.8863 6.47842 17.5091 6.79259 17.5091 7.33977L17.5091 24.6594Z" fill="currentColor"/> <path d="M28.8621 13.6422C29.1225 13.3818 29.1225 12.9597 28.8621 12.6994L27.9193 11.7566C27.659 11.4962 27.2368 11.4962 26.9765 11.7566L24.7134 14.0197C24.6613 14.0717 24.5769 14.0717 24.5248 14.0197L22.262 11.7568C22.0016 11.4964 21.5795 11.4964 21.3191 11.7568L20.3763 12.6996C20.116 12.9599 20.116 13.382 20.3763 13.6424L22.6392 15.9053C22.6913 15.9573 22.6913 16.0418 22.6392 16.0938L20.3768 18.3562C20.1165 18.6166 20.1165 19.0387 20.3768 19.299L21.3196 20.2419C21.58 20.5022 22.0021 20.5022 22.2624 20.2418L24.5248 17.9795C24.5769 17.9274 24.6613 17.9274 24.7134 17.9795L26.976 20.2421C27.2363 20.5024 27.6585 20.5024 27.9188 20.2421L28.8616 19.2992C29.122 19.0389 29.122 18.6168 28.8616 18.3564L26.599 16.0938C26.547 16.0418 26.547 15.9573 26.599 15.9053L28.8621 13.6422Z" fill="currentColor"/>`;

var Icon$55 = `<path d="M25.14 25.1089C25.0171 25.2532 24.8356 25.3333 24.646 25.3333H22.8124C22.1084 25.3333 21.7734 24.1872 22.2745 23.6927C23.9161 22.0729 24.9336 19.822 24.9336 17.3333C24.9336 12.3997 20.9336 8.39973 16 8.39973C11.0664 8.39973 7.06641 12.3997 7.06641 17.3333C7.06641 19.822 8.08389 22.0729 9.72555 23.6927C10.2266 24.1872 9.89155 25.3333 9.18762 25.3333H7.35398C7.16436 25.3333 6.98294 25.2532 6.86001 25.1089C5.07703 23.015 4 20.2991 4 17.3333C4 10.7057 9.3724 5.33333 16 5.33333C22.6276 5.33333 28 10.7057 28 17.3333C28 20.2991 26.923 23.015 25.14 25.1089Z" fill="currentColor"/> <path d="M21.1992 14.3399C21.4595 14.0796 21.4595 13.6575 21.1992 13.3971L20.2564 12.4543C19.996 12.194 19.5739 12.194 19.3136 12.4543L16.4492 15.3187C16.4185 15.3493 16.3749 15.3629 16.332 15.3568C16.2236 15.3414 16.1127 15.3334 16 15.3334C14.7113 15.3334 13.6667 16.378 13.6667 17.6667C13.6667 18.9554 14.7113 20 16 20C17.2887 20 18.3333 18.9554 18.3333 17.6667C18.3333 17.5464 18.3242 17.4283 18.3067 17.313C18.3001 17.2696 18.3136 17.2255 18.3446 17.1945L21.1992 14.3399Z" fill="currentColor"/>`;

var Icon$56 = `<path d="M8.66667 6.66667C8.29848 6.66667 8 6.96514 8 7.33333V24.6667C8 25.0349 8.29848 25.3333 8.66667 25.3333H12.6667C13.0349 25.3333 13.3333 25.0349 13.3333 24.6667V7.33333C13.3333 6.96514 13.0349 6.66667 12.6667 6.66667H8.66667Z" fill="currentColor"/> <path d="M19.3333 6.66667C18.9651 6.66667 18.6667 6.96514 18.6667 7.33333V24.6667C18.6667 25.0349 18.9651 25.3333 19.3333 25.3333H23.3333C23.7015 25.3333 24 25.0349 24 24.6667V7.33333C24 6.96514 23.7015 6.66667 23.3333 6.66667H19.3333Z" fill="currentColor"/>`;

var Icon$57 = `<path d="M5.33334 26V19.4667C5.33334 19.393 5.39304 19.3333 5.46668 19.3333H7.86668C7.94031 19.3333 8.00001 19.393 8.00001 19.4667V23.3333C8.00001 23.7015 8.29849 24 8.66668 24H23.3333C23.7015 24 24 23.7015 24 23.3333V8.66666C24 8.29847 23.7015 7.99999 23.3333 7.99999H19.4667C19.393 7.99999 19.3333 7.9403 19.3333 7.86666V5.46666C19.3333 5.39302 19.393 5.33333 19.4667 5.33333H26C26.3682 5.33333 26.6667 5.63181 26.6667 5.99999V26C26.6667 26.3682 26.3682 26.6667 26 26.6667H6.00001C5.63182 26.6667 5.33334 26.3682 5.33334 26Z" fill="currentColor"/> <path d="M14.0098 8.42359H10.806C10.6872 8.42359 10.6277 8.56721 10.7117 8.6512L16.5491 14.4886C16.8094 14.7489 16.8094 15.171 16.5491 15.4314L15.3234 16.657C15.0631 16.9174 14.641 16.9174 14.3806 16.657L8.63739 10.9138C8.55339 10.8298 8.40978 10.8893 8.40978 11.0081V14.0236C8.40978 14.3918 8.1113 14.6903 7.74311 14.6903H6.00978C5.64159 14.6903 5.34311 14.3918 5.34311 14.0236L5.34311 6.02359C5.34311 5.6554 5.64159 5.35692 6.00978 5.35692L14.0098 5.35692C14.378 5.35692 14.6764 5.6554 14.6764 6.02359V7.75692C14.6764 8.12511 14.378 8.42359 14.0098 8.42359Z" fill="currentColor"/>`;

var Icon$58 = `<path d="M16 15.3333C15.6318 15.3333 15.3333 15.6318 15.3333 16V20C15.3333 20.3682 15.6318 20.6667 16 20.6667H21.3333C21.7015 20.6667 22 20.3682 22 20V16C22 15.6318 21.7015 15.3333 21.3333 15.3333H16Z" fill="currentColor"/> <path fill-rule="evenodd" clip-rule="evenodd" d="M5.33333 7.33334C5.33333 6.96515 5.63181 6.66667 5.99999 6.66667H26C26.3682 6.66667 26.6667 6.96515 26.6667 7.33334V24.6667C26.6667 25.0349 26.3682 25.3333 26 25.3333H5.99999C5.63181 25.3333 5.33333 25.0349 5.33333 24.6667V7.33334ZM7.99999 10C7.99999 9.63182 8.29847 9.33334 8.66666 9.33334H23.3333C23.7015 9.33334 24 9.63182 24 10V22C24 22.3682 23.7015 22.6667 23.3333 22.6667H8.66666C8.29847 22.6667 7.99999 22.3682 7.99999 22V10Z" fill="currentColor"/>`;

var Icon$59 = `<path d="M10.6667 6.6548C10.6667 6.10764 11.2894 5.79346 11.7295 6.11862L24.377 15.4634C24.7377 15.7298 24.7377 16.2692 24.3771 16.5357L11.7295 25.8813C11.2895 26.2065 10.6667 25.8923 10.6667 25.3451L10.6667 6.6548Z" fill="currentColor"/>`;

var Icon$71 = `<path d="M15.6038 12.2147C16.0439 12.5399 16.6667 12.2257 16.6667 11.6786V10.1789C16.6667 10.1001 16.7351 10.0384 16.8134 10.0479C20.1116 10.4494 22.6667 13.2593 22.6667 16.6659C22.6667 20.3481 19.6817 23.3332 15.9995 23.3332C12.542 23.3332 9.69927 20.7014 9.36509 17.332C9.32875 16.9655 9.03371 16.6662 8.66548 16.6662L6.66655 16.6666C6.29841 16.6666 5.99769 16.966 6.02187 17.3334C6.36494 22.5454 10.7012 26.6667 16 26.6667C21.5228 26.6667 26 22.1895 26 16.6667C26 11.4103 21.9444 7.10112 16.7916 6.69757C16.7216 6.69209 16.6667 6.63396 16.6667 6.56372V4.98824C16.6667 4.44106 16.0439 4.12689 15.6038 4.45206L11.0765 7.79738C10.7159 8.06387 10.7159 8.60326 11.0766 8.86973L15.6038 12.2147Z" fill="currentColor"/>`;

var Icon$74 = `<path d="M16.6667 10.3452C16.6667 10.8924 16.0439 11.2066 15.6038 10.8814L11.0766 7.5364C10.7159 7.26993 10.7159 6.73054 11.0766 6.46405L15.6038 3.11873C16.0439 2.79356 16.6667 3.10773 16.6667 3.6549V5.22682C16.6667 5.29746 16.7223 5.35579 16.7927 5.36066C22.6821 5.76757 27.3333 10.674 27.3333 16.6667C27.3333 22.9259 22.2592 28 16 28C9.96483 28 5.03145 23.2827 4.68601 17.3341C4.66466 16.9665 4.96518 16.6673 5.33339 16.6673H7.3334C7.70157 16.6673 7.99714 16.9668 8.02743 17.3337C8.36638 21.4399 11.8064 24.6667 16 24.6667C20.4183 24.6667 24 21.085 24 16.6667C24 12.5225 20.8483 9.11428 16.8113 8.70739C16.7337 8.69957 16.6667 8.76096 16.6667 8.83893V10.3452Z" fill="currentColor"/> <path fill-rule="evenodd" clip-rule="evenodd" d="M17.0879 19.679C17.4553 19.9195 17.8928 20.0398 18.4004 20.0398C18.9099 20.0398 19.3474 19.9205 19.7129 19.6818C20.0803 19.4413 20.3635 19.0938 20.5623 18.6392C20.7612 18.1847 20.8606 17.6373 20.8606 16.9972C20.8625 16.3608 20.764 15.8192 20.5652 15.3722C20.3663 14.9252 20.0822 14.5853 19.7129 14.3523C19.3455 14.1175 18.908 14 18.4004 14C17.8928 14 17.4553 14.1175 17.0879 14.3523C16.7224 14.5853 16.4402 14.9252 16.2413 15.3722C16.0443 15.8173 15.9449 16.3589 15.943 16.9972C15.9411 17.6354 16.0396 18.1818 16.2385 18.6364C16.4373 19.089 16.7205 19.4366 17.0879 19.679ZM19.1362 18.4262C18.9487 18.7349 18.7034 18.8892 18.4004 18.8892C18.1996 18.8892 18.0226 18.8211 17.8691 18.6847C17.7157 18.5464 17.5964 18.3372 17.5112 18.0568C17.4279 17.7765 17.3871 17.4233 17.389 16.9972C17.3909 16.3684 17.4847 15.9025 17.6703 15.5995C17.8559 15.2945 18.0993 15.1421 18.4004 15.1421C18.603 15.1421 18.7801 15.2093 18.9316 15.3438C19.0832 15.4782 19.2015 15.6828 19.2868 15.9574C19.372 16.2301 19.4146 16.5767 19.4146 16.9972C19.4165 17.6392 19.3237 18.1156 19.1362 18.4262Z" fill="currentColor"/> <path d="M13.7746 19.8978C13.8482 19.8978 13.9079 19.8381 13.9079 19.7644V14.2129C13.9079 14.1393 13.8482 14.0796 13.7746 14.0796H12.642C12.6171 14.0796 12.5927 14.0865 12.5716 14.0997L11.2322 14.9325C11.1931 14.9568 11.1693 14.9996 11.1693 15.0457V15.9497C11.1693 16.0539 11.2833 16.1178 11.3722 16.0635L12.464 15.396C12.4682 15.3934 12.473 15.3921 12.4779 15.3921C12.4926 15.3921 12.5045 15.404 12.5045 15.4187V19.7644C12.5045 19.8381 12.5642 19.8978 12.6378 19.8978H13.7746Z" fill="currentColor"/>`;

var Icon$78 = `<path d="M15.3333 10.3452C15.3333 10.8924 15.9561 11.2066 16.3962 10.8814L20.9234 7.5364C21.2841 7.26993 21.2841 6.73054 20.9235 6.46405L16.3962 3.11873C15.9561 2.79356 15.3333 3.10773 15.3333 3.6549V5.22682C15.3333 5.29746 15.2778 5.35579 15.2073 5.36066C9.31791 5.76757 4.66667 10.674 4.66667 16.6667C4.66667 22.9259 9.74078 28 16 28C22.0352 28 26.9686 23.2827 27.314 17.3341C27.3354 16.9665 27.0348 16.6673 26.6666 16.6673H24.6666C24.2984 16.6673 24.0029 16.9668 23.9726 17.3337C23.6336 21.4399 20.1937 24.6667 16 24.6667C11.5817 24.6667 8 21.085 8 16.6667C8 12.5225 11.1517 9.11428 15.1887 8.70739C15.2663 8.69957 15.3333 8.76096 15.3333 8.83893V10.3452Z" fill="currentColor"/> <path fill-rule="evenodd" clip-rule="evenodd" d="M17.0879 19.679C17.4553 19.9195 17.8928 20.0398 18.4004 20.0398C18.9099 20.0398 19.3474 19.9205 19.7129 19.6818C20.0803 19.4413 20.3635 19.0938 20.5623 18.6392C20.7612 18.1847 20.8606 17.6373 20.8606 16.9972C20.8625 16.3608 20.764 15.8192 20.5652 15.3722C20.3663 14.9252 20.0822 14.5853 19.7129 14.3523C19.3455 14.1175 18.908 14 18.4004 14C17.8928 14 17.4553 14.1175 17.0879 14.3523C16.7224 14.5853 16.4402 14.9252 16.2413 15.3722C16.0443 15.8173 15.9449 16.3589 15.943 16.9972C15.9411 17.6354 16.0396 18.1818 16.2385 18.6364C16.4373 19.089 16.7205 19.4366 17.0879 19.679ZM19.1362 18.4262C18.9487 18.7349 18.7034 18.8892 18.4004 18.8892C18.1996 18.8892 18.0225 18.8211 17.8691 18.6847C17.7157 18.5464 17.5964 18.3372 17.5112 18.0568C17.4278 17.7765 17.3871 17.4233 17.389 16.9972C17.3909 16.3684 17.4847 15.9025 17.6703 15.5995C17.8559 15.2945 18.0992 15.1421 18.4004 15.1421C18.603 15.1421 18.7801 15.2093 18.9316 15.3438C19.0831 15.4782 19.2015 15.6828 19.2867 15.9574C19.372 16.2301 19.4146 16.5767 19.4146 16.9972C19.4165 17.6392 19.3237 18.1156 19.1362 18.4262Z" fill="currentColor"/> <path d="M13.7746 19.8978C13.8482 19.8978 13.9079 19.8381 13.9079 19.7644V14.2129C13.9079 14.1393 13.8482 14.0796 13.7746 14.0796H12.642C12.6171 14.0796 12.5927 14.0865 12.5716 14.0997L11.2322 14.9325C11.1931 14.9568 11.1693 14.9996 11.1693 15.0457V15.9497C11.1693 16.0539 11.2833 16.1178 11.3722 16.0635L12.464 15.396C12.4682 15.3934 12.473 15.3921 12.4779 15.3921C12.4926 15.3921 12.5045 15.404 12.5045 15.4187V19.7644C12.5045 19.8381 12.5642 19.8978 12.6378 19.8978H13.7746Z" fill="currentColor"/>`;

var Icon$83 = `<path d="M18.6669 10.4001C18.6669 10.7683 18.3684 11.0667 18.0002 11.0667H16.2668C15.8987 11.0667 15.6002 10.7683 15.6002 10.4001V9.86674C15.6002 9.7931 15.5405 9.73341 15.4669 9.73341H5.99998C5.63179 9.73341 5.33331 9.43493 5.33331 9.06674V7.33341C5.33331 6.96522 5.63179 6.66674 5.99998 6.66674H15.4669C15.5405 6.66674 15.6002 6.60704 15.6002 6.53341V6.00007C15.6002 5.63188 15.8987 5.3334 16.2668 5.3334H18.0002C18.3684 5.3334 18.6669 5.63188 18.6669 6.00007V10.4001Z" fill="currentColor"/> <path d="M11.3334 18.8668C11.7016 18.8668 12.0001 18.5683 12.0001 18.2001V13.8001C12.0001 13.4319 11.7016 13.1335 11.3334 13.1335H9.60006C9.23187 13.1335 8.93339 13.4319 8.93339 13.8001V14.3335C8.93339 14.4071 8.8737 14.4668 8.80006 14.4668H6.00006C5.63187 14.4668 5.33339 14.7653 5.33339 15.1335V16.8668C5.33339 17.235 5.63187 17.5335 6.00006 17.5335H8.80006C8.8737 17.5335 8.93339 17.5932 8.93339 17.6668V18.2001C8.93339 18.5683 9.23187 18.8668 9.60006 18.8668H11.3334Z" fill="currentColor"/> <path d="M18.6667 26.0001C18.6667 26.3683 18.3682 26.6668 18 26.6668H16.2667C15.8985 26.6668 15.6 26.3683 15.6 26.0001V25.4668C15.6 25.3931 15.5403 25.3334 15.4667 25.3334H6.00014C5.63195 25.3334 5.33348 25.0349 5.33348 24.6668V22.9334C5.33348 22.5652 5.63195 22.2668 6.00014 22.2668H15.4667C15.5403 22.2668 15.6 22.2071 15.6 22.1334V21.6001C15.6 21.2319 15.8985 20.9334 16.2667 20.9334H18C18.3682 20.9334 18.6667 21.2319 18.6667 21.6001V26.0001Z" fill="currentColor"/> <path d="M22 24.6668C22 25.0349 22.2985 25.3334 22.6667 25.3334H26.0001C26.3683 25.3334 26.6668 25.0349 26.6668 24.6668V22.9334C26.6668 22.5652 26.3683 22.2668 26.0001 22.2668H22.6667C22.2985 22.2668 22 22.5652 22 22.9334V24.6668Z" fill="currentColor"/> <path d="M16.0001 17.5335C15.6319 17.5335 15.3334 17.235 15.3334 16.8668V15.1335C15.3334 14.7653 15.6319 14.4668 16.0001 14.4668H26.0001C26.3683 14.4668 26.6667 14.7653 26.6667 15.1335V16.8668C26.6667 17.235 26.3683 17.5335 26.0001 17.5335H16.0001Z" fill="currentColor"/> <path d="M22.0002 9.06674C22.0002 9.43493 22.2987 9.73341 22.6669 9.73341H26C26.3682 9.73341 26.6666 9.43493 26.6666 9.06674V7.3334C26.6666 6.96521 26.3682 6.66674 26 6.66674H22.6669C22.2987 6.66674 22.0002 6.96522 22.0002 7.33341V9.06674Z" fill="currentColor"/>`;

var Icon$85 = `<path fill-rule="evenodd" clip-rule="evenodd" d="M13.5722 5.33333C13.2429 5.33333 12.9629 5.57382 12.9132 5.89938L12.4063 9.21916C12.4 9.26058 12.3746 9.29655 12.3378 9.31672C12.2387 9.37118 12.1409 9.42779 12.0444 9.48648C12.0086 9.5083 11.9646 9.51242 11.9255 9.49718L8.79572 8.27692C8.48896 8.15732 8.14083 8.27958 7.9762 8.56472L5.5491 12.7686C5.38444 13.0538 5.45271 13.4165 5.70981 13.6223L8.33308 15.7225C8.3658 15.7487 8.38422 15.7887 8.38331 15.8306C8.38209 15.8867 8.38148 15.9429 8.38148 15.9993C8.38148 16.0558 8.3821 16.1121 8.38332 16.1684C8.38423 16.2102 8.36582 16.2503 8.33313 16.2765L5.7103 18.3778C5.45334 18.5836 5.38515 18.9462 5.54978 19.2314L7.97688 23.4352C8.14155 23.7205 8.48981 23.8427 8.79661 23.723L11.926 22.5016C11.9651 22.4864 12.009 22.4905 12.0449 22.5123C12.1412 22.5709 12.2388 22.6274 12.3378 22.6818C12.3745 22.7019 12.4 22.7379 12.4063 22.7793L12.9132 26.0993C12.9629 26.4249 13.2429 26.6654 13.5722 26.6654H18.4264C18.7556 26.6654 19.0356 26.425 19.0854 26.0995L19.5933 22.7801C19.5997 22.7386 19.6252 22.7027 19.6619 22.6825C19.7614 22.6279 19.8596 22.5711 19.9564 22.5121C19.9923 22.4903 20.0362 22.4862 20.0754 22.5015L23.2035 23.7223C23.5103 23.842 23.8585 23.7198 24.0232 23.4346L26.4503 19.2307C26.6149 18.9456 26.5467 18.583 26.2898 18.3771L23.6679 16.2766C23.6352 16.2504 23.6168 16.2104 23.6177 16.1685C23.619 16.1122 23.6196 16.0558 23.6196 15.9993C23.6196 15.9429 23.619 15.8866 23.6177 15.8305C23.6168 15.7886 23.6353 15.7486 23.668 15.7224L26.2903 13.623C26.5474 13.4172 26.6156 13.0544 26.451 12.7692L24.0239 8.56537C23.8592 8.28023 23.5111 8.15797 23.2043 8.27757L20.0758 9.49734C20.0367 9.51258 19.9927 9.50846 19.9569 9.48664C19.8599 9.42762 19.7616 9.37071 19.6618 9.31596C19.6251 9.2958 19.5997 9.25984 19.5933 9.21843L19.0854 5.89915C19.0356 5.57369 18.7556 5.33333 18.4264 5.33333H13.5722ZM16.0001 20.2854C18.3672 20.2854 20.2862 18.3664 20.2862 15.9993C20.2862 13.6322 18.3672 11.7132 16.0001 11.7132C13.6329 11.7132 11.714 13.6322 11.714 15.9993C11.714 18.3664 13.6329 20.2854 16.0001 20.2854Z" fill="currentColor"/>`;

var Icon$101 = `<path d="M17.5091 24.6595C17.5091 25.2066 16.8864 25.5208 16.4463 25.1956L9.44847 20.0252C9.42553 20.0083 9.39776 19.9992 9.36923 19.9992H4.66667C4.29848 19.9992 4 19.7007 4 19.3325V12.6658C4 12.2976 4.29848 11.9992 4.66667 11.9992H9.37115C9.39967 11.9992 9.42745 11.99 9.45039 11.9731L16.4463 6.80363C16.8863 6.47845 17.5091 6.79262 17.5091 7.3398L17.5091 24.6595Z" fill="currentColor"/> <path d="M27.5091 9.33336C27.8773 9.33336 28.1758 9.63184 28.1758 10V22C28.1758 22.3682 27.8773 22.6667 27.5091 22.6667H26.1758C25.8076 22.6667 25.5091 22.3682 25.5091 22V10C25.5091 9.63184 25.8076 9.33336 26.1758 9.33336L27.5091 9.33336Z" fill="currentColor"/> <path d="M22.1758 12C22.544 12 22.8424 12.2985 22.8424 12.6667V19.3334C22.8424 19.7016 22.544 20 22.1758 20H20.8424C20.4743 20 20.1758 19.7016 20.1758 19.3334V12.6667C20.1758 12.2985 20.4743 12 20.8424 12H22.1758Z" fill="currentColor"/>`;

var Icon$102 = `<path d="M17.5091 24.6594C17.5091 25.2066 16.8864 25.5207 16.4463 25.1956L9.44847 20.0252C9.42553 20.0083 9.39776 19.9991 9.36923 19.9991H4.66667C4.29848 19.9991 4 19.7006 4 19.3324V12.6658C4 12.2976 4.29848 11.9991 4.66667 11.9991H9.37115C9.39967 11.9991 9.42745 11.99 9.45039 11.973L16.4463 6.80358C16.8863 6.4784 17.5091 6.79258 17.5091 7.33975L17.5091 24.6594Z" fill="currentColor"/> <path d="M22.8424 12.6667C22.8424 12.2985 22.544 12 22.1758 12H20.8424C20.4743 12 20.1758 12.2985 20.1758 12.6667V19.3333C20.1758 19.7015 20.4743 20 20.8424 20H22.1758C22.544 20 22.8424 19.7015 22.8424 19.3333V12.6667Z" fill="currentColor"/>`;

const icons = {
  play: Icon$59,
  pause: Icon$56,
  replay: Icon$71,
  mute: Icon$52,
  "volume-low": Icon$102,
  "volume-high": Icon$101,
  "cc-on": Icon$24,
  "cc-off": Icon$25,
  "pip-enter": Icon$58,
  "pip-exit": Icon$57,
  "fs-enter": Icon$38,
  "fs-exit": Icon$37,
  "seek-forward": Icon$78,
  "seek-backward": Icon$74,
  "menu-chapters": Icon$15,
  "menu-settings": Icon$85,
  "menu-arrow-left": Icon$10,
  "menu-arrow-right": Icon$20,
  "menu-audio": Icon$51,
  "menu-speed": Icon$55,
  "menu-quality": Icon$83,
  "menu-captions": Icon$25
};

var vidstack0d51c467 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    icons: icons
});

const MILLISECOND_SEP_RE = /,/g, TIMESTAMP_SEP = "-->";
class SRTParser extends VTTParser {
  parse(line, lineCount) {
    if (line === "") {
      if (this.a) {
        this.j.push(this.a);
        this.f.onCue?.(this.a);
        this.a = null;
      }
      this.c = VTTBlock.None;
    } else if (this.c === VTTBlock.Cue) {
      this.a.text += (this.a.text ? "\n" : "") + line;
    } else if (line.includes(TIMESTAMP_SEP)) {
      const result = this.o(line, lineCount);
      if (result) {
        this.a = new VTTCue(result[0], result[1], result[2].join(" "));
        this.a.id = this.l;
        this.c = VTTBlock.Cue;
      }
    }
    this.l = line;
  }
  o(line, lineCount) {
    return super.o(line.replace(MILLISECOND_SEP_RE, "."), lineCount);
  }
}
function createSRTParser() {
  return new SRTParser();
}

var srtParser = /*#__PURE__*/Object.freeze({
    __proto__: null,
    SRTParser: SRTParser,
    default: createSRTParser
});

const FORMAT_START_RE = /^Format:[\s\t]*/, STYLE_START_RE = /^Style:[\s\t]*/, DIALOGUE_START_RE = /^Dialogue:[\s\t]*/, FORMAT_SPLIT_RE = /[\s\t]*,[\s\t]*/, STYLE_FUNCTION_RE = /\{[^}]+\}/g, NEW_LINE_RE = /\\N/g, STYLES_SECTION_START_RE = /^\[(.*)[\s\t]?Styles\]$/, EVENTS_SECTION_START_RE = /^\[(.*)[\s\t]?Events\]$/;
class SSAParser {
  f;
  O = 0;
  a = null;
  j = [];
  k = [];
  N = null;
  d;
  P = {};
  async init(init) {
    this.f = init;
    if (init.errors)
      this.d = (await Promise.resolve().then(function () { return errors; })).ParseErrorBuilder;
  }
  parse(line, lineCount) {
    if (this.O) {
      switch (this.O) {
        case 1:
          if (line === "") {
            this.O = 0;
          } else if (STYLE_START_RE.test(line)) {
            if (this.N) {
              const styles = line.replace(STYLE_START_RE, "").split(FORMAT_SPLIT_RE);
              this.S(styles);
            } else {
              this.e(this.d?.T("Style", lineCount));
            }
          } else if (FORMAT_START_RE.test(line)) {
            this.N = line.replace(FORMAT_START_RE, "").split(FORMAT_SPLIT_RE);
          } else if (EVENTS_SECTION_START_RE.test(line)) {
            this.N = null;
            this.O = 2;
          }
          break;
        case 2:
          if (line === "") {
            this.Q();
          } else if (DIALOGUE_START_RE.test(line)) {
            this.Q();
            if (this.N) {
              const dialogue = line.replace(DIALOGUE_START_RE, "").split(FORMAT_SPLIT_RE), cue = this.U(dialogue, lineCount);
              if (cue)
                this.a = cue;
            } else {
              this.e(this.d?.T("Dialogue", lineCount));
            }
          } else if (this.a) {
            this.a.text += "\n" + line.replace(STYLE_FUNCTION_RE, "").replace(NEW_LINE_RE, "\n");
          } else if (FORMAT_START_RE.test(line)) {
            this.N = line.replace(FORMAT_START_RE, "").split(FORMAT_SPLIT_RE);
          } else if (STYLES_SECTION_START_RE.test(line)) {
            this.N = null;
            this.O = 1;
          } else if (EVENTS_SECTION_START_RE.test(line)) {
            this.N = null;
          }
      }
    } else if (line === "") ; else if (STYLES_SECTION_START_RE.test(line)) {
      this.N = null;
      this.O = 1;
    } else if (EVENTS_SECTION_START_RE.test(line)) {
      this.N = null;
      this.O = 2;
    }
  }
  done() {
    return {
      metadata: {},
      cues: this.j,
      regions: [],
      errors: this.k
    };
  }
  Q() {
    if (!this.a)
      return;
    this.j.push(this.a);
    this.f.onCue?.(this.a);
    this.a = null;
  }
  S(values) {
    let name = "Default", styles = {}, outlineX, align = "center", vertical = "bottom", marginV, outlineY = 1.2, outlineColor, bgColor, borderStyle = 3, transform = [];
    for (let i = 0; i < this.N.length; i++) {
      const field = this.N[i], value = values[i];
      switch (field) {
        case "Name":
          name = value;
          break;
        case "Fontname":
          styles["font-family"] = value;
          break;
        case "Fontsize":
          styles["font-size"] = `calc(${value} / var(--overlay-height))`;
          break;
        case "PrimaryColour":
          const color = parseColor(value);
          if (color)
            styles["--cue-color"] = color;
          break;
        case "BorderStyle":
          borderStyle = parseInt(value, 10);
          break;
        case "BackColour":
          bgColor = parseColor(value);
          break;
        case "OutlineColour":
          const _outlineColor = parseColor(value);
          if (_outlineColor)
            outlineColor = _outlineColor;
          break;
        case "Bold":
          if (parseInt(value))
            styles["font-weight"] = "bold";
          break;
        case "Italic":
          if (parseInt(value))
            styles["font-style"] = "italic";
          break;
        case "Underline":
          if (parseInt(value))
            styles["text-decoration"] = "underline";
          break;
        case "StrikeOut":
          if (parseInt(value))
            styles["text-decoration"] = "line-through";
          break;
        case "Spacing":
          styles["letter-spacing"] = value + "px";
          break;
        case "AlphaLevel":
          styles["opacity"] = parseFloat(value);
          break;
        case "ScaleX":
          transform.push(`scaleX(${parseFloat(value) / 100})`);
          break;
        case "ScaleY":
          transform.push(`scaleY(${parseFloat(value) / 100})`);
          break;
        case "Angle":
          transform.push(`rotate(${value}deg)`);
          break;
        case "Shadow":
          outlineY = parseInt(value, 10) * 1.2;
          break;
        case "MarginL":
          styles["--cue-width"] = "auto";
          styles["--cue-left"] = parseFloat(value) + "px";
          break;
        case "MarginR":
          styles["--cue-width"] = "auto";
          styles["--cue-right"] = parseFloat(value) + "px";
          break;
        case "MarginV":
          marginV = parseFloat(value);
          break;
        case "Outline":
          outlineX = parseInt(value, 10);
          break;
        case "Alignment":
          const alignment = parseInt(value, 10);
          if (alignment >= 4)
            vertical = alignment >= 7 ? "top" : "center";
          switch (alignment % 3) {
            case 1:
              align = "start";
              break;
            case 2:
              align = "center";
              break;
            case 3:
              align = "end";
              break;
          }
      }
    }
    styles.R = vertical;
    styles["--cue-white-space"] = "normal";
    styles["--cue-line-height"] = "normal";
    styles["--cue-text-align"] = align;
    if (vertical === "center") {
      styles[`--cue-top`] = "50%";
      transform.push("translateY(-50%)");
    } else {
      styles[`--cue-${vertical}`] = (marginV || 0) + "px";
    }
    if (borderStyle === 1) {
      styles["--cue-padding-y"] = "0";
    }
    if (borderStyle === 1 || bgColor) {
      styles["--cue-bg-color"] = borderStyle === 1 ? "none" : bgColor;
    }
    if (borderStyle === 3 && outlineColor) {
      styles["--cue-outline"] = `${outlineX}px solid ${outlineColor}`;
    }
    if (borderStyle === 1 && typeof outlineX === "number") {
      const color = bgColor ?? "#000";
      styles["--cue-text-shadow"] = [
        outlineColor && buildTextShadow(outlineX * 1.2, outlineY * 1.2, outlineColor),
        outlineColor ? buildTextShadow(outlineX * (outlineX / 2), outlineY * (outlineX / 2), color) : buildTextShadow(outlineX, outlineY, color)
      ].filter(Boolean).join(", ");
    }
    if (transform.length)
      styles["--cue-transform"] = transform.join(" ");
    this.P[name] = styles;
  }
  U(values, lineCount) {
    const fields = this.V(values);
    const timestamp = this.o(fields.Start, fields.End, lineCount);
    if (!timestamp)
      return;
    const cue = new VTTCue(timestamp[0], timestamp[1], ""), styles = { ...this.P[fields.Style] || {} }, voice = fields.Name ? `<v ${fields.Name}>` : "";
    const vertical = styles.R, marginLeft = fields.MarginL && parseFloat(fields.MarginL), marginRight = fields.MarginR && parseFloat(fields.MarginR), marginV = fields.MarginV && parseFloat(fields.MarginV);
    if (marginLeft) {
      styles["--cue-width"] = "auto";
      styles["--cue-left"] = marginLeft + "px";
    }
    if (marginRight) {
      styles["--cue-width"] = "auto";
      styles["--cue-right"] = marginRight + "px";
    }
    if (marginV && vertical !== "center") {
      styles[`--cue-${vertical}`] = marginV + "px";
    }
    cue.text = voice + values.slice(this.N.length - 1).join(", ").replace(STYLE_FUNCTION_RE, "").replace(NEW_LINE_RE, "\n");
    delete styles.R;
    if (Object.keys(styles).length)
      cue.style = styles;
    return cue;
  }
  V(values) {
    const fields = {};
    for (let i = 0; i < this.N.length; i++) {
      fields[this.N[i]] = values[i];
    }
    return fields;
  }
  o(startTimeText, endTimeText, lineCount) {
    const startTime = parseVTTTimestamp(startTimeText), endTime = parseVTTTimestamp(endTimeText);
    if (startTime !== null && endTime !== null && endTime > startTime) {
      return [startTime, endTime];
    } else {
      if (startTime === null) {
        this.e(this.d?.q(startTimeText, lineCount));
      }
      if (endTime === null) {
        this.e(this.d?.r(endTimeText, lineCount));
      }
      if (startTime != null && endTime !== null && endTime > startTime) {
        this.e(this.d?.s(startTime, endTime, lineCount));
      }
    }
  }
  e(error) {
    if (!error)
      return;
    this.k.push(error);
    if (this.f.strict) {
      this.f.cancel();
      throw error;
    } else {
      this.f.onError?.(error);
    }
  }
}
function parseColor(color) {
  const abgr = parseInt(color.replace("&H", ""), 16);
  if (abgr >= 0) {
    const a = abgr >> 24 & 255 ^ 255;
    const alpha = a / 255;
    const b = abgr >> 16 & 255;
    const g = abgr >> 8 & 255;
    const r = abgr & 255;
    return "rgba(" + [r, g, b, alpha].join(",") + ")";
  }
  return null;
}
function buildTextShadow(x, y, color) {
  const noOfShadows = Math.ceil(2 * Math.PI * x);
  let textShadow = "";
  for (let i = 0; i < noOfShadows; i++) {
    const theta = 2 * Math.PI * i / noOfShadows;
    textShadow += x * Math.cos(theta) + "px " + y * Math.sin(theta) + "px 0 " + color + (i == noOfShadows - 1 ? "" : ",");
  }
  return textShadow;
}
function createSSAParser() {
  return new SSAParser();
}

var ssaParser = /*#__PURE__*/Object.freeze({
    __proto__: null,
    SSAParser: SSAParser,
    default: createSSAParser
});

const ParseErrorBuilder = {
  p() {
    return new ParseError({
      code: ParseErrorCode.BadSignature,
      reason: "missing WEBVTT file header",
      line: 1
    });
  },
  q(startTime, line) {
    return new ParseError({
      code: ParseErrorCode.BadTimestamp,
      reason: `cue start timestamp \`${startTime}\` is invalid on line ${line}`,
      line
    });
  },
  r(endTime, line) {
    return new ParseError({
      code: ParseErrorCode.BadTimestamp,
      reason: `cue end timestamp \`${endTime}\` is invalid on line ${line}`,
      line
    });
  },
  s(startTime, endTime, line) {
    return new ParseError({
      code: ParseErrorCode.BadTimestamp,
      reason: `cue end timestamp \`${endTime}\` is greater than start \`${startTime}\` on line ${line}`,
      line
    });
  },
  w(name, value, line) {
    return new ParseError({
      code: ParseErrorCode.BadSettingValue,
      reason: `invalid value for cue setting \`${name}\` on line ${line} (value: ${value})`,
      line
    });
  },
  v(name, value, line) {
    return new ParseError({
      code: ParseErrorCode.UnknownSetting,
      reason: `unknown cue setting \`${name}\` on line ${line} (value: ${value})`,
      line
    });
  },
  u(name, value, line) {
    return new ParseError({
      code: ParseErrorCode.BadSettingValue,
      reason: `invalid value for region setting \`${name}\` on line ${line} (value: ${value})`,
      line
    });
  },
  t(name, value, line) {
    return new ParseError({
      code: ParseErrorCode.UnknownSetting,
      reason: `unknown region setting \`${name}\` on line ${line} (value: ${value})`,
      line
    });
  },
  // SSA-specific errors
  T(type, line) {
    return new ParseError({
      code: ParseErrorCode.BadFormat,
      reason: `format missing for \`${type}\` block on line ${line}`,
      line
    });
  }
};

var errors = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ParseErrorBuilder: ParseErrorBuilder
});

export { ArrayIterable, Component$1 as Component, LazyIterable, LogLevel, Model, ServiceIterable, Stream, TFJSBaseModel, TFJSCustomClassifier, TFJSCustomModel, account, batchPrediction, button, cocoSsd, confidencePlot, confusionMatrix, createStream, dashboard, dataStore, dataset, dataset2tfjs, datasetBrowser, datasetScatter, datasetTable, detectionBoxes, fileUpload, genericChart, getLogStream, imageDisplay, imageUpload, isDataset, isStream, iterableFromArray, iterableFromService, kmeansClustering, knnClassifier, logger, mediaRecorder, mergeDeep, microphone, mlpClassifier, mlpRegressor, mobileNet, modelParameters, notification, number, numberArray, onnxModel, pca, poseDetection, predictionProgress, progressBar, scatterPlot, select, sketchPad, slider, text, textArea, textField, textInput, tfjsModel, throwError, toggle, trainingHistory, trainingPlot, trainingProgress, umap, videoPlayer, webcam, wizard };
//# sourceMappingURL=marcelle.esm.js.map
