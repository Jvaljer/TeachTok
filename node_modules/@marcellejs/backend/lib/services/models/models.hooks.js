"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const feathers_hooks_common_1 = require("feathers-hooks-common");
const rmdir_1 = __importDefault(require("../../utils/rmdir"));
const mongodb_1 = require("mongodb");
const permission_hooks_1 = require("../../utils/permission-hooks");
// Don't remove this comment. It's needed to format import lines nicely.
const removeModelFilesFromDisk = (modelType) => async (context) => {
    if (!context.id) {
        return context;
    }
    const { files } = await context.service.get(context.id, {
        ...context.params,
        query: { $select: ['files'] },
    });
    try {
        if (files.length > 0) {
            const modelId = files[0][1].split('/')[0];
            (0, rmdir_1.default)(path_1.default.join(context.app.get('uploads'), modelType, modelId));
        }
    }
    catch (error) {
        // eslint-disable-next-line no-console
        console.log(`An error ocurred while removing model files (Id: ${context.id}).`, error);
    }
    return context;
};
const removeModelFilesFromGridfs = async (context) => {
    var _a;
    if (!context.id) {
        return context;
    }
    const bucket = context.app.get('mongoBucket');
    const { files } = await context.service.get(context.id, {
        user: (_a = context.params) === null || _a === void 0 ? void 0 : _a.user,
        query: { $select: ['files'] },
    });
    files.forEach((x) => {
        bucket.delete(new mongodb_1.ObjectId(x[1]), (err) => {
            if (err) {
                // eslint-disable-next-line no-console
                console.log(`An error ocurred while removing model files (Id: ${context.id}).`, err);
            }
        });
    });
    return context;
};
const removeModelFiles = (modelType, useGridfs) => useGridfs ? removeModelFilesFromGridfs : removeModelFilesFromDisk(modelType);
exports.default = (requireAuth, modelType, useGridfs) => {
    return {
        before: {
            all: [],
            find: [...(0, permission_hooks_1.authReadHooks)(requireAuth)],
            get: [...(0, permission_hooks_1.authReadHooks)(requireAuth)],
            create: [...(0, permission_hooks_1.authWriteHooks)(requireAuth), (0, feathers_hooks_common_1.setNow)('createdAt', 'updatedAt')],
            update: [
                ...(0, permission_hooks_1.authWriteHooks)(requireAuth),
                removeModelFiles(modelType, useGridfs),
                (0, feathers_hooks_common_1.setNow)('updatedAt'),
            ],
            patch: [
                ...(0, permission_hooks_1.authWriteHooks)(requireAuth),
                (0, feathers_hooks_common_1.iff)((context) => { var _a; return (_a = context.data) === null || _a === void 0 ? void 0 : _a.files; }, removeModelFiles(modelType, useGridfs)),
                (0, feathers_hooks_common_1.setNow)('updatedAt'),
            ],
            remove: [...(0, permission_hooks_1.authReadHooks)(requireAuth), removeModelFiles(modelType, useGridfs)],
        },
        after: {
            all: [],
            find: [],
            get: [],
            create: [],
            update: [],
            patch: [],
            remove: [],
        },
        error: {
            all: [],
            find: [],
            get: [],
            create: [],
            update: [],
            patch: [],
            remove: [],
        },
    };
};
