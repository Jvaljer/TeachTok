"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const feathers_hooks_common_1 = require("feathers-hooks-common");
const permission_hooks_1 = require("../../utils/permission-hooks");
// Don't remove this comment. It's needed to format import lines nicely.
const findDistinctNedb = async (context) => {
    var _a, _b;
    if (!((_b = (_a = context.params) === null || _a === void 0 ? void 0 : _a.query) === null || _b === void 0 ? void 0 : _b.$distinct) || context.type !== 'before' || context.method !== 'find') {
        return context;
    }
    const { $distinct, ...query } = context.params.query;
    query.$select = [$distinct];
    query.$limit = 0;
    const { total } = (await await context.service.find({ ...context.params, query }));
    query.$limit = total;
    const { data } = (await context.service.find({ ...context.params, query }));
    const res = Array.from(new Set(data.map((item) => item[$distinct])));
    context.result = res;
    return context;
};
const findDistinctMongodb = async (context) => {
    var _a, _b;
    if (!((_b = (_a = context.params) === null || _a === void 0 ? void 0 : _a.query) === null || _b === void 0 ? void 0 : _b.$distinct) || context.type !== 'before' || context.method !== 'find') {
        return context;
    }
    const { $distinct, ...query } = context.params.query;
    try {
        const res = await context.service.Model.distinct($distinct, query);
        context.result = res;
    }
    catch (error) {
        // eslint-disable-next-line no-console
        console.log('An error occurred while calling distinct:', error);
        context.result = [];
    }
    return context;
};
const findDistinct = (db) => {
    if (db === 'nedb') {
        return findDistinctNedb;
    }
    else if (db === 'mongodb') {
        return findDistinctMongodb;
    }
    else {
        throw new Error('Invalid database type: only "nedb" or "mongodb" are currently supported');
    }
};
exports.default = (dbType, requireAuth) => {
    return {
        before: {
            all: [],
            find: [...(0, permission_hooks_1.authReadHooks)(requireAuth), findDistinct(dbType)],
            get: [...(0, permission_hooks_1.authReadHooks)(requireAuth)],
            create: [...(0, permission_hooks_1.authWriteHooks)(requireAuth), (0, feathers_hooks_common_1.setNow)('createdAt', 'updatedAt')],
            update: [...(0, permission_hooks_1.authWriteHooks)(requireAuth), (0, feathers_hooks_common_1.setNow)('updatedAt')],
            patch: [...(0, permission_hooks_1.authWriteHooks)(requireAuth), (0, feathers_hooks_common_1.setNow)('updatedAt')],
            remove: [...(0, permission_hooks_1.authWriteHooks)(requireAuth)],
        },
        after: {
            all: [],
            find: [],
            get: [],
            create: [],
            update: [],
            patch: [],
            remove: [],
        },
        error: {
            all: [],
            find: [],
            get: [],
            create: [],
            update: [],
            patch: [],
            remove: [],
        },
    };
};
