"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const generic_nedb_class_1 = require("./generic-nedb.class");
const generic_mongodb_class_1 = require("./generic-mongodb.class");
const generic_nedb_model_1 = __importDefault(require("../../models/generic-nedb.model"));
const generic_hooks_1 = __importDefault(require("./generic.hooks"));
const errors_1 = require("@feathersjs/errors");
class DynamicService {
    find(params) {
        return this.getService(params.route.serviceName).find(params);
    }
    get(id, params) {
        return this.getService(params.route.serviceName).get(id, params);
    }
    create(data, params) {
        return this.getService(params.route.serviceName).create(data, params);
    }
    update(id, data, params) {
        return this.getService(params.route.serviceName).update(id, data, params);
    }
    patch(id, data, params) {
        return this.getService(params.route.serviceName).patch(id, data, params);
    }
    remove(id, params) {
        return this.getService(params.route.serviceName).remove(id, params);
    }
    setup(app) {
        this.app = app;
    }
    getService(name) {
        var _a;
        const allowedServices = (_a = this.app) === null || _a === void 0 ? void 0 : _a.get('whitelist').services;
        if (Array.isArray(allowedServices) && !allowedServices.includes(name)) {
            throw new errors_1.Forbidden('Service is unauthorized', name);
        }
        const app = this.app;
        if (!app.service(name)) {
            if (app.get('database') === 'nedb') {
                const options = {
                    Model: (0, generic_nedb_model_1.default)(app, name),
                    paginate: app.get('paginate'),
                    multi: true,
                    whitelist: ['$not', '$and', '$distinct'],
                };
                app.use(`/${name}`, new generic_nedb_class_1.Generic(options, app));
            }
            else if (app.get('database') === 'mongodb') {
                const options = {
                    paginate: app.get('paginate'),
                    multi: true,
                    whitelist: ['$not', '$and', '$distinct'],
                };
                app.use(`/${name}`, new generic_mongodb_class_1.Generic(options, app, name));
            }
            else {
                throw new Error('Invalid database type: only "nedb" or "mongodb" are currently supported');
            }
            const service = app.service(name);
            const h = (0, generic_hooks_1.default)(app.get('database'), app.get('authentication').enabled);
            service.hooks(h);
        }
        return app.service(name);
    }
}
function default_1(app) {
    app.use('/:serviceName', new DynamicService());
}
exports.default = default_1;
