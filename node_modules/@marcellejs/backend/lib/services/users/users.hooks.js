"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const feathersAuthentication = __importStar(require("@feathersjs/authentication"));
const local = __importStar(require("@feathersjs/authentication-local"));
const hooks_1 = require("feathers-casl/dist/hooks");
const abilities_1 = require("../../authentication/abilities");
// Don't remove this comment. It's needed to format import lines nicely.
const { authenticate } = feathersAuthentication.hooks;
const { hashPassword, protect } = local.hooks;
async function setRole(context) {
    const { type, data } = context;
    // const { type, data, service } = context;
    // const { total } = await service.find({ query: { $limit: 0 } });
    // const role = total > 0 ? 'Editor' : 'Admin';
    const role = 'editor';
    if (type !== 'before') {
        throw new Error('The "setField" hook should only be used as a "before" hook.');
    }
    const addRole = (d) => {
        if (!d) {
            return { role };
        }
        return { ...d, role };
    };
    context.data = Array.isArray(data) ? Promise.all(data.map(addRole)) : addRole(data);
    return context;
}
function authenticateIfNecessary(context) {
    if (!context.app.get('authentication').allowSignup) {
        return authenticate('jwt')(context).then((c) => (0, hooks_1.authorize)({ adapter: 'feathers-mongodb' })(c));
    }
    return Promise.resolve(context);
}
exports.default = {
    before: {
        all: [],
        find: [authenticate('jwt'), (0, hooks_1.authorize)({ adapter: 'feathers-mongodb' })],
        get: [
            authenticate('jwt'),
            //authorize({ adapter: 'feathers-mongodb' })
        ],
        create: [
            authenticateIfNecessary,
            hashPassword('password'),
            setRole,
            (context) => {
                const user = context.data;
                if (!user)
                    return context;
                const ability = (0, abilities_1.defineAbilitiesFor)(user, context.app);
                context.params.ability = ability;
                context.params.rules = ability.rules;
                return context;
            },
        ],
        update: [
            hashPassword('password'),
            authenticate('jwt'),
            (context) => {
                const { user } = context.params;
                console.log('authWriteHooks [update]', user === null || user === void 0 ? void 0 : user._id, context.id);
            },
            (0, hooks_1.authorize)({ adapter: 'feathers-mongodb' }),
        ],
        patch: [
            hashPassword('password'),
            authenticate('jwt'),
            (context) => {
                const { user } = context.params;
                console.log('authWriteHooks [patch]', user === null || user === void 0 ? void 0 : user._id, context.id);
            },
            (0, hooks_1.authorize)({ adapter: 'feathers-mongodb' }),
        ],
        remove: [authenticate('jwt'), (0, hooks_1.authorize)({ adapter: 'feathers-mongodb' })],
    },
    after: {
        all: [
            // Make sure the password field is never sent to the client
            // Always must be the last hook
            protect('password'),
            // authorize({ adapter: 'feathers-mongodb' }),
        ],
        find: [],
        get: [],
        create: [],
        update: [],
        patch: [],
        remove: [],
    },
    error: {
        all: [],
        find: [],
        get: [],
        create: [],
        update: [],
        patch: [],
        remove: [],
    },
};
