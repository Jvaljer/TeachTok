"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const feathers_debugger_service_1 = require("feathers-debugger-service");
const mongodb_1 = require("mongodb");
function normalizeMongoIds(context) {
    var _a;
    if (context.app.get('database') !== 'mongodb' ||
        ['authentication', 'feathers-debugger'].includes(context.path) ||
        !((_a = context.params) === null || _a === void 0 ? void 0 : _a.query) ||
        context.type !== 'before') {
        return context;
    }
    const { query } = context.params;
    if (Object.keys(query).includes('_id')) {
        if (typeof query._id === 'string') {
            context.params.query._id = (0, mongodb_1.ObjectId)(query._id);
        }
        if (typeof query._id === 'object' && query._id.$ne) {
            context.params.query._id.$ne = (0, mongodb_1.ObjectId)(query._id.$ne);
        }
        if (typeof query._id === 'object' && query._id.$in) {
            context.params.query._id.$in = query._id.$in.map((x) => (0, mongodb_1.ObjectId)(x));
        }
        if (typeof query._id === 'object' && query._id.$nin) {
            context.params.query._id.$nin = query._id.$nin.map((x) => (0, mongodb_1.ObjectId)(x));
        }
    }
    return context;
}
function convertDateQueries(context) {
    var _a, _b, _c, _d;
    for (const op of ['$gt', '$gte', '$lt', '$lte']) {
        if (((_b = (_a = context.params) === null || _a === void 0 ? void 0 : _a.query) === null || _b === void 0 ? void 0 : _b.createdAt) && context.params.query.createdAt[op]) {
            context.params.query.createdAt[op] = new Date(context.params.query.createdAt[op]);
        }
        if (((_d = (_c = context.params) === null || _c === void 0 ? void 0 : _c.query) === null || _d === void 0 ? void 0 : _d.updatedAt) && context.params.query.updatedAt[op]) {
            context.params.query.updatedAt[op] = new Date(context.params.query.updatedAt[op]);
        }
    }
    return context;
}
exports.default = {
    before: {
        all: [normalizeMongoIds, convertDateQueries, (0, feathers_debugger_service_1.trace)()],
        find: [],
        get: [],
        create: [],
        update: [],
        patch: [],
        remove: [],
    },
    after: {
        all: [],
        find: [],
        get: [],
        create: [],
        update: [],
        patch: [],
        remove: [],
    },
    error: {
        all: [],
        find: [],
        get: [],
        create: [],
        update: [],
        patch: [],
        remove: [],
    },
    finally: {
        all: [(0, feathers_debugger_service_1.trace)()],
        find: [],
        get: [],
        create: [],
        update: [],
        patch: [],
        remove: [],
    },
};
