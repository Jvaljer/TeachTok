/// <reference path="./dom.d.ts" />
/// <reference path="./google-cast.d.ts" />

import { M as MediaProviderLoader, A as AudioProvider, a as MediaSrc, b as MediaType, c as MediaContext, G as GoogleCastProvider, d as GoogleCastLoadedEvent, e as GoogleCastOptions, V as VideoProvider, H as HLSProvider, f as VimeoProvider, Y as YouTubeProvider, T as Thumbnail, S as SliderOrientation, g as TextRenderer, h as TextTrack, i as TextTrackList, j as MediaKeyShortcuts } from './dist/types/vidstack-9WSEN2It.js';
export { e8 as AirPlayButton, e7 as AirPlayButtonEvents, e6 as AirPlayButtonProps, cw as AnyMediaProvider, fH as AudioRadioGroup, fL as AudioRadioGroupChangeEvent, fJ as AudioRadioGroupEvents, fI as AudioRadioGroupProps, fK as AudioRadioOption, cd as AudioTrack, cg as AudioTrackAddEvent, ci as AudioTrackChangeEvent, cc as AudioTrackList, cf as AudioTrackListEvent, ce as AudioTrackListEvents, ch as AudioTrackRemoveEvent, eh as CaptionButton, eg as CaptionButtonEvents, ef as CaptionButtonProps, g8 as Captions, g7 as CaptionsProps, fM as CaptionsRadioGroup, fQ as CaptionsRadioGroupChangeEvent, fO as CaptionsRadioGroupEvents, fN as CaptionsRadioGroupProps, fP as CaptionsRadioOption, cj as ChangeAudioTrackEventDetail, fD as ChapterRadioGroupProps, fC as ChaptersRadioGroup, fF as ChaptersRadioGroupChangeEvent, fE as ChaptersRadioGroupEvents, fG as ChaptersRadioOption, dT as Controls, dW as ControlsChangeEvent, dV as ControlsEvents, dX as ControlsGroup, dU as ControlsProps, fR as DEFAULT_PLAYBACK_RATES, dG as DefaultLayoutProps, dI as DefaultLayoutTranslations, dH as DefaultLayoutWord, bN as FindMediaPlayerEvent, bM as FindMediaPlayerEventDetail, t as FullscreenAdapter, ek as FullscreenButton, ej as FullscreenButtonEvents, ei as FullscreenButtonProps, v as FullscreenChangeEvent, F as FullscreenController, w as FullscreenErrorEvent, u as FullscreenEvents, f$ as Gesture, g2 as GestureAction, g4 as GestureEvent, g1 as GestureEventType, g3 as GestureEvents, g0 as GestureProps, g6 as GestureTriggerEvent, g5 as GestureWillTriggerEvent, eb as GoogleCastButton, ea as GoogleCastButtonEvents, e9 as GoogleCastButtonProps, cA as GoogleCastEvent, cz as GoogleCastEvents, cB as GoogleCastLoadStartEvent, cC as GoogleCastPromptEvent, d8 as HLSAudioTrackLoadedEvent, d7 as HLSAudioTrackLoadingEvent, d6 as HLSAudioTrackSwitchedEvent, d5 as HLSAudioTrackSwitchingEvent, d4 as HLSAudioTracksUpdatedEvent, dz as HLSBackBufferReachedEvent, cS as HLSBufferAppendedEvent, cR as HLSBufferAppendingEvent, cP as HLSBufferCodecsEvent, cQ as HLSBufferCreatedEvent, cT as HLSBufferEosEvent, cV as HLSBufferFlushedEvent, cU as HLSBufferFlushingEvent, cO as HLSBufferResetEvent, dA as HLSConstructor, dB as HLSConstructorLoader, df as HLSCuesParsedEvent, dw as HLSDestroyingEvent, dv as HLSErrorEvent, dt as HLSFpsDropEvent, du as HLSFpsDropLevelCappingEvent, dr as HLSFragBufferedDataEvent, ds as HLSFragChangedEvent, dl as HLSFragDecryptedEvent, dj as HLSFragLoadEmergencyAbortedEvent, dk as HLSFragLoadedEvent, di as HLSFragLoadingEvent, dq as HLSFragParsedEvent, dm as HLSFragParsingInitSegmentEvent, dp as HLSFragParsingMetadataEvent, dn as HLSFragParsingUserdataEvent, dh as HLSInitPtsFoundEvent, dD as HLSInstanceCallback, cI as HLSInstanceEvent, dy as HLSKeyLoadedEvent, dx as HLSKeyLoadingEvent, d0 as HLSLevelLoadedEvent, c$ as HLSLevelLoadingEvent, d2 as HLSLevelPtsUpdatedEvent, c_ as HLSLevelSwitchedEvent, cZ as HLSLevelSwitchingEvent, d1 as HLSLevelUpdatedEvent, d3 as HLSLevelsUpdatedEvent, cH as HLSLibLoadErrorEvent, cF as HLSLibLoadStartEvent, cG as HLSLibLoadedEvent, dC as HLSLibrary, cX as HLSManifestLoadedEvent, cW as HLSManifestLoadingEvent, cY as HLSManifestParsedEvent, cL as HLSMediaAttachedEvent, cK as HLSMediaAttachingEvent, cN as HLSMediaDetachedEvent, cM as HLSMediaDetachingEvent, cE as HLSMediaEvent, dg as HLSNonNativeTextTracksFoundEvent, cD as HLSProviderEvents, de as HLSSubtitleFragProcessedEvent, dd as HLSSubtitleTrackLoadedEvent, dc as HLSSubtitleTrackLoadingEvent, db as HLSSubtitleTrackSwitchEvent, da as HLSSubtitleTracksClearedEvent, d9 as HLSSubtitleTracksUpdatedEvent, cJ as HLSUnsupportedEvent, n as List, p as ListAddEvent, o as ListEvents, m as ListItem, r as ListReadonlyChangeEvent, q as ListRemoveEvent, ew as LiveButton, ev as LiveButtonEvents, eu as LiveButtonProps, X as LocalMediaStorage, z as LogEvent, y as LogEventDetail, L as Logger, x as LoggerEvents, $ as MediaAbortEvent, b2 as MediaAirPlayRequestEvent, a1 as MediaAudioTrackChangeEvent, b8 as MediaAudioTrackChangeRequestEvent, a0 as MediaAudioTracksChangeEvent, a2 as MediaAutoPlayChangeEvent, a6 as MediaAutoPlayEvent, a5 as MediaAutoPlayEventDetail, a4 as MediaAutoPlayFailEvent, a3 as MediaAutoPlayFailEventDetail, a7 as MediaCanLoadEvent, a8 as MediaCanLoadPosterEvent, aa as MediaCanPlayDetail, a9 as MediaCanPlayEvent, ab as MediaCanPlayThroughEvent, U as MediaControls, ac as MediaControlsChangeEvent, bv as MediaCrossOrigin, ah as MediaDestroyEvent, ai as MediaDurationChangeEvent, aj as MediaEmptiedEvent, ak as MediaEndEvent, al as MediaEndedEvent, b9 as MediaEnterFullscreenRequestEvent, bb as MediaEnterPIPRequestEvent, bB as MediaErrorCode, bC as MediaErrorDetail, am as MediaErrorEvent, _ as MediaEvent, Z as MediaEvents, ba as MediaExitFullscreenRequestEvent, bc as MediaExitPIPRequestEvent, cy as MediaFullscreenAdapter, an as MediaFullscreenChangeEvent, ao as MediaFullscreenErrorEvent, b7 as MediaFullscreenRequestTarget, bd as MediaGoogleCastRequestEvent, bq as MediaHidePosterRequestEvent, cu as MediaKeyShortcut, ct as MediaKeyTarget, cv as MediaKeysCallback, as as MediaLiveChangeEvent, at as MediaLiveEdgeChangeEvent, be as MediaLiveEdgeRequestEvent, au as MediaLoadStartEvent, ap as MediaLoadedDataEvent, aq as MediaLoadedMetadataEvent, bz as MediaLoadingStrategy, ar as MediaLoopChangeEvent, br as MediaLoopRequestEvent, b5 as MediaMuteRequestEvent, aR as MediaOrientationChangeEvent, bs as MediaOrientationLockRequestEvent, bt as MediaOrientationUnlockRequestEvent, aH as MediaPIPChangeEvent, aI as MediaPIPErrorEvent, bo as MediaPauseControlsRequestEvent, aw as MediaPauseEvent, bi as MediaPauseRequestEvent, ax as MediaPlayEvent, ay as MediaPlayFailEvent, bf as MediaPlayRequestEvent, dP as MediaPlayer, bL as MediaPlayerConnectEvent, Q as MediaPlayerEvents, N as MediaPlayerProps, bK as MediaPlayerQuery, bE as MediaPlayerState, az as MediaPlayingEvent, aA as MediaPlaysInlineChangeEvent, aB as MediaPosterChangeEvent, bA as MediaPosterLoadingStrategy, b3 as MediaPosterStartLoadingRequestEvent, aD as MediaProgressEvent, aC as MediaProgressEventDetail, dS as MediaProvider, cx as MediaProviderAdapter, aF as MediaProviderChangeEvent, aE as MediaProviderLoaderChangeEvent, dQ as MediaProviderProps, aG as MediaProviderSetupEvent, dR as MediaProviderState, aJ as MediaQualitiesChangeEvent, aK as MediaQualityChangeEvent, bg as MediaQualityChangeRequestEvent, ad as MediaRateChangeEvent, bh as MediaRateChangeRequestEvent, R as MediaRemoteControl, af as MediaRemotePlaybackChangeEvent, ae as MediaRemotePlaybackChangeEventDetail, aS as MediaReplayEvent, b1 as MediaRequestEvents, bD as MediaResource, bn as MediaResumeControlsRequestEvent, bj as MediaSeekRequestEvent, aL as MediaSeekedEvent, aM as MediaSeekingEvent, bk as MediaSeekingRequestEvent, bp as MediaShowPosterRequestEvent, ag as MediaSourceChangeEvent, aN as MediaSourcesChangeEvent, aO as MediaStalledEvent, bl as MediaStartLoadingRequestEvent, aP as MediaStartedEvent, bJ as MediaState, O as MediaStateAccessors, W as MediaStorage, bH as MediaStore, bu as MediaStreamType, aW as MediaStreamTypeChangeEvent, aQ as MediaSuspendEvent, aY as MediaTextTrackChangeEvent, b4 as MediaTextTrackChangeRequestEvent, aX as MediaTextTracksChangeEvent, aU as MediaTimeUpdateEvent, aT as MediaTimeUpdateEventDetail, aV as MediaTitleChangeEvent, av as MediaTypeChangeEvent, b6 as MediaUnmuteRequestEvent, bO as MediaUserEvents, by as MediaViewType, aZ as MediaViewTypeChangeEvent, a_ as MediaVolumeChange, a$ as MediaVolumeChangeEvent, bm as MediaVolumeChangeRequestEvent, b0 as MediaWaitingEvent, f9 as Menu, fe as MenuButton, fg as MenuButtonEvents, ff as MenuButtonProps, fh as MenuButtonSelectEvent, fd as MenuCloseEvent, fb as MenuEvents, fi as MenuItem, fn as MenuItems, fr as MenuItemsProps, fc as MenuOpenEvent, fo as MenuPlacement, fq as MenuPlacementAlign, fp as MenuPlacementSide, fj as MenuPortal, fl as MenuPortalContext, fk as MenuPortalProps, fa as MenuProps, en as MuteButton, em as MuteButtonEvents, el as MuteButtonProps, gl as MuxThumbnailStoryboard, gm as MuxThumbnailTile, eq as PIPButton, ep as PIPButtonEvents, eo as PIPButtonProps, ee as PlayButton, ed as PlayButtonEvents, ec as PlayButtonProps, P as PlayerSrc, bI as PlayerStore, dL as PlyrControl, dJ as PlyrLayoutProps, dN as PlyrLayoutTranslations, dM as PlyrLayoutWord, dK as PlyrMarker, gb as Poster, g9 as PosterProps, ga as PosterState, fW as QualityRadioGroup, f_ as QualityRadioGroupChangeEvent, fZ as QualityRadioGroupEvents, fX as QualityRadioGroupProps, fY as QualityRadioOption, fw as Radio, fz as RadioChangeEvent, fy as RadioEvents, fs as RadioGroup, fv as RadioGroupChangeEvent, fu as RadioGroupEvents, ft as RadioGroupProps, fB as RadioOption, fx as RadioProps, fA as RadioSelectEvent, bx as RemotePlaybackInfo, bw as RemotePlaybackType, E as ScreenOrientationChangeEvent, D as ScreenOrientationChangeEventDetail, B as ScreenOrientationController, C as ScreenOrientationEvents, J as ScreenOrientationLockType, I as ScreenOrientationType, et as SeekButton, es as SeekButtonEvents, er as SeekButtonProps, eI as Slider, eE as SliderCSSVars, f6 as SliderChapters, f8 as SliderChaptersCSSVars, f7 as SliderChaptersProps, eL as SliderController, eM as SliderControllerProps, eK as SliderDelegate, eA as SliderDragEndEvent, ez as SliderDragStartEvent, eC as SliderDragValueChangeEvent, ey as SliderEvent, ex as SliderEvents, eD as SliderPointerValueChangeEvent, eV as SliderPreview, eX as SliderPreviewProps, eJ as SliderProps, eH as SliderState, eG as SliderStore, eT as SliderValue, eB as SliderValueChangeEvent, eU as SliderValueProps, eN as SliderVideo, eR as SliderVideoCanPlayEvent, eS as SliderVideoErrorEvent, eQ as SliderVideoEvents, eO as SliderVideoProps, eP as SliderVideoState, fS as SpeedRadioGroup, fV as SpeedRadioGroupChangeEvent, fU as SpeedRadioGroupEvents, fT as SpeedRadioGroupProps, bS as TextRenderers, c1 as TextTrackAddCueEvent, c9 as TextTrackAddEvent, c3 as TextTrackCueChangeEvent, c0 as TextTrackErrorEvent, bZ as TextTrackEvent, bY as TextTrackEvents, bX as TextTrackInit, c8 as TextTrackListEvent, c7 as TextTrackListEvents, cb as TextTrackListModeChangeEvent, b$ as TextTrackLoadEvent, b_ as TextTrackLoadStartEvent, c4 as TextTrackModeChangeEvent, bT as TextTrackReadyState, c2 as TextTrackRemoveCueEvent, ca as TextTrackRemoveEvent, gp as ThumbnailCoords, go as ThumbnailImage, gn as ThumbnailImageInit, gf as ThumbnailProps, gi as ThumbnailSrc, gg as ThumbnailState, gj as ThumbnailStoryboard, gk as ThumbnailTile, gh as ThumbnailsLoader, gc as Time, gd as TimeProps, bP as TimeRange, f3 as TimeSlider, f4 as TimeSliderCSSVars, f2 as TimeSliderEvents, f5 as TimeSliderProps, f1 as TimeSliderState, ge as TimeState, e5 as ToggleButton, e4 as ToggleButtonProps, dY as Tooltip, d$ as TooltipContent, e3 as TooltipContentProps, e0 as TooltipPlacement, e2 as TooltipPlacementAlign, e1 as TooltipPlacementSide, dZ as TooltipProps, d_ as TooltipTrigger, bW as VTTContent, bU as VTTCueInit, bV as VTTRegionInit, dF as VideoPresentationChangeEvent, dE as VideoPresentationEvents, cl as VideoQuality, co as VideoQualityAddEvent, cs as VideoQualityAutoChangeEvent, cq as VideoQualityChangeEvent, cr as VideoQualityChangeEventDetail, ck as VideoQualityList, cn as VideoQualityListEvent, cm as VideoQualityListEvents, cp as VideoQualityRemoveEvent, f0 as VolumeSlider, e$ as VolumeSliderCSSVars, e_ as VolumeSliderEvents, eY as VolumeSliderProps, eZ as VolumeSliderState, s as canFullscreen, l as formatSpokenTime, k as formatTime, bR as getTimeRangesEnd, bQ as getTimeRangesStart, c5 as isTrackCaptionKind, K as mediaContext, bF as mediaState, fm as menuPortalContext, c6 as parseJSONCaptionsFile, eF as sliderState, bG as softResetMediaState, eW as updateSliderPreviewPlacement, dO as usePlyrLayoutClasses } from './dist/types/vidstack-9WSEN2It.js';
import { R as ReadSignal, W as WriteSignal, C as Context, E as EventsTarget, D as Dispose, V as ViewController } from './dist/types/vidstack-CsfaPIuU.js';
export { a as appendTriggerEvent, f as findTriggerEvent, h as hasTriggerEvent, b as isKeyboardClick, c as isKeyboardEvent, i as isPointerEvent, w as walkTriggerEventChain } from './dist/types/vidstack-CsfaPIuU.js';
import { VTTCue } from 'media-captions';
export { IconProps } from './icons.js';
import 'hls.js';
import 'media-icons';

declare class AudioProviderLoader implements MediaProviderLoader<AudioProvider> {
    readonly name = "audio";
    target: HTMLAudioElement;
    canPlay(src: MediaSrc): boolean;
    mediaType(): MediaType;
    load(ctx: MediaContext): Promise<AudioProvider>;
}

declare class GoogleCastLoader implements MediaProviderLoader<GoogleCastProvider> {
    readonly name = "google-cast";
    target: HTMLElement;
    protected _player?: cast.framework.RemotePlayer;
    /**
     * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}
     */
    get cast(): cast.framework.CastContext;
    mediaType(): MediaType;
    canPlay(src: MediaSrc): boolean;
    prompt(ctx: MediaContext): Promise<void>;
    load(ctx: MediaContext): Promise<GoogleCastProvider>;
    protected _loadCastFramework(ctx: MediaContext): Promise<GoogleCastLoadedEvent | undefined>;
    protected _showPrompt(options: GoogleCastOptions): Promise<void>;
    protected _setOptions(options?: GoogleCastOptions): void;
    protected _notifyRemoteStateChange(ctx: MediaContext, state: RemotePlaybackState, trigger?: Event): void;
}

declare class VideoProviderLoader implements MediaProviderLoader<VideoProvider> {
    readonly name: string;
    target: HTMLVideoElement;
    canPlay(src: MediaSrc): boolean;
    mediaType(): MediaType;
    load(ctx: MediaContext): Promise<VideoProvider>;
}

declare class HLSProviderLoader extends VideoProviderLoader implements MediaProviderLoader<HLSProvider> {
    static supported: boolean;
    readonly name = "hls";
    canPlay(src: MediaSrc): boolean;
    load(context: any): Promise<HLSProvider>;
}

declare class VimeoProviderLoader implements MediaProviderLoader<VimeoProvider> {
    readonly name = "vimeo";
    target: HTMLIFrameElement;
    preconnect(): void;
    canPlay(src: MediaSrc): boolean;
    mediaType(): MediaType;
    load(ctx: MediaContext): Promise<VimeoProvider>;
    loadPoster(src: MediaSrc, ctx: MediaContext, abort: AbortController): Promise<string | null>;
}

declare class YouTubeProviderLoader implements MediaProviderLoader<YouTubeProvider> {
    readonly name = "youtube";
    target: HTMLIFrameElement;
    preconnect(): void;
    canPlay(src: MediaSrc): boolean;
    mediaType(): MediaType;
    load(ctx: MediaContext): Promise<YouTubeProvider>;
    loadPoster(src: MediaSrc, ctx: MediaContext, abort: AbortController): Promise<string | null>;
}

/** @see {@link https://www.vidstack.io/docs/player/providers/audio} */
declare function isAudioProvider(provider: any): provider is AudioProvider;
/** @see {@link https://www.vidstack.io/docs/player/providers/video} */
declare function isVideoProvider(provider: any): provider is VideoProvider;
/** @see {@link https://www.vidstack.io/docs/player/providers/hls} */
declare function isHLSProvider(provider: any): provider is HLSProvider;
/** @see {@link https://www.vidstack.io/docs/player/providers/youtube} */
declare function isYouTubeProvider(provider: any): provider is YouTubeProvider;
/** @see {@link https://www.vidstack.io/docs/player/providers/vimeo} */
declare function isVimeoProvider(provider: any): provider is VimeoProvider;
/** @see {@link https://www.vidstack.io/docs/player/providers/google-cast} */
declare function isGoogleCastProvider(provider: any): provider is GoogleCastProvider;
/** @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement} */
declare function isHTMLAudioElement(element: unknown): element is HTMLAudioElement;
/** @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement} */
declare function isHTMLVideoElement(element: unknown): element is HTMLVideoElement;
/** @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement} */
declare function isHTMLMediaElement(element: unknown): element is HTMLMediaElement;
/** @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement} */
declare function isHTMLIFrameElement(element: unknown): element is HTMLIFrameElement;

/**
 * Used to display preview thumbnails when the user is hovering or dragging the time slider.
 * The time ranges in the WebVTT file will automatically be matched based on the current slider
 * pointer position.
 *
 * @attr data-loading - Whether thumbnail image is loading.
 * @attr data-error - Whether an error occurred loading thumbnail.
 * @attr data-hidden - Whether thumbnail is not available or failed to load.
 * @docs {@link https://www.vidstack.io/docs/player/components/sliders/slider-thumbnail}
 */
declare class SliderThumbnail extends Thumbnail {
    private _slider;
    protected onAttach(el: HTMLElement): void;
    protected _getTime(): number;
}

interface SliderContext {
    _disabled: ReadSignal<boolean>;
    _orientation: ReadSignal<SliderOrientation>;
    _preview: WriteSignal<HTMLElement | null>;
}
declare const sliderContext: Context<SliderContext>;

declare class LibASSTextRenderer implements TextRenderer {
    readonly loader: LibASSModuleLoader;
    config?: LibASSConfig | undefined;
    readonly priority = 1;
    private _instance;
    private _track;
    private _typeRE;
    constructor(loader: LibASSModuleLoader, config?: LibASSConfig | undefined);
    canRender(track: TextTrack, video: HTMLVideoElement | null): boolean;
    attach(video: HTMLVideoElement | null): void;
    changeTrack(track: TextTrack | null): void;
    detach(): void;
    private _freeTrack;
}
interface LibASSModuleLoader {
    (): Promise<{
        default: LibASSConstructor;
    }>;
}
interface LibASSConstructor {
    new (config?: {
        video: HTMLVideoElement;
        canvas?: HTMLCanvasElement;
        subUrl?: string;
    } & LibASSConfig): LibASSInstance;
}
interface LibASSInstance extends EventsTarget<LibASSInstanceEvents> {
    _video: HTMLVideoElement;
    _canvas: HTMLVideoElement | null;
    setTrackByUrl(url: string): void;
    setCurrentTime(time: number): void;
    freeTrack(): void;
    destroy(): void;
}
interface LibASSInstanceEvents {
    ready: LibASSReadyEvent;
    error: LibASSErrorEvent;
}
interface LibASSReadyEvent extends Event {
}
interface LibASSErrorEvent extends ErrorEvent {
}
/**
 * @see {@link https://github.com/ThaUnknown/jassub/tree/main#options}
 */
interface LibASSConfig {
    /**
     * Which image blending mode to use. WASM will perform better on lower end devices, JS will
     * perform better if the device and browser supports hardware acceleration.
     *
     * @defaultValue "js"
     */
    blendMode?: 'js' | 'wasm';
    /**
     * Whether or not to use async rendering, which offloads the CPU by creating image bitmaps on
     * the GPU.
     *
     * @defaultValue true
     */
    asyncRender?: boolean;
    /**
     * Whether or not to render things fully on the worker, greatly reduces CPU usage.
     *
     * @defaultValue true
     */
    offscreenRender?: boolean;
    /**
     * Whether or not to render subtitles as the video player renders frames, rather than predicting
     * which frame the player is on using events.
     *
     * @defaultValue true
     */
    onDemandRender?: boolean;
    /**
     * Target FPS to render subtitles at. Ignored when onDemandRender is enabled.
     *
     * @defaultValue 24
     */
    targetFps?: number;
    /**
     * Subtitle time offset in seconds.
     *
     * @defaultValue 0
     */
    timeOffset?: number;
    /**
     * Whether or not to print debug information.
     *
     * @defaultValue false
     */
    debug?: boolean;
    /**
     * Scale down (< 1.0) the subtitles canvas to improve performance at the expense of quality, or
     * scale it up (> 1.0).
     *
     * @defaultValue 1.0
     */
    prescaleFactor?: number;
    /**
     * The height in pixels beyond which the subtitles canvas won't be pre-scaled.
     *
     * @defaultValue 1080
     */
    prescaleHeightLimit?: number;
    /**
     * The maximum rendering height in pixels of the subtitles canvas. Beyond this subtitles will
     * be up-scaled by the browser.
     *
     * @defaultValue 0
     */
    maxRenderHeight?: number;
    /**
     * Attempt to discard all animated tags. Enabling this may severely mangle complex subtitles
     * and should only be considered as an last ditch effort of uncertain success for hardware
     * otherwise incapable of displaying anything. Will not reliably work with manually edited or
     * allocated events.
     *
     * @defaultValue false
     */
    dropAllAnimations?: boolean;
    /**
     * The URL of the worker.
     *
     * @defaultValue "jassub-worker.js"
     */
    workerUrl?: string;
    /**
     * The URL of the legacy worker. Only loaded if the browser doesn't support WASM.
     *
     * @defaultValue "jassub-worker-legacy.js"
     */
    legacyWorkerUrl?: string;
    /**
     * The URL of the subtitle file to play.
     *
     */
    subUrl?: string;
    /**
     * The content of the subtitle file to play.
     *
     */
    subContent?: string;
    /**
     * An array of links or `Uint8Array` to the fonts used in the subtitle. If `Uint8Array` is used
     * the array is copied, not referenced. This forces all the fonts in this array to be loaded
     * by the renderer, regardless of if they are used.
     *
     */
    fonts?: string[] | Uint8Array[];
    /**
     * Object with all available fonts. Key is font family in lower case, value is link or
     * `Uint8Array`. These fonts are selectively loaded if detected as used in the current
     * subtitle track.
     *
     * @defaultValue {'liberation sans': './default.woff2'}}
     */
    availableFonts?: Record<string, string>;
    /**
     * The font family key of the fallback font in `availableFonts` to use if the other font
     * for the style is missing special glyphs or unicode.
     *
     * @defaultValue "liberation sans"
     */
    fallbackFont?: string;
    /**
     * If the Local Font Access API is enabled `[chrome://flags/#font-access]`, the library will
     * query for permissions to use local fonts and use them if any are missing. The permission can
     * be queried beforehand using `navigator.permissions.request({ name: 'local-fonts' })`.
     *
     * @defaultValue true
     */
    useLocalFonts?: boolean;
    /**
     * libass bitmap cache memory limit in MiB (approximate).
     */
    libassMemoryLimit?: number;
    /**
     * libass glyph cache memory limit in MiB (approximate).
     */
    libassGlyphLimit?: number;
}

declare function findActiveCue(cues: readonly VTTCue[], time: number): VTTCue | null;
declare function isCueActive(cue: VTTCue, time: number): boolean;
declare function watchActiveTextTrack(tracks: TextTrackList, kind: TextTrackKind | TextTrackKind[], onChange: (track: TextTrack | null) => void): Dispose;
declare function watchCueTextChange(tracks: TextTrackList, kind: TextTrackKind | TextTrackKind[], callback: (title: string) => void): void;

declare const MEDIA_KEY_SHORTCUTS: MediaKeyShortcuts;

declare class ARIAKeyShortcuts extends ViewController {
    private _shortcut;
    constructor(_shortcut: string);
    protected onAttach(el: HTMLElement): void;
}

declare const AUDIO_EXTENSIONS: RegExp;
declare const AUDIO_TYPES: Set<string>;
declare const VIDEO_EXTENSIONS: RegExp;
declare const VIDEO_TYPES: Set<string>;
declare const HLS_VIDEO_EXTENSIONS: RegExp;
declare const HLS_VIDEO_TYPES: Set<string>;
declare function isAudioSrc({ src, type }: MediaSrc): boolean;
declare function isVideoSrc(src: MediaSrc): boolean;
declare function isHLSSrc({ src, type }: MediaSrc): boolean;
declare function canGoogleCastSrc(src: MediaSrc): boolean;
declare function isMediaStream(src: unknown): src is MediaStream;

/**
 * Checks if the ScreenOrientation API is available.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation}
 */
declare function canOrientScreen(): boolean;
/**
 * Checks if the screen orientation can be changed.
 *
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation}
 */
declare function canRotateScreen(): boolean;
/**
 * Checks if the native HTML5 video player can play HLS.
 */
declare function canPlayHLSNatively(video?: HTMLVideoElement | null): boolean;
/**
 * Checks if the native HTML5 video player can enter picture-in-picture (PIP) mode when using
 * the Chrome browser.
 *
 * @see {@link https://developers.google.com/web/updates/2018/10/watch-video-using-picture-in-picture}
 */
declare function canUsePictureInPicture(video: HTMLVideoElement | null): boolean;
/**
 * Checks if the native HTML5 video player can use the presentation API in Safari.
 *
 * @see {@link https://developer.apple.com/documentation/webkitjs/htmlvideoelement/1631913-webkitpresentationmode}
 */
declare function canUseVideoPresentation(video: HTMLVideoElement | null): boolean;
declare function canChangeVolume(): Promise<boolean>;

export { ARIAKeyShortcuts, AUDIO_EXTENSIONS, AUDIO_TYPES, AudioProvider, AudioProviderLoader, GoogleCastLoadedEvent, GoogleCastLoader, GoogleCastProvider, HLSProvider, HLSProviderLoader, HLS_VIDEO_EXTENSIONS, HLS_VIDEO_TYPES, type LibASSConfig, type LibASSConstructor, type LibASSErrorEvent, type LibASSInstance, type LibASSInstanceEvents, type LibASSModuleLoader, type LibASSReadyEvent, LibASSTextRenderer, MEDIA_KEY_SHORTCUTS, MediaContext, MediaKeyShortcuts, MediaProviderLoader, MediaSrc, MediaType, type SliderContext, SliderOrientation, SliderThumbnail, TextRenderer, TextTrack, TextTrackList, Thumbnail, VIDEO_EXTENSIONS, VIDEO_TYPES, VideoProvider, VideoProviderLoader, VimeoProvider, VimeoProviderLoader, YouTubeProvider, YouTubeProviderLoader, canChangeVolume, canGoogleCastSrc, canOrientScreen, canPlayHLSNatively, canRotateScreen, canUsePictureInPicture, canUseVideoPresentation, findActiveCue, isAudioProvider, isAudioSrc, isCueActive, isGoogleCastProvider, isHLSProvider, isHLSSrc, isHTMLAudioElement, isHTMLIFrameElement, isHTMLMediaElement, isHTMLVideoElement, isMediaStream, isVideoProvider, isVideoSrc, isVimeoProvider, isYouTubeProvider, sliderContext, watchActiveTextTrack, watchCueTextChange };
