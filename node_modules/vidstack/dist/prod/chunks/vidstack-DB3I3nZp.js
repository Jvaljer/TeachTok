import { V as createContext, v as useContext, C as Component, q as computed, W as provideContext, z as isBoolean, Y as prop, t as isString, r as isArray, b as isFunction, n as signal, o as onDispose, Z as noop, _ as uppercaseFirstChar, $ as unwrap } from './vidstack-DoOmgEfT.js';
import { u as useMediaContext, b as useMediaState } from './vidstack-i0oJKwBM.js';
import { ae as DEFAULT_PLAYBACK_RATES } from './vidstack-D1JzjGR7.js';
import { x, n, l } from './vidstack-Bf6opHxk.js';
import { b as useResizeObserver } from './vidstack-CyIpzU-o.js';
import { $ as $signal, L as LayoutIconsLoader, I as Icon } from './vidstack-B2Ww2rqm.js';

const defaultLayoutContext = createContext();
function useDefaultLayoutContext() {
  return useContext(defaultLayoutContext);
}

const defaultLayoutProps = {
  customIcons: false,
  disableTimeSlider: false,
  menuGroup: "bottom",
  noGestures: false,
  noKeyboardActionDisplay: false,
  noModal: false,
  noScrubGesture: false,
  playbackRates: DEFAULT_PLAYBACK_RATES,
  seekStep: 10,
  sliderChaptersMinWidth: 325,
  smallWhen: false,
  thumbnails: null,
  translations: null,
  when: false
};

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
class DefaultLayout extends Component {
  constructor() {
    super(...arguments);
    this._m = computed(() => {
      const when = this.$props.when();
      return this.$m(when);
    });
    this.Ym = computed(() => {
      const when = this.$props.smallWhen();
      return this.$m(when);
    });
    this.menuContainer = null;
  }
  static {
    this.props = defaultLayoutProps;
  }
  get isMatch() {
    return this._m();
  }
  get isSmallLayout() {
    return this.Ym();
  }
  onSetup() {
    this.a = useMediaContext();
    this.setAttributes({
      "data-match": this._m,
      "data-size": () => this.Ym() ? "sm" : null,
      "data-no-scrub-gesture": this.$props.noScrubGesture
    });
    const self = this;
    provideContext(defaultLayoutContext, {
      ...this.$props,
      when: this._m,
      smallWhen: this.Ym,
      get menuContainer() {
        return self.menuContainer;
      }
    });
  }
  $m(query) {
    return query !== "never" && (isBoolean(query) ? query : computed(() => query(this.a.player.state))());
  }
}
__decorateClass([
  prop
], DefaultLayout.prototype, "menuContainer", 2);
__decorateClass([
  prop
], DefaultLayout.prototype, "isMatch", 1);
__decorateClass([
  prop
], DefaultLayout.prototype, "isSmallLayout", 1);

function i18n(translations, word) {
  return translations()?.[word] ?? word;
}

function renderMenuButton({
  label,
  icon,
  hint
}) {
  return x`
    <media-menu-button class="vds-menu-button">
      <slot name="menu-arrow-left-icon" data-class="vds-menu-button-close-icon"></slot>
      ${icon ? x`<slot name="${icon}-icon" data-class="vds-menu-button-icon"></slot>` : null}
      <span class="vds-menu-button-label">${$signal(label)}</span>
      <span class="vds-menu-button-hint" data-part="hint">${hint ? $signal(hint) : null} </span>
      <slot name="menu-arrow-right-icon" data-class="vds-menu-button-open-icon"></slot>
    </media-menu-button>
  `;
}
function renderRadioGroup({
  value = null,
  options,
  hideLabel = false,
  children = null,
  onChange = null
}) {
  function renderRadio(option) {
    const { value: value2, label: content } = option;
    return x`
      <media-radio class="vds-radio" value=${value2}>
        <div class="vds-radio-check"></div>
        ${!hideLabel ? x`
              <span class="vds-radio-label" data-part="label">
                ${isString(content) ? content : $signal(content)}
              </span>
            ` : null}
        ${isFunction(children) ? children(option) : children}
      </media-radio>
    `;
  }
  return x`
    <media-radio-group
      class="vds-radio-group"
      value=${isString(value) ? value : value ? $signal(value) : ""}
      @change=${onChange}
    >
      ${isArray(options) ? options.map(renderRadio) : $signal(() => options().map(renderRadio))}
    </media-radio-group>
  `;
}
function createRadioOptions(entries) {
  return isArray(entries) ? entries.map((entry) => ({ label: entry, value: entry.toLowerCase() })) : Object.keys(entries).map((label) => ({ label, value: entries[label] }));
}

const COLOR_OPTIONS = ["White", "Yellow", "Green", "Cyan", "Blue", "Magenta", "Red", "Black"], OPACITY_OPTIONS = ["0%", "25%", "50%", "75%", "100%"], FONT_FAMILY_OPTIONS = {
  "Monospaced Serif": "mono-serif",
  "Proportional Serif": "pro-serif",
  "Monospaced Sans-Serif": "mono-sans",
  "Proportional Sans-Serif": "pro-sans",
  Casual: "casual",
  Cursive: "cursive",
  "Small Capitals": "capitals"
}, FONT_SIZE_OPTIONS = ["50%", "75%", "100%", "150%", "200%", "300%", "400%"], TEXT_SHADOW_OPTIONS = ["None", "Drop Shadow", "Raised", "Depressed", "Outline"];
const resetContext = createContext();
function DefaultFontMenu() {
  return $signal(() => {
    const { hasCaptions } = useMediaState(), { translations } = useDefaultLayoutContext();
    if (!hasCaptions())
      return null;
    provideContext(resetContext, {
      all: /* @__PURE__ */ new Set()
    });
    return x`
      <media-menu class="vds-font-menu vds-menu">
        ${renderMenuButton({
      label: () => i18n(translations, "Font Styles"),
      icon: "menu-font"
    })}
        <media-menu-items class="vds-menu-items">
          ${DefaultFontFamilyMenu()}${DefaultFontSizeMenu()}${DefaultTextColorMenu()}${DefaultTextOpacityMenu()}${DefaultTextShadowMenu()}
          ${DefaultTextBgMenu()}${DefaultTextBgOpacityMenu()}${DefaultDisplayBgMenu()}
          ${DefaultDisplayOpacityMenu()}${DefaultResetMenuItem()}
        </media-menu-items>
      </media-menu>
    `;
  });
}
function DefaultFontFamilyMenu() {
  return DefaultFontSettingMenu({
    label: "Font Family",
    options: FONT_FAMILY_OPTIONS,
    defaultValue: "pro-sans",
    cssVarName: "font-family",
    getCssVarValue(value, player) {
      const fontVariant = value === "capitals" ? "small-caps" : "";
      player.el?.style.setProperty("--media-user-font-variant", fontVariant);
      return getFontFamilyCSSVarValue(value);
    }
  });
}
function DefaultFontSizeMenu() {
  return DefaultFontSettingMenu({
    label: "Font Size",
    options: FONT_SIZE_OPTIONS,
    defaultValue: "100%",
    cssVarName: "font-size",
    getCssVarValue: percentToRatio
  });
}
function DefaultTextColorMenu() {
  return DefaultFontSettingMenu({
    label: "Text Color",
    options: COLOR_OPTIONS,
    defaultValue: "white",
    cssVarName: "text-color",
    getCssVarValue(value) {
      return `rgb(${toRGB(value)} / var(--media-user-text-opacity, 1))`;
    }
  });
}
function DefaultTextOpacityMenu() {
  return DefaultFontSettingMenu({
    label: "Text Opacity",
    options: OPACITY_OPTIONS,
    defaultValue: "100%",
    cssVarName: "text-opacity",
    getCssVarValue: percentToRatio
  });
}
function DefaultTextShadowMenu() {
  return DefaultFontSettingMenu({
    label: "Text Shadow",
    options: TEXT_SHADOW_OPTIONS,
    defaultValue: "none",
    cssVarName: "text-shadow",
    getCssVarValue: getTextShadowCssVarValue
  });
}
function DefaultTextBgMenu() {
  return DefaultFontSettingMenu({
    label: "Background Color",
    options: COLOR_OPTIONS,
    defaultValue: "black",
    cssVarName: "text-bg",
    getCssVarValue(value) {
      return `rgb(${toRGB(value)} / var(--media-user-text-bg-opacity, 1))`;
    }
  });
}
function DefaultTextBgOpacityMenu() {
  return DefaultFontSettingMenu({
    label: "Background Opacity",
    options: OPACITY_OPTIONS,
    defaultValue: "100%",
    cssVarName: "text-bg-opacity",
    getCssVarValue: percentToRatio
  });
}
function DefaultDisplayBgMenu() {
  return DefaultFontSettingMenu({
    label: "Display Background Color",
    options: COLOR_OPTIONS,
    defaultValue: "black",
    cssVarName: "display-bg",
    getCssVarValue(value) {
      return `rgb(${toRGB(value)} / var(--media-user-display-bg-opacity, 1))`;
    }
  });
}
function DefaultDisplayOpacityMenu() {
  return DefaultFontSettingMenu({
    label: "Display Background Opacity",
    options: OPACITY_OPTIONS,
    defaultValue: "0%",
    cssVarName: "display-bg-opacity",
    getCssVarValue: percentToRatio
  });
}
function DefaultResetMenuItem() {
  const { translations } = useDefaultLayoutContext(), $label = () => i18n(translations, "Reset"), resets = useContext(resetContext);
  function onClick() {
    resets.current ? resets.current() : resets.all.forEach((reset) => reset());
  }
  return x`
    <button class="vds-menu-button" role="menuitem" @click=${onClick}>
      <span class="vds-menu-button-label">${$signal($label)}</span>
    </button>
  `;
}
function DefaultFontSettingMenu({
  label,
  options,
  defaultValue,
  cssVarName,
  getCssVarValue
}) {
  const { player } = useMediaContext(), { translations } = useDefaultLayoutContext(), resets = useContext(resetContext), radioOptions = createRadioOptions(options), key = `${label.toLowerCase().replace(/\s/g, "-")}`, $value = signal(defaultValue), $label = () => i18n(translations, label), $hint = () => {
    const value = $value(), label2 = radioOptions.find((radio) => radio.value === value)?.label || "";
    return i18n(translations, isString(label2) ? label2 : label2());
  };
  const savedValue = localStorage.getItem(`vds-player:${key}`);
  if (savedValue)
    onValueChange(savedValue);
  function onValueChange(value) {
    $value.set(value);
    localStorage.setItem(`vds-player:${key}`, value);
    player.el?.style.setProperty(
      `--media-user-${cssVarName}`,
      getCssVarValue?.(value, player) ?? value
    );
  }
  resets.all.add(onReset);
  onDispose(() => void resets.all.delete(onReset));
  function onReset() {
    onValueChange(defaultValue);
  }
  function onOpen() {
    resets.current = onReset;
  }
  function onClose() {
    resets.current = void 0;
  }
  return x`
    <media-menu class=${`vds-${key}-menu vds-menu`} @open=${onOpen} @close=${onClose}>
      ${renderMenuButton({ label: $label, hint: $hint })}
      <media-menu-items class="vds-menu-items">
        ${renderRadioGroup({
    value: $value,
    options: radioOptions,
    onChange({ detail: value }) {
      onValueChange(value);
    }
  })}
      </media-menu-items>
    </media-menu>
  `;
}
function percentToRatio(value) {
  return (parseInt(value) / 100).toString();
}
function toRGB(color) {
  switch (color) {
    case "white":
      return "255 255 255";
    case "yellow":
      return "255 255 0";
    case "green":
      return "0 128 0";
    case "cyan":
      return "0 255 255";
    case "blue":
      return "0 0 255";
    case "magenta":
      return "255 0 255";
    case "red":
      return "255 0 0";
    case "black":
      return "0 0 0";
  }
}
function getFontFamilyCSSVarValue(value) {
  switch (value) {
    case "mono-serif":
      return '"Courier New", Courier, "Nimbus Mono L", "Cutive Mono", monospace';
    case "mono-sans":
      return '"Deja Vu Sans Mono", "Lucida Console", Monaco, Consolas, "PT Mono", monospace';
    case "pro-sans":
      return 'Roboto, "Arial Unicode Ms", Arial, Helvetica, Verdana, "PT Sans Caption", sans-serif';
    case "casual":
      return '"Comic Sans MS", Impact, Handlee, fantasy';
    case "cursive":
      return '"Monotype Corsiva", "URW Chancery L", "Apple Chancery", "Dancing Script", cursive';
    case "capitals":
      return '"Arial Unicode Ms", Arial, Helvetica, Verdana, "Marcellus SC", sans-serif + font-variant=small-caps';
    default:
      return '"Times New Roman", Times, Georgia, Cambria, "PT Serif Caption", serif';
  }
}
function getTextShadowCssVarValue(value) {
  switch (value) {
    case "drop shadow":
      return "rgb(34, 34, 34) 1.86389px 1.86389px 2.79583px, rgb(34, 34, 34) 1.86389px 1.86389px 3.72778px, rgb(34, 34, 34) 1.86389px 1.86389px 4.65972px";
    case "raised":
      return "rgb(34, 34, 34) 1px 1px, rgb(34, 34, 34) 2px 2px";
    case "depressed":
      return "rgb(204, 204, 204) 1px 1px, rgb(34, 34, 34) -1px -1px";
    case "outline":
      return "rgb(34, 34, 34) 0px 0px 1.86389px, rgb(34, 34, 34) 0px 0px 1.86389px, rgb(34, 34, 34) 0px 0px 1.86389px, rgb(34, 34, 34) 0px 0px 1.86389px, rgb(34, 34, 34) 0px 0px 1.86389px";
    default:
      return "";
  }
}

function DefaultAirPlayButton({ tooltip }) {
  const { translations } = useDefaultLayoutContext(), { remotePlaybackState } = useMediaState(), $label = $signal(() => {
    const airPlayText = i18n(translations, "AirPlay"), stateText = uppercaseFirstChar(remotePlaybackState());
    return `${airPlayText} ${stateText}`;
  }), $airPlayText = $i18n(translations, "AirPlay");
  return x`
    <media-tooltip class="vds-airplay-tooltip vds-tooltip">
      <media-tooltip-trigger>
        <media-airplay-button class="vds-airplay-button vds-button" aria-label=${$label}>
          <slot name="airplay-icon" data-class="vds-airplay-icon"></slot>
        </media-airplay-button>
      </media-tooltip-trigger>
      <media-tooltip-content class="vds-tooltip-content" placement=${tooltip}>
        <span class="vds-airplay-tooltip-text">${$airPlayText}</span>
      </media-tooltip-content>
    </media-tooltip>
  `;
}
function DefaultGoogleCastButton({ tooltip }) {
  const { translations } = useDefaultLayoutContext(), { remotePlaybackState } = useMediaState(), $label = $signal(() => {
    const googleCastText = i18n(translations, "Google Cast"), stateText = uppercaseFirstChar(remotePlaybackState());
    return `${googleCastText} ${stateText}`;
  }), $googleCastText = $i18n(translations, "Google Cast");
  return x`
    <media-tooltip class="vds-google-cast-tooltip vds-tooltip">
      <media-tooltip-trigger>
        <media-google-cast-button class="vds-google-cast-button vds-button" aria-label=${$label}>
          <slot name="google-cast-icon" data-class="vds-google-cast-icon"></slot>
        </media-google-cast-button>
      </media-tooltip-trigger>
      <media-tooltip-content class="vds-tooltip-content" placement=${tooltip}>
        <span class="vds-google-cast-tooltip-text">${$googleCastText}</span>
      </media-tooltip-content>
    </media-tooltip>
  `;
}
function DefaultPlayButton({ tooltip }) {
  const { translations } = useDefaultLayoutContext(), $playText = $i18n(translations, "Play"), $pauseText = $i18n(translations, "Pause");
  return x`
    <media-tooltip class="vds-play-tooltip vds-tooltip">
      <media-tooltip-trigger>
        <media-play-button
          class="vds-play-button vds-button"
          aria-label=${$i18n(translations, "Play")}
        >
          <slot name="play-icon" data-class="vds-play-icon"></slot>
          <slot name="pause-icon" data-class="vds-pause-icon"></slot>
          <slot name="replay-icon" data-class="vds-replay-icon"></slot>
        </media-play-button>
      </media-tooltip-trigger>
      <media-tooltip-content class="vds-tooltip-content" placement=${tooltip}>
        <span class="vds-play-tooltip-text">${$playText}</span>
        <span class="vds-pause-tooltip-text">${$pauseText}</span>
      </media-tooltip-content>
    </media-tooltip>
  `;
}
function DefaultMuteButton({
  tooltip,
  ref: ref2 = noop
}) {
  const { translations } = useDefaultLayoutContext(), $muteText = $i18n(translations, "Mute"), $unmuteText = $i18n(translations, "Unmute");
  return x`
    <media-tooltip class="vds-mute-tooltip vds-tooltip">
      <media-tooltip-trigger>
        <media-mute-button
          class="vds-mute-button vds-button"
          aria-label=${$i18n(translations, "Mute")}
          ${n(ref2)}
        >
          <slot name="mute-icon" data-class="vds-mute-icon"></slot>
          <slot name="volume-low-icon" data-class="vds-volume-low-icon"></slot>
          <slot name="volume-high-icon" data-class="vds-volume-high-icon"></slot>
        </media-mute-button>
      </media-tooltip-trigger>
      <media-tooltip-content class="vds-tooltip-content" placement=${tooltip}>
        <span class="vds-mute-tooltip-text">${$unmuteText}</span>
        <span class="vds-unmute-tooltip-text">${$muteText}</span>
      </media-tooltip-content>
    </media-tooltip>
  `;
}
function DefaultCaptionButton({ tooltip }) {
  const { translations } = useDefaultLayoutContext(), $ccOnText = $i18n(translations, "Closed-Captions On"), $ccOffText = $i18n(translations, "Closed-Captions Off");
  return x`
    <media-tooltip class="vds-caption-tooltip vds-tooltip">
      <media-tooltip-trigger>
        <media-caption-button
          class="vds-caption-button vds-button"
          aria-label=${$i18n(translations, "Captions")}
        >
          <slot name="cc-on-icon" data-class="vds-cc-on-icon"></slot>
          <slot name="cc-off-icon" data-class="vds-cc-off-icon"></slot>
        </media-caption-button>
      </media-tooltip-trigger>
      <media-tooltip-content class="vds-tooltip-content" placement=${tooltip}>
        <span class="vds-cc-on-tooltip-text">${$ccOffText}</span>
        <span class="vds-cc-off-tooltip-text">${$ccOnText}</span>
      </media-tooltip-content>
    </media-tooltip>
  `;
}
function DefaultPIPButton() {
  const { translations } = useDefaultLayoutContext(), $enterText = $i18n(translations, "Enter PiP"), $exitText = $i18n(translations, "Exit PiP");
  return x`
    <media-tooltip class="vds-pip-tooltip vds-tooltip">
      <media-tooltip-trigger>
        <media-pip-button
          class="vds-pip-button vds-button"
          aria-label=${$i18n(translations, "PiP")}
        >
          <slot name="pip-enter-icon" data-class="vds-pip-enter-icon"></slot>
          <slot name="pip-exit-icon" data-class="vds-pip-exit-icon"></slot>
        </media-pip-button>
      </media-tooltip-trigger>
      <media-tooltip-content class="vds-tooltip-content">
        <span class="vds-pip-enter-tooltip-text">${$enterText}</span>
        <span class="vds-pip-exit-tooltip-text">${$exitText}</span>
      </media-tooltip-content>
    </media-tooltip>
  `;
}
function DefaultFullscreenButton({ tooltip }) {
  const { translations } = useDefaultLayoutContext(), $enterText = $i18n(translations, "Enter Fullscreen"), $exitText = $i18n(translations, "Exit Fullscreen");
  return x`
    <media-tooltip class="vds-fullscreen-tooltip vds-tooltip">
      <media-tooltip-trigger>
        <media-fullscreen-button
          class="vds-fullscreen-button vds-button"
          aria-label=${$i18n(translations, "Fullscreen")}
        >
          <slot name="fs-enter-icon" data-class="vds-fs-enter-icon"></slot>
          <slot name="fs-exit-icon" data-class="vds-fs-exit-icon"></slot>
        </media-fullscreen-button>
      </media-tooltip-trigger>
      <media-tooltip-content class="vds-tooltip-content" placement=${tooltip}>
        <span class="vds-fs-enter-tooltip-text">${$enterText}</span>
        <span class="vds-fs-exit-tooltip-text">${$exitText}</span>
      </media-tooltip-content>
    </media-tooltip>
  `;
}
function DefaultSeekButton({
  backward,
  tooltip
}) {
  const { translations, seekStep } = useDefaultLayoutContext(), seekText = !backward ? "Seek Forward" : "Seek Backward", $label = $i18n(translations, seekText), $seconds = () => (backward ? -1 : 1) * seekStep();
  return x`
    <media-tooltip class="vds-seek-tooltip vds-tooltip">
      <media-tooltip-trigger>
        <media-seek-button
          class="vds-seek-button vds-button"
          seconds=${$signal($seconds)}
          aria-label=${$label}
        >
          ${!backward ? x`<slot name="seek-forward-icon"></slot>` : x`<slot name="seek-backward-icon"></slot>`}
        </media-seek-button>
      </media-tooltip-trigger>
      <media-tooltip-content class="vds-tooltip-content" placement=${tooltip}>
        ${$i18n(translations, seekText)}
      </media-tooltip-content>
    </media-tooltip>
  `;
}
function DefaultVolumeSlider({ orientation } = {}) {
  const { translations } = useDefaultLayoutContext(), $label = $i18n(translations, "Volume");
  return x`
    <media-volume-slider
      class="vds-volume-slider vds-slider"
      aria-label=${$label}
      orientation=${l(orientation)}
    >
      <div class="vds-slider-track"></div>
      <div class="vds-slider-track-fill vds-slider-track"></div>
      <media-slider-preview class="vds-slider-preview" no-clamp>
        <media-slider-value class="vds-slider-value"></media-slider-value>
      </media-slider-preview>
      <div class="vds-slider-thumb"></div>
    </media-volume-slider>
  `;
}
function DefaultTimeSlider() {
  const $ref2 = signal(void 0), $width = signal(0), {
    thumbnails,
    translations,
    sliderChaptersMinWidth,
    disableTimeSlider,
    seekStep,
    noScrubGesture
  } = useDefaultLayoutContext(), $label = $i18n(translations, "Seek"), $isDisabled = $signal(disableTimeSlider), $isChaptersDisabled = $signal(() => $width() < sliderChaptersMinWidth()), $thumbnails = $signal(thumbnails);
  useResizeObserver($ref2, () => {
    const el = $ref2();
    el && $width.set(el.clientWidth);
  });
  return x`
    <media-time-slider
      class="vds-time-slider vds-slider"
      aria-label=${$label}
      key-step=${$signal(seekStep)}
      ?disabled=${$isDisabled}
      ?no-swipe-gesture=${$signal(noScrubGesture)}
      ${n($ref2.set)}
    >
      <media-slider-chapters class="vds-slider-chapters" ?disabled=${$isChaptersDisabled}>
        <template>
          <div class="vds-slider-chapter">
            <div class="vds-slider-track"></div>
            <div class="vds-slider-track-fill vds-slider-track"></div>
            <div class="vds-slider-progress vds-slider-track"></div>
          </div>
        </template>
      </media-slider-chapters>
      <div class="vds-slider-thumb"></div>
      <media-slider-preview class="vds-slider-preview">
        <media-slider-thumbnail
          class="vds-slider-thumbnail vds-thumbnail"
          .src=${$thumbnails}
        ></media-slider-thumbnail>
        <div class="vds-slider-chapter-title" data-part="chapter-title"></div>
        <media-slider-value class="vds-slider-value"></media-slider-value>
      </media-slider-preview>
    </media-time-slider>
  `;
}
function DefaultLiveButton() {
  const { translations } = useDefaultLayoutContext(), { live } = useMediaState(), $label = $i18n(translations, "Skip To Live"), $liveText = $i18n(translations, "LIVE");
  return live() ? x`
        <media-live-button class="vds-live-button" aria-label=${$label}>
          <span class="vds-live-button-text">${$liveText}</span>
        </media-live-button>
      ` : null;
}
function DefaultTimeGroup() {
  return x`
    <div class="vds-time-group">
      ${$signal(() => {
    const { duration } = useMediaState();
    if (!duration())
      return null;
    return [
      x`<media-time class="vds-time" type="current"></media-time>`,
      x`<div class="vds-time-divider">/</div>`,
      x`<media-time class="vds-time" type="duration"></media-time>`
    ];
  })}
    </div>
  `;
}
function DefaultTimeInvert() {
  return $signal(() => {
    const { live, duration } = useMediaState();
    return live() ? DefaultLiveButton() : duration() ? x`<media-time class="vds-time" type="current" toggle remainder></media-time>` : null;
  });
}
function DefaultControlsSpacer() {
  return x`<div class="vds-controls-spacer"></div>`;
}
function DefaultTimeInfo() {
  return $signal(() => {
    const { live } = useMediaState();
    return live() ? DefaultLiveButton() : DefaultTimeGroup();
  });
}
function MenuPortal(container, template) {
  return x`
    <media-menu-portal .container=${container} disabled="fullscreen">
      ${template}
    </media-menu-portal>
  `;
}
function DefaultChapterTitle() {
  return x`<media-chapter-title class="vds-chapter-title"></media-chapter-title>`;
}
function DefaultChaptersMenu({
  placement,
  tooltip,
  portal
}) {
  const { viewType } = useMediaState(), {
    translations,
    thumbnails,
    menuContainer,
    noModal,
    menuGroup,
    smallWhen: smWhen
  } = useDefaultLayoutContext(), $placement = computed(
    () => noModal() ? unwrap(placement) : !smWhen() ? unwrap(placement) : null
  ), $offset = computed(
    () => !smWhen() && menuGroup() === "bottom" && viewType() === "video" ? 26 : 0
  );
  const items = x`
    <media-menu-items
      class="vds-chapters-menu-items vds-menu-items"
      placement=${$signal($placement)}
      offset=${$signal($offset)}
    >
      <media-chapters-radio-group
        class="vds-chapters-radio-group vds-radio-group"
        .thumbnails=${$signal(thumbnails)}
      >
        <template>
          <media-radio class="vds-chapter-radio vds-radio">
            <media-thumbnail class="vds-thumbnail"></media-thumbnail>
            <div class="vds-chapter-radio-content">
              <span class="vds-chapter-radio-label" data-part="label"></span>
              <span class="vds-chapter-radio-start-time" data-part="start-time"></span>
              <span class="vds-chapter-radio-duration" data-part="duration"></span>
            </div>
          </media-radio>
        </template>
      </media-chapters-radio-group>
    </media-menu-items>
  `;
  return x`
    <media-menu class="vds-chapters-menu vds-menu">
      <media-tooltip class="vds-tooltip">
        <media-tooltip-trigger>
          <media-menu-button
            class="vds-menu-button vds-button"
            aria-label=${$i18n(translations, "Chapters")}
          >
            <slot name="menu-chapters-icon"></slot>
          </media-menu-button>
        </media-tooltip-trigger>
        <media-tooltip-content
          class="vds-tooltip-content"
          placement=${isFunction(tooltip) ? $signal(tooltip) : tooltip}
        >
          ${$i18n(translations, "Chapters")}
        </media-tooltip-content>
      </media-tooltip>
      ${portal ? MenuPortal(menuContainer, items) : items}
    </media-menu>
  `;
}
function DefaultSettingsMenu({
  placement,
  portal,
  tooltip
}) {
  return $signal(() => {
    const { viewType, canSetPlaybackRate, canSetQuality, qualities, audioTracks, hasCaptions } = useMediaState(), {
      translations,
      menuContainer,
      noModal,
      menuGroup,
      smallWhen: smWhen
    } = useDefaultLayoutContext(), $placement = computed(
      () => noModal() ? unwrap(placement) : !smWhen() ? unwrap(placement) : null
    ), $offset = computed(
      () => !smWhen() && menuGroup() === "bottom" && viewType() === "video" ? 26 : 0
    ), $hasMenuItems = computed(() => {
      return canSetPlaybackRate() || !!(canSetQuality() && qualities().length) || !!audioTracks().length || hasCaptions();
    });
    if (!$hasMenuItems())
      return null;
    const items = x`
      <media-menu-items
        class="vds-settings-menu-items vds-menu-items"
        placement=${$signal($placement)}
        offset=${$signal($offset)}
      >
        ${[
      DefaultAudioMenu(),
      DefaultSpeedMenu(),
      DefaultQualityMenu(),
      DefaultCaptionsMenu(),
      DefaultFontMenu()
    ]}
      </media-menu-items>
    `;
    return x`
      <media-menu class="vds-settings-menu vds-menu">
        <media-tooltip class="vds-tooltip">
          <media-tooltip-trigger>
            <media-menu-button
              class="vds-menu-button vds-button"
              aria-label=${$i18n(translations, "Settings")}
            >
              <slot name="menu-settings-icon" data-class="vds-rotate-icon"></slot>
            </media-menu-button>
          </media-tooltip-trigger>
          <media-tooltip-content
            class="vds-tooltip-content"
            placement=${isFunction(tooltip) ? $signal(tooltip) : tooltip}
          >
            ${$i18n(translations, "Settings")}
          </media-tooltip-content>
        </media-tooltip>
        ${portal ? MenuPortal(menuContainer, items) : items}
      </media-menu>
    `;
  });
}
function DefaultAudioMenu() {
  const { translations } = useDefaultLayoutContext(), $defaultText = $i18n(translations, "Default");
  return x`
    <media-menu class="vds-audio-menu vds-menu">
      ${renderMenuButton({
    label: () => i18n(translations, "Audio"),
    icon: "menu-audio"
  })}
      <media-menu-items class="vds-menu-items">
        <media-audio-radio-group
          class="vds-audio-radio-group vds-radio-group"
          empty-label=${$defaultText}
        >
          <template>
            <media-radio class="vds-audio-radio vds-radio">
              <div class="vds-radio-check"></div>
              <span class="vds-radio-label" data-part="label"></span>
            </media-radio>
          </template>
        </media-audio-radio-group>
      </media-menu-items>
    </media-menu>
  `;
}
function DefaultSpeedMenu() {
  const { translations, playbackRates } = useDefaultLayoutContext(), $normalText = $i18n(translations, "Normal");
  return x`
    <media-menu class="vds-speed-menu vds-menu">
      ${renderMenuButton({
    label: () => i18n(translations, "Speed"),
    icon: "menu-speed"
  })}
      <media-menu-items class="vds-menu-items">
        <media-speed-radio-group
          class="vds-speed-radio-group vds-radio-group"
          normal-label=${$normalText}
          .rates=${$signal(playbackRates)}
        >
          <template>
            <media-radio class="vds-speed-radio vds-radio">
              <div class="vds-radio-check"></div>
              <span class="vds-radio-label" data-part="label"></span>
            </media-radio>
          </template>
        </media-speed-radio-group>
      </media-menu-items>
    </media-menu>
  `;
}
function DefaultQualityMenu() {
  const { translations } = useDefaultLayoutContext(), $autoText = $i18n(translations, "Auto");
  return x`
    <media-menu class="vds-quality-menu vds-menu">
      ${renderMenuButton({
    label: () => i18n(translations, "Quality"),
    icon: "menu-quality"
  })}
      <media-menu-items class="vds-menu-items">
        <media-quality-radio-group
          class="vds-quality-radio-group vds-radio-group"
          auto-label=${$autoText}
        >
          <template>
            <media-radio class="vds-quality-radio vds-radio">
              <div class="vds-radio-check"></div>
              <span class="vds-radio-label" data-part="label"></span>
              <span class="vds-radio-hint" data-part="bitrate"></span>
            </media-radio>
          </template>
        </media-quality-radio-group>
      </media-menu-items>
    </media-menu>
  `;
}
function DefaultCaptionsMenu() {
  const { translations } = useDefaultLayoutContext(), $offText = $i18n(translations, "Off");
  return x`
    <media-menu class="vds-captions-menu vds-menu">
      ${renderMenuButton({
    label: () => i18n(translations, "Captions"),
    icon: "menu-captions"
  })}
      <media-menu-items class="vds-menu-items">
        <media-captions-radio-group
          class="vds-captions-radio-group vds-radio-group"
          off-label=${$offText}
        >
          <template>
            <media-radio class="vds-caption-radio vds-radio">
              <div class="vds-radio-check"></div>
              <span class="vds-radio-label" data-part="label"></span>
            </media-radio>
          </template>
        </media-captions-radio-group>
      </media-menu-items>
    </media-menu>
  `;
}
function createMenuContainer(className) {
  let container = document.querySelector(`body > .${className}`);
  if (!container) {
    container = document.createElement("div");
    container.style.display = "contents";
    container.classList.add(className);
    document.body.append(container);
  }
  return container;
}
function $i18n(translations, word) {
  return $signal(() => i18n(translations, word));
}

class DefaultLayoutIconsLoader extends LayoutIconsLoader {
  async xe() {
    const paths = (await import('./vidstack-DBhovyOa.js')).icons, icons = {};
    for (const iconName of Object.keys(paths)) {
      icons[iconName] = Icon({ name: iconName, paths: paths[iconName] });
    }
    return icons;
  }
}

export { DefaultLayout as D, DefaultSeekButton as a, DefaultPlayButton as b, DefaultTimeSlider as c, DefaultTimeInvert as d, DefaultCaptionButton as e, DefaultChaptersMenu as f, DefaultSettingsMenu as g, DefaultControlsSpacer as h, DefaultMuteButton as i, DefaultVolumeSlider as j, i18n as k, DefaultChapterTitle as l, createMenuContainer as m, DefaultLayoutIconsLoader as n, DefaultTimeInfo as o, DefaultAirPlayButton as p, DefaultGoogleCastButton as q, DefaultPIPButton as r, DefaultFullscreenButton as s, useDefaultLayoutContext as u };
