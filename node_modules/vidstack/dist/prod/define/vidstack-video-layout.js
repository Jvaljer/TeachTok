import { x, i } from '../chunks/vidstack-Bf6opHxk.js';
import { n as signal, e as effect, q as computed, L as camelToKebabCase, H as Host, o as onDispose, s as setAttribute } from '../chunks/vidstack-DoOmgEfT.js';
import { D as DefaultLayout, u as useDefaultLayoutContext, k as i18n, h as DefaultControlsSpacer, c as DefaultTimeSlider, b as DefaultPlayButton, i as DefaultMuteButton, j as DefaultVolumeSlider, o as DefaultTimeInfo, l as DefaultChapterTitle, e as DefaultCaptionButton, p as DefaultAirPlayButton, q as DefaultGoogleCastButton, r as DefaultPIPButton, s as DefaultFullscreenButton, f as DefaultChaptersMenu, g as DefaultSettingsMenu, m as createMenuContainer, n as DefaultLayoutIconsLoader } from '../chunks/vidstack-DB3I3nZp.js';
import { u as useMediaContext, b as useMediaState } from '../chunks/vidstack-i0oJKwBM.js';
import { $ as $signal, S as SlotManager } from '../chunks/vidstack-B2Ww2rqm.js';
import { L as LitElement } from '../chunks/vidstack-CbhL8rpf.js';
import { g as createSlot } from '../chunks/vidstack-CyIpzU-o.js';
import '../chunks/vidstack-D1JzjGR7.js';
import '../chunks/vidstack-awVFxJvn.js';
import '../chunks/vidstack-CerDQCFL.js';
import '../chunks/vidstack-B_9E7csz.js';
import '../chunks/vidstack-BYuWkQD6.js';
import '../chunks/vidstack-CMz4Bd8X.js';
import '../chunks/vidstack-B3EgHpRH.js';
import '../chunks/vidstack-2fIzRyOW.js';
import '../chunks/vidstack-XO9MYVWR.js';
import '../chunks/vidstack-ksPACRiU.js';

class DefaultVideoLayout extends DefaultLayout {
  static {
    this.props = {
      ...super.props,
      when: ({ viewType }) => viewType === "video",
      smallWhen: ({ width, height }) => width < 576 || height < 380
    };
  }
}

function DefaultVideoKeyboardActionDisplay() {
  return $signal(() => {
    const visible = signal(false), media = useMediaContext(), { noKeyboardActionDisplay } = useDefaultLayoutContext(), { lastKeyboardAction } = media.$state;
    if (noKeyboardActionDisplay())
      return null;
    effect(() => {
      visible.set(!!lastKeyboardAction());
      const id = setTimeout(() => visible.set(false), 500);
      return () => {
        visible.set(false);
        window.clearTimeout(id);
      };
    });
    const $actionDataAttr = computed(() => {
      const action = lastKeyboardAction()?.action;
      return action && visible() ? camelToKebabCase(action) : null;
    });
    const $classList = computed(() => `vds-kb-action${!visible() ? " hidden" : ""}`), $text = computed(getText), $statusLabel = computed(getStatusLabel), $iconSlot = computed(() => {
      const name = getIconName();
      return name ? createSlot(name) : null;
    });
    function Icon() {
      const $slot = $iconSlot();
      return $slot ? x`
            <div class="vds-kb-bezel" role="status" aria-label=${$signal($statusLabel)}>
              <div class="vds-kb-icon">${$iconSlot()}</div>
            </div>
          ` : null;
    }
    return x`
      <div class=${$signal($classList)} data-action=${$signal($actionDataAttr)}>
        <div class="vds-kb-text-wrapper">
          <div class="vds-kb-text">${$signal($text)}</div>
        </div>
        ${$signal(() => i(lastKeyboardAction(), Icon()))}
      </div>
    `;
  });
}
function getText() {
  const { $state } = useMediaContext(), action = $state.lastKeyboardAction()?.action;
  switch (action) {
    case "toggleMuted":
      return $state.muted() ? "0%" : getVolumeText($state.volume());
    case "volumeUp":
    case "volumeDown":
      return getVolumeText($state.volume());
    default:
      return "";
  }
}
function getVolumeText(volume) {
  return `${Math.round(volume * 100)}%`;
}
function getIconName() {
  const { $state } = useMediaContext(), action = $state.lastKeyboardAction()?.action;
  switch (action) {
    case "togglePaused":
      return !$state.paused() ? "kb-play-icon" : "kb-pause-icon";
    case "toggleMuted":
      return $state.muted() || $state.volume() === 0 ? "kb-mute-icon" : $state.volume() >= 0.5 ? "kb-volume-up-icon" : "kb-volume-down-icon";
    case "toggleFullscreen":
      return `kb-fs-${$state.fullscreen() ? "enter" : "exit"}-icon`;
    case "togglePictureInPicture":
      return `kb-pip-${$state.pictureInPicture() ? "enter" : "exit"}-icon`;
    case "toggleCaptions":
      return $state.hasCaptions() ? `kb-cc-${$state.textTrack() ? "on" : "off"}-icon` : null;
    case "volumeUp":
      return "kb-volume-up-icon";
    case "volumeDown":
      return "kb-volume-down-icon";
    case "seekForward":
      return "kb-seek-forward-icon";
    case "seekBackward":
      return "kb-seek-backward-icon";
    default:
      return null;
  }
}
function getStatusLabel() {
  const $text = getStatusText(), { translations } = useDefaultLayoutContext();
  return $text ? i18n(translations, $text) : null;
}
function getStatusText() {
  const { $state } = useMediaContext(), action = $state.lastKeyboardAction()?.action, { translations } = useDefaultLayoutContext();
  switch (action) {
    case "togglePaused":
      return !$state.paused() ? "Play" : "Pause";
    case "toggleFullscreen":
      return $state.fullscreen() ? "Enter Fullscreen" : "Exit Fullscreen";
    case "togglePictureInPicture":
      return $state.pictureInPicture() ? "Enter PiP" : "Exit PiP";
    case "toggleCaptions":
      return $state.textTrack() ? "Closed-Captions On" : "Closed-Captions Off";
    case "toggleMuted":
    case "volumeUp":
    case "volumeDown":
      return $state.muted() || $state.volume() === 0 ? "Mute" : `${Math.round($state.volume() * 100)}% ${translations()?.Volume ?? "Volume"}`;
    default:
      return null;
  }
}

function DefaultVideoLayoutLarge() {
  return [
    DefaultVideoGestures(),
    DefaultBufferingIndicator(),
    DefaultVideoKeyboardActionDisplay(),
    x`<media-captions class="vds-captions"></media-captions>`,
    x`<div class="vds-scrim"></div>`,
    x`
      <media-controls class="vds-controls">
        ${[
      DefaultControlsGroupTop(),
      DefaultControlsSpacer(),
      x`<media-controls-group class="vds-controls-group"></media-controls-group>`,
      DefaultControlsSpacer(),
      x`
            <media-controls-group class="vds-controls-group">
              ${DefaultTimeSlider()}
            </media-controls-group>
          `,
      x`
            <media-controls-group class="vds-controls-group">
              ${[
        DefaultPlayButton({ tooltip: "top start" }),
        DefaultMuteButton({ tooltip: "top" }),
        DefaultVolumeSlider(),
        DefaultTimeInfo(),
        DefaultChapterTitle(),
        DefaultCaptionButton({ tooltip: "top" }),
        DefaultBottomMenuGroup(),
        DefaultAirPlayButton({ tooltip: "top" }),
        DefaultGoogleCastButton({ tooltip: "top" }),
        DefaultPIPButton(),
        DefaultFullscreenButton({ tooltip: "top end" })
      ]}
            </media-controls-group>
          `
    ]}
      </media-controls>
    `
  ];
}
function DefaultBottomMenuGroup() {
  return $signal(() => {
    const { menuGroup } = useDefaultLayoutContext();
    return menuGroup() === "bottom" ? DefaultVideoMenus() : null;
  });
}
function DefaultControlsGroupTop() {
  return x`
    <media-controls-group class="vds-controls-group">
      ${$signal(() => {
    const { menuGroup } = useDefaultLayoutContext();
    return menuGroup() === "top" ? [DefaultControlsSpacer(), DefaultVideoMenus()] : null;
  })}
    </media-controls-group>
  `;
}
function DefaultVideoLayoutSmall() {
  return [
    DefaultVideoGestures(),
    DefaultBufferingIndicator(),
    x`<media-captions class="vds-captions"></media-captions>`,
    x`<div class="vds-scrim"></div>`,
    x`
      <media-controls class="vds-controls">
        <media-controls-group class="vds-controls-group">
          ${[
      DefaultAirPlayButton({ tooltip: "top start" }),
      DefaultGoogleCastButton({ tooltip: "bottom start" }),
      DefaultControlsSpacer(),
      DefaultCaptionButton({ tooltip: "bottom" }),
      DefaultVideoMenus(),
      DefaultMuteButton({ tooltip: "bottom end" })
    ]}
        </media-controls-group>

        ${DefaultControlsSpacer()}

        <media-controls-group class="vds-controls-group" style="pointer-events: none;">
          ${[
      DefaultControlsSpacer(),
      DefaultPlayButton({ tooltip: "top" }),
      DefaultControlsSpacer()
    ]}
        </media-controls-group>

        ${DefaultControlsSpacer()}

        <media-controls-group class="vds-controls-group">
          ${[
      DefaultTimeInfo(),
      DefaultChapterTitle(),
      DefaultFullscreenButton({ tooltip: "top end" })
    ]}
        </media-controls-group>

        <media-controls-group class="vds-controls-group">
          ${DefaultTimeSlider()}
        </media-controls-group>
      </media-controls>
    `,
    StartDuration()
  ];
}
function DefaultVideoLoadLayout() {
  return x`
    <div class="vds-load-container">
      ${[DefaultBufferingIndicator(), DefaultPlayButton({ tooltip: "top" })]}
    </div>
  `;
}
function StartDuration() {
  return $signal(() => {
    const { duration } = useMediaState();
    if (duration() === 0)
      return null;
    return x`
      <div class="vds-start-duration">
        <media-time class="vds-time" type="duration"></media-time>
      </div>
    `;
  });
}
function DefaultBufferingIndicator() {
  return x`
    <div class="vds-buffering-indicator">
      <media-spinner class="vds-buffering-spinner"></media-spinner>
    </div>
  `;
}
function DefaultVideoMenus() {
  const { menuGroup, smallWhen: smWhen } = useDefaultLayoutContext(), $side = () => menuGroup() === "top" || smWhen() ? "bottom" : "top", $tooltip = computed(() => `${$side()} ${menuGroup() === "top" ? "end" : "center"}`), $placement = computed(() => `${$side()} end`);
  return [
    DefaultChaptersMenu({ tooltip: $tooltip, placement: $placement, portal: true }),
    DefaultSettingsMenu({ tooltip: $tooltip, placement: $placement, portal: true })
  ];
}
function DefaultVideoGestures() {
  return $signal(() => {
    const { noGestures } = useDefaultLayoutContext();
    if (noGestures())
      return null;
    return x`
      <div class="vds-gestures">
        <media-gesture class="vds-gesture" event="pointerup" action="toggle:paused"></media-gesture>
        <media-gesture
          class="vds-gesture"
          event="pointerup"
          action="toggle:controls"
        ></media-gesture>
        <media-gesture
          class="vds-gesture"
          event="dblpointerup"
          action="toggle:fullscreen"
        ></media-gesture>
        <media-gesture class="vds-gesture" event="dblpointerup" action="seek:-10"></media-gesture>
        <media-gesture class="vds-gesture" event="dblpointerup" action="seek:10"></media-gesture>
      </div>
    `;
  });
}

class MediaVideoLayoutElement extends Host(LitElement, DefaultVideoLayout) {
  static {
    this.tagName = "media-video-layout";
  }
  static {
    this.attrs = {
      smallWhen: {
        converter(value) {
          return value !== "never" && !!value;
        }
      }
    };
  }
  onSetup() {
    this.forwardKeepAlive = false;
    this.a = useMediaContext();
    this.classList.add("vds-video-layout");
    this.menuContainer = createMenuContainer("vds-video-layout");
    effect(() => {
      if (!this.menuContainer)
        return;
      setAttribute(this.menuContainer, "data-size", this.isSmallLayout && "sm");
    });
    onDispose(() => this.menuContainer?.remove());
  }
  onConnect() {
    this.a.player.el?.setAttribute("data-layout", "video");
    onDispose(() => this.a.player.el?.removeAttribute("data-layout"));
    effect(() => {
      if (this.$props.customIcons()) {
        new SlotManager(this).connect();
      } else {
        new DefaultLayoutIconsLoader(this).connect();
      }
    });
  }
  render() {
    return x`${$signal(this._j.bind(this))}`;
  }
  _j() {
    const { load } = this.a.$props, { canLoad, streamType } = this.a.$state;
    return this.isMatch ? load() === "play" && !canLoad() ? DefaultVideoLoadLayout() : streamType() === "unknown" ? DefaultBufferingIndicator() : this.isSmallLayout ? DefaultVideoLayoutSmall() : DefaultVideoLayoutLarge() : null;
  }
}

export { MediaVideoLayoutElement };
