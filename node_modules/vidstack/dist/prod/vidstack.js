import { G as GroupedLog } from './chunks/vidstack-awVFxJvn.js';
export { L as List, m as mediaState, s as softResetMediaState } from './chunks/vidstack-awVFxJvn.js';
import { D as DOMEvent, t as isString, l as listenEvent, B as useState } from './chunks/vidstack-DoOmgEfT.js';
export { I as appendTriggerEvent, G as findTriggerEvent, E as hasTriggerEvent, c as isKeyboardClick, K as isKeyboardEvent, J as isPointerEvent, F as walkTriggerEventChain } from './chunks/vidstack-DoOmgEfT.js';
import { T as Thumbnail, S as Slider } from './chunks/vidstack-D1JzjGR7.js';
export { A as ARIAKeyShortcuts, J as AirPlayButton, n as AudioProviderLoader, ac as AudioRadioGroup, m as AudioTrackList, N as CaptionButton, ai as Captions, ad as CaptionsRadioGroup, ab as ChaptersRadioGroup, D as Controls, ae as DEFAULT_PLAYBACK_RATES, O as FullscreenButton, d as FullscreenController, ah as Gesture, K as GoogleCastButton, H as HLSProviderLoader, W as LiveButton, L as LocalMediaStorage, j as MEDIA_KEY_SHORTCUTS, i as MediaControls, b as MediaPlayer, a as MediaProvider, h as MediaRemoteControl, a5 as Menu, M as MenuButton, a8 as MenuItems, a6 as MenuPortal, Q as MuteButton, R as PIPButton, P as PlayButton, aj as Poster, ag as QualityRadioGroup, aa as Radio, a9 as RadioGroup, g as ScreenOrientationController, U as SeekButton, a4 as SliderChapters, Z as SliderController, a0 as SliderPreview, $ as SliderValue, _ as SliderVideo, af as SpeedRadioGroup, k as TextRenderers, l as TextTrackList, al as ThumbnailsLoader, ak as Time, a3 as TimeSlider, I as ToggleButton, E as Tooltip, G as TooltipContent, o as VideoProviderLoader, V as VideoQualityList, p as VimeoProviderLoader, a2 as VolumeSlider, Y as YouTubeProviderLoader, e as canFullscreen, c as formatSpokenTime, f as formatTime, q as isAudioProvider, w as isGoogleCastProvider, s as isHLSProvider, x as isHTMLAudioElement, B as isHTMLIFrameElement, z as isHTMLMediaElement, y as isHTMLVideoElement, r as isVideoProvider, v as isVimeoProvider, u as isYouTubeProvider, a7 as menuPortalContext, C as sliderContext, X as sliderState, a1 as updateSliderPreviewPlacement } from './chunks/vidstack-D1JzjGR7.js';
export { T as TimeRange, a as getTimeRangesEnd, g as getTimeRangesStart } from './chunks/vidstack-BYuWkQD6.js';
export { m as mediaContext, a as usePlyrLayoutClasses } from './chunks/vidstack-i0oJKwBM.js';
import { b as TextTrackSymbol } from './chunks/vidstack-CMz4Bd8X.js';
export { T as TextTrack, f as findActiveCue, d as isCueActive, i as isTrackCaptionKind, c as parseJSONCaptionsFile, w as watchActiveTextTrack, e as watchCueTextChange } from './chunks/vidstack-CMz4Bd8X.js';
export { C as ControlsGroup, T as TooltipTrigger } from './chunks/vidstack-BrgZdpmU.js';
export { M as MenuItem } from './chunks/vidstack-B5PAXpJX.js';
export { A as AUDIO_EXTENSIONS, a as AUDIO_TYPES, H as HLS_VIDEO_EXTENSIONS, d as HLS_VIDEO_TYPES, V as VIDEO_EXTENSIONS, b as VIDEO_TYPES, c as canGoogleCastSrc, i as isAudioSrc, f as isHLSSrc, g as isMediaStream, e as isVideoSrc } from './chunks/vidstack-XO9MYVWR.js';
export { b as canChangeVolume, d as canOrientScreen, c as canPlayHLSNatively, g as canRotateScreen, e as canUsePictureInPicture, f as canUseVideoPresentation } from './chunks/vidstack-B_9E7csz.js';
import './chunks/vidstack-CerDQCFL.js';
import './chunks/vidstack-CyIpzU-o.js';
import './chunks/vidstack-B3EgHpRH.js';
import './chunks/vidstack-2fIzRyOW.js';
import './chunks/vidstack-ksPACRiU.js';

class Logger {
  constructor() {
    this.A = null;
  }
  error(...data) {
    return this.dispatch("error", ...data);
  }
  warn(...data) {
    return this.dispatch("warn", ...data);
  }
  info(...data) {
    return this.dispatch("info", ...data);
  }
  debug(...data) {
    return this.dispatch("debug", ...data);
  }
  errorGroup(title) {
    return new GroupedLog(this, "error", title);
  }
  warnGroup(title) {
    return new GroupedLog(this, "warn", title);
  }
  infoGroup(title) {
    return new GroupedLog(this, "info", title);
  }
  debugGroup(title) {
    return new GroupedLog(this, "debug", title);
  }
  setTarget(newTarget) {
    this.A = newTarget;
  }
  dispatch(level, ...data) {
    return this.A?.dispatchEvent(
      new DOMEvent("vds-log", {
        bubbles: true,
        composed: true,
        detail: { level, data }
      })
    ) || false;
  }
}

class LibASSTextRenderer {
  constructor(loader, config) {
    this.loader = loader;
    this.config = config;
    this.priority = 1;
    this.g = null;
    this.z = null;
    this.He = /(ssa|ass)$/;
  }
  canRender(track, video) {
    return !!video && !!track.src && (isString(track.type) && this.He.test(track.type) || this.He.test(track.src));
  }
  attach(video) {
    if (!video)
      return;
    this.loader().then(async (mod) => {
      this.g = new mod.default({
        ...this.config,
        video,
        subUrl: this.z?.src || ""
      });
      listenEvent(this.g, "ready", () => {
        const canvas = this.g?.Pj;
        if (canvas)
          canvas.style.pointerEvents = "none";
      });
      listenEvent(this.g, "error", (event) => {
        if (this.z) {
          this.z[TextTrackSymbol.M] = 3;
          this.z.dispatchEvent(
            new DOMEvent("error", {
              trigger: event,
              detail: event.error
            })
          );
        }
      });
    });
  }
  changeTrack(track) {
    if (!track || track.readyState === 3) {
      this.Ie();
    } else if (this.z !== track) {
      this.g?.setTrackByUrl(track.src);
      this.z = track;
    }
  }
  detach() {
    this.Ie();
  }
  Ie() {
    this.g?.freeTrack();
    this.z = null;
  }
}

class SliderThumbnail extends Thumbnail {
  onAttach(el) {
    this.Q = useState(Slider.state);
  }
  Gf() {
    const { duration, clipStartTime } = this.a.$state;
    return clipStartTime() + this.Q.pointerRate() * duration();
  }
}

export { LibASSTextRenderer, Logger, Slider, SliderThumbnail, Thumbnail };
