import { l as listenEvent, e as effect, O as untrack, x as createScope, P as keysOf, o as onDispose, D as DOMEvent, u as peek } from '../chunks/vidstack-DoOmgEfT.js';
import { T as TimeRange } from '../chunks/vidstack-BYuWkQD6.js';
import { R as RAFLoop } from '../chunks/vidstack-BhYx9Fjk.js';
import { L as ListSymbol } from '../chunks/vidstack-CerDQCFL.js';
import { f as getCastSessionMedia, g as getCastContext, a as getCastSession, j as hasActiveCastSession, l as listenCastContextEvent, c as getCastErrorMessage } from '../chunks/vidstack-iUcBkPRm.js';
import '../chunks/vidstack-CyIpzU-o.js';

class GoogleCastMediaInfoBuilder {
  constructor(src) {
    this.Ul = new chrome.cast.media.MediaInfo(src.src, src.type);
  }
  build() {
    return this.Ul;
  }
  Xl(streamType) {
    if (streamType.includes("live")) {
      this.Ul.streamType = chrome.cast.media.StreamType.LIVE;
    } else {
      this.Ul.streamType = chrome.cast.media.StreamType.BUFFERED;
    }
    return this;
  }
  Yl(tracks) {
    this.Ul.tracks = tracks.map(this.Il);
    return this;
  }
  Zl(title, poster) {
    this.Ul.metadata = new chrome.cast.media.GenericMediaMetadata();
    this.Ul.metadata.title = title;
    this.Ul.metadata.images = [{ url: poster }];
    return this;
  }
  Il(track, trackId) {
    const castTrack = new chrome.cast.media.Track(trackId, chrome.cast.media.TrackType.TEXT);
    castTrack.name = track.label;
    castTrack.trackContentId = track.src;
    castTrack.trackContentType = "text/vtt";
    castTrack.language = track.language;
    castTrack.subtype = track.kind.toUpperCase();
    return castTrack;
  }
}

const REMOTE_TRACK_TEXT_TYPE = chrome.cast.media.TrackType.TEXT, REMOTE_TRACK_AUDIO_TYPE = chrome.cast.media.TrackType.AUDIO;
class GoogleCastTracksManager {
  constructor(_cast, _ctx, _onNewLocalTracks) {
    this.xm = _cast;
    this.b = _ctx;
    this.zm = _onNewLocalTracks;
  }
  Hm() {
    const syncRemoteActiveIds = this.Km.bind(this);
    listenEvent(this.b.audioTracks, "change", syncRemoteActiveIds);
    listenEvent(this.b.textTracks, "mode-change", syncRemoteActiveIds);
    effect(this.Lm.bind(this));
  }
  wm() {
    return this.b.$state.textTracks().filter((track) => track.src && track.type === "vtt");
  }
  Cm() {
    return this.b.$state.audioTracks();
  }
  Wl(type) {
    const tracks = this.xm.mediaInfo?.tracks ?? [];
    return type ? tracks.filter((track) => track.type === type) : tracks;
  }
  Dm() {
    const activeIds = [], activeLocalAudioTrack = this.Cm().find((track) => track.selected), activeLocalTextTracks = this.wm().filter(
      (track) => track.mode === "showing"
    );
    if (activeLocalAudioTrack) {
      const remoteAudioTracks = this.Wl(REMOTE_TRACK_AUDIO_TYPE), remoteAudioTrack = this.ym(remoteAudioTracks, activeLocalAudioTrack);
      if (remoteAudioTrack)
        activeIds.push(remoteAudioTrack.trackId);
    }
    if (activeLocalTextTracks?.length) {
      const remoteTextTracks = this.Wl(REMOTE_TRACK_TEXT_TYPE);
      if (remoteTextTracks.length) {
        for (const localTrack of activeLocalTextTracks) {
          const remoteTextTrack = this.ym(remoteTextTracks, localTrack);
          if (remoteTextTrack)
            activeIds.push(remoteTextTrack.trackId);
        }
      }
    }
    return activeIds;
  }
  Lm() {
    const localTextTracks = this.wm();
    if (!this.xm.isMediaLoaded)
      return;
    const remoteTextTracks = this.Wl(REMOTE_TRACK_TEXT_TYPE);
    for (const localTrack of localTextTracks) {
      const hasRemoteTrack = this.ym(remoteTextTracks, localTrack);
      if (!hasRemoteTrack) {
        untrack(() => this.zm?.());
        break;
      }
    }
  }
  Mm(event) {
    if (!this.xm.isMediaLoaded)
      return;
    const localAudioTracks = this.Cm(), localTextTracks = this.wm(), remoteAudioTracks = this.Wl(REMOTE_TRACK_AUDIO_TYPE), remoteTextTracks = this.Wl(REMOTE_TRACK_TEXT_TYPE);
    for (const remoteAudioTrack of remoteAudioTracks) {
      const hasLocalTrack = this.Em(localAudioTracks, remoteAudioTrack);
      if (hasLocalTrack)
        continue;
      const localAudioTrack = {
        id: remoteAudioTrack.trackId.toString(),
        label: remoteAudioTrack.name,
        language: remoteAudioTrack.language,
        kind: remoteAudioTrack.subtype ?? "main",
        selected: false
      };
      this.b.audioTracks[ListSymbol.oa](localAudioTrack, event);
    }
    for (const remoteTextTrack of remoteTextTracks) {
      const hasLocalTrack = this.Em(localTextTracks, remoteTextTrack);
      if (hasLocalTrack)
        continue;
      const localTextTrack = {
        id: remoteTextTrack.trackId.toString(),
        src: remoteTextTrack.trackContentId,
        label: remoteTextTrack.name,
        language: remoteTextTrack.language,
        kind: remoteTextTrack.subtype.toLowerCase()
      };
      this.b.textTracks.add(localTextTrack, event);
    }
  }
  Km(event) {
    if (!this.xm.isMediaLoaded)
      return;
    const activeIds = this.Dm(), editRequest = new chrome.cast.media.EditTracksInfoRequest(activeIds);
    this.Jm(editRequest).catch((error) => {
    });
  }
  Jm(request) {
    const media = getCastSessionMedia();
    return new Promise((resolve, reject) => media?.editTracksInfo(request, resolve, reject));
  }
  Em(localTracks, remoteTrack) {
    return localTracks.find((localTrack) => this.Fm(localTrack, remoteTrack));
  }
  ym(remoteTracks, localTrack) {
    return remoteTracks.find((remoteTrack) => this.Fm(localTrack, remoteTrack));
  }
  // Note: we can't rely on id matching because they will differ between local/remote. A local
  // track id might not even exist.
  Fm(localTrack, remoteTrack) {
    return remoteTrack.name === localTrack.label && remoteTrack.language === localTrack.language && remoteTrack.subtype.toLowerCase() === localTrack.kind.toLowerCase();
  }
}

class GoogleCastProvider {
  constructor(_player, _ctx) {
    this.aa = _player;
    this.b = _ctx;
    this.$$PROVIDER_TYPE = "GOOGLE_CAST";
    this.scope = createScope();
    this.V = null;
    this.mc = "disconnected";
    this.Va = 0;
    this.Fa = 0;
    this.Ga = new TimeRange(0, 0);
    this.Hb = new TimeRange(0, 0);
    this.Da = new RAFLoop(this.bd.bind(this));
    this.vm = null;
    this.Am = false;
    this.yb = new GoogleCastTracksManager(
      this.aa,
      this.b,
      this.zm.bind(this)
    );
  }
  get c() {
    return this.b.delegate.c;
  }
  get type() {
    return "google-cast";
  }
  get currentSrc() {
    return this.V;
  }
  /**
   * The Google Cast remote player.
   *
   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.RemotePlayer}
   */
  get player() {
    return this.aa;
  }
  /**
   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}
   */
  get cast() {
    return getCastContext();
  }
  /**
   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastSession}
   */
  get session() {
    return getCastSession();
  }
  /**
   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/chrome.cast.media.Media}
   */
  get media() {
    return getCastSessionMedia();
  }
  /**
   * Whether the current Google Cast session belongs to this provider.
   */
  get hasActiveSession() {
    return hasActiveCastSession(this.V);
  }
  setup() {
    this.sm();
    this.tm();
    this.yb.Hm();
    this.c("provider-setup", this);
  }
  sm() {
    listenCastContextEvent(
      cast.framework.CastContextEventType.CAST_STATE_CHANGED,
      this.qm.bind(this)
    );
  }
  tm() {
    const Event2 = cast.framework.RemotePlayerEventType, handlers = {
      [Event2.IS_CONNECTED_CHANGED]: this.qm,
      [Event2.IS_MEDIA_LOADED_CHANGED]: this.Jl,
      [Event2.CAN_CONTROL_VOLUME_CHANGED]: this.em,
      [Event2.CAN_SEEK_CHANGED]: this.fm,
      [Event2.DURATION_CHANGED]: this.wg,
      [Event2.IS_MUTED_CHANGED]: this.ab,
      [Event2.VOLUME_LEVEL_CHANGED]: this.ab,
      [Event2.IS_PAUSED_CHANGED]: this.jm,
      [Event2.LIVE_SEEKABLE_RANGE_CHANGED]: this.ic,
      [Event2.PLAYER_STATE_CHANGED]: this.km
    };
    this.dm = handlers;
    const handler = this.lm.bind(this);
    for (const type of keysOf(handlers)) {
      this.aa.controller.addEventListener(type, handler);
    }
    onDispose(() => {
      for (const type of keysOf(handlers)) {
        this.aa.controller.removeEventListener(type, handler);
      }
    });
  }
  async play() {
    if (!this.aa.isPaused && !this.Am)
      return;
    if (this.Am) {
      await this.Gm(false, 0);
      return;
    }
    this.aa.controller?.playOrPause();
  }
  async pause() {
    if (this.aa.isPaused)
      return;
    this.aa.controller?.playOrPause();
  }
  getMediaStatus(request) {
    return new Promise((resolve, reject) => {
      this.media?.getStatus(request, resolve, reject);
    });
  }
  setMuted(muted) {
    const hasChanged = muted && !this.aa.isMuted || !muted && this.aa.isMuted;
    if (hasChanged)
      this.aa.controller?.muteOrUnmute();
  }
  setCurrentTime(time) {
    this.aa.currentTime = time;
    this.c("seeking", time);
    this.aa.controller?.seek();
  }
  setVolume(volume) {
    this.aa.volumeLevel = volume;
    this.aa.controller?.setVolumeLevel();
  }
  async loadSource(src) {
    if (this.vm?.src !== src)
      this.vm = null;
    if (hasActiveCastSession(src)) {
      this.um();
      this.V = src;
      return;
    }
    this.c("load-start");
    const loadRequest = this.am(src), errorCode = await this.session.loadMedia(loadRequest);
    if (errorCode) {
      this.V = null;
      this.c("error", Error(getCastErrorMessage(errorCode)));
      return;
    }
    this.V = src;
  }
  destroy() {
    this.H();
    this.rm();
  }
  H() {
    if (!this.vm) {
      this.Fa = 0;
      this.Ga = new TimeRange(0, 0);
      this.Hb = new TimeRange(0, 0);
    }
    this.Da.ra();
    this.Va = 0;
    this.vm = null;
  }
  um() {
    const resumeSessionEvent = new DOMEvent("resume-session", { detail: this.session });
    this.Jl(resumeSessionEvent);
    const { muted, volume, remotePlaybackInfo } = this.b.$state, localState = remotePlaybackInfo();
    this.setCurrentTime(
      Math.max(this.aa.currentTime, localState?.savedState?.currentTime ?? 0)
    );
    this.setMuted(muted());
    this.setVolume(volume());
    if (localState?.savedState?.paused === false)
      this.play();
  }
  rm() {
    this.cast.endCurrentSession(true);
    const { remotePlaybackLoader } = this.b.$state;
    remotePlaybackLoader.set(null);
  }
  Ml() {
    this.b.$state.remotePlaybackInfo.set({
      savedState: {
        paused: this.aa.isPaused,
        currentTime: this.aa.currentTime
      }
    });
    this.rm();
  }
  bd() {
    this.im();
  }
  lm(event) {
    this.dm[event.type].call(this, event);
  }
  qm(data) {
    const castState = this.cast.getCastState(), state = castState === cast.framework.CastState.CONNECTED ? "connected" : castState === cast.framework.CastState.CONNECTING ? "connecting" : "disconnected";
    if (this.mc === state)
      return;
    const detail = { type: "google-cast", state }, trigger = this.Vl(data);
    this.mc = state;
    this.c("remote-playback-change", detail, trigger);
    if (state === "disconnected") {
      this.Ml();
    }
  }
  Jl(event) {
    const hasLoaded = !!this.aa.isMediaLoaded;
    if (!hasLoaded)
      return;
    const src = peek(this.b.$state.source);
    Promise.resolve().then(() => {
      if (src !== peek(this.b.$state.source) || !this.aa.isMediaLoaded)
        return;
      this.H();
      const duration = this.aa.duration;
      this.Hb = new TimeRange(0, duration);
      const detail = {
        provider: this,
        duration,
        buffered: this.Ga,
        seekable: this.gm()
      }, trigger = this.Vl(event);
      this.c("loaded-metadata", void 0, trigger);
      this.c("loaded-data", void 0, trigger);
      this.c("can-play", detail, trigger);
      this.em();
      this.fm(event);
      const { volume, muted } = this.b.$state;
      this.setVolume(volume());
      this.setMuted(muted());
      this.Da.Bb();
      this.yb.Mm(trigger);
      this.yb.Km(trigger);
    });
  }
  em() {
    this.b.$state.canSetVolume.set(this.aa.canControlVolume);
  }
  fm(event) {
    const trigger = this.Vl(event);
    this.c("stream-type-change", this.mm(), trigger);
  }
  mm() {
    const streamType = this.aa.mediaInfo?.streamType;
    return streamType === chrome.cast.media.StreamType.LIVE ? this.aa.canSeek ? "live:dvr" : "live" : "on-demand";
  }
  im() {
    if (this.vm)
      return;
    const currentTime = this.aa.currentTime;
    if (currentTime === this.Va)
      return;
    const prevPlayed = this.Fa, played = this.cm(currentTime), detail = { currentTime, played };
    this.c("time-update", detail);
    if (currentTime > prevPlayed)
      this.ic();
    if (this.b.$state.seeking()) {
      this.c("seeked", currentTime);
    }
    this.Va = currentTime;
  }
  cm(time) {
    return this.Fa >= time ? this.Ga : this.Ga = new TimeRange(0, this.Fa = time);
  }
  wg(event) {
    if (!this.aa.isMediaLoaded || this.vm)
      return;
    const duration = this.aa.duration, trigger = this.Vl(event);
    this.Hb = new TimeRange(0, duration);
    this.c("duration-change", duration, trigger);
  }
  ab(event) {
    if (!this.aa.isMediaLoaded)
      return;
    const detail = {
      muted: this.aa.isMuted,
      volume: this.aa.volumeLevel
    }, trigger = this.Vl(event);
    this.c("volume-change", detail, trigger);
  }
  jm(event) {
    const trigger = this.Vl(event);
    if (this.aa.isPaused) {
      this.c("pause", void 0, trigger);
    } else {
      this.c("play", void 0, trigger);
    }
  }
  ic(event) {
    const detail = {
      seekable: this.gm(),
      buffered: this.Ga
    }, trigger = event ? this.Vl(event) : void 0;
    this.c("progress", detail, trigger);
  }
  km(event) {
    const state = this.aa.playerState, PlayerState = chrome.cast.media.PlayerState;
    this.Am = state === PlayerState.IDLE;
    if (state === PlayerState.PAUSED)
      return;
    const trigger = this.Vl(event);
    switch (state) {
      case PlayerState.PLAYING:
        this.c("playing", void 0, trigger);
        break;
      case PlayerState.BUFFERING:
        this.c("waiting", void 0, trigger);
        break;
      case PlayerState.IDLE:
        this.Da.ra();
        this.c("pause");
        this.c("end");
        break;
    }
  }
  gm() {
    return this.aa.liveSeekableRange ? new TimeRange(this.aa.liveSeekableRange.start, this.aa.liveSeekableRange.end) : this.Hb;
  }
  Vl(detail) {
    return detail instanceof Event ? detail : new DOMEvent(detail.type, { detail });
  }
  Dl(src) {
    const { streamType, title, poster } = this.b.$state;
    return new GoogleCastMediaInfoBuilder(src).Zl(title(), poster()).Xl(streamType()).Yl(this.yb.wm()).build();
  }
  am(src) {
    const mediaInfo = this.Dl(src), request = new chrome.cast.media.LoadRequest(mediaInfo), info = this.b.$state.remotePlaybackInfo();
    request.autoplay = (this.vm?.paused ?? info?.savedState?.paused) === false;
    request.currentTime = this.vm?.time ?? info?.savedState?.currentTime ?? 0;
    return request;
  }
  async Gm(paused, time) {
    const src = peek(this.b.$state.source);
    this.vm = { src, paused, time };
    await this.loadSource(src);
  }
  zm() {
    this.Gm(this.aa.isPaused, this.aa.currentTime).catch((error) => {
    });
  }
}

export { GoogleCastProvider };
