import { T as Thumbnail, S as Slider } from './chunks/vidstack-xZ37JZ9V.js';
export { A as ARIAKeyShortcuts, K as AirPlayButton, o as AudioProviderLoader, ad as AudioRadioGroup, n as AudioTrackList, O as CaptionButton, aj as Captions, ae as CaptionsRadioGroup, ac as ChaptersRadioGroup, E as Controls, af as DEFAULT_PLAYBACK_RATES, Q as FullscreenButton, d as FullscreenController, ai as Gesture, N as GoogleCastButton, H as HLSProviderLoader, X as LiveButton, j as LocalMediaStorage, L as Logger, k as MEDIA_KEY_SHORTCUTS, i as MediaControls, b as MediaPlayer, a as MediaProvider, h as MediaRemoteControl, a6 as Menu, M as MenuButton, a9 as MenuItems, a7 as MenuPortal, R as MuteButton, U as PIPButton, P as PlayButton, ak as Poster, ah as QualityRadioGroup, ab as Radio, aa as RadioGroup, g as ScreenOrientationController, W as SeekButton, a5 as SliderChapters, _ as SliderController, a1 as SliderPreview, a0 as SliderValue, $ as SliderVideo, ag as SpeedRadioGroup, l as TextRenderers, m as TextTrackList, am as ThumbnailsLoader, al as Time, a4 as TimeSlider, J as ToggleButton, G as Tooltip, I as TooltipContent, p as VideoProviderLoader, V as VideoQualityList, q as VimeoProviderLoader, a3 as VolumeSlider, Y as YouTubeProviderLoader, e as canFullscreen, c as formatSpokenTime, f as formatTime, r as isAudioProvider, x as isGoogleCastProvider, u as isHLSProvider, y as isHTMLAudioElement, C as isHTMLIFrameElement, B as isHTMLMediaElement, z as isHTMLVideoElement, s as isVideoProvider, w as isVimeoProvider, v as isYouTubeProvider, a8 as menuPortalContext, D as sliderContext, Z as sliderState, a2 as updateSliderPreviewPlacement } from './chunks/vidstack-xZ37JZ9V.js';
export { L as List, m as mediaState, s as softResetMediaState } from './chunks/vidstack-BilA8Hmg.js';
export { T as TimeRange, a as getTimeRangesEnd, g as getTimeRangesStart } from './chunks/vidstack-DLtp1VCK.js';
export { m as mediaContext, a as usePlyrLayoutClasses } from './chunks/vidstack-Cs8ahLI-.js';
import { b as TextTrackSymbol } from './chunks/vidstack-DWHAQsPW.js';
export { T as TextTrack, f as findActiveCue, d as isCueActive, i as isTrackCaptionKind, c as parseJSONCaptionsFile, w as watchActiveTextTrack, e as watchCueTextChange } from './chunks/vidstack-DWHAQsPW.js';
import { t as isString, l as listenEvent, D as DOMEvent, B as useState } from './chunks/vidstack-CXruz14q.js';
export { I as appendTriggerEvent, G as findTriggerEvent, E as hasTriggerEvent, c as isKeyboardClick, K as isKeyboardEvent, J as isPointerEvent, F as walkTriggerEventChain } from './chunks/vidstack-CXruz14q.js';
export { C as ControlsGroup, T as TooltipTrigger } from './chunks/vidstack-0Sdt4_DW.js';
export { M as MenuItem } from './chunks/vidstack-Cqx9W_6g.js';
export { A as AUDIO_EXTENSIONS, a as AUDIO_TYPES, H as HLS_VIDEO_EXTENSIONS, d as HLS_VIDEO_TYPES, V as VIDEO_EXTENSIONS, b as VIDEO_TYPES, c as canGoogleCastSrc, i as isAudioSrc, f as isHLSSrc, g as isMediaStream, e as isVideoSrc } from './chunks/vidstack-ChEoSTSp.js';
export { b as canChangeVolume, d as canOrientScreen, c as canPlayHLSNatively, g as canRotateScreen, e as canUsePictureInPicture, f as canUseVideoPresentation } from './chunks/vidstack-BLNW_fQy.js';
import './chunks/vidstack-CyiDQdIB.js';
import './chunks/vidstack-CnaYRoc3.js';
import './chunks/vidstack-1gmLGa6x.js';
import './chunks/vidstack-2fIzRyOW.js';
import './chunks/vidstack-ksPACRiU.js';

class LibASSTextRenderer {
  constructor(loader, config) {
    this.loader = loader;
    this.config = config;
    this.priority = 1;
    this._instance = null;
    this._track = null;
    this._typeRE = /(ssa|ass)$/;
  }
  canRender(track, video) {
    return !!video && !!track.src && (isString(track.type) && this._typeRE.test(track.type) || this._typeRE.test(track.src));
  }
  attach(video) {
    if (!video)
      return;
    this.loader().then(async (mod) => {
      this._instance = new mod.default({
        ...this.config,
        video,
        subUrl: this._track?.src || ""
      });
      listenEvent(this._instance, "ready", () => {
        const canvas = this._instance?._canvas;
        if (canvas)
          canvas.style.pointerEvents = "none";
      });
      listenEvent(this._instance, "error", (event) => {
        if (this._track) {
          this._track[TextTrackSymbol._readyState] = 3;
          this._track.dispatchEvent(
            new DOMEvent("error", {
              trigger: event,
              detail: event.error
            })
          );
        }
      });
    });
  }
  changeTrack(track) {
    if (!track || track.readyState === 3) {
      this._freeTrack();
    } else if (this._track !== track) {
      this._instance?.setTrackByUrl(track.src);
      this._track = track;
    }
  }
  detach() {
    this._freeTrack();
  }
  _freeTrack() {
    this._instance?.freeTrack();
    this._track = null;
  }
}

class SliderThumbnail extends Thumbnail {
  onAttach(el) {
    this._slider = useState(Slider.state);
  }
  _getTime() {
    const { duration, clipStartTime } = this._media.$state;
    return clipStartTime() + this._slider.pointerRate() * duration();
  }
}

{
  console.warn("[vidstack] dev mode!");
}

export { LibASSTextRenderer, Slider, SliderThumbnail, Thumbnail };
