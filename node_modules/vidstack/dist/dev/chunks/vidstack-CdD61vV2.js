import { c as coerceToError } from './vidstack-2fIzRyOW.js';
import { c as canGoogleCastSrc } from './vidstack-ChEoSTSp.js';
import { l as loadScript } from './vidstack-DWHAQsPW.js';
import { I as IS_CHROME, a as IS_IOS } from './vidstack-BLNW_fQy.js';
import { g as getCastContext, a as getCastSession, i as isCastConnected, h as hasLoadedCastFramework, b as isCastAvailable, c as getCastErrorMessage, d as getDefaultCastOptions, e as getCastFrameworkURL } from './vidstack-Cm9TQ8XO.js';
import { u as peek, D as DOMEvent } from './vidstack-CXruz14q.js';
import './vidstack-CyiDQdIB.js';

class GoogleCastLoader {
  constructor() {
    this.name = "google-cast";
  }
  /**
   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}
   */
  get cast() {
    return getCastContext();
  }
  mediaType() {
    return "video";
  }
  canPlay(src) {
    return IS_CHROME && !IS_IOS && canGoogleCastSrc(src);
  }
  async prompt(ctx) {
    let openEvent;
    try {
      const loadEvent = await this._loadCastFramework(ctx);
      if (!this._player) {
        this._player = new cast.framework.RemotePlayer();
        new cast.framework.RemotePlayerController(this._player);
      }
      openEvent = ctx.player.createEvent("google-cast-prompt-open", {
        trigger: loadEvent
      });
      ctx.player.dispatchEvent(openEvent);
      this._notifyRemoteStateChange(ctx, "connecting", openEvent);
      await this._showPrompt(peek(ctx.$props.googleCast));
      ctx.$state.remotePlaybackInfo.set({
        deviceName: getCastSession()?.getCastDevice().friendlyName
      });
      if (isCastConnected())
        this._notifyRemoteStateChange(ctx, "connected", openEvent);
    } catch (message) {
      const error = coerceToError(message);
      this._notifyRemoteStateChange(
        ctx,
        isCastConnected() ? "connected" : "disconnected",
        new DOMEvent("google-cast-prompt-error", { detail: error })
      );
      throw error;
    } finally {
      ctx.player.dispatch("google-cast-prompt-close", {
        trigger: openEvent
      });
    }
  }
  async load(ctx) {
    if (!this._player) {
      throw Error("[vidstack] google cast player was not initialized");
    }
    return new (await import('../providers/vidstack-google-cast.js')).GoogleCastProvider(this._player, ctx);
  }
  async _loadCastFramework(ctx) {
    if (hasLoadedCastFramework())
      return;
    const loadStartEvent = ctx.player.createEvent("google-cast-load-start");
    ctx.player.dispatch(loadStartEvent);
    await loadScript(getCastFrameworkURL());
    await customElements.whenDefined("google-cast-launcher");
    const loadedEvent = ctx.player.createEvent("google-cast-loaded", { trigger: loadStartEvent });
    ctx.player.dispatch(loadedEvent);
    if (!isCastAvailable()) {
      throw Error(
        "Google Cast is not available on this platform." 
      );
    }
    return loadedEvent;
  }
  async _showPrompt(options) {
    this._setOptions(options);
    const errorCode = await this.cast.requestSession();
    if (errorCode)
      throw Error(getCastErrorMessage(errorCode));
  }
  _setOptions(options) {
    this.cast?.setOptions({
      ...getDefaultCastOptions(),
      ...options
    });
  }
  _notifyRemoteStateChange(ctx, state, trigger) {
    const detail = { type: "google-cast", state };
    ctx.delegate._notify("remote-playback-change", detail, trigger);
  }
}

export { GoogleCastLoader };
