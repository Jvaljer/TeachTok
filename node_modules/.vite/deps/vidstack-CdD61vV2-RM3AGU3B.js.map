{
  "version": 3,
  "sources": ["../../vidstack/dist/dev/chunks/vidstack-CdD61vV2.js"],
  "sourcesContent": ["import { c as coerceToError } from './vidstack-2fIzRyOW.js';\nimport { c as canGoogleCastSrc } from './vidstack-ChEoSTSp.js';\nimport { l as loadScript } from './vidstack-DWHAQsPW.js';\nimport { I as IS_CHROME, a as IS_IOS } from './vidstack-BLNW_fQy.js';\nimport { g as getCastContext, a as getCastSession, i as isCastConnected, h as hasLoadedCastFramework, b as isCastAvailable, c as getCastErrorMessage, d as getDefaultCastOptions, e as getCastFrameworkURL } from './vidstack-Cm9TQ8XO.js';\nimport { u as peek, D as DOMEvent } from './vidstack-CXruz14q.js';\nimport './vidstack-CyiDQdIB.js';\n\nclass GoogleCastLoader {\n  constructor() {\n    this.name = \"google-cast\";\n  }\n  /**\n   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}\n   */\n  get cast() {\n    return getCastContext();\n  }\n  mediaType() {\n    return \"video\";\n  }\n  canPlay(src) {\n    return IS_CHROME && !IS_IOS && canGoogleCastSrc(src);\n  }\n  async prompt(ctx) {\n    let openEvent;\n    try {\n      const loadEvent = await this._loadCastFramework(ctx);\n      if (!this._player) {\n        this._player = new cast.framework.RemotePlayer();\n        new cast.framework.RemotePlayerController(this._player);\n      }\n      openEvent = ctx.player.createEvent(\"google-cast-prompt-open\", {\n        trigger: loadEvent\n      });\n      ctx.player.dispatchEvent(openEvent);\n      this._notifyRemoteStateChange(ctx, \"connecting\", openEvent);\n      await this._showPrompt(peek(ctx.$props.googleCast));\n      ctx.$state.remotePlaybackInfo.set({\n        deviceName: getCastSession()?.getCastDevice().friendlyName\n      });\n      if (isCastConnected())\n        this._notifyRemoteStateChange(ctx, \"connected\", openEvent);\n    } catch (message) {\n      const error = coerceToError(message);\n      this._notifyRemoteStateChange(\n        ctx,\n        isCastConnected() ? \"connected\" : \"disconnected\",\n        new DOMEvent(\"google-cast-prompt-error\", { detail: error })\n      );\n      throw error;\n    } finally {\n      ctx.player.dispatch(\"google-cast-prompt-close\", {\n        trigger: openEvent\n      });\n    }\n  }\n  async load(ctx) {\n    if (!this._player) {\n      throw Error(\"[vidstack] google cast player was not initialized\");\n    }\n    return new (await import('../providers/vidstack-google-cast.js')).GoogleCastProvider(this._player, ctx);\n  }\n  async _loadCastFramework(ctx) {\n    if (hasLoadedCastFramework())\n      return;\n    const loadStartEvent = ctx.player.createEvent(\"google-cast-load-start\");\n    ctx.player.dispatch(loadStartEvent);\n    await loadScript(getCastFrameworkURL());\n    await customElements.whenDefined(\"google-cast-launcher\");\n    const loadedEvent = ctx.player.createEvent(\"google-cast-loaded\", { trigger: loadStartEvent });\n    ctx.player.dispatch(loadedEvent);\n    if (!isCastAvailable()) {\n      throw Error(\n        \"Google Cast is not available on this platform.\" \n      );\n    }\n    return loadedEvent;\n  }\n  async _showPrompt(options) {\n    this._setOptions(options);\n    const errorCode = await this.cast.requestSession();\n    if (errorCode)\n      throw Error(getCastErrorMessage(errorCode));\n  }\n  _setOptions(options) {\n    this.cast?.setOptions({\n      ...getDefaultCastOptions(),\n      ...options\n    });\n  }\n  _notifyRemoteStateChange(ctx, state, trigger) {\n    const detail = { type: \"google-cast\", state };\n    ctx.delegate._notify(\"remote-playback-change\", detail, trigger);\n  }\n}\n\nexport { GoogleCastLoader };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAM,mBAAN,MAAuB;AAAA,EACrB,cAAc;AACZ,SAAK,OAAO;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,OAAO;AACT,WAAO,eAAe;AAAA,EACxB;AAAA,EACA,YAAY;AACV,WAAO;AAAA,EACT;AAAA,EACA,QAAQ,KAAK;AACX,WAAO,aAAa,CAAC,UAAU,iBAAiB,GAAG;AAAA,EACrD;AAAA,EACA,MAAM,OAAO,KAAK;AAxBpB;AAyBI,QAAI;AACJ,QAAI;AACF,YAAM,YAAY,MAAM,KAAK,mBAAmB,GAAG;AACnD,UAAI,CAAC,KAAK,SAAS;AACjB,aAAK,UAAU,IAAI,KAAK,UAAU,aAAa;AAC/C,YAAI,KAAK,UAAU,uBAAuB,KAAK,OAAO;AAAA,MACxD;AACA,kBAAY,IAAI,OAAO,YAAY,2BAA2B;AAAA,QAC5D,SAAS;AAAA,MACX,CAAC;AACD,UAAI,OAAO,cAAc,SAAS;AAClC,WAAK,yBAAyB,KAAK,cAAc,SAAS;AAC1D,YAAM,KAAK,YAAY,KAAK,IAAI,OAAO,UAAU,CAAC;AAClD,UAAI,OAAO,mBAAmB,IAAI;AAAA,QAChC,aAAY,oBAAe,MAAf,mBAAkB,gBAAgB;AAAA,MAChD,CAAC;AACD,UAAI,gBAAgB;AAClB,aAAK,yBAAyB,KAAK,aAAa,SAAS;AAAA,IAC7D,SAAS,SAAS;AAChB,YAAM,QAAQ,cAAc,OAAO;AACnC,WAAK;AAAA,QACH;AAAA,QACA,gBAAgB,IAAI,cAAc;AAAA,QAClC,IAAI,SAAS,4BAA4B,EAAE,QAAQ,MAAM,CAAC;AAAA,MAC5D;AACA,YAAM;AAAA,IACR,UAAE;AACA,UAAI,OAAO,SAAS,4BAA4B;AAAA,QAC9C,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,MAAM,KAAK,KAAK;AACd,QAAI,CAAC,KAAK,SAAS;AACjB,YAAM,MAAM,mDAAmD;AAAA,IACjE;AACA,WAAO,KAAK,MAAM,OAAO,oCAAsC,GAAG,mBAAmB,KAAK,SAAS,GAAG;AAAA,EACxG;AAAA,EACA,MAAM,mBAAmB,KAAK;AAC5B,QAAI,uBAAuB;AACzB;AACF,UAAM,iBAAiB,IAAI,OAAO,YAAY,wBAAwB;AACtE,QAAI,OAAO,SAAS,cAAc;AAClC,UAAM,WAAW,oBAAoB,CAAC;AACtC,UAAM,eAAe,YAAY,sBAAsB;AACvD,UAAM,cAAc,IAAI,OAAO,YAAY,sBAAsB,EAAE,SAAS,eAAe,CAAC;AAC5F,QAAI,OAAO,SAAS,WAAW;AAC/B,QAAI,CAAC,gBAAgB,GAAG;AACtB,YAAM;AAAA,QACJ;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,MAAM,YAAY,SAAS;AACzB,SAAK,YAAY,OAAO;AACxB,UAAM,YAAY,MAAM,KAAK,KAAK,eAAe;AACjD,QAAI;AACF,YAAM,MAAM,oBAAoB,SAAS,CAAC;AAAA,EAC9C;AAAA,EACA,YAAY,SAAS;AArFvB;AAsFI,eAAK,SAAL,mBAAW,WAAW;AAAA,MACpB,GAAG,sBAAsB;AAAA,MACzB,GAAG;AAAA,IACL;AAAA,EACF;AAAA,EACA,yBAAyB,KAAK,OAAO,SAAS;AAC5C,UAAM,SAAS,EAAE,MAAM,eAAe,MAAM;AAC5C,QAAI,SAAS,QAAQ,0BAA0B,QAAQ,OAAO;AAAA,EAChE;AACF;",
  "names": []
}
