import {
  isFunction,
  isUndefined,
  waitTimeout
} from "./chunk-PENRNHBG.js";

// node_modules/vidstack/dist/dev/chunks/vidstack-BLNW_fQy.js
var UA = (navigator == null ? void 0 : navigator.userAgent.toLowerCase()) || "";
var IS_IOS = /iphone|ipad|ipod|ios|crios|fxios/i.test(UA);
var IS_IPHONE = /(iphone|ipod)/gi.test((navigator == null ? void 0 : navigator.platform) || "");
var IS_CHROME = !!window.chrome;
var IS_SAFARI = !!window.safari || IS_IOS;
function canOrientScreen() {
  return canRotateScreen() && isFunction(screen.orientation.unlock);
}
function canRotateScreen() {
  return !isUndefined(window.screen.orientation) && !isUndefined(window.screen.orientation.lock);
}
function canPlayAudioType(audio, type) {
  if (!audio)
    audio = document.createElement("audio");
  return audio.canPlayType(type).length > 0;
}
function canPlayVideoType(video, type) {
  if (!video)
    video = document.createElement("video");
  return video.canPlayType(type).length > 0;
}
function canPlayHLSNatively(video) {
  if (!video)
    video = document.createElement("video");
  return video.canPlayType("application/vnd.apple.mpegurl").length > 0;
}
function canUsePictureInPicture(video) {
  return !!document.pictureInPictureEnabled && !(video == null ? void 0 : video.disablePictureInPicture);
}
function canUseVideoPresentation(video) {
  return isFunction(video == null ? void 0 : video.webkitSupportsPresentationMode) && isFunction(video == null ? void 0 : video.webkitSetPresentationMode);
}
async function canChangeVolume() {
  const video = document.createElement("video");
  video.volume = 0.5;
  await waitTimeout(0);
  return video.volume === 0.5;
}
function getMediaSource() {
  return (window == null ? void 0 : window.ManagedMediaSource) ?? (window == null ? void 0 : window.MediaSource) ?? (window == null ? void 0 : window.WebKitMediaSource);
}
function getSourceBuffer() {
  return (window == null ? void 0 : window.SourceBuffer) ?? (window == null ? void 0 : window.WebKitSourceBuffer);
}
function isHLSSupported() {
  const MediaSource = getMediaSource();
  if (isUndefined(MediaSource))
    return false;
  const isTypeSupported = MediaSource && isFunction(MediaSource.isTypeSupported) && MediaSource.isTypeSupported('video/mp4; codecs="avc1.42E01E,mp4a.40.2"');
  const SourceBuffer = getSourceBuffer();
  const isSourceBufferValid = isUndefined(SourceBuffer) || !isUndefined(SourceBuffer.prototype) && isFunction(SourceBuffer.prototype.appendBuffer) && isFunction(SourceBuffer.prototype.remove);
  return !!isTypeSupported && !!isSourceBufferValid;
}

export {
  IS_IOS,
  IS_IPHONE,
  IS_CHROME,
  IS_SAFARI,
  canOrientScreen,
  canPlayAudioType,
  canPlayVideoType,
  canPlayHLSNatively,
  canUsePictureInPicture,
  canUseVideoPresentation,
  canChangeVolume,
  isHLSSupported
};
//# sourceMappingURL=chunk-QFMZXHNN.js.map
