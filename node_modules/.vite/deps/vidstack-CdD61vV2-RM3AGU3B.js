import {
  getCastContext,
  getCastErrorMessage,
  getCastFrameworkURL,
  getCastSession,
  getDefaultCastOptions,
  hasLoadedCastFramework,
  isCastAvailable,
  isCastConnected
} from "./chunk-QYBUZFTP.js";
import {
  coerceToError
} from "./chunk-HC5I3DMP.js";
import "./chunk-EVVKUZQ2.js";
import {
  loadScript
} from "./chunk-XWQI47VC.js";
import {
  canGoogleCastSrc
} from "./chunk-MORMLCQB.js";
import {
  IS_CHROME,
  IS_IOS
} from "./chunk-QFMZXHNN.js";
import {
  DOMEvent,
  peek
} from "./chunk-PENRNHBG.js";
import "./chunk-Q6BFB6C2.js";

// node_modules/vidstack/dist/dev/chunks/vidstack-CdD61vV2.js
var GoogleCastLoader = class {
  constructor() {
    this.name = "google-cast";
  }
  /**
   * @see {@link https://developers.google.com/cast/docs/reference/web_sender/cast.framework.CastContext}
   */
  get cast() {
    return getCastContext();
  }
  mediaType() {
    return "video";
  }
  canPlay(src) {
    return IS_CHROME && !IS_IOS && canGoogleCastSrc(src);
  }
  async prompt(ctx) {
    var _a;
    let openEvent;
    try {
      const loadEvent = await this._loadCastFramework(ctx);
      if (!this._player) {
        this._player = new cast.framework.RemotePlayer();
        new cast.framework.RemotePlayerController(this._player);
      }
      openEvent = ctx.player.createEvent("google-cast-prompt-open", {
        trigger: loadEvent
      });
      ctx.player.dispatchEvent(openEvent);
      this._notifyRemoteStateChange(ctx, "connecting", openEvent);
      await this._showPrompt(peek(ctx.$props.googleCast));
      ctx.$state.remotePlaybackInfo.set({
        deviceName: (_a = getCastSession()) == null ? void 0 : _a.getCastDevice().friendlyName
      });
      if (isCastConnected())
        this._notifyRemoteStateChange(ctx, "connected", openEvent);
    } catch (message) {
      const error = coerceToError(message);
      this._notifyRemoteStateChange(
        ctx,
        isCastConnected() ? "connected" : "disconnected",
        new DOMEvent("google-cast-prompt-error", { detail: error })
      );
      throw error;
    } finally {
      ctx.player.dispatch("google-cast-prompt-close", {
        trigger: openEvent
      });
    }
  }
  async load(ctx) {
    if (!this._player) {
      throw Error("[vidstack] google cast player was not initialized");
    }
    return new (await import("./vidstack-google-cast-YCZMIIOH.js")).GoogleCastProvider(this._player, ctx);
  }
  async _loadCastFramework(ctx) {
    if (hasLoadedCastFramework())
      return;
    const loadStartEvent = ctx.player.createEvent("google-cast-load-start");
    ctx.player.dispatch(loadStartEvent);
    await loadScript(getCastFrameworkURL());
    await customElements.whenDefined("google-cast-launcher");
    const loadedEvent = ctx.player.createEvent("google-cast-loaded", { trigger: loadStartEvent });
    ctx.player.dispatch(loadedEvent);
    if (!isCastAvailable()) {
      throw Error(
        "Google Cast is not available on this platform."
      );
    }
    return loadedEvent;
  }
  async _showPrompt(options) {
    this._setOptions(options);
    const errorCode = await this.cast.requestSession();
    if (errorCode)
      throw Error(getCastErrorMessage(errorCode));
  }
  _setOptions(options) {
    var _a;
    (_a = this.cast) == null ? void 0 : _a.setOptions({
      ...getDefaultCastOptions(),
      ...options
    });
  }
  _notifyRemoteStateChange(ctx, state, trigger) {
    const detail = { type: "google-cast", state };
    ctx.delegate._notify("remote-playback-change", detail, trigger);
  }
};
export {
  GoogleCastLoader
};
//# sourceMappingURL=vidstack-CdD61vV2-RM3AGU3B.js.map
